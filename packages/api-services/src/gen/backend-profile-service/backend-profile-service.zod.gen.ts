/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary List of BackendProfile
 */
export const backendProfileServiceSearchBackendProfileQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const backendProfileServiceSearchBackendProfileResponse = zod.object({
	items: zod
		.array(
			zod.object({
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				dataCount: zod.string().optional(),
				dataSize: zod.string().optional(),
				description: zod.string().optional(),
				disabled: zod.boolean().optional(),
				expireDays: zod.number().optional(),
				id: zod.string().optional(),
				maxSize: zod.string().optional(),
				name: zod.string().optional(),
				priority: zod.number().optional(),
				properties: zod.record(zod.string(), zod.string()).optional(),
				type: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create BackendProfile
 */
export const backendProfileServiceCreateBackendProfileBody = zod.object({
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	domainId: zod.string().optional(),
	expireDays: zod.number().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
	type: zod.string().optional(),
});

export const backendProfileServiceCreateBackendProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	dataCount: zod.string().optional(),
	dataSize: zod.string().optional(),
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	expireDays: zod.number().optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Remove BackendProfile
 */
export const backendProfileServiceDeleteBackendProfileParams = zod.object({
	id: zod.string(),
});

export const backendProfileServiceDeleteBackendProfileQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const backendProfileServiceDeleteBackendProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	dataCount: zod.string().optional(),
	dataSize: zod.string().optional(),
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	expireDays: zod.number().optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary BackendProfile item
 */
export const backendProfileServiceReadBackendProfileParams = zod.object({
	id: zod.string(),
});

export const backendProfileServiceReadBackendProfileQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const backendProfileServiceReadBackendProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	dataCount: zod.string().optional(),
	dataSize: zod.string().optional(),
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	expireDays: zod.number().optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Patch BackendProfile
 */
export const backendProfileServicePatchBackendProfileParams = zod.object({
	id: zod.string(),
});

export const backendProfileServicePatchBackendProfileBody = zod.object({
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	domainId: zod.string().optional(),
	expireDays: zod.number().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
});

export const backendProfileServicePatchBackendProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	dataCount: zod.string().optional(),
	dataSize: zod.string().optional(),
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	expireDays: zod.number().optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update BackendProfile
 */
export const backendProfileServiceUpdateBackendProfileParams = zod.object({
	id: zod.string(),
});

export const backendProfileServiceUpdateBackendProfileBody = zod.object({
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	domainId: zod.string().optional(),
	expireDays: zod.number().optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
});

export const backendProfileServiceUpdateBackendProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	dataCount: zod.string().optional(),
	dataSize: zod.string().optional(),
	description: zod.string().optional(),
	disabled: zod.boolean().optional(),
	expireDays: zod.number().optional(),
	id: zod.string().optional(),
	maxSize: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	properties: zod.record(zod.string(), zod.string()).optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
