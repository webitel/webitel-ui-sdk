/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary List of Queue
 */
export const searchQueueQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	type: zod.array(zod.number()).optional(),
	teamId: zod.array(zod.number()).optional(),
	tags: zod.array(zod.string()).optional(),
	enabled: zod.boolean().optional(),
});

export const searchQueueResponse = zod.object({
	items: zod
		.array(
			zod.object({
				tags: zod
					.array(
						zod.object({
							name: zod.string().optional(),
						}),
					)
					.optional(),
				active: zod.number().optional(),
				afterSchema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				calendar: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				count: zod.number().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				dncList: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				doSchema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				domainId: zod.string().optional(),
				enabled: zod.boolean().optional(),
				formSchema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				grantee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				payload: zod.any().optional(),
				priority: zod.number().optional(),
				processing: zod.boolean().optional(),
				processingRenewalSec: zod.number().optional(),
				processingSec: zod.number().optional(),
				ringtone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				schema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				secLocateAgent: zod.number().optional(),
				stickyAgent: zod.boolean().optional(),
				strategy: zod.string().optional(),
				taskProcessing: zod
					.object({
						enabled: zod.boolean().optional(),
						formSchema: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						renewalSec: zod.number().optional(),
						sec: zod.number().optional(),
					})
					.optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				timeout: zod.number().optional(),
				type: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
				waiting: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create Queue
 */
export const createQueueBody = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const createQueueResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	active: zod.number().optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	count: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waiting: zod.number().optional(),
});

export const searchQueueReportGeneralQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	joinedAtFrom: zod.string().optional(),
	joinedAtTo: zod.string().optional(),
	domainId: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	sort: zod.string().optional(),
	q: zod.string().optional(),
	queueId: zod.array(zod.number()).optional(),
	teamId: zod.array(zod.number()).optional(),
	type: zod.array(zod.number()).optional(),
});

export const searchQueueReportGeneralResponse = zod.object({
	aggs: zod
		.object({
			free: zod.number().optional(),
			offline: zod.number().optional(),
			online: zod.number().optional(),
			pause: zod.number().optional(),
			total: zod.number().optional(),
		})
		.optional(),
	items: zod
		.array(
			zod.object({
				abandoned: zod.number().optional(),
				agentStatus: zod
					.object({
						free: zod.number().optional(),
						offline: zod.number().optional(),
						online: zod.number().optional(),
						pause: zod.number().optional(),
						total: zod.number().optional(),
					})
					.optional(),
				attempts: zod.number().optional(),
				avgAhtSec: zod.number().optional(),
				avgAsaSec: zod.number().optional(),
				avgAwtSec: zod.number().optional(),
				avgWrapSec: zod.number().optional(),
				bridged: zod.number().optional(),
				count: zod.string().optional(),
				missed: zod.number().optional(),
				processed: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				sl20: zod.number().optional(),
				sl30: zod.number().optional(),
				sumBillSec: zod.number().optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				transferred: zod.number().optional(),
				waiting: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary List RoutingSchemaTags
 */
export const searchQueueTagsQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
});

export const searchQueueTagsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Remove Queue
 */
export const deleteQueueParams = zod.object({
	id: zod.string(),
});

export const deleteQueueQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteQueueResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	active: zod.number().optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	count: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waiting: zod.number().optional(),
});

/**
 * @summary Queue item
 */
export const readQueueParams = zod.object({
	id: zod.string(),
});

export const readQueueQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readQueueResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	active: zod.number().optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	count: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waiting: zod.number().optional(),
});

/**
 * @summary Patch Queue
 */
export const patchQueueParams = zod.object({
	id: zod.string(),
});

export const patchQueueBody = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchQueueResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	active: zod.number().optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	count: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waiting: zod.number().optional(),
});

/**
 * @summary Update Queue
 */
export const updateQueueParams = zod.object({
	id: zod.string(),
});

export const updateQueueBody = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const updateQueueResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	active: zod.number().optional(),
	afterSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	calendar: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	count: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	dncList: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	doSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	formSchema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	priority: zod.number().optional(),
	processing: zod.boolean().optional(),
	processingRenewalSec: zod.number().optional(),
	processingSec: zod.number().optional(),
	ringtone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	secLocateAgent: zod.number().optional(),
	stickyAgent: zod.boolean().optional(),
	strategy: zod.string().optional(),
	taskProcessing: zod
		.object({
			enabled: zod.boolean().optional(),
			formSchema: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			renewalSec: zod.number().optional(),
			sec: zod.number().optional(),
		})
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	type: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waiting: zod.number().optional(),
});
