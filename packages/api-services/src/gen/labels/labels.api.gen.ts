/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ContactsInputLabel,
	ContactsLabelList,
	ContactsLabelTags,
	DeleteLabelsParams,
	GetLabelsParams,
	ListLabelsParams,
	MergeLabelsParams,
	ResetLabelsParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getLabels =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Search for Contacts engaged Label(s).
			 */
			const getLabels = <TData = AxiosResponse<ContactsLabelTags>>(
				params?: GetLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/contacts/labels', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Remove Contact Labels associations.
			 */
			const deleteLabels = <TData = AxiosResponse<ContactsLabelList>>(
				contactId: string,
				params: DeleteLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/labels`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the Contact's associated Label(s).
			 */
			const listLabels = <TData = AxiosResponse<ContactsLabelList>>(
				contactId: string,
				params?: ListLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/labels`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate NEW Labels to the Contact.
			 */
			const mergeLabels = <TData = AxiosResponse<ContactsLabelList>>(
				contactId: string,
				contactsInputLabel: ContactsInputLabel[],
				params?: MergeLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(`/contacts/${contactId}/labels`, contactsInputLabel, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Reset Labels to fit the specified final set.
			 */
			const resetLabels = <TData = AxiosResponse<ContactsLabelList>>(
				contactId: string,
				contactsInputLabel: ContactsInputLabel[],
				params?: ResetLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(`/contacts/${contactId}/labels`, contactsInputLabel, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return { getLabels, deleteLabels, listLabels, mergeLabels, resetLabels };
		};
export type GetLabelsResult = AxiosResponse<ContactsLabelTags>;
export type DeleteLabelsResult = AxiosResponse<ContactsLabelList>;
export type ListLabelsResult = AxiosResponse<ContactsLabelList>;
export type MergeLabelsResult = AxiosResponse<ContactsLabelList>;
export type ResetLabelsResult = AxiosResponse<ContactsLabelList>;

// --- footer end
