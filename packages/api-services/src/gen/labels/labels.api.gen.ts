/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	LabelsDeleteLabelsParams,
	LabelsGetLabelsParams,
	LabelsListLabelsParams,
	LabelsMergeLabelsParams,
	LabelsResetLabelsParams,
	WebitelContactsInputLabel,
	WebitelContactsLabelList,
	WebitelContactsLabelTags,
} from '.././_models';

// --- header start
//

export const // --- title start
	getLabels =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Search for Contacts engaged Label(s).
			 */
			const labelsGetLabels = <TData = AxiosResponse<WebitelContactsLabelTags>>(
				params?: LabelsGetLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/contacts/labels', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Remove Contact Labels associations.
			 */
			const labelsDeleteLabels = <
				TData = AxiosResponse<WebitelContactsLabelList>,
			>(
				contactId: string,
				params: LabelsDeleteLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/labels`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the Contact's associated Label(s).
			 */
			const labelsListLabels = <
				TData = AxiosResponse<WebitelContactsLabelList>,
			>(
				contactId: string,
				params?: LabelsListLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/labels`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate NEW Labels to the Contact.
			 */
			const labelsMergeLabels = <
				TData = AxiosResponse<WebitelContactsLabelList>,
			>(
				contactId: string,
				webitelContactsInputLabel: WebitelContactsInputLabel[],
				params?: LabelsMergeLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/labels`,
					webitelContactsInputLabel,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Reset Labels to fit the specified final set.
			 */
			const labelsResetLabels = <
				TData = AxiosResponse<WebitelContactsLabelList>,
			>(
				contactId: string,
				webitelContactsInputLabel: WebitelContactsInputLabel[],
				params?: LabelsResetLabelsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/labels`,
					webitelContactsInputLabel,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				labelsGetLabels,
				labelsDeleteLabels,
				labelsListLabels,
				labelsMergeLabels,
				labelsResetLabels,
			};
		};
export type LabelsGetLabelsResult = AxiosResponse<WebitelContactsLabelTags>;
export type LabelsDeleteLabelsResult = AxiosResponse<WebitelContactsLabelList>;
export type LabelsListLabelsResult = AxiosResponse<WebitelContactsLabelList>;
export type LabelsMergeLabelsResult = AxiosResponse<WebitelContactsLabelList>;
export type LabelsResetLabelsResult = AxiosResponse<WebitelContactsLabelList>;

// --- footer end
