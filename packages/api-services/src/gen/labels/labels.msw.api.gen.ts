/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	WebitelContactsLabelList,
	WebitelContactsLabelTags,
} from '.././_models';

export const getLabelsGetLabelsResponseMock = (
	overrideResponse: Partial<WebitelContactsLabelTags> = {},
): WebitelContactsLabelTags => ({
	labels: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			label: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	sources: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getLabelsDeleteLabelsResponseMock = (
	overrideResponse: Partial<WebitelContactsLabelList> = {},
): WebitelContactsLabelList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			label: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLabelsListLabelsResponseMock = (
	overrideResponse: Partial<WebitelContactsLabelList> = {},
): WebitelContactsLabelList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			label: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLabelsMergeLabelsResponseMock = (
	overrideResponse: Partial<WebitelContactsLabelList> = {},
): WebitelContactsLabelList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			label: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLabelsResetLabelsResponseMock = (
	overrideResponse: Partial<WebitelContactsLabelList> = {},
): WebitelContactsLabelList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			label: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLabelsGetLabelsMockHandler = (
	overrideResponse?:
		| WebitelContactsLabelTags
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelContactsLabelTags> | WebitelContactsLabelTags),
) => {
	return http.get('*/contacts/labels', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLabelsGetLabelsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLabelsDeleteLabelsMockHandler = (
	overrideResponse?:
		| WebitelContactsLabelList
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelContactsLabelList> | WebitelContactsLabelList),
) => {
	return http.delete('*/contacts/:contactId/labels', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLabelsDeleteLabelsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLabelsListLabelsMockHandler = (
	overrideResponse?:
		| WebitelContactsLabelList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelContactsLabelList> | WebitelContactsLabelList),
) => {
	return http.get('*/contacts/:contactId/labels', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLabelsListLabelsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLabelsMergeLabelsMockHandler = (
	overrideResponse?:
		| WebitelContactsLabelList
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelContactsLabelList> | WebitelContactsLabelList),
) => {
	return http.post('*/contacts/:contactId/labels', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLabelsMergeLabelsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLabelsResetLabelsMockHandler = (
	overrideResponse?:
		| WebitelContactsLabelList
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelContactsLabelList> | WebitelContactsLabelList),
) => {
	return http.put('*/contacts/:contactId/labels', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLabelsResetLabelsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getLabelsMock = () => [
	getLabelsGetLabelsMockHandler(),
	getLabelsDeleteLabelsMockHandler(),
	getLabelsListLabelsMockHandler(),
	getLabelsMergeLabelsMockHandler(),
	getLabelsResetLabelsMockHandler(),
];
