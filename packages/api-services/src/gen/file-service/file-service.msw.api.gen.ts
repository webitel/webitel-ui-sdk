/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	StorageDeleteFilesResponse,
	StorageListFile,
	StorageRenegotiateP2PVideoResponse,
	StorageStopP2PVideoResponse,
	StorageUploadP2PVideoResponse,
} from '.././_models';
import { StorageUploadFileChannel } from '.././_models';

export const getFileServiceDeleteFilesResponseMock =
	(): StorageDeleteFilesResponse => ({});

export const getFileServiceSearchFilesResponseMock = (
	overrideResponse: Partial<StorageListFile> = {},
): StorageListFile => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			channel: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(StorageUploadFileChannel)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			mimeType: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			referenceId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			retentionUntil: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			sha256Sum: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			size: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			thumbnail: faker.helpers.arrayElement([
				{
					mimeType: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					scale: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					size: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			uploadedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			uploadedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			uuid: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			viewName: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getFileServiceUploadP2PVideoResponseMock = (
	overrideResponse: Partial<StorageUploadP2PVideoResponse> = {},
): StorageUploadP2PVideoResponse => ({
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	sdpAnswer: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getFileServiceStopP2PVideoResponseMock =
	(): StorageStopP2PVideoResponse => ({});

export const getFileServiceRenegotiateP2PVideoResponseMock = (
	overrideResponse: Partial<StorageRenegotiateP2PVideoResponse> = {},
): StorageRenegotiateP2PVideoResponse => ({
	sdpAnswer: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getFileServiceDeleteFilesMockHandler = (
	overrideResponse?:
		| StorageDeleteFilesResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<StorageDeleteFilesResponse> | StorageDeleteFilesResponse),
) => {
	return http.delete('*/storage/file', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileServiceDeleteFilesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileServiceSearchFilesMockHandler = (
	overrideResponse?:
		| StorageListFile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageListFile> | StorageListFile),
) => {
	return http.get('*/storage/file', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileServiceSearchFilesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileServiceUploadP2PVideoMockHandler = (
	overrideResponse?:
		| StorageUploadP2PVideoResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<StorageUploadP2PVideoResponse>
				| StorageUploadP2PVideoResponse),
) => {
	return http.post('*/storage/p2p/video', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileServiceUploadP2PVideoResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileServiceStopP2PVideoMockHandler = (
	overrideResponse?:
		| StorageStopP2PVideoResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<StorageStopP2PVideoResponse> | StorageStopP2PVideoResponse),
) => {
	return http.delete('*/storage/p2p/video/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileServiceStopP2PVideoResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileServiceRenegotiateP2PVideoMockHandler = (
	overrideResponse?:
		| StorageRenegotiateP2PVideoResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) =>
				| Promise<StorageRenegotiateP2PVideoResponse>
				| StorageRenegotiateP2PVideoResponse),
) => {
	return http.put('*/storage/p2p/video/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileServiceRenegotiateP2PVideoResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getFileServiceMock = () => [
	getFileServiceDeleteFilesMockHandler(),
	getFileServiceSearchFilesMockHandler(),
	getFileServiceUploadP2PVideoMockHandler(),
	getFileServiceStopP2PVideoMockHandler(),
	getFileServiceRenegotiateP2PVideoMockHandler(),
];
