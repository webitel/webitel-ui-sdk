/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Retrieve a list of priorities or search priorities
 */
export const listPrioritiesQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.string()
		.optional()
		.describe('Sort the result according to fields.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
	notInSla: zod
		.string()
		.optional()
		.describe('Filter priorities that are not in filtered SLA'),
	inSlaCond: zod
		.string()
		.optional()
		.describe(
			'Filter priorities that are in filtered SlaCondition and not in current SLA',
		),
});

export const listPrioritiesResponse = zod.object({
	items: zod
		.array(
			zod.object({
				color: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Create a new priority
 */
export const createPriorityQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const createPriorityBody = zod.object({
	color: zod.string().optional(),
	description: zod.string().optional(),
	name: zod.string().optional(),
});

export const createPriorityResponse = zod.object({
	color: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Delete a priority
 */
export const deletePriorityParams = zod.object({
	id: zod.string(),
});

export const deletePriorityResponse = zod.object({
	color: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Locate a priority by ID
 */
export const locatePriorityParams = zod.object({
	id: zod.string().describe('ID of the priority to be located'),
});

export const locatePriorityQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const locatePriorityResponse = zod.object({
	priority: zod
		.object({
			color: zod.string().optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			description: zod.string().optional(),
			id: zod.string().optional(),
			name: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing priority
 */
export const updatePriority2Params = zod.object({
	id: zod.string(),
});

export const updatePriority2QueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const updatePriority2Body = zod.object({
	color: zod.string().optional(),
	description: zod.string().optional(),
	name: zod.string().optional(),
});

export const updatePriority2Response = zod.object({
	color: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing priority
 */
export const updatePriorityParams = zod.object({
	id: zod.string(),
});

export const updatePriorityQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const updatePriorityBody = zod.object({
	color: zod.string().optional(),
	description: zod.string().optional(),
	name: zod.string().optional(),
});

export const updatePriorityResponse = zod.object({
	color: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
