/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { EngineSystemSettingName } from '.././_models';
import type {
	EngineListAvailableSystemSetting,
	EngineListSystemSetting,
	EngineSystemSetting,
} from '.././_models';

export const getSearchSystemSettingResponseMock = (
	overrideResponse: Partial<EngineListSystemSetting> = {},
): EngineListSystemSetting => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineSystemSettingName)),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateSystemSettingResponseMock = (
	overrideResponse: Partial<EngineSystemSetting> = {},
): EngineSystemSetting => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineSystemSettingName)),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchAvailableSystemSettingResponseMock = (
	overrideResponse: Partial<EngineListAvailableSystemSetting> = {},
): EngineListAvailableSystemSetting => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getDeleteSystemSettingResponseMock = (
	overrideResponse: Partial<EngineSystemSetting> = {},
): EngineSystemSetting => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineSystemSettingName)),
		undefined,
	]),
	...overrideResponse,
});

export const getReadSystemSettingResponseMock = (
	overrideResponse: Partial<EngineSystemSetting> = {},
): EngineSystemSetting => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineSystemSettingName)),
		undefined,
	]),
	...overrideResponse,
});

export const getPatchSystemSettingResponseMock = (
	overrideResponse: Partial<EngineSystemSetting> = {},
): EngineSystemSetting => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineSystemSettingName)),
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateSystemSettingResponseMock = (
	overrideResponse: Partial<EngineSystemSetting> = {},
): EngineSystemSetting => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineSystemSettingName)),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchSystemSettingMockHandler = (
	overrideResponse?:
		| EngineListSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListSystemSetting> | EngineListSystemSetting),
) => {
	return http.get('*/settings', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateSystemSettingMockHandler = (
	overrideResponse?:
		| EngineSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineSystemSetting> | EngineSystemSetting),
) => {
	return http.post('*/settings', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchAvailableSystemSettingMockHandler = (
	overrideResponse?:
		| EngineListAvailableSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<EngineListAvailableSystemSetting>
				| EngineListAvailableSystemSetting),
) => {
	return http.get('*/settings/available', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchAvailableSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteSystemSettingMockHandler = (
	overrideResponse?:
		| EngineSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineSystemSetting> | EngineSystemSetting),
) => {
	return http.delete('*/settings/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadSystemSettingMockHandler = (
	overrideResponse?:
		| EngineSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineSystemSetting> | EngineSystemSetting),
) => {
	return http.get('*/settings/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchSystemSettingMockHandler = (
	overrideResponse?:
		| EngineSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineSystemSetting> | EngineSystemSetting),
) => {
	return http.patch('*/settings/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateSystemSettingMockHandler = (
	overrideResponse?:
		| EngineSystemSetting
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineSystemSetting> | EngineSystemSetting),
) => {
	return http.put('*/settings/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateSystemSettingResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getSystemSettingServiceMock = () => [
	getSearchSystemSettingMockHandler(),
	getCreateSystemSettingMockHandler(),
	getSearchAvailableSystemSettingMockHandler(),
	getDeleteSystemSettingMockHandler(),
	getReadSystemSettingMockHandler(),
	getPatchSystemSettingMockHandler(),
	getUpdateSystemSettingMockHandler(),
];
