/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const readSystemObjectsQueryParams = zod.object({
	includeExisting: zod.boolean().optional(),
});

export const readSystemObjectsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				id: zod.number().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const searchConfigQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	object: zod
		.array(
			zod.enum([
				'cc_queue',
				'schema',
				'users',
				'devices',
				'calendars',
				'cc_list',
				'cc_team',
				'cc_agent',
				'cc_resource',
				'cc_resource_group',
				'chat_bots',
				'cases',
				'contacts',
				'cc_list_number',
				'case_comments',
				'record_file',
			]),
		)
		.optional()
		.describe('NOT USED'),
});

export const searchConfigResponse = zod.object({
	items: zod
		.array(
			zod.object({
				daysToStore: zod.number().optional(),
				description: zod.string().optional(),
				enabled: zod.boolean().optional(),
				id: zod.number().optional(),
				logsCount: zod.string().optional(),
				logsSize: zod.string().optional(),
				object: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				period: zod.number().optional(),
				storage: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const createConfigBody = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	object: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createConfigResponse = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	logsCount: zod.string().optional(),
	logsSize: zod.string().optional(),
	object: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const deleteConfigParams = zod.object({
	config_id: zod.number(),
});

export const deleteConfigResponse = zod.object({});

export const readConfigParams = zod.object({
	config_id: zod.number().describe('int32 domainId = 8;'),
});

export const readConfigResponse = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	logsCount: zod.string().optional(),
	logsSize: zod.string().optional(),
	object: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchConfigParams = zod.object({
	config_id: zod.number(),
});

export const patchConfigBody = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchConfigResponse = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	logsCount: zod.string().optional(),
	logsSize: zod.string().optional(),
	object: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateConfigParams = zod.object({
	config_id: zod.number(),
});

export const updateConfigBody = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateConfigResponse = zod.object({
	daysToStore: zod.number().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	logsCount: zod.string().optional(),
	logsSize: zod.string().optional(),
	object: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	period: zod.number().optional(),
	storage: zod
		.object({
			id: zod.number().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
