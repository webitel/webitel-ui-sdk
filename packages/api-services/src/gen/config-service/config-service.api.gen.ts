/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ConfigServicePatchConfigBody,
	ConfigServiceUpdateConfigBody,
	LoggerConfig,
	LoggerConfigs,
	LoggerCreateConfigRequest,
	LoggerEmpty,
	LoggerSystemObjects,
	ReadSystemObjectsParams,
	SearchConfigParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getConfigService =
		// --- title end
		() => {
			// --- header end
			const readSystemObjects = <TData = AxiosResponse<LoggerSystemObjects>>(
				params?: ReadSystemObjectsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/logger/available_objects', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const searchConfig = <TData = AxiosResponse<LoggerConfigs>>(
				params?: SearchConfigParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/logger/config', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const createConfig = <TData = AxiosResponse<LoggerConfig>>(
				loggerCreateConfigRequest: LoggerCreateConfigRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/logger/config', loggerCreateConfigRequest, options);
			};
			const deleteConfig = <TData = AxiosResponse<LoggerEmpty>>(
				configId: number,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/logger/config/${configId}`, options);
			};
			const readConfig = <TData = AxiosResponse<LoggerConfig>>(
				configId: number,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/logger/config/${configId}`, options);
			};
			const patchConfig = <TData = AxiosResponse<LoggerConfig>>(
				configId: number,
				configServicePatchConfigBody: ConfigServicePatchConfigBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/logger/config/${configId}`,
					configServicePatchConfigBody,
					options,
				);
			};
			const updateConfig = <TData = AxiosResponse<LoggerConfig>>(
				configId: number,
				configServiceUpdateConfigBody: ConfigServiceUpdateConfigBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/logger/config/${configId}`,
					configServiceUpdateConfigBody,
					options,
				);
			};

			// --- footer start
			return {
				readSystemObjects,
				searchConfig,
				createConfig,
				deleteConfig,
				readConfig,
				patchConfig,
				updateConfig,
			};
		};
export type ReadSystemObjectsResult = AxiosResponse<LoggerSystemObjects>;
export type SearchConfigResult = AxiosResponse<LoggerConfigs>;
export type CreateConfigResult = AxiosResponse<LoggerConfig>;
export type DeleteConfigResult = AxiosResponse<LoggerEmpty>;
export type ReadConfigResult = AxiosResponse<LoggerConfig>;
export type PatchConfigResult = AxiosResponse<LoggerConfig>;
export type UpdateConfigResult = AxiosResponse<LoggerConfig>;

// --- footer end
