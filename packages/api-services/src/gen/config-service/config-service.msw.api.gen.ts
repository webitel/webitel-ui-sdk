/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	LoggerConfig,
	LoggerConfigs,
	LoggerEmpty,
	LoggerSystemObjects,
} from '.././_models';

export const getReadSystemObjectsResponseMock = (
	overrideResponse: Partial<LoggerSystemObjects> = {},
): LoggerSystemObjects => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchConfigResponseMock = (
	overrideResponse: Partial<LoggerConfigs> = {},
): LoggerConfigs => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			daysToStore: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			logsCount: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			logsSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			object: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			period: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			storage: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateConfigResponseMock = (
	overrideResponse: Partial<LoggerConfig> = {},
): LoggerConfig => ({
	daysToStore: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsCount: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	object: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	period: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	storage: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteConfigResponseMock = (): LoggerEmpty => ({});

export const getReadConfigResponseMock = (
	overrideResponse: Partial<LoggerConfig> = {},
): LoggerConfig => ({
	daysToStore: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsCount: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	object: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	period: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	storage: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchConfigResponseMock = (
	overrideResponse: Partial<LoggerConfig> = {},
): LoggerConfig => ({
	daysToStore: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsCount: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	object: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	period: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	storage: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateConfigResponseMock = (
	overrideResponse: Partial<LoggerConfig> = {},
): LoggerConfig => ({
	daysToStore: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsCount: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	logsSize: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	object: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	period: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	storage: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadSystemObjectsMockHandler = (
	overrideResponse?:
		| LoggerSystemObjects
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<LoggerSystemObjects> | LoggerSystemObjects),
) => {
	return http.get('*/logger/available_objects', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadSystemObjectsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchConfigMockHandler = (
	overrideResponse?:
		| LoggerConfigs
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<LoggerConfigs> | LoggerConfigs),
) => {
	return http.get('*/logger/config', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchConfigResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateConfigMockHandler = (
	overrideResponse?:
		| LoggerConfig
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<LoggerConfig> | LoggerConfig),
) => {
	return http.post('*/logger/config', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateConfigResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteConfigMockHandler = (
	overrideResponse?:
		| LoggerEmpty
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<LoggerEmpty> | LoggerEmpty),
) => {
	return http.delete('*/logger/config/:configId', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteConfigResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadConfigMockHandler = (
	overrideResponse?:
		| LoggerConfig
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<LoggerConfig> | LoggerConfig),
) => {
	return http.get('*/logger/config/:configId', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadConfigResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchConfigMockHandler = (
	overrideResponse?:
		| LoggerConfig
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<LoggerConfig> | LoggerConfig),
) => {
	return http.patch('*/logger/config/:configId', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchConfigResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateConfigMockHandler = (
	overrideResponse?:
		| LoggerConfig
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<LoggerConfig> | LoggerConfig),
) => {
	return http.put('*/logger/config/:configId', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateConfigResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getConfigServiceMock = () => [
	getReadSystemObjectsMockHandler(),
	getSearchConfigMockHandler(),
	getCreateConfigMockHandler(),
	getDeleteConfigMockHandler(),
	getReadConfigMockHandler(),
	getPatchConfigMockHandler(),
	getUpdateConfigMockHandler(),
];
