/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Remove the contact's photo link(s)
 */
export const deletePhotosParams = zod.object({
	contact_id: zod.string().describe('Link(s) contact ID.'),
});

export const deletePhotosQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
	etag: zod.array(zod.string()).describe('Set of linked ID(s) to be removed.'),
});

export const deletePhotosResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						photoId: zod.string().optional(),
						photoUrl: zod.string().optional(),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'True if the photo is a default photo; false if the photo is a user-provided photo.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe(
						"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
					),
			)
			.optional()
			.describe('Photo dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Photo dataset.');

/**
 * @summary Search the contact's photo(s)
 */
export const searchPhotosParams = zod.object({
	contact_id: zod.string().describe('The Contact ID linked with.'),
});

export const searchPhotosQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search term: email address.\n`?` - matches any one character\n`*` - matches 0 or more characters',
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
	id: zod
		.array(zod.string())
		.optional()
		.describe('Link(s) with unique ID only.'),
	primary: zod.boolean().optional().describe('Default photos only.'),
});

export const searchPhotosResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						photoId: zod.string().optional(),
						photoUrl: zod.string().optional(),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'True if the photo is a default photo; false if the photo is a user-provided photo.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe(
						"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
					),
			)
			.optional()
			.describe('Photo dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Photo dataset.');

/**
 * @summary Link photo(s) with the contact
 */
export const createPhotosParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
});

export const createPhotosQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const createPhotosBodyItem = zod
	.object({
		etag: zod
			.string()
			.optional()
			.describe('Unique ID of the latest version of an existing association.'),
		photoId: zod.string().optional(),
		photoUrl: zod.string().optional(),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'True if the photo is a default photo; false if the photo is a user-provided photo.',
			),
	})
	.describe('Input of the photo.');
export const createPhotosBody = zod.array(createPhotosBodyItem);

export const createPhotosResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						photoId: zod.string().optional(),
						photoUrl: zod.string().optional(),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'True if the photo is a default photo; false if the photo is a user-provided photo.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe(
						"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
					),
			)
			.optional()
			.describe('Photo dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Photo dataset.');

/**
 * @summary Reset the contact's photos to fit given data set.
 */
export const updatePhotosParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
});

export const updatePhotosQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const updatePhotosBodyItem = zod
	.object({
		etag: zod
			.string()
			.optional()
			.describe('Unique ID of the latest version of an existing association.'),
		photoId: zod.string().optional(),
		photoUrl: zod.string().optional(),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'True if the photo is a default photo; false if the photo is a user-provided photo.',
			),
	})
	.describe('Input of the photo.');
export const updatePhotosBody = zod.array(updatePhotosBodyItem);

export const updatePhotosResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						photoId: zod.string().optional(),
						photoUrl: zod.string().optional(),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'True if the photo is a default photo; false if the photo is a user-provided photo.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe(
						"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
					),
			)
			.optional()
			.describe('Photo dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Photo dataset.');

/**
 * @summary Remove the contact's photo
 */
export const deletePhotoParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
	etag: zod.string().describe('Unique link ID to be removed.'),
});

export const deletePhotoQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const deletePhotoResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		photoId: zod.string().optional(),
		photoUrl: zod.string().optional(),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'True if the photo is a default photo; false if the photo is a user-provided photo.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe(
		"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
	);

/**
 * @summary Update the contact's photo link details
 */
export const updatePhoto2Params = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing association.'),
});

export const updatePhoto2QueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const updatePhoto2Body = zod.object({
	photoId: zod.string().optional(),
	photoUrl: zod.string().optional(),
	primary: zod
		.boolean()
		.optional()
		.describe(
			'True if the photo is a default photo; false if the photo is a user-provided photo.',
		),
});

export const updatePhoto2Response = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		photoId: zod.string().optional(),
		photoUrl: zod.string().optional(),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'True if the photo is a default photo; false if the photo is a user-provided photo.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe(
		"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
	);

/**
 * @summary Update the contact's photo link details
 */
export const updatePhotoParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing association.'),
});

export const updatePhotoQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const updatePhotoBody = zod.object({
	photoId: zod.string().optional(),
	photoUrl: zod.string().optional(),
	primary: zod
		.boolean()
		.optional()
		.describe(
			'True if the photo is a default photo; false if the photo is a user-provided photo.',
		),
});

export const updatePhotoResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		photoId: zod.string().optional(),
		photoUrl: zod.string().optional(),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'True if the photo is a default photo; false if the photo is a user-provided photo.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe(
		"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
	);

/**
 * @summary Locate the contact's photo link.
 */
export const locatePhotoParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
	id: zod.string().describe('Link unique ID.'),
});

export const locatePhotoQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
});

export const locatePhotoResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		photoId: zod.string().optional(),
		photoUrl: zod.string().optional(),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'True if the photo is a default photo; false if the photo is a user-provided photo.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe(
		"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
	);
