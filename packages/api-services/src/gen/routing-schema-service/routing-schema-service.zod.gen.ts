/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary List RoutingSchema
 */
export const searchRoutingSchemaQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
	name: zod.string().optional(),
	type: zod
		.array(zod.enum(['default', 'voice', 'chat', 'processing', 'service']))
		.optional(),
	editor: zod.boolean().optional(),
	tags: zod.array(zod.string()).optional(),
});

export const searchRoutingSchemaResponseItemsItemTypeDefault = 'default';

export const searchRoutingSchemaResponse = zod.object({
	items: zod
		.array(
			zod.object({
				tags: zod
					.array(
						zod.object({
							name: zod.string().optional(),
						}),
					)
					.optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				debug: zod.boolean().optional(),
				description: zod.string().optional(),
				editor: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				payload: zod.any().optional(),
				schema: zod.any().optional(),
				type: zod
					.enum(['default', 'voice', 'chat', 'processing', 'service'])
					.default(searchRoutingSchemaResponseItemsItemTypeDefault),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create RoutingSchema
 */
export const createRoutingSchemaBodyTypeDefault = 'default';

export const createRoutingSchemaBody = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(createRoutingSchemaBodyTypeDefault),
});

export const createRoutingSchemaResponseTypeDefault = 'default';

export const createRoutingSchemaResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(createRoutingSchemaResponseTypeDefault),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary List RoutingSchemaTags
 */
export const searchRoutingSchemaTagsQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	type: zod
		.array(zod.enum(['default', 'voice', 'chat', 'processing', 'service']))
		.optional(),
});

export const searchRoutingSchemaTagsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				count: zod.number().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Remove RoutingSchema
 */
export const deleteRoutingSchemaParams = zod.object({
	id: zod.string(),
});

export const deleteRoutingSchemaQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteRoutingSchemaResponseTypeDefault = 'default';

export const deleteRoutingSchemaResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(deleteRoutingSchemaResponseTypeDefault),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary RoutingSchema item
 */
export const readRoutingSchemaParams = zod.object({
	id: zod.string(),
});

export const readRoutingSchemaQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readRoutingSchemaResponseTypeDefault = 'default';

export const readRoutingSchemaResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(readRoutingSchemaResponseTypeDefault),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Patch RoutingSchema
 */
export const patchRoutingSchemaParams = zod.object({
	id: zod.string(),
});

export const patchRoutingSchemaBodyTypeDefault = 'default';

export const patchRoutingSchemaBody = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	note: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(patchRoutingSchemaBodyTypeDefault),
});

export const patchRoutingSchemaResponseTypeDefault = 'default';

export const patchRoutingSchemaResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(patchRoutingSchemaResponseTypeDefault),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update RoutingSchema
 */
export const updateRoutingSchemaParams = zod.object({
	id: zod.string(),
});

export const updateRoutingSchemaBodyTypeDefault = 'default';

export const updateRoutingSchemaBody = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	name: zod.string().optional(),
	note: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(updateRoutingSchemaBodyTypeDefault),
});

export const updateRoutingSchemaResponseTypeDefault = 'default';

export const updateRoutingSchemaResponse = zod.object({
	tags: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	debug: zod.boolean().optional(),
	description: zod.string().optional(),
	editor: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	payload: zod.any().optional(),
	schema: zod.any().optional(),
	type: zod
		.enum(['default', 'voice', 'chat', 'processing', 'service'])
		.default(updateRoutingSchemaResponseTypeDefault),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
