/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { EngineRoutingSchemaType } from '.././_models';
import type {
	EngineListRoutingSchema,
	EngineListRoutingSchemaTags,
	EngineRoutingSchema,
} from '.././_models';

export const getSearchRoutingSchemaResponseMock = (
	overrideResponse: Partial<EngineListRoutingSchema> = {},
): EngineListRoutingSchema => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			tags: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			debug: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			payload: faker.helpers.arrayElement([{}, undefined]),
			schema: faker.helpers.arrayElement([{}, undefined]),
			type: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineRoutingSchemaType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateRoutingSchemaResponseMock = (
	overrideResponse: Partial<EngineRoutingSchema> = {},
): EngineRoutingSchema => ({
	tags: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	debug: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	payload: faker.helpers.arrayElement([{}, undefined]),
	schema: faker.helpers.arrayElement([{}, undefined]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineRoutingSchemaType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchRoutingSchemaTagsResponseMock = (
	overrideResponse: Partial<EngineListRoutingSchemaTags> = {},
): EngineListRoutingSchemaTags => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			count: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getDeleteRoutingSchemaResponseMock = (
	overrideResponse: Partial<EngineRoutingSchema> = {},
): EngineRoutingSchema => ({
	tags: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	debug: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	payload: faker.helpers.arrayElement([{}, undefined]),
	schema: faker.helpers.arrayElement([{}, undefined]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineRoutingSchemaType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadRoutingSchemaResponseMock = (
	overrideResponse: Partial<EngineRoutingSchema> = {},
): EngineRoutingSchema => ({
	tags: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	debug: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	payload: faker.helpers.arrayElement([{}, undefined]),
	schema: faker.helpers.arrayElement([{}, undefined]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineRoutingSchemaType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchRoutingSchemaResponseMock = (
	overrideResponse: Partial<EngineRoutingSchema> = {},
): EngineRoutingSchema => ({
	tags: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	debug: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	payload: faker.helpers.arrayElement([{}, undefined]),
	schema: faker.helpers.arrayElement([{}, undefined]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineRoutingSchemaType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateRoutingSchemaResponseMock = (
	overrideResponse: Partial<EngineRoutingSchema> = {},
): EngineRoutingSchema => ({
	tags: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	debug: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	payload: faker.helpers.arrayElement([{}, undefined]),
	schema: faker.helpers.arrayElement([{}, undefined]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineRoutingSchemaType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchRoutingSchemaMockHandler = (
	overrideResponse?:
		| EngineListRoutingSchema
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListRoutingSchema> | EngineListRoutingSchema),
) => {
	return http.get('*/routing/schema', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchRoutingSchemaResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateRoutingSchemaMockHandler = (
	overrideResponse?:
		| EngineRoutingSchema
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineRoutingSchema> | EngineRoutingSchema),
) => {
	return http.post('*/routing/schema', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateRoutingSchemaResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchRoutingSchemaTagsMockHandler = (
	overrideResponse?:
		| EngineListRoutingSchemaTags
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListRoutingSchemaTags> | EngineListRoutingSchemaTags),
) => {
	return http.get('*/routing/schema/tags', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchRoutingSchemaTagsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteRoutingSchemaMockHandler = (
	overrideResponse?:
		| EngineRoutingSchema
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineRoutingSchema> | EngineRoutingSchema),
) => {
	return http.delete('*/routing/schema/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteRoutingSchemaResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadRoutingSchemaMockHandler = (
	overrideResponse?:
		| EngineRoutingSchema
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineRoutingSchema> | EngineRoutingSchema),
) => {
	return http.get('*/routing/schema/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadRoutingSchemaResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchRoutingSchemaMockHandler = (
	overrideResponse?:
		| EngineRoutingSchema
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineRoutingSchema> | EngineRoutingSchema),
) => {
	return http.patch('*/routing/schema/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchRoutingSchemaResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateRoutingSchemaMockHandler = (
	overrideResponse?:
		| EngineRoutingSchema
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineRoutingSchema> | EngineRoutingSchema),
) => {
	return http.put('*/routing/schema/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateRoutingSchemaResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getRoutingSchemaServiceMock = () => [
	getSearchRoutingSchemaMockHandler(),
	getCreateRoutingSchemaMockHandler(),
	getSearchRoutingSchemaTagsMockHandler(),
	getDeleteRoutingSchemaMockHandler(),
	getReadRoutingSchemaMockHandler(),
	getPatchRoutingSchemaMockHandler(),
	getUpdateRoutingSchemaMockHandler(),
];
