/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary List of Agent
 */
export const searchAgentQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	allowChannels: zod.array(zod.string()).optional(),
	supervisorId: zod.array(zod.number()).optional(),
	teamId: zod.array(zod.number()).optional(),
	regionId: zod.array(zod.number()).optional(),
	auditorId: zod.array(zod.number()).optional(),
	isSupervisor: zod.boolean().optional(),
	skillId: zod.array(zod.number()).optional(),
	queueId: zod.array(zod.number()).optional(),
	notSupervisor: zod.boolean().optional(),
	userId: zod.array(zod.string()).optional(),
	extension: zod.array(zod.string()).optional(),
	notTeamId: zod.array(zod.number()).optional(),
	notSkillId: zod.array(zod.number()).optional(),
});

export const searchAgentResponse = zod.object({
	items: zod
		.array(
			zod.object({
				allowChannels: zod.array(zod.string()).optional(),
				allowSetScreenControl: zod.boolean().optional(),
				auditor: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				channel: zod
					.array(
						zod.object({
							channel: zod.string().optional(),
							joinedAt: zod.string().optional(),
							state: zod.string().optional(),
							timeout: zod.string().optional(),
						}),
					)
					.optional(),
				chatCount: zod.number().optional(),
				description: zod.string().optional(),
				extension: zod.string().optional(),
				greetingMedia: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				isSupervisor: zod.boolean().optional(),
				lastStatusChange: zod.string().optional(),
				name: zod.string().optional(),
				progressiveCount: zod.number().optional(),
				region: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				screenControl: zod.boolean().optional(),
				skills: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				status: zod.string().optional(),
				statusDuration: zod.string().optional(),
				supervisor: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				taskCount: zod.number().optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create Agent
 */
export const createAgentBody = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	isSupervisor: zod.boolean().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createAgentResponse = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	allowSetScreenControl: zod.boolean().optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	channel: zod
		.array(
			zod.object({
				channel: zod.string().optional(),
				joinedAt: zod.string().optional(),
				state: zod.string().optional(),
				timeout: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	extension: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	isSupervisor: zod.boolean().optional(),
	lastStatusChange: zod.string().optional(),
	name: zod.string().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
	statusDuration: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const searchAgentCallStatisticsQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	timeFrom: zod.string().optional(),
	timeTo: zod.string().optional(),
	agentId: zod.array(zod.number()).optional(),
	domainId: zod.string().optional(),
	q: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	sort: zod.string().optional(),
});

export const searchAgentCallStatisticsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				abandoned: zod.number().optional(),
				avgHoldSec: zod.number().optional(),
				avgTalkSec: zod.number().optional(),
				chatAccepts: zod.number().optional(),
				chatAht: zod.number().optional(),
				count: zod.number().optional(),
				handles: zod.number().optional(),
				maxHoldSec: zod.number().optional(),
				maxTalkSec: zod.number().optional(),
				minHoldSec: zod.number().optional(),
				minTalkSec: zod.number().optional(),
				name: zod.string().optional(),
				occupancy: zod.number().optional(),
				sumHoldSec: zod.number().optional(),
				sumTalkSec: zod.number().optional(),
				utilization: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const searchAgentStatusStatisticQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	agentId: zod.array(zod.string()).optional(),
	timeFrom: zod.string().optional(),
	timeTo: zod.string().optional(),
	status: zod.array(zod.string()).optional(),
	queueId: zod.array(zod.number()).optional(),
	teamId: zod.array(zod.number()).optional(),
	utilizationFrom: zod.string().optional(),
	utilizationTo: zod.string().optional(),
	hasCall: zod.boolean().optional(),
	skillId: zod.array(zod.number()).optional(),
	regionId: zod.array(zod.number()).optional(),
	supervisorId: zod.array(zod.number()).optional(),
	auditorId: zod.array(zod.string()).optional(),
});

export const searchAgentStatusStatisticResponse = zod.object({
	items: zod
		.array(
			zod.object({
				activeCallId: zod.string().optional(),
				agentId: zod.number().optional(),
				auditor: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				callTime: zod.string().optional(),
				chatCount: zod.number().optional(),
				descTrack: zod.boolean().optional(),
				extension: zod.string().optional(),
				handles: zod.number().optional(),
				maxBridgedAt: zod.string().optional(),
				maxOfferingAt: zod.string().optional(),
				missed: zod.number().optional(),
				name: zod.string().optional(),
				occupancy: zod.number().optional(),
				offline: zod.string().optional(),
				online: zod.string().optional(),
				pause: zod.string().optional(),
				pauseCause: zod.string().optional(),
				queues: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				skills: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				status: zod.string().optional(),
				statusDuration: zod.string().optional(),
				supervisor: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				transferred: zod.number().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				utilization: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const searchAgentStatusStatisticItemParams = zod.object({
	agent_id: zod.string(),
});

export const searchAgentStatusStatisticItemQueryParams = zod.object({
	timeFrom: zod.string().optional(),
	timeTo: zod.string().optional(),
});

export const searchAgentStatusStatisticItemResponse = zod.object({
	agentId: zod.number().optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	descTrack: zod.boolean().optional(),
	extension: zod.string().optional(),
	name: zod.string().optional(),
	offline: zod.string().optional(),
	online: zod.string().optional(),
	pause: zod.string().optional(),
	pauseCause: zod.string().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	scoreCount: zod.string().optional(),
	scoreOptionalAvg: zod.number().optional(),
	scoreRequiredAvg: zod.number().optional(),
	status: zod.string().optional(),
	statusDuration: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const searchAgentStateHistoryQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	joinedAtFrom: zod.string().optional(),
	joinedAtTo: zod.string().optional(),
	agentId: zod.array(zod.string()).optional(),
	sort: zod.string().optional(),
	domainId: zod.string().optional(),
	fromId: zod.string().optional(),
});

export const searchAgentStateHistoryResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				channel: zod.string().optional(),
				duration: zod.string().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				pauseCause: zod.string().optional(),
				payload: zod.string().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const searchPauseCauseForAgentParams = zod.object({
	agent_id: zod.string(),
});

export const searchPauseCauseForAgentQueryParams = zod.object({
	allowChange: zod.boolean().optional(),
});

export const searchPauseCauseForAgentResponse = zod.object({
	items: zod
		.array(
			zod.object({
				durationMin: zod.number().optional(),
				id: zod.number().optional(),
				limitMin: zod.number().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const agentStateHistoryParams = zod.object({
	agent_id: zod.string(),
});

export const agentStateHistoryQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	timeFrom: zod.string().optional(),
	timeTo: zod.string().optional(),
	q: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const agentStateHistoryResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				channel: zod.string().optional(),
				duration: zod.string().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				pauseCause: zod.string().optional(),
				payload: zod.string().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const agentSetStateParams = zod.object({
	agent_id: zod.number(),
});

export const agentSetStateBody = zod.object({});

export const agentSetStateResponse = zod.object({});

export const searchAgentInQueueStatisticsParams = zod.object({
	agent_id: zod.string(),
});

export const searchAgentInQueueStatisticsQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const searchAgentInQueueStatisticsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				statistics: zod
					.array(
						zod.object({
							bucket: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							memberWaiting: zod.number().optional(),
							skill: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
			}),
		)
		.optional(),
});

export const agentTodayStatisticsParams = zod.object({
	agent_id: zod.string(),
});

export const agentTodayStatisticsQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const agentTodayStatisticsResponse = zod.object({
	available: zod.number().optional(),
	avgHoldSec: zod.number().optional(),
	avgTalkSec: zod.number().optional(),
	callAbandoned: zod.number().optional(),
	callDialerQueue: zod.number().optional(),
	callHandled: zod.number().optional(),
	callInbound: zod.number().optional(),
	callInboundQueue: zod.number().optional(),
	callManual: zod.number().optional(),
	callMissed: zod.number().optional(),
	callQueueMissed: zod.number().optional(),
	chatAccepts: zod.number().optional(),
	chatAht: zod.number().optional(),
	occupancy: zod.number().optional(),
	online: zod.number().optional(),
	processing: zod.number().optional(),
	queueTalkSec: zod.number().optional(),
	scoreCount: zod.string().optional(),
	scoreOptionalAvg: zod.number().optional(),
	scoreOptionalSum: zod.number().optional(),
	scoreRequiredAvg: zod.number().optional(),
	scoreRequiredSum: zod.number().optional(),
	sumTalkSec: zod.string().optional(),
	taskAccepts: zod.number().optional(),
	utilization: zod.number().optional(),
	voiceMail: zod.number().optional(),
});

/**
 * @summary Remove Agent
 */
export const deleteAgentParams = zod.object({
	id: zod.string(),
});

export const deleteAgentQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteAgentResponse = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	allowSetScreenControl: zod.boolean().optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	channel: zod
		.array(
			zod.object({
				channel: zod.string().optional(),
				joinedAt: zod.string().optional(),
				state: zod.string().optional(),
				timeout: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	extension: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	isSupervisor: zod.boolean().optional(),
	lastStatusChange: zod.string().optional(),
	name: zod.string().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
	statusDuration: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Agent item
 */
export const readAgentParams = zod.object({
	id: zod.string(),
});

export const readAgentQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readAgentResponse = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	allowSetScreenControl: zod.boolean().optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	channel: zod
		.array(
			zod.object({
				channel: zod.string().optional(),
				joinedAt: zod.string().optional(),
				state: zod.string().optional(),
				timeout: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	extension: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	isSupervisor: zod.boolean().optional(),
	lastStatusChange: zod.string().optional(),
	name: zod.string().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
	statusDuration: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update Agent
 */
export const patchAgentParams = zod.object({
	id: zod.string(),
});

export const patchAgentBody = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	isSupervisor: zod.boolean().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchAgentResponse = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	allowSetScreenControl: zod.boolean().optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	channel: zod
		.array(
			zod.object({
				channel: zod.string().optional(),
				joinedAt: zod.string().optional(),
				state: zod.string().optional(),
				timeout: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	extension: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	isSupervisor: zod.boolean().optional(),
	lastStatusChange: zod.string().optional(),
	name: zod.string().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
	statusDuration: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update Agent
 */
export const updateAgentParams = zod.object({
	id: zod.string(),
});

export const updateAgentBody = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	isSupervisor: zod.boolean().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateAgentResponse = zod.object({
	allowChannels: zod.array(zod.string()).optional(),
	allowSetScreenControl: zod.boolean().optional(),
	auditor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	channel: zod
		.array(
			zod.object({
				channel: zod.string().optional(),
				joinedAt: zod.string().optional(),
				state: zod.string().optional(),
				timeout: zod.string().optional(),
			}),
		)
		.optional(),
	chatCount: zod.number().optional(),
	description: zod.string().optional(),
	extension: zod.string().optional(),
	greetingMedia: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	isSupervisor: zod.boolean().optional(),
	lastStatusChange: zod.string().optional(),
	name: zod.string().optional(),
	progressiveCount: zod.number().optional(),
	region: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	screenControl: zod.boolean().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
	statusDuration: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	taskCount: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const searchAgentInQueueParams = zod.object({
	id: zod.string(),
});

export const searchAgentInQueueQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
});

export const searchAgentInQueueResponse = zod.object({
	items: zod
		.array(
			zod.object({
				activeMembers: zod.number().optional(),
				agents: zod
					.object({
						allowPause: zod.number().optional(),
						free: zod.number().optional(),
						offline: zod.number().optional(),
						online: zod.number().optional(),
						pause: zod.number().optional(),
						total: zod.number().optional(),
					})
					.optional(),
				countMembers: zod.number().optional(),
				enabled: zod.boolean().optional(),
				maxMemberLimit: zod.number().optional(),
				priority: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				strategy: zod.string().optional(),
				type: zod.number().optional(),
				waitingMembers: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Change agent status
 */
export const updateAgentStatusParams = zod.object({
	id: zod.string(),
});

export const updateAgentStatusBody = zod.object({
	channels: zod.array(zod.string()).optional(),
	domainId: zod.string().optional(),
	onDemand: zod.boolean().optional(),
	payload: zod.string().optional(),
	status: zod.string().optional(),
});

export const updateAgentStatusResponse = zod.object({
	status: zod.string().optional(),
});

/**
 * @summary todo deprecated ?
 */
export const searchAgentInTeamParams = zod.object({
	id: zod.string(),
});

export const searchAgentInTeamQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const searchAgentInTeamResponse = zod.object({
	items: zod
		.array(
			zod.object({
				strategy: zod.string().optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary SearchLookupAgentNotExistsUser
 */
export const searchLookupUsersAgentNotExistsQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const searchLookupUsersAgentNotExistsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary List of UserStatus
 */
export const searchUserStatusQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
});

export const searchUserStatusResponse = zod.object({
	items: zod
		.array(
			zod.object({
				extension: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				presence: zod
					.object({
						status: zod.string().optional(),
					})
					.optional(),
				status: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});
