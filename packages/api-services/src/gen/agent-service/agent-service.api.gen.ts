/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	AgentStateHistoryParams,
	AgentTodayStatisticsParams,
	DeleteAgentParams,
	EngineAgent,
	EngineAgentCallStatisticsList,
	EngineAgentInQueueStatisticsList,
	EngineAgentServiceAgentSetStateBody,
	EngineAgentServicePatchAgentBody,
	EngineAgentServiceUpdateAgentBody,
	EngineAgentServiceUpdateAgentStatusBody,
	EngineAgentSetStateResponse,
	EngineAgentStatusStatisticItem,
	EngineAgentTodayStatisticsResponse,
	EngineCreateAgentRequest,
	EngineForAgentPauseCauseList,
	EngineListAgent,
	EngineListAgentInQueue,
	EngineListAgentInTeam,
	EngineListAgentStateHistory,
	EngineListAgentStatsStatistic,
	EngineListAgentUser,
	EngineListUserStatus,
	EngineResponse,
	ReadAgentParams,
	SearchAgentCallStatisticsParams,
	SearchAgentInQueueParams,
	SearchAgentInQueueStatisticsParams,
	SearchAgentInTeamParams,
	SearchAgentParams,
	SearchAgentStateHistoryParams,
	SearchAgentStatusStatisticItemParams,
	SearchAgentStatusStatisticParams,
	SearchLookupUsersAgentNotExistsParams,
	SearchPauseCauseForAgentParams,
	SearchUserStatusParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getAgentService =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary List of Agent
			 */
			const searchAgent = <TData = AxiosResponse<EngineListAgent>>(
				params?: SearchAgentParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/agents', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create Agent
			 */
			const createAgent = <TData = AxiosResponse<EngineAgent>>(
				engineCreateAgentRequest: EngineCreateAgentRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/call_center/agents',
					engineCreateAgentRequest,
					options,
				);
			};
			const searchAgentCallStatistics = <
				TData = AxiosResponse<EngineAgentCallStatisticsList>,
			>(
				params?: SearchAgentCallStatisticsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/agents/reports/call', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const searchAgentStatusStatistic = <
				TData = AxiosResponse<EngineListAgentStatsStatistic>,
			>(
				params?: SearchAgentStatusStatisticParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/agents/reports/status', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const searchAgentStatusStatisticItem = <
				TData = AxiosResponse<EngineAgentStatusStatisticItem>,
			>(
				agentId: string,
				params?: SearchAgentStatusStatisticItemParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/reports/status/${agentId}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const searchAgentStateHistory = <
				TData = AxiosResponse<EngineListAgentStateHistory>,
			>(
				params?: SearchAgentStateHistoryParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/agents/states/history', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const searchPauseCauseForAgent = <
				TData = AxiosResponse<EngineForAgentPauseCauseList>,
			>(
				agentId: string,
				params?: SearchPauseCauseForAgentParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${agentId}/pause_causes`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const agentStateHistory = <
				TData = AxiosResponse<EngineListAgentStateHistory>,
			>(
				agentId: string,
				params?: AgentStateHistoryParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${agentId}/states/history`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const agentSetState = <
				TData = AxiosResponse<EngineAgentSetStateResponse>,
			>(
				agentId: number,
				engineAgentServiceAgentSetStateBody: EngineAgentServiceAgentSetStateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/agents/${agentId}/states/waiting`,
					engineAgentServiceAgentSetStateBody,
					options,
				);
			};
			const searchAgentInQueueStatistics = <
				TData = AxiosResponse<EngineAgentInQueueStatisticsList>,
			>(
				agentId: string,
				params?: SearchAgentInQueueStatisticsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${agentId}/statistics/queues`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const agentTodayStatistics = <
				TData = AxiosResponse<EngineAgentTodayStatisticsResponse>,
			>(
				agentId: string,
				params?: AgentTodayStatisticsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${agentId}/statistics/today`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Remove Agent
			 */
			const deleteAgent = <TData = AxiosResponse<EngineAgent>>(
				id: string,
				params?: DeleteAgentParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/call_center/agents/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Agent item
			 */
			const readAgent = <TData = AxiosResponse<EngineAgent>>(
				id: string,
				params?: ReadAgentParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update Agent
			 */
			const patchAgent = <TData = AxiosResponse<EngineAgent>>(
				id: string,
				engineAgentServicePatchAgentBody: EngineAgentServicePatchAgentBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/agents/${id}`,
					engineAgentServicePatchAgentBody,
					options,
				);
			};
			/**
			 * @summary Update Agent
			 */
			const updateAgent = <TData = AxiosResponse<EngineAgent>>(
				id: string,
				engineAgentServiceUpdateAgentBody: EngineAgentServiceUpdateAgentBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/call_center/agents/${id}`,
					engineAgentServiceUpdateAgentBody,
					options,
				);
			};
			const searchAgentInQueue = <
				TData = AxiosResponse<EngineListAgentInQueue>,
			>(
				id: string,
				params?: SearchAgentInQueueParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${id}/queues`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Change agent status
			 */
			const updateAgentStatus = <TData = AxiosResponse<EngineResponse>>(
				id: string,
				engineAgentServiceUpdateAgentStatusBody: EngineAgentServiceUpdateAgentStatusBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/agents/${id}/status`,
					engineAgentServiceUpdateAgentStatusBody,
					options,
				);
			};
			/**
			 * @summary todo deprecated ?
			 */
			const searchAgentInTeam = <TData = AxiosResponse<EngineListAgentInTeam>>(
				id: string,
				params?: SearchAgentInTeamParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/agents/${id}/teams`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary SearchLookupAgentNotExistsUser
			 */
			const searchLookupUsersAgentNotExists = <
				TData = AxiosResponse<EngineListAgentUser>,
			>(
				params?: SearchLookupUsersAgentNotExistsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/lookups/agents/users', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary List of UserStatus
			 */
			const searchUserStatus = <TData = AxiosResponse<EngineListUserStatus>>(
				params?: SearchUserStatusParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/users', {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				searchAgent,
				createAgent,
				searchAgentCallStatistics,
				searchAgentStatusStatistic,
				searchAgentStatusStatisticItem,
				searchAgentStateHistory,
				searchPauseCauseForAgent,
				agentStateHistory,
				agentSetState,
				searchAgentInQueueStatistics,
				agentTodayStatistics,
				deleteAgent,
				readAgent,
				patchAgent,
				updateAgent,
				searchAgentInQueue,
				updateAgentStatus,
				searchAgentInTeam,
				searchLookupUsersAgentNotExists,
				searchUserStatus,
			};
		};
export type SearchAgentResult = AxiosResponse<EngineListAgent>;
export type CreateAgentResult = AxiosResponse<EngineAgent>;
export type SearchAgentCallStatisticsResult =
	AxiosResponse<EngineAgentCallStatisticsList>;
export type SearchAgentStatusStatisticResult =
	AxiosResponse<EngineListAgentStatsStatistic>;
export type SearchAgentStatusStatisticItemResult =
	AxiosResponse<EngineAgentStatusStatisticItem>;
export type SearchAgentStateHistoryResult =
	AxiosResponse<EngineListAgentStateHistory>;
export type SearchPauseCauseForAgentResult =
	AxiosResponse<EngineForAgentPauseCauseList>;
export type AgentStateHistoryResult =
	AxiosResponse<EngineListAgentStateHistory>;
export type AgentSetStateResult = AxiosResponse<EngineAgentSetStateResponse>;
export type SearchAgentInQueueStatisticsResult =
	AxiosResponse<EngineAgentInQueueStatisticsList>;
export type AgentTodayStatisticsResult =
	AxiosResponse<EngineAgentTodayStatisticsResponse>;
export type DeleteAgentResult = AxiosResponse<EngineAgent>;
export type ReadAgentResult = AxiosResponse<EngineAgent>;
export type PatchAgentResult = AxiosResponse<EngineAgent>;
export type UpdateAgentResult = AxiosResponse<EngineAgent>;
export type SearchAgentInQueueResult = AxiosResponse<EngineListAgentInQueue>;
export type UpdateAgentStatusResult = AxiosResponse<EngineResponse>;
export type SearchAgentInTeamResult = AxiosResponse<EngineListAgentInTeam>;
export type SearchLookupUsersAgentNotExistsResult =
	AxiosResponse<EngineListAgentUser>;
export type SearchUserStatusResult = AxiosResponse<EngineListUserStatus>;

// --- footer end
