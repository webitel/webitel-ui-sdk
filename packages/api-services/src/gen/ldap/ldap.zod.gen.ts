/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Delete LDAP profile(s) ...
 */
export const deleteLDAPCatalog2Body = zod.object({
	id: zod.string().optional(),
	relatedObjects: zod.boolean().optional(),
});

export const deleteLDAPCatalog2Response = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

/**
 * @summary Search for LDAP directories ...
 */
export const searchLDAPCatalogQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;'),
	id: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Search Basic Filters ---------------------------\n\nselection: by unique identifier',
		),
	q: zod.string().optional().describe('term-of-search: lookup[name]'),
	name: zod
		.string()
		.optional()
		.describe("case-ignore substring match: ILIKE '*' - any; '?' - one"),
	access: zod
		.string()
		.optional()
		.describe(
			'[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!',
		),
});

export const searchLDAPCatalogResponse = zod.object({
	items: zod
		.array(
			zod.object({
				baseDn: zod.string().optional(),
				bind: zod
					.string()
					.optional()
					.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				cron: zod
					.string()
					.optional()
					.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
				entryModify: zod.string().optional(),
				entryUuid: zod
					.string()
					.optional()
					.describe('entry unique id (except DN which may be updated)'),
				id: zod.string().optional(),
				name: zod.string().optional(),
				password: zod.string().optional(),
				process: zod
					.object({
						completeAt: zod
							.string()
							.optional()
							.describe(
								'Optional. If not <zero> indicates that this process is completed.',
							),
						executeAt: zod.string().optional(),
						executeBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
								user: zod.boolean().optional(),
							})
							.optional()
							.describe('RoleId lookup value.'),
						id: zod.string().optional(),
						options: zod
							.object({
								linkExistingObjects: zod.boolean().optional(),
								reassignDeviceUsers: zod.boolean().optional(),
								test: zod.boolean().optional(),
								timeout: zod.string().optional(),
							})
							.optional(),
						progress: zod
							.array(
								zod.object({
									class: zod.string().optional(),
									entry: zod
										.object({})
										.optional()
										.describe('map<string, string> entry = 1;'),
									errs: zod.array(zod.string()).optional(),
									object: zod.object({}).optional(),
									proc: zod.string().optional(),
									warn: zod.array(zod.string()).optional(),
								}),
							)
							.optional(),
						status: zod.string().optional(),
					})
					.optional(),
				sync: zod
					.object({
						linkExistingObjects: zod.boolean().optional(),
						reassignDeviceUsers: zod.boolean().optional(),
						test: zod.boolean().optional(),
						timeout: zod.string().optional(),
					})
					.optional(),
				templates: zod
					.array(
						zod.object({
							agent: zod.object({}).optional(),
							baseDn: zod.string().optional(),
							catalog: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							createdAt: zod.string().optional().describe('unix'),
							createdBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional()
								.describe('UserId lookup value.'),
							device: zod.object({}).optional(),
							enabled: zod.boolean().optional(),
							id: zod.string().optional(),
							name: zod.string().optional(),
							role: zod.object({}).optional(),
							search: zod.string().optional(),
							updatedAt: zod.string().optional(),
							updatedBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional()
								.describe('UserId lookup value.'),
							user: zod.object({}).optional(),
						}),
					)
					.optional(),
				tls: zod
					.object({
						ca: zod.string().optional(),
						cert: zod.string().optional().describe('PEM: base64'),
						key: zod.string().optional(),
					})
					.optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				url: zod
					.string()
					.optional()
					.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
				username: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Create LDAP profile
 */
export const createLDAPCatalogBody = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

export const createLDAPCatalogResponse = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

/**
 * @summary LDAPSearch performs LDAP Search operation ...
 */
export const lDAPSearch4QueryParams = zod.object({
	catalogId: zod
		.string()
		.optional()
		.describe(
			'----- connection -----\nOptional. ID of the preconfigured LDAP catalog',
		),
	url: zod
		.string()
		.optional()
		.describe(
			'Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]',
		),
	tlsPem: zod.string().optional().describe('TODO: (!)\n\nbase64'),
	bind: zod
		.string()
		.optional()
		.describe(
			'----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.',
		),
	username: zod.string().optional().describe('bind_dn'),
	password: zod.string().optional().describe('password'),
	baseObject: zod
		.string()
		.optional()
		.describe('----- SearchRequest -----\nbaseObject [D]istinguished[N]ame'),
	scope: zod
		.number()
		.optional()
		.describe(
			'baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)',
		),
	derefAliases: zod
		.number()
		.optional()
		.describe(
			'neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)',
		),
	sizeLimit: zod.string().optional().describe('INTEGER (0 ..  maxInt),'),
	timeLimit: zod.string().optional().describe('INTEGER (0 ..  maxInt),'),
	typesOnly: zod.boolean().optional().describe('BOOLEAN,'),
	filter: zod.string().optional().describe('Filter,'),
	attributes: zod.array(zod.string()).optional().describe('AttributeSelection'),
});

export const lDAPSearch4Response = zod.object({
	controls: zod
		.array(
			zod.object({
				controlType: zod.string().optional(),
				controlValue: zod.string().optional(),
				criticality: zod.boolean().optional(),
			}),
		)
		.optional(),
	diagnosticMessage: zod.string().optional(),
	entries: zod.array(zod.object({})).optional(),
	matchedDn: zod.string().optional(),
	referral: zod.array(zod.string()).optional(),
	resultCode: zod.number().optional(),
});

/**
 * @summary LDAPSearch performs LDAP Search operation ...
 */
export const lDAPSearch3Body = zod.object({
	attributes: zod.array(zod.string()).optional(),
	baseObject: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	catalogId: zod.string().optional(),
	controls: zod
		.array(
			zod.object({
				controlType: zod.string().optional(),
				controlValue: zod.string().optional(),
				criticality: zod.boolean().optional(),
			}),
		)
		.optional(),
	derefAliases: zod.number().optional(),
	filter: zod.string().optional(),
	password: zod.string().optional(),
	scope: zod.number().optional(),
	sizeLimit: zod.string().optional(),
	timeLimit: zod.string().optional(),
	tls: zod
		.object({
			pem: zod.string().optional().describe('base64'),
		})
		.optional(),
	typesOnly: zod.boolean().optional(),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

export const lDAPSearch3Response = zod.object({
	controls: zod
		.array(
			zod.object({
				controlType: zod.string().optional(),
				controlValue: zod.string().optional(),
				criticality: zod.boolean().optional(),
			}),
		)
		.optional(),
	diagnosticMessage: zod.string().optional(),
	entries: zod.array(zod.object({})).optional(),
	matchedDn: zod.string().optional(),
	referral: zod.array(zod.string()).optional(),
	resultCode: zod.number().optional(),
});

/**
 * @summary Update LDAP profile details
 */
export const updateLDAPCatalog2Params = zod.object({
	'catalog.id': zod.string().describe('identity\nint64 dc = 1;'),
});

export const updateLDAPCatalog2Body = zod.object({
	catalog: zod
		.object({
			baseDn: zod.string().optional(),
			bind: zod
				.string()
				.optional()
				.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
			createdAt: zod.string().optional().describe('unix'),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			cron: zod
				.string()
				.optional()
				.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
			entryModify: zod.string().optional(),
			entryUuid: zod
				.string()
				.optional()
				.describe('entry unique id (except DN which may be updated)'),
			name: zod.string().optional(),
			password: zod.string().optional(),
			process: zod
				.object({
					completeAt: zod
						.string()
						.optional()
						.describe(
							'Optional. If not <zero> indicates that this process is completed.',
						),
					executeAt: zod.string().optional(),
					executeBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							user: zod.boolean().optional(),
						})
						.optional()
						.describe('RoleId lookup value.'),
					id: zod.string().optional(),
					options: zod
						.object({
							linkExistingObjects: zod.boolean().optional(),
							reassignDeviceUsers: zod.boolean().optional(),
							test: zod.boolean().optional(),
							timeout: zod.string().optional(),
						})
						.optional(),
					progress: zod
						.array(
							zod.object({
								class: zod.string().optional(),
								entry: zod
									.object({})
									.optional()
									.describe('map<string, string> entry = 1;'),
								errs: zod.array(zod.string()).optional(),
								object: zod.object({}).optional(),
								proc: zod.string().optional(),
								warn: zod.array(zod.string()).optional(),
							}),
						)
						.optional(),
					status: zod.string().optional(),
				})
				.optional(),
			sync: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			templates: zod
				.array(
					zod.object({
						agent: zod.object({}).optional(),
						baseDn: zod.string().optional(),
						catalog: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						createdAt: zod.string().optional().describe('unix'),
						createdBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional()
							.describe('UserId lookup value.'),
						device: zod.object({}).optional(),
						enabled: zod.boolean().optional(),
						id: zod.string().optional(),
						name: zod.string().optional(),
						role: zod.object({}).optional(),
						search: zod.string().optional(),
						updatedAt: zod.string().optional(),
						updatedBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional()
							.describe('UserId lookup value.'),
						user: zod.object({}).optional(),
					}),
				)
				.optional(),
			tls: zod
				.object({
					ca: zod.string().optional(),
					cert: zod.string().optional().describe('PEM: base64'),
					key: zod.string().optional(),
				})
				.optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			url: zod
				.string()
				.optional()
				.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
			username: zod.string().optional(),
		})
		.optional()
		.describe('LDAP Catalog changes.'),
	fields: zod.array(zod.string()).optional(),
});

export const updateLDAPCatalog2Response = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

/**
 * @summary Update LDAP profile details
 */
export const updateLDAPCatalogParams = zod.object({
	'catalog.id': zod.string().describe('identity\nint64 dc = 1;'),
});

export const updateLDAPCatalogBody = zod.object({
	catalog: zod
		.object({
			baseDn: zod.string().optional(),
			bind: zod
				.string()
				.optional()
				.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
			createdAt: zod.string().optional().describe('unix'),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			cron: zod
				.string()
				.optional()
				.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
			entryModify: zod.string().optional(),
			entryUuid: zod
				.string()
				.optional()
				.describe('entry unique id (except DN which may be updated)'),
			name: zod.string().optional(),
			password: zod.string().optional(),
			process: zod
				.object({
					completeAt: zod
						.string()
						.optional()
						.describe(
							'Optional. If not <zero> indicates that this process is completed.',
						),
					executeAt: zod.string().optional(),
					executeBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
							user: zod.boolean().optional(),
						})
						.optional()
						.describe('RoleId lookup value.'),
					id: zod.string().optional(),
					options: zod
						.object({
							linkExistingObjects: zod.boolean().optional(),
							reassignDeviceUsers: zod.boolean().optional(),
							test: zod.boolean().optional(),
							timeout: zod.string().optional(),
						})
						.optional(),
					progress: zod
						.array(
							zod.object({
								class: zod.string().optional(),
								entry: zod
									.object({})
									.optional()
									.describe('map<string, string> entry = 1;'),
								errs: zod.array(zod.string()).optional(),
								object: zod.object({}).optional(),
								proc: zod.string().optional(),
								warn: zod.array(zod.string()).optional(),
							}),
						)
						.optional(),
					status: zod.string().optional(),
				})
				.optional(),
			sync: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			templates: zod
				.array(
					zod.object({
						agent: zod.object({}).optional(),
						baseDn: zod.string().optional(),
						catalog: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						createdAt: zod.string().optional().describe('unix'),
						createdBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional()
							.describe('UserId lookup value.'),
						device: zod.object({}).optional(),
						enabled: zod.boolean().optional(),
						id: zod.string().optional(),
						name: zod.string().optional(),
						role: zod.object({}).optional(),
						search: zod.string().optional(),
						updatedAt: zod.string().optional(),
						updatedBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional()
							.describe('UserId lookup value.'),
						user: zod.object({}).optional(),
					}),
				)
				.optional(),
			tls: zod
				.object({
					ca: zod.string().optional(),
					cert: zod.string().optional().describe('PEM: base64'),
					key: zod.string().optional(),
				})
				.optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			url: zod
				.string()
				.optional()
				.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
			username: zod.string().optional(),
		})
		.optional()
		.describe('LDAP Catalog changes.'),
	fields: zod.array(zod.string()).optional(),
});

export const updateLDAPCatalogResponse = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

export const createLDAPTemplateParams = zod.object({
	'catalog.id': zod.string().describe('identifier'),
});

export const createLDAPTemplateBody = zod.object({
	agent: zod.object({}).optional(),
	baseDn: zod.string().optional(),
	catalog: zod
		.object({
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod.object({}).optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	role: zod.object({}).optional(),
	search: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod.object({}).optional(),
});

export const createLDAPTemplateResponse = zod.object({
	agent: zod.object({}).optional(),
	baseDn: zod.string().optional(),
	catalog: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod.object({}).optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	role: zod.object({}).optional(),
	search: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod.object({}).optional(),
});

/**
 * @summary (ResyncLDAPResponse) {
 */
export const searchLDAProcessParams = zod.object({
	catalog_id: zod.string().describe('REQUIRED. Parent LDAP catalog IDentifier'),
});

export const searchLDAProcessQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;'),
	id: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id',
		),
	q: zod.string().optional().describe('OPTIONAL. Filter(s) SET'),
	template: zod.string().optional(),
	objclass: zod.array(zod.string()).optional(),
	failed: zod.boolean().optional().describe('WITH .errs'),
	enabled: zod.boolean().optional().describe('created|updated'),
	disabled: zod.boolean().optional().describe('deleted'),
});

export const searchLDAProcessResponse = zod.object({
	items: zod
		.array(
			zod.object({
				completeAt: zod
					.string()
					.optional()
					.describe(
						'Optional. If not <zero> indicates that this process is completed.',
					),
				executeAt: zod.string().optional(),
				executeBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						user: zod.boolean().optional(),
					})
					.optional()
					.describe('RoleId lookup value.'),
				id: zod.string().optional(),
				options: zod
					.object({
						linkExistingObjects: zod.boolean().optional(),
						reassignDeviceUsers: zod.boolean().optional(),
						test: zod.boolean().optional(),
						timeout: zod.string().optional(),
					})
					.optional(),
				progress: zod
					.array(
						zod.object({
							class: zod.string().optional(),
							entry: zod
								.object({})
								.optional()
								.describe('map<string, string> entry = 1;'),
							errs: zod.array(zod.string()).optional(),
							object: zod.object({}).optional(),
							proc: zod.string().optional(),
							warn: zod.array(zod.string()).optional(),
						}),
					)
					.optional(),
				status: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * (ResyncLDAPResponse) {
 * @summary Resync LDAP directory catalog changes ...
 */
export const resyncLDAPCatalogParams = zod.object({
	catalog_id: zod
		.string()
		.describe('LDAP Catalog unique IDentifier to sync with\n\ncatalog_id'),
});

export const resyncLDAPCatalogBody = zod.object({
	options: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
});

export const resyncLDAPCatalogResponse = zod.object({
	completeAt: zod
		.string()
		.optional()
		.describe(
			'Optional. If not <zero> indicates that this process is completed.',
		),
	executeAt: zod.string().optional(),
	executeBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			user: zod.boolean().optional(),
		})
		.optional()
		.describe('RoleId lookup value.'),
	id: zod.string().optional(),
	options: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	progress: zod
		.array(
			zod.object({
				class: zod.string().optional(),
				entry: zod
					.object({})
					.optional()
					.describe('map<string, string> entry = 1;'),
				errs: zod.array(zod.string()).optional(),
				object: zod.object({}).optional(),
				proc: zod.string().optional(),
				warn: zod.array(zod.string()).optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
});

/**
 * @summary (ResyncLDAPResponse) {
 */
export const locateLDAProcessParams = zod.object({
	catalog_id: zod.string().describe('REQUIRED. Parent LDAP catalog IDentifier'),
	id: zod
		.array(zod.string())
		.min(1)
		.describe(
			'----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id',
		),
});

export const locateLDAProcessQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;'),
	q: zod.string().optional().describe('OPTIONAL. Filter(s) SET'),
	template: zod.string().optional(),
	objclass: zod.array(zod.string()).optional(),
	failed: zod.boolean().optional().describe('WITH .errs'),
	enabled: zod.boolean().optional().describe('created|updated'),
	disabled: zod.boolean().optional().describe('deleted'),
});

export const locateLDAProcessResponse = zod.object({
	completeAt: zod
		.string()
		.optional()
		.describe(
			'Optional. If not <zero> indicates that this process is completed.',
		),
	executeAt: zod.string().optional(),
	executeBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			user: zod.boolean().optional(),
		})
		.optional()
		.describe('RoleId lookup value.'),
	id: zod.string().optional(),
	options: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	progress: zod
		.array(
			zod.object({
				class: zod.string().optional(),
				entry: zod
					.object({})
					.optional()
					.describe('map<string, string> entry = 1;'),
				errs: zod.array(zod.string()).optional(),
				object: zod.object({}).optional(),
				proc: zod.string().optional(),
				warn: zod.array(zod.string()).optional(),
			}),
		)
		.optional(),
	status: zod.string().optional(),
});

/**
 * @summary LDAPSearch performs LDAP Search operation ...
 */
export const lDAPSearch2Params = zod.object({
	catalog_id: zod
		.string()
		.describe(
			'----- connection -----\nOptional. ID of the preconfigured LDAP catalog',
		),
});

export const lDAPSearch2QueryParams = zod.object({
	url: zod
		.string()
		.optional()
		.describe(
			'Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]',
		),
	tlsPem: zod.string().optional().describe('TODO: (!)\n\nbase64'),
	bind: zod
		.string()
		.optional()
		.describe(
			'----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.',
		),
	username: zod.string().optional().describe('bind_dn'),
	password: zod.string().optional().describe('password'),
	baseObject: zod
		.string()
		.optional()
		.describe('----- SearchRequest -----\nbaseObject [D]istinguished[N]ame'),
	scope: zod
		.number()
		.optional()
		.describe(
			'baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)',
		),
	derefAliases: zod
		.number()
		.optional()
		.describe(
			'neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)',
		),
	sizeLimit: zod.string().optional().describe('INTEGER (0 ..  maxInt),'),
	timeLimit: zod.string().optional().describe('INTEGER (0 ..  maxInt),'),
	typesOnly: zod.boolean().optional().describe('BOOLEAN,'),
	filter: zod.string().optional().describe('Filter,'),
	attributes: zod.array(zod.string()).optional().describe('AttributeSelection'),
});

export const lDAPSearch2Response = zod.object({
	controls: zod
		.array(
			zod.object({
				controlType: zod.string().optional(),
				controlValue: zod.string().optional(),
				criticality: zod.boolean().optional(),
			}),
		)
		.optional(),
	diagnosticMessage: zod.string().optional(),
	entries: zod.array(zod.object({})).optional(),
	matchedDn: zod.string().optional(),
	referral: zod.array(zod.string()).optional(),
	resultCode: zod.number().optional(),
});

/**
 * @summary LDAPSearch performs LDAP Search operation ...
 */
export const lDAPSearchParams = zod.object({
	catalog_id: zod
		.string()
		.describe(
			'----- connection -----\nOptional. ID of the preconfigured LDAP catalog',
		),
});

export const lDAPSearchBody = zod.object({
	attributes: zod.array(zod.string()).optional(),
	baseObject: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	controls: zod
		.array(
			zod.object({
				controlType: zod.string().optional(),
				controlValue: zod.string().optional(),
				criticality: zod.boolean().optional(),
			}),
		)
		.optional(),
	derefAliases: zod.number().optional(),
	filter: zod.string().optional(),
	password: zod.string().optional(),
	scope: zod.number().optional(),
	sizeLimit: zod.string().optional(),
	timeLimit: zod.string().optional(),
	tls: zod
		.object({
			pem: zod.string().optional().describe('base64'),
		})
		.optional(),
	typesOnly: zod.boolean().optional(),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

export const lDAPSearchResponse = zod.object({
	controls: zod
		.array(
			zod.object({
				controlType: zod.string().optional(),
				controlValue: zod.string().optional(),
				criticality: zod.boolean().optional(),
			}),
		)
		.optional(),
	diagnosticMessage: zod.string().optional(),
	entries: zod.array(zod.object({})).optional(),
	matchedDn: zod.string().optional(),
	referral: zod.array(zod.string()).optional(),
	resultCode: zod.number().optional(),
});

export const deleteLDAPTemplate2Params = zod.object({
	catalog_id: zod.string().describe('REQUIRED. Parent LDAP catalog IDentifier'),
});

export const deleteLDAPTemplate2Body = zod.object({
	baseDn: zod.string().optional(),
	disabled: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	objclass: zod.string().optional(),
	page: zod.number().optional().describe('default: 1'),
	q: zod.string().optional(),
	size: zod.number().optional(),
	sort: zod.array(zod.string()).optional(),
});

export const deleteLDAPTemplate2Response = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const searchLDAPTemplateParams = zod.object({
	catalog_id: zod.string().describe('REQUIRED. Parent LDAP catalog IDentifier'),
});

export const searchLDAPTemplateQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;'),
	id: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id',
		),
	q: zod.string().optional().describe('OPTIONAL. Filter(s) SET'),
	name: zod.string().optional(),
	baseDn: zod.string().optional(),
	objclass: zod.string().optional(),
	enabled: zod.boolean().optional(),
	disabled: zod.boolean().optional(),
});

export const searchLDAPTemplateResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const deleteLDAPTemplateParams = zod.object({
	catalog_id: zod.string().describe('REQUIRED. Parent LDAP catalog IDentifier'),
	id: zod
		.array(zod.string())
		.min(1)
		.describe(
			'----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id',
		),
});

export const deleteLDAPTemplateBody = zod.object({
	baseDn: zod.string().optional(),
	disabled: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	objclass: zod.string().optional(),
	page: zod.number().optional().describe('default: 1'),
	q: zod.string().optional(),
	size: zod.number().optional(),
	sort: zod.array(zod.string()).optional(),
});

export const deleteLDAPTemplateResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const locateLDAPTemplateParams = zod.object({
	catalog_id: zod.string().describe('REQUIRED. Parent LDAP catalog IDentifier'),
	id: zod
		.array(zod.string())
		.min(1)
		.describe(
			'----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id',
		),
});

export const locateLDAPTemplateQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;'),
	q: zod.string().optional().describe('OPTIONAL. Filter(s) SET'),
	name: zod.string().optional(),
	baseDn: zod.string().optional(),
	objclass: zod.string().optional(),
	enabled: zod.boolean().optional(),
	disabled: zod.boolean().optional(),
});

export const locateLDAPTemplateResponse = zod.object({
	agent: zod.object({}).optional(),
	baseDn: zod.string().optional(),
	catalog: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod.object({}).optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	role: zod.object({}).optional(),
	search: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod.object({}).optional(),
});

/**
 * @summary Delete LDAP profile(s) ...
 */
export const deleteLDAPCatalogParams = zod.object({
	id: zod.string().describe('catalog id'),
});

export const deleteLDAPCatalogQueryParams = zod.object({
	relatedObjects: zod.boolean().optional().describe('WITH objects bound to ?'),
});

export const deleteLDAPCatalogResponse = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

/**
 * @summary Read LDAP catalog profile by .id
 */
export const locateLDAPCatalogParams = zod.object({
	id: zod
		.array(zod.string())
		.min(1)
		.describe(
			'----- Search Basic Filters ---------------------------\n\nselection: by unique identifier',
		),
});

export const locateLDAPCatalogQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;'),
	q: zod.string().optional().describe('term-of-search: lookup[name]'),
	name: zod
		.string()
		.optional()
		.describe("case-ignore substring match: ILIKE '*' - any; '?' - one"),
	access: zod
		.string()
		.optional()
		.describe(
			'[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!',
		),
});

export const locateLDAPCatalogResponse = zod.object({
	baseDn: zod.string().optional(),
	bind: zod
		.string()
		.optional()
		.describe('authorization method e.g.: SIMPLE, SAML, NTLM, etc.'),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	cron: zod
		.string()
		.optional()
		.describe('[CRON]OS SPEC ! github.com/robfig/cron/v3'),
	entryModify: zod.string().optional(),
	entryUuid: zod
		.string()
		.optional()
		.describe('entry unique id (except DN which may be updated)'),
	id: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	process: zod
		.object({
			completeAt: zod
				.string()
				.optional()
				.describe(
					'Optional. If not <zero> indicates that this process is completed.',
				),
			executeAt: zod.string().optional(),
			executeBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					user: zod.boolean().optional(),
				})
				.optional()
				.describe('RoleId lookup value.'),
			id: zod.string().optional(),
			options: zod
				.object({
					linkExistingObjects: zod.boolean().optional(),
					reassignDeviceUsers: zod.boolean().optional(),
					test: zod.boolean().optional(),
					timeout: zod.string().optional(),
				})
				.optional(),
			progress: zod
				.array(
					zod.object({
						class: zod.string().optional(),
						entry: zod
							.object({})
							.optional()
							.describe('map<string, string> entry = 1;'),
						errs: zod.array(zod.string()).optional(),
						object: zod.object({}).optional(),
						proc: zod.string().optional(),
						warn: zod.array(zod.string()).optional(),
					}),
				)
				.optional(),
			status: zod.string().optional(),
		})
		.optional(),
	sync: zod
		.object({
			linkExistingObjects: zod.boolean().optional(),
			reassignDeviceUsers: zod.boolean().optional(),
			test: zod.boolean().optional(),
			timeout: zod.string().optional(),
		})
		.optional(),
	templates: zod
		.array(
			zod.object({
				agent: zod.object({}).optional(),
				baseDn: zod.string().optional(),
				catalog: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional().describe('unix'),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				device: zod.object({}).optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				role: zod.object({}).optional(),
				search: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod.object({}).optional(),
			}),
		)
		.optional(),
	tls: zod
		.object({
			ca: zod.string().optional(),
			cert: zod.string().optional().describe('PEM: base64'),
			key: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	url: zod
		.string()
		.optional()
		.describe('URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]'),
	username: zod.string().optional(),
});

export const updateLDAPTemplateParams = zod.object({
	'template.catalog.id': zod.string().describe('identifier'),
	'template.id': zod.string().describe('ID unique'),
});

export const updateLDAPTemplateBody = zod.object({
	fields: zod.array(zod.string()).optional(),
	template: zod
		.object({
			agent: zod.object({}).optional(),
			baseDn: zod.string().optional(),
			catalog: zod
				.object({
					name: zod.string().optional(),
				})
				.optional(),
			createdAt: zod.string().optional().describe('unix'),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			device: zod.object({}).optional(),
			enabled: zod.boolean().optional(),
			name: zod.string().optional(),
			role: zod.object({}).optional(),
			search: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			user: zod.object({}).optional(),
		})
		.optional()
		.describe('Template changes.'),
});

export const updateLDAPTemplateResponse = zod.object({
	agent: zod.object({}).optional(),
	baseDn: zod.string().optional(),
	catalog: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod.object({}).optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	role: zod.object({}).optional(),
	search: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod.object({}).optional(),
});

export const updateLDAPTemplate2Params = zod.object({
	'template.catalog.id': zod.string().describe('identifier'),
	'template.id': zod.string().describe('ID unique'),
});

export const updateLDAPTemplate2Body = zod.object({
	fields: zod.array(zod.string()).optional(),
	template: zod
		.object({
			agent: zod.object({}).optional(),
			baseDn: zod.string().optional(),
			catalog: zod
				.object({
					name: zod.string().optional(),
				})
				.optional(),
			createdAt: zod.string().optional().describe('unix'),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			device: zod.object({}).optional(),
			enabled: zod.boolean().optional(),
			name: zod.string().optional(),
			role: zod.object({}).optional(),
			search: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			user: zod.object({}).optional(),
		})
		.optional()
		.describe('Template changes.'),
});

export const updateLDAPTemplate2Response = zod.object({
	agent: zod.object({}).optional(),
	baseDn: zod.string().optional(),
	catalog: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional().describe('unix'),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod.object({}).optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	role: zod.object({}).optional(),
	search: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod.object({}).optional(),
});
