/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ApiDeleteLDAPRequest,
	ApiLDAPCatalog,
	ApiLDAProcess,
	ApiLDAProcessResponse,
	ApiLDAPSearchRequest,
	ApiLDAPSearchResponse,
	ApiLDAPTemplate,
	ApiLDAPTemplateResponse,
	ApiSearchLDAPResponse,
	DeleteLDAPCatalogParams,
	LDAPCreateLDAPTemplateBody,
	LDAPDeleteLDAPTemplateBody,
	LDAPLDAPSearchBody,
	LDAPResyncLDAPCatalogBody,
	LDAPSearch2Params,
	LDAPSearch4Params,
	LDAPUpdateLDAPCatalogBody,
	LDAPUpdateLDAPTemplateBody,
	LocateLDAPCatalogParams,
	LocateLDAProcessParams,
	LocateLDAPTemplateParams,
	SearchLDAPCatalogParams,
	SearchLDAProcessParams,
	SearchLDAPTemplateParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getLdap =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Delete LDAP profile(s) ...
			 */
			const deleteLDAPCatalog2 = <TData = AxiosResponse<ApiLDAPCatalog>>(
				apiDeleteLDAPRequest: ApiDeleteLDAPRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete('/ldap', {
					data: apiDeleteLDAPRequest,
					...options,
				});
			};
			/**
			 * @summary Search for LDAP directories ...
			 */
			const searchLDAPCatalog = <TData = AxiosResponse<ApiSearchLDAPResponse>>(
				params?: SearchLDAPCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/ldap', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create LDAP profile
			 */
			const createLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				apiLDAPCatalog: ApiLDAPCatalog,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/ldap', apiLDAPCatalog, options);
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPSearch4 = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				params?: LDAPSearch4Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/ldap/search', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPSearch3 = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				apiLDAPSearchRequest: ApiLDAPSearchRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/ldap/search', apiLDAPSearchRequest, options);
			};
			/**
			 * @summary Update LDAP profile details
			 */
			const updateLDAPCatalog2 = <TData = AxiosResponse<ApiLDAPCatalog>>(
				lDAPUpdateLDAPCatalogBody: LDAPUpdateLDAPCatalogBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					'/ldap/catalog.id}',
					lDAPUpdateLDAPCatalogBody,
					options,
				);
			};
			/**
			 * @summary Update LDAP profile details
			 */
			const updateLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				lDAPUpdateLDAPCatalogBody: LDAPUpdateLDAPCatalogBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/ldap/catalog.id}',
					lDAPUpdateLDAPCatalogBody,
					options,
				);
			};
			const createLDAPTemplate = <TData = AxiosResponse<ApiLDAPTemplate>>(
				lDAPCreateLDAPTemplateBody: LDAPCreateLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/ldap/catalog.id}/templates',
					lDAPCreateLDAPTemplateBody,
					options,
				);
			};
			/**
			 * @summary (ResyncLDAPResponse) {
			 */
			const searchLDAProcess = <TData = AxiosResponse<ApiLDAProcessResponse>>(
				catalogId: string,
				params?: SearchLDAProcessParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/rsync`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * (ResyncLDAPResponse) {
			 * @summary Resync LDAP directory catalog changes ...
			 */
			const resyncLDAPCatalog = <TData = AxiosResponse<ApiLDAProcess>>(
				catalogId: string,
				lDAPResyncLDAPCatalogBody: LDAPResyncLDAPCatalogBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/ldap/${catalogId}/rsync`,
					lDAPResyncLDAPCatalogBody,
					options,
				);
			};
			/**
			 * @summary (ResyncLDAPResponse) {
			 */
			const locateLDAProcess = <TData = AxiosResponse<ApiLDAProcess>>(
				catalogId: string,
				id: string[],
				params?: LocateLDAProcessParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/rsync/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPSearch2 = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				catalogId: string,
				params?: LDAPSearch2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/search`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPSearch = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				catalogId: string,
				lDAPLDAPSearchBody: LDAPLDAPSearchBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/ldap/${catalogId}/search`,
					lDAPLDAPSearchBody,
					options,
				);
			};
			const deleteLDAPTemplate2 = <
				TData = AxiosResponse<ApiLDAPTemplateResponse>,
			>(
				catalogId: string,
				lDAPDeleteLDAPTemplateBody: LDAPDeleteLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/ldap/${catalogId}/templates`, {
					data: lDAPDeleteLDAPTemplateBody,
					...options,
				});
			};
			const searchLDAPTemplate = <
				TData = AxiosResponse<ApiLDAPTemplateResponse>,
			>(
				catalogId: string,
				params?: SearchLDAPTemplateParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/templates`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const deleteLDAPTemplate = <
				TData = AxiosResponse<ApiLDAPTemplateResponse>,
			>(
				catalogId: string,
				id: string[],
				lDAPDeleteLDAPTemplateBody: LDAPDeleteLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/ldap/${catalogId}/templates/${id}`, {
					data: lDAPDeleteLDAPTemplateBody,
					...options,
				});
			};
			const locateLDAPTemplate = <TData = AxiosResponse<ApiLDAPTemplate>>(
				catalogId: string,
				id: string[],
				params?: LocateLDAPTemplateParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/templates/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Delete LDAP profile(s) ...
			 */
			const deleteLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				id: string,
				params?: DeleteLDAPCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/ldap/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Read LDAP catalog profile by .id
			 */
			const locateLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				id: string[],
				params?: LocateLDAPCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const updateLDAPTemplate = <TData = AxiosResponse<ApiLDAPTemplate>>(
				lDAPUpdateLDAPTemplateBody: LDAPUpdateLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					'/ldap/template.catalog.id}/templates/template.id}',
					lDAPUpdateLDAPTemplateBody,
					options,
				);
			};
			const updateLDAPTemplate2 = <TData = AxiosResponse<ApiLDAPTemplate>>(
				lDAPUpdateLDAPTemplateBody: LDAPUpdateLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/ldap/template.catalog.id}/templates/template.id}',
					lDAPUpdateLDAPTemplateBody,
					options,
				);
			};

			// --- footer start
			return {
				deleteLDAPCatalog2,
				searchLDAPCatalog,
				createLDAPCatalog,
				lDAPSearch4,
				lDAPSearch3,
				updateLDAPCatalog2,
				updateLDAPCatalog,
				createLDAPTemplate,
				searchLDAProcess,
				resyncLDAPCatalog,
				locateLDAProcess,
				lDAPSearch2,
				lDAPSearch,
				deleteLDAPTemplate2,
				searchLDAPTemplate,
				deleteLDAPTemplate,
				locateLDAPTemplate,
				deleteLDAPCatalog,
				locateLDAPCatalog,
				updateLDAPTemplate,
				updateLDAPTemplate2,
			};
		};
export type DeleteLDAPCatalog2Result = AxiosResponse<ApiLDAPCatalog>;
export type SearchLDAPCatalogResult = AxiosResponse<ApiSearchLDAPResponse>;
export type CreateLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type LDAPSearch4Result = AxiosResponse<ApiLDAPSearchResponse>;
export type LDAPSearch3Result = AxiosResponse<ApiLDAPSearchResponse>;
export type UpdateLDAPCatalog2Result = AxiosResponse<ApiLDAPCatalog>;
export type UpdateLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type CreateLDAPTemplateResult = AxiosResponse<ApiLDAPTemplate>;
export type SearchLDAProcessResult = AxiosResponse<ApiLDAProcessResponse>;
export type ResyncLDAPCatalogResult = AxiosResponse<ApiLDAProcess>;
export type LocateLDAProcessResult = AxiosResponse<ApiLDAProcess>;
export type LDAPSearch2Result = AxiosResponse<ApiLDAPSearchResponse>;
export type LDAPSearchResult = AxiosResponse<ApiLDAPSearchResponse>;
export type DeleteLDAPTemplate2Result = AxiosResponse<ApiLDAPTemplateResponse>;
export type SearchLDAPTemplateResult = AxiosResponse<ApiLDAPTemplateResponse>;
export type DeleteLDAPTemplateResult = AxiosResponse<ApiLDAPTemplateResponse>;
export type LocateLDAPTemplateResult = AxiosResponse<ApiLDAPTemplate>;
export type DeleteLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type LocateLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type UpdateLDAPTemplateResult = AxiosResponse<ApiLDAPTemplate>;
export type UpdateLDAPTemplate2Result = AxiosResponse<ApiLDAPTemplate>;

// --- footer end
