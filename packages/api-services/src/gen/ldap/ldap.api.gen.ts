/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ApiDeleteLDAPRequest,
	ApiLDAPCatalog,
	ApiLDAPCreateLDAPTemplateBody,
	ApiLDAPDeleteLDAPTemplateBody,
	ApiLDAPLDAPSearchBody,
	ApiLDAPResyncLDAPCatalogBody,
	ApiLDAProcess,
	ApiLDAProcessResponse,
	ApiLDAPSearchRequest,
	ApiLDAPSearchResponse,
	ApiLDAPTemplate,
	ApiLDAPTemplateResponse,
	ApiLDAPUpdateLDAPCatalogBody,
	ApiLDAPUpdateLDAPTemplateBody,
	ApiSearchLDAPResponse,
	LDAPDeleteLDAPCatalogParams,
	LDAPLDAPSearch2Params,
	LDAPLDAPSearch4Params,
	LDAPLocateLDAPCatalogParams,
	LDAPLocateLDAProcessParams,
	LDAPLocateLDAPTemplateParams,
	LDAPSearchLDAPCatalogParams,
	LDAPSearchLDAProcessParams,
	LDAPSearchLDAPTemplateParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getLdap =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Delete LDAP profile(s) ...
			 */
			const lDAPDeleteLDAPCatalog2 = <TData = AxiosResponse<ApiLDAPCatalog>>(
				apiDeleteLDAPRequest: ApiDeleteLDAPRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete('/ldap', {
					data: apiDeleteLDAPRequest,
					...options,
				});
			};
			/**
			 * @summary Search for LDAP directories ...
			 */
			const lDAPSearchLDAPCatalog = <
				TData = AxiosResponse<ApiSearchLDAPResponse>,
			>(
				params?: LDAPSearchLDAPCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/ldap', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create LDAP profile
			 */
			const lDAPCreateLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				apiLDAPCatalog: ApiLDAPCatalog,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/ldap', apiLDAPCatalog, options);
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPLDAPSearch4 = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				params?: LDAPLDAPSearch4Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/ldap/search', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPLDAPSearch3 = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				apiLDAPSearchRequest: ApiLDAPSearchRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/ldap/search', apiLDAPSearchRequest, options);
			};
			/**
			 * @summary Update LDAP profile details
			 */
			const lDAPUpdateLDAPCatalog2 = <TData = AxiosResponse<ApiLDAPCatalog>>(
				apiLDAPUpdateLDAPCatalogBody: ApiLDAPUpdateLDAPCatalogBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					'/ldap/catalog.id}',
					apiLDAPUpdateLDAPCatalogBody,
					options,
				);
			};
			/**
			 * @summary Update LDAP profile details
			 */
			const lDAPUpdateLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				apiLDAPUpdateLDAPCatalogBody: ApiLDAPUpdateLDAPCatalogBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/ldap/catalog.id}',
					apiLDAPUpdateLDAPCatalogBody,
					options,
				);
			};
			const lDAPCreateLDAPTemplate = <TData = AxiosResponse<ApiLDAPTemplate>>(
				apiLDAPCreateLDAPTemplateBody: ApiLDAPCreateLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/ldap/catalog.id}/templates',
					apiLDAPCreateLDAPTemplateBody,
					options,
				);
			};
			/**
			 * @summary (ResyncLDAPResponse) {
			 */
			const lDAPSearchLDAProcess = <
				TData = AxiosResponse<ApiLDAProcessResponse>,
			>(
				catalogId: string,
				params?: LDAPSearchLDAProcessParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/rsync`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * (ResyncLDAPResponse) {
			 * @summary Resync LDAP directory catalog changes ...
			 */
			const lDAPResyncLDAPCatalog = <TData = AxiosResponse<ApiLDAProcess>>(
				catalogId: string,
				apiLDAPResyncLDAPCatalogBody: ApiLDAPResyncLDAPCatalogBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/ldap/${catalogId}/rsync`,
					apiLDAPResyncLDAPCatalogBody,
					options,
				);
			};
			/**
			 * @summary (ResyncLDAPResponse) {
			 */
			const lDAPLocateLDAProcess = <TData = AxiosResponse<ApiLDAProcess>>(
				catalogId: string,
				id: string[],
				params?: LDAPLocateLDAProcessParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/rsync/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPLDAPSearch2 = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				catalogId: string,
				params?: LDAPLDAPSearch2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/search`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary LDAPSearch performs LDAP Search operation ...
			 */
			const lDAPLDAPSearch = <TData = AxiosResponse<ApiLDAPSearchResponse>>(
				catalogId: string,
				apiLDAPLDAPSearchBody: ApiLDAPLDAPSearchBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/ldap/${catalogId}/search`,
					apiLDAPLDAPSearchBody,
					options,
				);
			};
			const lDAPDeleteLDAPTemplate2 = <
				TData = AxiosResponse<ApiLDAPTemplateResponse>,
			>(
				catalogId: string,
				apiLDAPDeleteLDAPTemplateBody: ApiLDAPDeleteLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/ldap/${catalogId}/templates`, {
					data: apiLDAPDeleteLDAPTemplateBody,
					...options,
				});
			};
			const lDAPSearchLDAPTemplate = <
				TData = AxiosResponse<ApiLDAPTemplateResponse>,
			>(
				catalogId: string,
				params?: LDAPSearchLDAPTemplateParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/templates`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const lDAPDeleteLDAPTemplate = <
				TData = AxiosResponse<ApiLDAPTemplateResponse>,
			>(
				catalogId: string,
				id: string[],
				apiLDAPDeleteLDAPTemplateBody: ApiLDAPDeleteLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/ldap/${catalogId}/templates/${id}`, {
					data: apiLDAPDeleteLDAPTemplateBody,
					...options,
				});
			};
			const lDAPLocateLDAPTemplate = <TData = AxiosResponse<ApiLDAPTemplate>>(
				catalogId: string,
				id: string[],
				params?: LDAPLocateLDAPTemplateParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${catalogId}/templates/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Delete LDAP profile(s) ...
			 */
			const lDAPDeleteLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				id: string,
				params?: LDAPDeleteLDAPCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/ldap/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Read LDAP catalog profile by .id
			 */
			const lDAPLocateLDAPCatalog = <TData = AxiosResponse<ApiLDAPCatalog>>(
				id: string[],
				params?: LDAPLocateLDAPCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/ldap/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const lDAPUpdateLDAPTemplate = <TData = AxiosResponse<ApiLDAPTemplate>>(
				apiLDAPUpdateLDAPTemplateBody: ApiLDAPUpdateLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					'/ldap/template.catalog.id}/templates/template.id}',
					apiLDAPUpdateLDAPTemplateBody,
					options,
				);
			};
			const lDAPUpdateLDAPTemplate2 = <TData = AxiosResponse<ApiLDAPTemplate>>(
				apiLDAPUpdateLDAPTemplateBody: ApiLDAPUpdateLDAPTemplateBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/ldap/template.catalog.id}/templates/template.id}',
					apiLDAPUpdateLDAPTemplateBody,
					options,
				);
			};

			// --- footer start
			return {
				lDAPDeleteLDAPCatalog2,
				lDAPSearchLDAPCatalog,
				lDAPCreateLDAPCatalog,
				lDAPLDAPSearch4,
				lDAPLDAPSearch3,
				lDAPUpdateLDAPCatalog2,
				lDAPUpdateLDAPCatalog,
				lDAPCreateLDAPTemplate,
				lDAPSearchLDAProcess,
				lDAPResyncLDAPCatalog,
				lDAPLocateLDAProcess,
				lDAPLDAPSearch2,
				lDAPLDAPSearch,
				lDAPDeleteLDAPTemplate2,
				lDAPSearchLDAPTemplate,
				lDAPDeleteLDAPTemplate,
				lDAPLocateLDAPTemplate,
				lDAPDeleteLDAPCatalog,
				lDAPLocateLDAPCatalog,
				lDAPUpdateLDAPTemplate,
				lDAPUpdateLDAPTemplate2,
			};
		};
export type LDAPDeleteLDAPCatalog2Result = AxiosResponse<ApiLDAPCatalog>;
export type LDAPSearchLDAPCatalogResult = AxiosResponse<ApiSearchLDAPResponse>;
export type LDAPCreateLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type LDAPLDAPSearch4Result = AxiosResponse<ApiLDAPSearchResponse>;
export type LDAPLDAPSearch3Result = AxiosResponse<ApiLDAPSearchResponse>;
export type LDAPUpdateLDAPCatalog2Result = AxiosResponse<ApiLDAPCatalog>;
export type LDAPUpdateLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type LDAPCreateLDAPTemplateResult = AxiosResponse<ApiLDAPTemplate>;
export type LDAPSearchLDAProcessResult = AxiosResponse<ApiLDAProcessResponse>;
export type LDAPResyncLDAPCatalogResult = AxiosResponse<ApiLDAProcess>;
export type LDAPLocateLDAProcessResult = AxiosResponse<ApiLDAProcess>;
export type LDAPLDAPSearch2Result = AxiosResponse<ApiLDAPSearchResponse>;
export type LDAPLDAPSearchResult = AxiosResponse<ApiLDAPSearchResponse>;
export type LDAPDeleteLDAPTemplate2Result =
	AxiosResponse<ApiLDAPTemplateResponse>;
export type LDAPSearchLDAPTemplateResult =
	AxiosResponse<ApiLDAPTemplateResponse>;
export type LDAPDeleteLDAPTemplateResult =
	AxiosResponse<ApiLDAPTemplateResponse>;
export type LDAPLocateLDAPTemplateResult = AxiosResponse<ApiLDAPTemplate>;
export type LDAPDeleteLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type LDAPLocateLDAPCatalogResult = AxiosResponse<ApiLDAPCatalog>;
export type LDAPUpdateLDAPTemplateResult = AxiosResponse<ApiLDAPTemplate>;
export type LDAPUpdateLDAPTemplate2Result = AxiosResponse<ApiLDAPTemplate>;

// --- footer end
