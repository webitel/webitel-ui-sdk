/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	ApiLDAPCatalog,
	ApiLDAPSearchResponse,
	ApiLDAPTemplate,
	ApiLDAPTemplateResponse,
	ApiLDAProcess,
	ApiLDAProcessResponse,
	ApiSearchLDAPResponse,
} from '.././_models';

export const getLDAPDeleteLDAPCatalog2ResponseMock = (
	overrideResponse: Partial<ApiLDAPCatalog> = {},
): ApiLDAPCatalog => ({
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryModify: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryUuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	process: faker.helpers.arrayElement([
		{
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	sync: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	templates: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	tls: faker.helpers.arrayElement([
		{
			ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPSearchLDAPCatalogResponseMock = (
	overrideResponse: Partial<ApiSearchLDAPResponse> = {},
): ApiSearchLDAPResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			entryModify: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			entryUuid: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			process: faker.helpers.arrayElement([
				{
					completeAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					executeAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					executeBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							user: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					options: faker.helpers.arrayElement([
						{
							linkExistingObjects: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							reassignDeviceUsers: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							test: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							timeout: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						},
						undefined,
					]),
					progress: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							class: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							entry: faker.helpers.arrayElement([{}, undefined]),
							errs: faker.helpers.arrayElement([
								Array.from(
									{ length: faker.number.int({ min: 1, max: 10 }) },
									(_, i) => i + 1,
								).map(() => faker.string.alpha(20)),
								undefined,
							]),
							object: faker.helpers.arrayElement([{}, undefined]),
							proc: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							warn: faker.helpers.arrayElement([
								Array.from(
									{ length: faker.number.int({ min: 1, max: 10 }) },
									(_, i) => i + 1,
								).map(() => faker.string.alpha(20)),
								undefined,
							]),
						})),
						undefined,
					]),
					status: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
				},
				undefined,
			]),
			sync: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			templates: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					agent: faker.helpers.arrayElement([{}, undefined]),
					baseDn: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					catalog: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					device: faker.helpers.arrayElement([{}, undefined]),
					enabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					role: faker.helpers.arrayElement([{}, undefined]),
					search: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([{}, undefined]),
				})),
				undefined,
			]),
			tls: faker.helpers.arrayElement([
				{
					ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPCreateLDAPCatalogResponseMock = (
	overrideResponse: Partial<ApiLDAPCatalog> = {},
): ApiLDAPCatalog => ({
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryModify: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryUuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	process: faker.helpers.arrayElement([
		{
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	sync: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	templates: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	tls: faker.helpers.arrayElement([
		{
			ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPLDAPSearch4ResponseMock = (
	overrideResponse: Partial<ApiLDAPSearchResponse> = {},
): ApiLDAPSearchResponse => ({
	controls: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			controlType: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			controlValue: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			criticality: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		})),
		undefined,
	]),
	diagnosticMessage: faker.helpers.arrayElement([
		faker.string.alpha(20),
		undefined,
	]),
	entries: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	matchedDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	referral: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => faker.string.alpha(20)),
		undefined,
	]),
	resultCode: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPLDAPSearch3ResponseMock = (
	overrideResponse: Partial<ApiLDAPSearchResponse> = {},
): ApiLDAPSearchResponse => ({
	controls: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			controlType: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			controlValue: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			criticality: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		})),
		undefined,
	]),
	diagnosticMessage: faker.helpers.arrayElement([
		faker.string.alpha(20),
		undefined,
	]),
	entries: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	matchedDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	referral: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => faker.string.alpha(20)),
		undefined,
	]),
	resultCode: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPUpdateLDAPCatalog2ResponseMock = (
	overrideResponse: Partial<ApiLDAPCatalog> = {},
): ApiLDAPCatalog => ({
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryModify: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryUuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	process: faker.helpers.arrayElement([
		{
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	sync: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	templates: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	tls: faker.helpers.arrayElement([
		{
			ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPUpdateLDAPCatalogResponseMock = (
	overrideResponse: Partial<ApiLDAPCatalog> = {},
): ApiLDAPCatalog => ({
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryModify: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryUuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	process: faker.helpers.arrayElement([
		{
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	sync: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	templates: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	tls: faker.helpers.arrayElement([
		{
			ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPCreateLDAPTemplateResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplate> = {},
): ApiLDAPTemplate => ({
	agent: faker.helpers.arrayElement([{}, undefined]),
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	catalog: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	device: faker.helpers.arrayElement([{}, undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	role: faker.helpers.arrayElement([{}, undefined]),
	search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([{}, undefined]),
	...overrideResponse,
});

export const getLDAPSearchLDAProcessResponseMock = (
	overrideResponse: Partial<ApiLDAProcessResponse> = {},
): ApiLDAProcessResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPResyncLDAPCatalogResponseMock = (
	overrideResponse: Partial<ApiLDAProcess> = {},
): ApiLDAProcess => ({
	completeAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	executeAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	executeBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			user: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	options: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	progress: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			class: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			entry: faker.helpers.arrayElement([{}, undefined]),
			errs: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			object: faker.helpers.arrayElement([{}, undefined]),
			proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			warn: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
		})),
		undefined,
	]),
	status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPLocateLDAProcessResponseMock = (
	overrideResponse: Partial<ApiLDAProcess> = {},
): ApiLDAProcess => ({
	completeAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	executeAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	executeBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			user: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	options: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	progress: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			class: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			entry: faker.helpers.arrayElement([{}, undefined]),
			errs: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			object: faker.helpers.arrayElement([{}, undefined]),
			proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			warn: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
		})),
		undefined,
	]),
	status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPLDAPSearch2ResponseMock = (
	overrideResponse: Partial<ApiLDAPSearchResponse> = {},
): ApiLDAPSearchResponse => ({
	controls: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			controlType: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			controlValue: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			criticality: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		})),
		undefined,
	]),
	diagnosticMessage: faker.helpers.arrayElement([
		faker.string.alpha(20),
		undefined,
	]),
	entries: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	matchedDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	referral: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => faker.string.alpha(20)),
		undefined,
	]),
	resultCode: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPLDAPSearchResponseMock = (
	overrideResponse: Partial<ApiLDAPSearchResponse> = {},
): ApiLDAPSearchResponse => ({
	controls: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			controlType: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			controlValue: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			criticality: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		})),
		undefined,
	]),
	diagnosticMessage: faker.helpers.arrayElement([
		faker.string.alpha(20),
		undefined,
	]),
	entries: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	matchedDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	referral: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => faker.string.alpha(20)),
		undefined,
	]),
	resultCode: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPDeleteLDAPTemplate2ResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplateResponse> = {},
): ApiLDAPTemplateResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPSearchLDAPTemplateResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplateResponse> = {},
): ApiLDAPTemplateResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPDeleteLDAPTemplateResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplateResponse> = {},
): ApiLDAPTemplateResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLDAPLocateLDAPTemplateResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplate> = {},
): ApiLDAPTemplate => ({
	agent: faker.helpers.arrayElement([{}, undefined]),
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	catalog: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	device: faker.helpers.arrayElement([{}, undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	role: faker.helpers.arrayElement([{}, undefined]),
	search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([{}, undefined]),
	...overrideResponse,
});

export const getLDAPDeleteLDAPCatalogResponseMock = (
	overrideResponse: Partial<ApiLDAPCatalog> = {},
): ApiLDAPCatalog => ({
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryModify: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryUuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	process: faker.helpers.arrayElement([
		{
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	sync: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	templates: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	tls: faker.helpers.arrayElement([
		{
			ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPLocateLDAPCatalogResponseMock = (
	overrideResponse: Partial<ApiLDAPCatalog> = {},
): ApiLDAPCatalog => ({
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	bind: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	cron: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryModify: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	entryUuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	process: faker.helpers.arrayElement([
		{
			completeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			executeBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			options: faker.helpers.arrayElement([
				{
					linkExistingObjects: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					reassignDeviceUsers: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					test: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timeout: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			progress: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					class: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					entry: faker.helpers.arrayElement([{}, undefined]),
					errs: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
					object: faker.helpers.arrayElement([{}, undefined]),
					proc: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					warn: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => faker.string.alpha(20)),
						undefined,
					]),
				})),
				undefined,
			]),
			status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	sync: faker.helpers.arrayElement([
		{
			linkExistingObjects: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			reassignDeviceUsers: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			test: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	templates: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agent: faker.helpers.arrayElement([{}, undefined]),
			baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			catalog: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			device: faker.helpers.arrayElement([{}, undefined]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			role: faker.helpers.arrayElement([{}, undefined]),
			search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	tls: faker.helpers.arrayElement([
		{
			ca: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			cert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	username: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLDAPUpdateLDAPTemplateResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplate> = {},
): ApiLDAPTemplate => ({
	agent: faker.helpers.arrayElement([{}, undefined]),
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	catalog: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	device: faker.helpers.arrayElement([{}, undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	role: faker.helpers.arrayElement([{}, undefined]),
	search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([{}, undefined]),
	...overrideResponse,
});

export const getLDAPUpdateLDAPTemplate2ResponseMock = (
	overrideResponse: Partial<ApiLDAPTemplate> = {},
): ApiLDAPTemplate => ({
	agent: faker.helpers.arrayElement([{}, undefined]),
	baseDn: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	catalog: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	device: faker.helpers.arrayElement([{}, undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	role: faker.helpers.arrayElement([{}, undefined]),
	search: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([{}, undefined]),
	...overrideResponse,
});

export const getLDAPDeleteLDAPCatalog2MockHandler = (
	overrideResponse?:
		| ApiLDAPCatalog
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ApiLDAPCatalog> | ApiLDAPCatalog),
) => {
	return http.delete('*/ldap', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPDeleteLDAPCatalog2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPSearchLDAPCatalogMockHandler = (
	overrideResponse?:
		| ApiSearchLDAPResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiSearchLDAPResponse> | ApiSearchLDAPResponse),
) => {
	return http.get('*/ldap', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPSearchLDAPCatalogResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPCreateLDAPCatalogMockHandler = (
	overrideResponse?:
		| ApiLDAPCatalog
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ApiLDAPCatalog> | ApiLDAPCatalog),
) => {
	return http.post('*/ldap', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPCreateLDAPCatalogResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLDAPSearch4MockHandler = (
	overrideResponse?:
		| ApiLDAPSearchResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAPSearchResponse> | ApiLDAPSearchResponse),
) => {
	return http.get('*/ldap/search', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLDAPSearch4ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLDAPSearch3MockHandler = (
	overrideResponse?:
		| ApiLDAPSearchResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ApiLDAPSearchResponse> | ApiLDAPSearchResponse),
) => {
	return http.post('*/ldap/search', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLDAPSearch3ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPUpdateLDAPCatalog2MockHandler = (
	overrideResponse?:
		| ApiLDAPCatalog
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<ApiLDAPCatalog> | ApiLDAPCatalog),
) => {
	return http.patch('*/ldap/catalog.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPUpdateLDAPCatalog2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPUpdateLDAPCatalogMockHandler = (
	overrideResponse?:
		| ApiLDAPCatalog
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<ApiLDAPCatalog> | ApiLDAPCatalog),
) => {
	return http.put('*/ldap/catalog.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPUpdateLDAPCatalogResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPCreateLDAPTemplateMockHandler = (
	overrideResponse?:
		| ApiLDAPTemplate
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ApiLDAPTemplate> | ApiLDAPTemplate),
) => {
	return http.post('*/ldap/catalog.id}/templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPCreateLDAPTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPSearchLDAProcessMockHandler = (
	overrideResponse?:
		| ApiLDAProcessResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAProcessResponse> | ApiLDAProcessResponse),
) => {
	return http.get('*/ldap/:catalogId/rsync', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPSearchLDAProcessResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPResyncLDAPCatalogMockHandler = (
	overrideResponse?:
		| ApiLDAProcess
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ApiLDAProcess> | ApiLDAProcess),
) => {
	return http.post('*/ldap/:catalogId/rsync', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPResyncLDAPCatalogResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLocateLDAProcessMockHandler = (
	overrideResponse?:
		| ApiLDAProcess
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAProcess> | ApiLDAProcess),
) => {
	return http.get('*/ldap/:catalogId/rsync/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLocateLDAProcessResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLDAPSearch2MockHandler = (
	overrideResponse?:
		| ApiLDAPSearchResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAPSearchResponse> | ApiLDAPSearchResponse),
) => {
	return http.get('*/ldap/:catalogId/search', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLDAPSearch2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLDAPSearchMockHandler = (
	overrideResponse?:
		| ApiLDAPSearchResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ApiLDAPSearchResponse> | ApiLDAPSearchResponse),
) => {
	return http.post('*/ldap/:catalogId/search', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLDAPSearchResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPDeleteLDAPTemplate2MockHandler = (
	overrideResponse?:
		| ApiLDAPTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ApiLDAPTemplateResponse> | ApiLDAPTemplateResponse),
) => {
	return http.delete('*/ldap/:catalogId/templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPDeleteLDAPTemplate2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPSearchLDAPTemplateMockHandler = (
	overrideResponse?:
		| ApiLDAPTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAPTemplateResponse> | ApiLDAPTemplateResponse),
) => {
	return http.get('*/ldap/:catalogId/templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPSearchLDAPTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPDeleteLDAPTemplateMockHandler = (
	overrideResponse?:
		| ApiLDAPTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ApiLDAPTemplateResponse> | ApiLDAPTemplateResponse),
) => {
	return http.delete('*/ldap/:catalogId/templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPDeleteLDAPTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLocateLDAPTemplateMockHandler = (
	overrideResponse?:
		| ApiLDAPTemplate
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAPTemplate> | ApiLDAPTemplate),
) => {
	return http.get('*/ldap/:catalogId/templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLocateLDAPTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPDeleteLDAPCatalogMockHandler = (
	overrideResponse?:
		| ApiLDAPCatalog
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ApiLDAPCatalog> | ApiLDAPCatalog),
) => {
	return http.delete('*/ldap/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPDeleteLDAPCatalogResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPLocateLDAPCatalogMockHandler = (
	overrideResponse?:
		| ApiLDAPCatalog
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiLDAPCatalog> | ApiLDAPCatalog),
) => {
	return http.get('*/ldap/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLDAPLocateLDAPCatalogResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLDAPUpdateLDAPTemplateMockHandler = (
	overrideResponse?:
		| ApiLDAPTemplate
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<ApiLDAPTemplate> | ApiLDAPTemplate),
) => {
	return http.patch(
		'*/ldap/template.catalog.id}/templates/template.id}',
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getLDAPUpdateLDAPTemplateResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		},
	);
};

export const getLDAPUpdateLDAPTemplate2MockHandler = (
	overrideResponse?:
		| ApiLDAPTemplate
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<ApiLDAPTemplate> | ApiLDAPTemplate),
) => {
	return http.put(
		'*/ldap/template.catalog.id}/templates/template.id}',
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getLDAPUpdateLDAPTemplate2ResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		},
	);
};
export const getLdapMock = () => [
	getLDAPDeleteLDAPCatalog2MockHandler(),
	getLDAPSearchLDAPCatalogMockHandler(),
	getLDAPCreateLDAPCatalogMockHandler(),
	getLDAPLDAPSearch4MockHandler(),
	getLDAPLDAPSearch3MockHandler(),
	getLDAPUpdateLDAPCatalog2MockHandler(),
	getLDAPUpdateLDAPCatalogMockHandler(),
	getLDAPCreateLDAPTemplateMockHandler(),
	getLDAPSearchLDAProcessMockHandler(),
	getLDAPResyncLDAPCatalogMockHandler(),
	getLDAPLocateLDAProcessMockHandler(),
	getLDAPLDAPSearch2MockHandler(),
	getLDAPLDAPSearchMockHandler(),
	getLDAPDeleteLDAPTemplate2MockHandler(),
	getLDAPSearchLDAPTemplateMockHandler(),
	getLDAPDeleteLDAPTemplateMockHandler(),
	getLDAPLocateLDAPTemplateMockHandler(),
	getLDAPDeleteLDAPCatalogMockHandler(),
	getLDAPLocateLDAPCatalogMockHandler(),
	getLDAPUpdateLDAPTemplateMockHandler(),
	getLDAPUpdateLDAPTemplate2MockHandler(),
];
