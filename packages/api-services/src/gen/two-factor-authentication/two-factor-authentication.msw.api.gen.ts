/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type {
	ApiGenerateUserTfaKeyResponse,
	ApiGetUserTfaKeyResponse,
} from '.././_models';

export const getGetUserTfaKeyResponseMock = (
	overrideResponse: Partial<ApiGetUserTfaKeyResponse> = {},
): ApiGetUserTfaKeyResponse => ({
	totp: faker.helpers.arrayElement([
		{
			url: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getGenerateUserTfaKeyResponseMock = (
	overrideResponse: Partial<ApiGenerateUserTfaKeyResponse> = {},
): ApiGenerateUserTfaKeyResponse => ({
	totp: faker.helpers.arrayElement([
		{
			url: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getGetUserTfaKeyMockHandler = (
	overrideResponse?:
		| ApiGetUserTfaKeyResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiGetUserTfaKeyResponse> | ApiGetUserTfaKeyResponse),
) => {
	return http.get('*/users/:userId/2fa', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGetUserTfaKeyResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getGenerateUserTfaKeyMockHandler = (
	overrideResponse?:
		| ApiGenerateUserTfaKeyResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<ApiGenerateUserTfaKeyResponse>
				| ApiGenerateUserTfaKeyResponse),
) => {
	return http.post('*/users/:userId/2fa', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGenerateUserTfaKeyResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getTwoFactorAuthenticationMock = () => [
	getGetUserTfaKeyMockHandler(),
	getGenerateUserTfaKeyMockHandler(),
];
