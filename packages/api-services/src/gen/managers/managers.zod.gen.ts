/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Remove Contact Managers associations.
 */
export const deleteManagersParams = zod.object({
	contact_id: zod.string().describe('Contact ID associated with.'),
});

export const deleteManagersQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	etag: zod.array(zod.string()).describe('Set of unique ID(s) to remove.'),
});

export const deleteManagersResponseItem = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'Indicates whether this association is the default\namong others of the same type.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		user: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe("Manager. The Contact's responsible User.");
export const deleteManagersResponse = zod.array(deleteManagersResponseItem);

/**
 * @summary Search the Contact's Managers.
 */
export const listManagersParams = zod.object({
	contact_id: zod.string().describe('Contact ID associated with.'),
});

export const listManagersQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result. offset = ((page-1)*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size of result page. limit = (size++)'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search term: user name;\n`?` - matches any one character\n`*` - matches 0 or more characters',
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	id: zod
		.array(zod.string())
		.optional()
		.describe('Record(s) with unique ID only.'),
});

export const listManagersResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'Indicates whether this association is the default\namong others of the same type.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe("Manager. The Contact's responsible User."),
			)
			.optional()
			.describe('Manager dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Manager dataset.');

/**
 * @summary Associate new Managers to the Contact.
 */
export const mergeManagersParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
});

export const mergeManagersQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const mergeManagersBodyItem = zod.object({
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing resource.'),
	primary: zod
		.boolean()
		.optional()
		.describe(
			'Indicates whether this association must be default among others.',
		),
	user: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});
export const mergeManagersBody = zod.array(mergeManagersBodyItem);

export const mergeManagersResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'Indicates whether this association is the default\namong others of the same type.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe("Manager. The Contact's responsible User."),
			)
			.optional()
			.describe('Manager dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Manager dataset.');

/**
 * @summary Reset Managers to fit the specified final set.
 */
export const resetManagersParams = zod.object({
	contact_id: zod.string().describe('Contact ID associated with.'),
});

export const resetManagersQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const resetManagersBodyItem = zod.object({
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing resource.'),
	primary: zod
		.boolean()
		.optional()
		.describe(
			'Indicates whether this association must be default among others.',
		),
	user: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});
export const resetManagersBody = zod.array(resetManagersBodyItem);

export const resetManagersResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'Indicates whether this association is the default\namong others of the same type.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe("Manager. The Contact's responsible User."),
			)
			.optional()
			.describe('Manager dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Manager dataset.');

/**
 * @summary Remove the contact's manager address link
 */
export const deleteManagerParams = zod.object({
	contact_id: zod.string().describe('Contact ID associated with.'),
	etag: zod.string().describe('Unique ID to remove.'),
});

export const deleteManagerQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const deleteManagerResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'Indicates whether this association is the default\namong others of the same type.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		user: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe("Manager. The Contact's responsible User.");

/**
 * @summary Locate the manager address link.
 */
export const locateManagerParams = zod.object({
	contact_id: zod.string().describe('Contact source ID.'),
	etag: zod
		.string()
		.describe(
			'Unique manager link IDentifier.\nAccept: `etag` (obsolete+) or `id`.',
		),
});

export const locateManagerQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
});

export const locateManagerResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe('The user who created this Field.'),
		createdBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		etag: zod
			.string()
			.optional()
			.describe(
				'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
			),
		id: zod
			.string()
			.optional()
			.describe('The unique ID of the association. Never changes.'),
		primary: zod
			.boolean()
			.optional()
			.describe(
				'Indicates whether this association is the default\namong others of the same type.',
			),
		updatedAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
			),
		updatedBy: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		user: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		ver: zod
			.number()
			.optional()
			.describe('Version of the latest update. Numeric sequence.'),
	})
	.describe("Manager. The Contact's responsible User.");

/**
 * @summary Update the contact's manager address link details
 */
export const updateManager2Params = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing resource.'),
});

export const updateManager2QueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const updateManager2Body = zod.object({
	primary: zod
		.boolean()
		.optional()
		.describe(
			'Indicates whether this association must be default among others.',
		),
	user: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

export const updateManager2Response = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'Indicates whether this association is the default\namong others of the same type.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe("Manager. The Contact's responsible User."),
			)
			.optional()
			.describe('Manager dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Manager dataset.');

/**
 * @summary Update the contact's manager address link details
 */
export const updateManagerParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing resource.'),
});

export const updateManagerQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const updateManagerBody = zod.object({
	primary: zod
		.boolean()
		.optional()
		.describe(
			'Indicates whether this association must be default among others.',
		),
	user: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

export const updateManagerResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe('The user who created this Field.'),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						primary: zod
							.boolean()
							.optional()
							.describe(
								'Indicates whether this association is the default\namong others of the same type.',
							),
						updatedAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
							),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						ver: zod
							.number()
							.optional()
							.describe('Version of the latest update. Numeric sequence.'),
					})
					.describe("Manager. The Contact's responsible User."),
			)
			.optional()
			.describe('Manager dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Manager dataset.');
