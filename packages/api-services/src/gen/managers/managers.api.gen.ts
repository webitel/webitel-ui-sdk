/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ManagersDeleteManagerParams,
	ManagersDeleteManagersParams,
	ManagersListManagersParams,
	ManagersLocateManagerParams,
	ManagersMergeManagersParams,
	ManagersResetManagersParams,
	ManagersUpdateManager2Body,
	ManagersUpdateManager2Params,
	ManagersUpdateManagerBody,
	ManagersUpdateManagerParams,
	WebitelContactsInputManager,
	WebitelContactsManager,
	WebitelContactsManagerList,
} from '.././_models';

// --- header start
//

export const // --- title start
	getManagers =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove Contact Managers associations.
			 */
			const managersDeleteManagers = <
				TData = AxiosResponse<WebitelContactsManager[]>,
			>(
				contactId: string,
				params: ManagersDeleteManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/managers`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Search the Contact's Managers.
			 */
			const managersListManagers = <
				TData = AxiosResponse<WebitelContactsManagerList>,
			>(
				contactId: string,
				params?: ManagersListManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/managers`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate new Managers to the Contact.
			 */
			const managersMergeManagers = <
				TData = AxiosResponse<WebitelContactsManagerList>,
			>(
				contactId: string,
				webitelContactsInputManager: WebitelContactsInputManager[],
				params?: ManagersMergeManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/managers`,
					webitelContactsInputManager,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Reset Managers to fit the specified final set.
			 */
			const managersResetManagers = <
				TData = AxiosResponse<WebitelContactsManagerList>,
			>(
				contactId: string,
				webitelContactsInputManager: WebitelContactsInputManager[],
				params?: ManagersResetManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/managers`,
					webitelContactsInputManager,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the contact's manager address link
			 */
			const managersDeleteManager = <
				TData = AxiosResponse<WebitelContactsManager>,
			>(
				contactId: string,
				etag: string,
				params?: ManagersDeleteManagerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/managers/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the manager address link.
			 */
			const managersLocateManager = <
				TData = AxiosResponse<WebitelContactsManager>,
			>(
				contactId: string,
				etag: string,
				params?: ManagersLocateManagerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/managers/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the contact's manager address link details
			 */
			const managersUpdateManager2 = <
				TData = AxiosResponse<WebitelContactsManagerList>,
			>(
				contactId: string,
				etag: string,
				managersUpdateManager2Body: ManagersUpdateManager2Body,
				params?: ManagersUpdateManager2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/managers/${etag}`,
					managersUpdateManager2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the contact's manager address link details
			 */
			const managersUpdateManager = <
				TData = AxiosResponse<WebitelContactsManagerList>,
			>(
				contactId: string,
				etag: string,
				managersUpdateManagerBody: ManagersUpdateManagerBody,
				params?: ManagersUpdateManagerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/managers/${etag}`,
					managersUpdateManagerBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				managersDeleteManagers,
				managersListManagers,
				managersMergeManagers,
				managersResetManagers,
				managersDeleteManager,
				managersLocateManager,
				managersUpdateManager2,
				managersUpdateManager,
			};
		};
export type ManagersDeleteManagersResult = AxiosResponse<
	WebitelContactsManager[]
>;
export type ManagersListManagersResult =
	AxiosResponse<WebitelContactsManagerList>;
export type ManagersMergeManagersResult =
	AxiosResponse<WebitelContactsManagerList>;
export type ManagersResetManagersResult =
	AxiosResponse<WebitelContactsManagerList>;
export type ManagersDeleteManagerResult = AxiosResponse<WebitelContactsManager>;
export type ManagersLocateManagerResult = AxiosResponse<WebitelContactsManager>;
export type ManagersUpdateManager2Result =
	AxiosResponse<WebitelContactsManagerList>;
export type ManagersUpdateManagerResult =
	AxiosResponse<WebitelContactsManagerList>;

// --- footer end
