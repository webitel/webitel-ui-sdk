/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ContactsInputManager,
	ContactsManager,
	ContactsManagerList,
	DeleteManagerParams,
	DeleteManagersParams,
	ListManagersParams,
	LocateManagerParams,
	MergeManagersParams,
	ResetManagersParams,
	UpdateManager2Body,
	UpdateManager2Params,
	UpdateManagerBody,
	UpdateManagerParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getManagers =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove Contact Managers associations.
			 */
			const deleteManagers = <TData = AxiosResponse<ContactsManager[]>>(
				contactId: string,
				params: DeleteManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/managers`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Search the Contact's Managers.
			 */
			const listManagers = <TData = AxiosResponse<ContactsManagerList>>(
				contactId: string,
				params?: ListManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/managers`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate new Managers to the Contact.
			 */
			const mergeManagers = <TData = AxiosResponse<ContactsManagerList>>(
				contactId: string,
				contactsInputManager: ContactsInputManager[],
				params?: MergeManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/managers`,
					contactsInputManager,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Reset Managers to fit the specified final set.
			 */
			const resetManagers = <TData = AxiosResponse<ContactsManagerList>>(
				contactId: string,
				contactsInputManager: ContactsInputManager[],
				params?: ResetManagersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/managers`,
					contactsInputManager,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the contact's manager address link
			 */
			const deleteManager = <TData = AxiosResponse<ContactsManager>>(
				contactId: string,
				etag: string,
				params?: DeleteManagerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/managers/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the manager address link.
			 */
			const locateManager = <TData = AxiosResponse<ContactsManager>>(
				contactId: string,
				etag: string,
				params?: LocateManagerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/managers/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the contact's manager address link details
			 */
			const updateManager2 = <TData = AxiosResponse<ContactsManagerList>>(
				contactId: string,
				etag: string,
				updateManager2Body: UpdateManager2Body,
				params?: UpdateManager2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/managers/${etag}`,
					updateManager2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the contact's manager address link details
			 */
			const updateManager = <TData = AxiosResponse<ContactsManagerList>>(
				contactId: string,
				etag: string,
				updateManagerBody: UpdateManagerBody,
				params?: UpdateManagerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/managers/${etag}`,
					updateManagerBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				deleteManagers,
				listManagers,
				mergeManagers,
				resetManagers,
				deleteManager,
				locateManager,
				updateManager2,
				updateManager,
			};
		};
export type DeleteManagersResult = AxiosResponse<ContactsManager[]>;
export type ListManagersResult = AxiosResponse<ContactsManagerList>;
export type MergeManagersResult = AxiosResponse<ContactsManagerList>;
export type ResetManagersResult = AxiosResponse<ContactsManagerList>;
export type DeleteManagerResult = AxiosResponse<ContactsManager>;
export type LocateManagerResult = AxiosResponse<ContactsManager>;
export type UpdateManager2Result = AxiosResponse<ContactsManagerList>;
export type UpdateManagerResult = AxiosResponse<ContactsManagerList>;

// --- footer end
