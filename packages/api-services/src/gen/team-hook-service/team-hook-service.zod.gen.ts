/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const searchTeamHookParams = zod.object({
	team_id: zod.string(),
});

export const searchTeamHookQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
	schemaId: zod.array(zod.number()).optional(),
	event: zod
		.array(zod.enum(['teamHookEventUndefined', 'agent_status']))
		.optional(),
});

export const searchTeamHookResponseItemsItemEventDefault =
	'teamHookEventUndefined';

export const searchTeamHookResponse = zod.object({
	items: zod
		.array(
			zod.object({
				enabled: zod.boolean().optional(),
				event: zod
					.enum(['teamHookEventUndefined', 'agent_status'])
					.default(searchTeamHookResponseItemsItemEventDefault),
				id: zod.number().optional(),
				properties: zod.array(zod.string()).optional(),
				schema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const createTeamHookParams = zod.object({
	team_id: zod.string(),
});

export const createTeamHookBodyEventDefault = 'teamHookEventUndefined';

export const createTeamHookBody = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(createTeamHookBodyEventDefault),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createTeamHookResponseEventDefault = 'teamHookEventUndefined';

export const createTeamHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(createTeamHookResponseEventDefault),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const deleteTeamHookParams = zod.object({
	team_id: zod.string(),
	id: zod.number(),
});

export const deleteTeamHookResponseEventDefault = 'teamHookEventUndefined';

export const deleteTeamHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(deleteTeamHookResponseEventDefault),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const readTeamHookParams = zod.object({
	team_id: zod.string(),
	id: zod.number(),
});

export const readTeamHookResponseEventDefault = 'teamHookEventUndefined';

export const readTeamHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(readTeamHookResponseEventDefault),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchTeamHookParams = zod.object({
	team_id: zod.string(),
	id: zod.number(),
});

export const patchTeamHookBodyEventDefault = 'teamHookEventUndefined';

export const patchTeamHookBody = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(patchTeamHookBodyEventDefault),
	fields: zod.array(zod.string()).optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchTeamHookResponseEventDefault = 'teamHookEventUndefined';

export const patchTeamHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(patchTeamHookResponseEventDefault),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateTeamHookParams = zod.object({
	team_id: zod.string(),
	id: zod.number(),
});

export const updateTeamHookBodyEventDefault = 'teamHookEventUndefined';

export const updateTeamHookBody = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(updateTeamHookBodyEventDefault),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateTeamHookResponseEventDefault = 'teamHookEventUndefined';

export const updateTeamHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod
		.enum(['teamHookEventUndefined', 'agent_status'])
		.default(updateTeamHookResponseEventDefault),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
