/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	Create200,
	DataDataset,
	LocateRecords200,
	Update200,
	Update2200,
} from '.././_models';
import { TypeKind } from '.././_models';

export const getDeleteResponseMock = (
	overrideResponse: Partial<DataDataset> = {},
): DataDataset => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		{
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(TypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchRecordsResponseMock = (
	overrideResponse: Partial<DataDataset> = {},
): DataDataset => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		{
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(TypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCreateResponseMock = (): Create200 => ({});

export const getLocateRecordsResponseMock = (): LocateRecords200 => ({});

export const getUpdateResponseMock = (): Update200 => ({});

export const getUpdate2ResponseMock = (): Update2200 => ({});

export const getDeleteMockHandler = (
	overrideResponse?:
		| DataDataset
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<DataDataset> | DataDataset),
) => {
	return http.delete('*/v2/dataset/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchRecordsMockHandler = (
	overrideResponse?:
		| DataDataset
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<DataDataset> | DataDataset),
) => {
	return http.get('*/v2/dataset/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchRecordsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateMockHandler = (
	overrideResponse?:
		| Create200
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<Create200> | Create200),
) => {
	return http.post('*/v2/dataset/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLocateRecordsMockHandler = (
	overrideResponse?:
		| LocateRecords200
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<LocateRecords200> | LocateRecords200),
) => {
	return http.get('*/v2/dataset/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLocateRecordsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateMockHandler = (
	overrideResponse?:
		| Update200
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<Update200> | Update200),
) => {
	return http.patch('*/v2/dataset/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdate2MockHandler = (
	overrideResponse?:
		| Update2200
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<Update2200> | Update2200),
) => {
	return http.put('*/v2/dataset/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdate2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getRecordsMock = () => [
	getDeleteMockHandler(),
	getSearchRecordsMockHandler(),
	getCreateMockHandler(),
	getLocateRecordsMockHandler(),
	getUpdateMockHandler(),
	getUpdate2MockHandler(),
];
