/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type { EngineSearchSchemaVersionResponse } from '.././_models';

export const getSearchSchemaVersionResponseMock = (
	overrideResponse: Partial<EngineSearchSchemaVersionResponse> = {},
): EngineSearchSchemaVersionResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			note: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			schemaId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			version: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getSearchSchemaVersionMockHandler = (
	overrideResponse?:
		| EngineSearchSchemaVersionResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<EngineSearchSchemaVersionResponse>
				| EngineSearchSchemaVersionResponse),
) => {
	return http.get('*/routing/schema/:schemaId/versions', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchSchemaVersionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getSchemaVersionServiceMock = () => [
	getSearchSchemaVersionMockHandler(),
];
