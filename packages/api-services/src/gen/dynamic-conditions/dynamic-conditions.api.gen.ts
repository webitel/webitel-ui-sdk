/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	DynamicConditionsListConditionsParams,
	DynamicConditionsLocateConditionParams,
	WebitelContactsCondition,
	WebitelContactsConditionList,
	WebitelContactsDynamicConditionsCreateConditionBody,
	WebitelContactsInputCondition,
	WebitelContactsLocateConditionResponse,
} from '.././_models';

// --- header start
//

export const // --- title start
	getDynamicConditions =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Delete a condition
			 */
			const dynamicConditionsDeleteCondition = <
				TData = AxiosResponse<WebitelContactsCondition>,
			>(
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/groups/conditions/${id}`, options);
			};
			/**
			 * @summary Locate a condition by ID
			 */
			const dynamicConditionsLocateCondition = <
				TData = AxiosResponse<WebitelContactsLocateConditionResponse>,
			>(
				id: string,
				params?: DynamicConditionsLocateConditionParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/groups/conditions/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing condition
			 */
			const dynamicConditionsUpdateCondition2 = <
				TData = AxiosResponse<WebitelContactsCondition>,
			>(
				id: string,
				webitelContactsInputCondition: WebitelContactsInputCondition,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/groups/conditions/${id}`,
					webitelContactsInputCondition,
					options,
				);
			};
			/**
			 * @summary Update an existing condition
			 */
			const dynamicConditionsUpdateCondition = <
				TData = AxiosResponse<WebitelContactsCondition>,
			>(
				id: string,
				webitelContactsInputCondition: WebitelContactsInputCondition,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/groups/conditions/${id}`,
					webitelContactsInputCondition,
					options,
				);
			};
			/**
			 * @summary Retrieve a list of conditions
			 */
			const dynamicConditionsListConditions = <
				TData = AxiosResponse<WebitelContactsConditionList>,
			>(
				groupId: string,
				params?: DynamicConditionsListConditionsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/groups/${groupId}/conditions`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create a new condition
			 */
			const dynamicConditionsCreateCondition = <
				TData = AxiosResponse<WebitelContactsCondition>,
			>(
				groupId: string,
				webitelContactsDynamicConditionsCreateConditionBody: WebitelContactsDynamicConditionsCreateConditionBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/groups/${groupId}/conditions`,
					webitelContactsDynamicConditionsCreateConditionBody,
					options,
				);
			};

			// --- footer start
			return {
				dynamicConditionsDeleteCondition,
				dynamicConditionsLocateCondition,
				dynamicConditionsUpdateCondition2,
				dynamicConditionsUpdateCondition,
				dynamicConditionsListConditions,
				dynamicConditionsCreateCondition,
			};
		};
export type DynamicConditionsDeleteConditionResult =
	AxiosResponse<WebitelContactsCondition>;
export type DynamicConditionsLocateConditionResult =
	AxiosResponse<WebitelContactsLocateConditionResponse>;
export type DynamicConditionsUpdateCondition2Result =
	AxiosResponse<WebitelContactsCondition>;
export type DynamicConditionsUpdateConditionResult =
	AxiosResponse<WebitelContactsCondition>;
export type DynamicConditionsListConditionsResult =
	AxiosResponse<WebitelContactsConditionList>;
export type DynamicConditionsCreateConditionResult =
	AxiosResponse<WebitelContactsCondition>;

// --- footer end
