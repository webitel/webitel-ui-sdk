/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Delete a condition
 */
export const deleteConditionParams = zod.object({
	id: zod
		.string()
		.describe(
			'The unique ID of the condition to delete.\n\nUnique ID of the condition.',
		),
});

export const deleteConditionResponse = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	createdAt: zod
		.string()
		.optional()
		.describe(
			'The timestamp (in milliseconds) of when the condition was created.',
		),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	expression: zod
		.string()
		.optional()
		.describe('The query or condition expression used to evaluate the group.'),
	group: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	id: zod.string().optional().describe('The unique ID of the condition.'),
	updatedAt: zod
		.string()
		.optional()
		.describe('The timestamp (in milliseconds) of the last update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

/**
 * @summary Locate a condition by ID
 */
export const locateConditionParams = zod.object({
	id: zod.string().describe('Unique ID of the condition.'),
});

export const locateConditionQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const locateConditionResponse = zod
	.object({
		condition: zod
			.object({
				assignee: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				createdAt: zod
					.string()
					.optional()
					.describe(
						'The timestamp (in milliseconds) of when the condition was created.',
					),
				createdBy: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				expression: zod
					.string()
					.optional()
					.describe(
						'The query or condition expression used to evaluate the group.',
					),
				group: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				id: zod.string().optional().describe('The unique ID of the condition.'),
				updatedAt: zod
					.string()
					.optional()
					.describe('The timestamp (in milliseconds) of the last update.'),
				updatedBy: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
			})
			.optional(),
	})
	.describe('Response message for locating a condition by ID.');

/**
 * @summary Update an existing condition
 */
export const updateCondition2Params = zod.object({
	id: zod.string().describe('The unique ID of the condition to update.'),
});

export const updateCondition2Body = zod
	.object({
		assignee: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		expression: zod
			.string()
			.optional()
			.describe(
				'The query or condition expression used to evaluate the group.',
			),
		group: zod
			.string()
			.optional()
			.describe(
				'The ID of the static group that should be assigned if the condition is met.',
			),
		position: zod
			.object({
				condDown: zod.string().optional(),
				condUp: zod.string().optional(),
			})
			.optional()
			.describe('Position details for conditions in the group.'),
	})
	.describe('Input message for creating/updating a condition.');

export const updateCondition2Response = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	createdAt: zod
		.string()
		.optional()
		.describe(
			'The timestamp (in milliseconds) of when the condition was created.',
		),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	expression: zod
		.string()
		.optional()
		.describe('The query or condition expression used to evaluate the group.'),
	group: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	id: zod.string().optional().describe('The unique ID of the condition.'),
	updatedAt: zod
		.string()
		.optional()
		.describe('The timestamp (in milliseconds) of the last update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

/**
 * @summary Update an existing condition
 */
export const updateConditionParams = zod.object({
	id: zod.string().describe('The unique ID of the condition to update.'),
});

export const updateConditionBody = zod
	.object({
		assignee: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		expression: zod
			.string()
			.optional()
			.describe(
				'The query or condition expression used to evaluate the group.',
			),
		group: zod
			.string()
			.optional()
			.describe(
				'The ID of the static group that should be assigned if the condition is met.',
			),
		position: zod
			.object({
				condDown: zod.string().optional(),
				condUp: zod.string().optional(),
			})
			.optional()
			.describe('Position details for conditions in the group.'),
	})
	.describe('Input message for creating/updating a condition.');

export const updateConditionResponse = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	createdAt: zod
		.string()
		.optional()
		.describe(
			'The timestamp (in milliseconds) of when the condition was created.',
		),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	expression: zod
		.string()
		.optional()
		.describe('The query or condition expression used to evaluate the group.'),
	group: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	id: zod.string().optional().describe('The unique ID of the condition.'),
	updatedAt: zod
		.string()
		.optional()
		.describe('The timestamp (in milliseconds) of the last update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

/**
 * @summary Retrieve a list of conditions
 */
export const listConditionsParams = zod.object({
	group_id: zod
		.string()
		.describe('The ID of the group to which the conditions belong.'),
});

export const listConditionsQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	q: zod.string().optional().describe('Search term for conditions.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
});

export const listConditionsResponse = zod
	.object({
		items: zod
			.array(
				zod.object({
					assignee: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					createdAt: zod
						.string()
						.optional()
						.describe(
							'The timestamp (in milliseconds) of when the condition was created.',
						),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					expression: zod
						.string()
						.optional()
						.describe(
							'The query or condition expression used to evaluate the group.',
						),
					group: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the condition.'),
					updatedAt: zod
						.string()
						.optional()
						.describe('The timestamp (in milliseconds) of the last update.'),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
				}),
			)
			.optional()
			.describe('List of conditions.'),
		next: zod.boolean().optional().describe('Have more records.'),
		page: zod
			.number()
			.optional()
			.describe('Page number of the partial result.'),
	})
	.describe('A list of Conditions.');

/**
 * @summary Create a new condition
 */
export const createConditionParams = zod.object({
	group_id: zod
		.string()
		.describe('The ID of the group to which the condition belongs.'),
});

export const createConditionBody = zod
	.object({
		assignee: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
		expression: zod
			.string()
			.optional()
			.describe(
				'The query or condition expression used to evaluate the group.',
			),
		group: zod
			.object({
				id: zod.string().optional().describe('Reference Object unique ID.'),
				name: zod
					.string()
					.optional()
					.describe('Reference Object display name.'),
				type: zod
					.string()
					.optional()
					.describe('Reference Object well-known type.'),
			})
			.optional()
			.describe(
				'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
			),
	})
	.describe('Request message for creating a new condition.');

export const createConditionResponse = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	createdAt: zod
		.string()
		.optional()
		.describe(
			'The timestamp (in milliseconds) of when the condition was created.',
		),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	expression: zod
		.string()
		.optional()
		.describe('The query or condition expression used to evaluate the group.'),
	group: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	id: zod.string().optional().describe('The unique ID of the condition.'),
	updatedAt: zod
		.string()
		.optional()
		.describe('The timestamp (in milliseconds) of the last update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});
