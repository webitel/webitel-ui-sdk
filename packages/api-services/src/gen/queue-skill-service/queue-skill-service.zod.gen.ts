/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const searchQueueSkillParams = zod.object({
	queue_id: zod.number(),
});

export const searchQueueSkillQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
	skillId: zod.array(zod.number()).optional(),
	bucketId: zod.array(zod.number()).optional(),
	lvl: zod.array(zod.number()).optional(),
	minCapacity: zod.array(zod.number()).optional(),
	maxCapacity: zod.array(zod.number()).optional(),
	enabled: zod.boolean().optional(),
});

export const searchQueueSkillResponse = zod.object({
	items: zod
		.array(
			zod.object({
				buckets: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				enabled: zod.boolean().optional(),
				id: zod.number().optional(),
				lvl: zod.number().optional(),
				maxCapacity: zod.number().optional(),
				minCapacity: zod.number().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const createQueueSkillParams = zod.object({
	queue_id: zod.number(),
});

export const createQueueSkillBody = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createQueueSkillResponse = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const deleteQueueSkillParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const deleteQueueSkillResponse = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const readQueueSkillParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const readQueueSkillResponse = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchQueueSkillParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const patchQueueSkillBody = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchQueueSkillResponse = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateQueueSkillParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const updateQueueSkillBody = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateQueueSkillResponse = zod.object({
	buckets: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	lvl: zod.number().optional(),
	maxCapacity: zod.number().optional(),
	minCapacity: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
