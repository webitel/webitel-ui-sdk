/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type { EngineFeedback } from '.././_models';

export const getGetFeedbackResponseMock = (
	overrideResponse: Partial<EngineFeedback> = {},
): EngineFeedback => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	payload: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	rating: faker.helpers.arrayElement([
		faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateFeedbackResponseMock = (
	overrideResponse: Partial<EngineFeedback> = {},
): EngineFeedback => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	payload: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	rating: faker.helpers.arrayElement([
		faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
		undefined,
	]),
	...overrideResponse,
});

export const getGetFeedbackMockHandler = (
	overrideResponse?:
		| EngineFeedback
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineFeedback> | EngineFeedback),
) => {
	return http.get('*/feedback', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getGetFeedbackResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateFeedbackMockHandler = (
	overrideResponse?:
		| EngineFeedback
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineFeedback> | EngineFeedback),
) => {
	return http.post('*/feedback', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateFeedbackResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getFeedbackServiceMock = () => [
	getGetFeedbackMockHandler(),
	getCreateFeedbackMockHandler(),
];
