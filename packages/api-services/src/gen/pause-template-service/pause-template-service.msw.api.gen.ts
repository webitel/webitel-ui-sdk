/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	WfmCreatePauseTemplateResponse,
	WfmDeletePauseTemplateResponse,
	WfmReadPauseTemplateResponse,
	WfmSearchPauseTemplateResponse,
	WfmUpdatePauseTemplateResponse,
} from '.././_models';

export const getPauseTemplateServiceSearchPauseTemplateResponseMock = (
	overrideResponse: Partial<WfmSearchPauseTemplateResponse> = {},
): WfmSearchPauseTemplateResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			causes: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					cause: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getPauseTemplateServiceCreatePauseTemplateResponseMock = (
	overrideResponse: Partial<WfmCreatePauseTemplateResponse> = {},
): WfmCreatePauseTemplateResponse => ({
	item: faker.helpers.arrayElement([
		{
			causes: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					cause: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPauseTemplateServiceDeletePauseTemplateResponseMock = (
	overrideResponse: Partial<WfmDeletePauseTemplateResponse> = {},
): WfmDeletePauseTemplateResponse => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getPauseTemplateServiceReadPauseTemplateResponseMock = (
	overrideResponse: Partial<WfmReadPauseTemplateResponse> = {},
): WfmReadPauseTemplateResponse => ({
	item: faker.helpers.arrayElement([
		{
			causes: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					cause: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPauseTemplateServiceUpdatePauseTemplateResponseMock = (
	overrideResponse: Partial<WfmUpdatePauseTemplateResponse> = {},
): WfmUpdatePauseTemplateResponse => ({
	item: faker.helpers.arrayElement([
		{
			causes: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					cause: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPauseTemplateServiceSearchPauseTemplateMockHandler = (
	overrideResponse?:
		| WfmSearchPauseTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmSearchPauseTemplateResponse>
				| WfmSearchPauseTemplateResponse),
) => {
	return http.get('*/wfm/lookups/pause_templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPauseTemplateServiceSearchPauseTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPauseTemplateServiceCreatePauseTemplateMockHandler = (
	overrideResponse?:
		| WfmCreatePauseTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<WfmCreatePauseTemplateResponse>
				| WfmCreatePauseTemplateResponse),
) => {
	return http.post('*/wfm/lookups/pause_templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPauseTemplateServiceCreatePauseTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPauseTemplateServiceDeletePauseTemplateMockHandler = (
	overrideResponse?:
		| WfmDeletePauseTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) =>
				| Promise<WfmDeletePauseTemplateResponse>
				| WfmDeletePauseTemplateResponse),
) => {
	return http.delete('*/wfm/lookups/pause_templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPauseTemplateServiceDeletePauseTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPauseTemplateServiceReadPauseTemplateMockHandler = (
	overrideResponse?:
		| WfmReadPauseTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmReadPauseTemplateResponse>
				| WfmReadPauseTemplateResponse),
) => {
	return http.get('*/wfm/lookups/pause_templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPauseTemplateServiceReadPauseTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPauseTemplateServiceUpdatePauseTemplateMockHandler = (
	overrideResponse?:
		| WfmUpdatePauseTemplateResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) =>
				| Promise<WfmUpdatePauseTemplateResponse>
				| WfmUpdatePauseTemplateResponse),
) => {
	return http.put('*/wfm/lookups/pause_templates/item.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPauseTemplateServiceUpdatePauseTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getPauseTemplateServiceMock = () => [
	getPauseTemplateServiceSearchPauseTemplateMockHandler(),
	getPauseTemplateServiceCreatePauseTemplateMockHandler(),
	getPauseTemplateServiceDeletePauseTemplateMockHandler(),
	getPauseTemplateServiceReadPauseTemplateMockHandler(),
	getPauseTemplateServiceUpdatePauseTemplateMockHandler(),
];
