/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	PhonesDeletePhoneParams,
	PhonesDeletePhonesParams,
	PhonesListPhonesParams,
	PhonesLocatePhoneParams,
	PhonesMergePhonesParams,
	PhonesResetPhonesParams,
	PhonesUpdatePhone2Body,
	PhonesUpdatePhone2Params,
	PhonesUpdatePhoneBody,
	PhonesUpdatePhoneParams,
	WebitelContactsInputPhoneNumber,
	WebitelContactsPhoneList,
	WebitelContactsPhoneNumber,
} from '.././_models';

// --- header start
//

export const // --- title start
	getPhones =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove the Contact's phone number association(s)
			 */
			const phonesDeletePhones = <
				TData = AxiosResponse<WebitelContactsPhoneList>,
			>(
				contactId: string,
				params: PhonesDeletePhonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/phones`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Search phone number(s)
			 */
			const phonesListPhones = <
				TData = AxiosResponse<WebitelContactsPhoneList>,
			>(
				contactId: string,
				params?: PhonesListPhonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/phones`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate phone number(s) with the Contact
			 */
			const phonesMergePhones = <
				TData = AxiosResponse<WebitelContactsPhoneList>,
			>(
				contactId: string,
				webitelContactsInputPhoneNumber: WebitelContactsInputPhoneNumber[],
				params?: PhonesMergePhonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/phones`,
					webitelContactsInputPhoneNumber,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Reset the Contact's phone numbers to fit given data set.
			 */
			const phonesResetPhones = <
				TData = AxiosResponse<WebitelContactsPhoneList>,
			>(
				contactId: string,
				webitelContactsInputPhoneNumber: WebitelContactsInputPhoneNumber[],
				params?: PhonesResetPhonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/phones`,
					webitelContactsInputPhoneNumber,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the Contact's phone number
			 */
			const phonesDeletePhone = <
				TData = AxiosResponse<WebitelContactsPhoneNumber>,
			>(
				contactId: string,
				etag: string,
				params?: PhonesDeletePhoneParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/phones/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the Contact's phone number association.
			 */
			const phonesLocatePhone = <
				TData = AxiosResponse<WebitelContactsPhoneNumber>,
			>(
				contactId: string,
				etag: string,
				params?: PhonesLocatePhoneParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/phones/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the Contact's phone number association details
			 */
			const phonesUpdatePhone2 = <
				TData = AxiosResponse<WebitelContactsPhoneList>,
			>(
				contactId: string,
				etag: string,
				phonesUpdatePhone2Body: PhonesUpdatePhone2Body,
				params?: PhonesUpdatePhone2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/phones/${etag}`,
					phonesUpdatePhone2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the Contact's phone number association details
			 */
			const phonesUpdatePhone = <
				TData = AxiosResponse<WebitelContactsPhoneList>,
			>(
				contactId: string,
				etag: string,
				phonesUpdatePhoneBody: PhonesUpdatePhoneBody,
				params?: PhonesUpdatePhoneParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/phones/${etag}`,
					phonesUpdatePhoneBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				phonesDeletePhones,
				phonesListPhones,
				phonesMergePhones,
				phonesResetPhones,
				phonesDeletePhone,
				phonesLocatePhone,
				phonesUpdatePhone2,
				phonesUpdatePhone,
			};
		};
export type PhonesDeletePhonesResult = AxiosResponse<WebitelContactsPhoneList>;
export type PhonesListPhonesResult = AxiosResponse<WebitelContactsPhoneList>;
export type PhonesMergePhonesResult = AxiosResponse<WebitelContactsPhoneList>;
export type PhonesResetPhonesResult = AxiosResponse<WebitelContactsPhoneList>;
export type PhonesDeletePhoneResult = AxiosResponse<WebitelContactsPhoneNumber>;
export type PhonesLocatePhoneResult = AxiosResponse<WebitelContactsPhoneNumber>;
export type PhonesUpdatePhone2Result = AxiosResponse<WebitelContactsPhoneList>;
export type PhonesUpdatePhoneResult = AxiosResponse<WebitelContactsPhoneList>;

// --- footer end
