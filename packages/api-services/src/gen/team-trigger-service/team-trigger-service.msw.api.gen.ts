/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	EngineListTeamTrigger,
	EngineRunTeamTriggerResponse,
	EngineTeamTrigger,
} from '.././_models';

export const getSearchAgentTriggerResponseMock = (
	overrideResponse: Partial<EngineListTeamTrigger> = {},
): EngineListTeamTrigger => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			schema: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getRunTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineRunTeamTriggerResponse> = {},
): EngineRunTeamTriggerResponse => ({
	jobId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getSearchTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineListTeamTrigger> = {},
): EngineListTeamTrigger => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			schema: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineTeamTrigger> = {},
): EngineTeamTrigger => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineTeamTrigger> = {},
): EngineTeamTrigger => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineTeamTrigger> = {},
): EngineTeamTrigger => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineTeamTrigger> = {},
): EngineTeamTrigger => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateTeamTriggerResponseMock = (
	overrideResponse: Partial<EngineTeamTrigger> = {},
): EngineTeamTrigger => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchAgentTriggerMockHandler = (
	overrideResponse?:
		| EngineListTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListTeamTrigger> | EngineListTeamTrigger),
) => {
	return http.get('*/call_center/teams/triggers/agent', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchAgentTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getRunTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineRunTeamTriggerResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<EngineRunTeamTriggerResponse>
				| EngineRunTeamTriggerResponse),
) => {
	return http.post('*/call_center/teams/triggers/:triggerId', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getRunTeamTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineListTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListTeamTrigger> | EngineListTeamTrigger),
) => {
	return http.get('*/call_center/teams/:teamId/triggers', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchTeamTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineTeamTrigger> | EngineTeamTrigger),
) => {
	return http.post('*/call_center/teams/:teamId/triggers', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateTeamTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineTeamTrigger> | EngineTeamTrigger),
) => {
	return http.delete(
		'*/call_center/teams/:teamId/triggers/:id',
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getDeleteTeamTriggerResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		},
	);
};

export const getReadTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineTeamTrigger> | EngineTeamTrigger),
) => {
	return http.get('*/call_center/teams/:teamId/triggers/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadTeamTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineTeamTrigger> | EngineTeamTrigger),
) => {
	return http.patch(
		'*/call_center/teams/:teamId/triggers/:id',
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getPatchTeamTriggerResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		},
	);
};

export const getUpdateTeamTriggerMockHandler = (
	overrideResponse?:
		| EngineTeamTrigger
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineTeamTrigger> | EngineTeamTrigger),
) => {
	return http.put('*/call_center/teams/:teamId/triggers/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateTeamTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getTeamTriggerServiceMock = () => [
	getSearchAgentTriggerMockHandler(),
	getRunTeamTriggerMockHandler(),
	getSearchTeamTriggerMockHandler(),
	getCreateTeamTriggerMockHandler(),
	getDeleteTeamTriggerMockHandler(),
	getReadTeamTriggerMockHandler(),
	getPatchTeamTriggerMockHandler(),
	getUpdateTeamTriggerMockHandler(),
];
