/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Retrieve a list of catalogs or search catalogs
 */
export const listCatalogsQueryParams = zod.object({
	page: zod.number().optional().describe('Page number for pagination'),
	size: zod.number().optional().describe('Number of records per page'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe(
			'Fields to be retrieved as a result.\nIf the user passes "-" as the value for fields,\nit will retrieve all available fields for each catalog.',
		),
	sort: zod.string().optional().describe('Sorting options by fields'),
	id: zod
		.array(zod.string())
		.optional()
		.describe('List of IDs to filter the catalogs'),
	query: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
	state: zod
		.boolean()
		.optional()
		.describe('Filter by state (true for active, false for inactive)'),
	depth: zod
		.string()
		.optional()
		.describe(
			'Filter by the depth of the hierarchy to retrieve services.\nThe depth indicates how many ancestor levels of services\nwill be included for each catalog.\n- A depth of 0 includes only the direct catalog.\n- A depth of 1 includes the catalog and its immediate services.\n- By default the depth is limited by 3,\n  meaning all nested services and sub-services will be included.',
		),
	subFields: zod
		.array(zod.string())
		.optional()
		.describe(
			'Fields to be retrieved as a result for [SUBSERVICES].\nIf the user passes "-" as the value for fields,\nit will retrieve all available fields for each catalog subservices.',
		),
	hasSubservices: zod
		.boolean()
		.optional()
		.describe('Filter catalogs with subservices'),
});

export const listCatalogsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				closeReasonGroup: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				prefix: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod
					.array(
						zod.object({
							assignee: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							catalogId: zod.string().optional(),
							code: zod.string().optional(),
							createdAt: zod.string().optional(),
							createdBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							description: zod.string().optional(),
							group: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
									type: zod.string().optional(),
								})
								.optional(),
							id: zod.string().optional(),
							name: zod.string().optional(),
							rootId: zod.string().optional(),
							searched: zod.boolean().optional(),
							service: zod.array(zod.any()).optional(),
							sla: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							state: zod.boolean().optional(),
							updatedAt: zod.string().optional(),
							updatedBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				skills: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				status: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				teams: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Create a new catalog
 */
export const createCatalogQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const createCatalogBody = zod.object({
	closeReasonGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	code: zod.string().optional(),
	description: zod.string().optional(),
	name: zod.string().optional(),
	prefix: zod.string().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	status: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const createCatalogResponse = zod.object({
	closeReasonGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	code: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	prefix: zod.string().optional(),
	searched: zod.boolean().optional(),
	service: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				catalogId: zod.string().optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				group: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				rootId: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod.array(zod.any()).optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	status: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Delete a catalog
 */
export const deleteCatalogParams = zod.object({
	id: zod
		.array(zod.string())
		.min(1)
		.describe('ID of the catalog to be deleted'),
});

export const deleteCatalogResponse = zod.object({
	items: zod
		.array(
			zod.object({
				closeReasonGroup: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				prefix: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod
					.array(
						zod.object({
							assignee: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							catalogId: zod.string().optional(),
							code: zod.string().optional(),
							createdAt: zod.string().optional(),
							createdBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							description: zod.string().optional(),
							group: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
									type: zod.string().optional(),
								})
								.optional(),
							id: zod.string().optional(),
							name: zod.string().optional(),
							rootId: zod.string().optional(),
							searched: zod.boolean().optional(),
							service: zod.array(zod.any()).optional(),
							sla: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							state: zod.boolean().optional(),
							updatedAt: zod.string().optional(),
							updatedBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				skills: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				status: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				teams: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Locate a catalog by ID
 */
export const locateCatalogParams = zod.object({
	id: zod.string().describe('ID of the catalog to be located'),
});

export const locateCatalogQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe(
			'Fields to be retrieved as a result.\nIf the user passes "-" as the value for fields,\nit will retrieve all available fields for each catalog.',
		),
	subFields: zod
		.array(zod.string())
		.optional()
		.describe(
			'Fields to be retrieved as a result for [SUBSERVICES].\nIf the user passes "-" as the value for fields,\nit will retrieve all available fields for each catalog subservices.',
		),
});

export const locateCatalogResponse = zod.object({
	catalog: zod
		.object({
			closeReasonGroup: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			code: zod.string().optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			description: zod.string().optional(),
			id: zod.string().optional(),
			name: zod.string().optional(),
			prefix: zod.string().optional(),
			searched: zod.boolean().optional(),
			service: zod
				.array(
					zod.object({
						assignee: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						catalogId: zod.string().optional(),
						code: zod.string().optional(),
						createdAt: zod.string().optional(),
						createdBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						description: zod.string().optional(),
						group: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
								type: zod.string().optional(),
							})
							.optional(),
						id: zod.string().optional(),
						name: zod.string().optional(),
						rootId: zod.string().optional(),
						searched: zod.boolean().optional(),
						service: zod.array(zod.any()).optional(),
						sla: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						state: zod.boolean().optional(),
						updatedAt: zod.string().optional(),
						updatedBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					}),
				)
				.optional(),
			skills: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			sla: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			state: zod.boolean().optional(),
			status: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			teams: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing catalog
 */
export const updateCatalog2Params = zod.object({
	id: zod.string().describe('ID of the catalog to be updated'),
});

export const updateCatalog2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateCatalog2Body = zod.object({
	closeReasonGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	code: zod.string().optional(),
	description: zod.string().optional(),
	name: zod.string().optional(),
	prefix: zod.string().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	status: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const updateCatalog2Response = zod.object({
	closeReasonGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	code: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	prefix: zod.string().optional(),
	searched: zod.boolean().optional(),
	service: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				catalogId: zod.string().optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				group: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				rootId: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod.array(zod.any()).optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	status: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing catalog
 */
export const updateCatalogParams = zod.object({
	id: zod.string().describe('ID of the catalog to be updated'),
});

export const updateCatalogQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateCatalogBody = zod.object({
	closeReasonGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	code: zod.string().optional(),
	description: zod.string().optional(),
	name: zod.string().optional(),
	prefix: zod.string().optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	status: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const updateCatalogResponse = zod.object({
	closeReasonGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	code: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	prefix: zod.string().optional(),
	searched: zod.boolean().optional(),
	service: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				catalogId: zod.string().optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				group: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				rootId: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod.array(zod.any()).optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	skills: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	status: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
