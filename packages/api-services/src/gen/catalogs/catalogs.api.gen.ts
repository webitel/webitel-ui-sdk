/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	CasesCatalog,
	CasesCatalogList,
	CasesInputCatalog,
	CasesLocateCatalogResponse,
	CreateCatalogParams,
	ListCatalogsParams,
	LocateCatalogParams,
	UpdateCatalog2Params,
	UpdateCatalogParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getCatalogs =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Retrieve a list of catalogs or search catalogs
			 */
			const listCatalogs = <TData = AxiosResponse<CasesCatalogList>>(
				params?: ListCatalogsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/cases/catalogs', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create a new catalog
			 */
			const createCatalog = <TData = AxiosResponse<CasesCatalog>>(
				casesInputCatalog: CasesInputCatalog,
				params?: CreateCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/cases/catalogs', casesInputCatalog, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Delete a catalog
			 */
			const deleteCatalog = <TData = AxiosResponse<CasesCatalogList>>(
				id: string[],
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/cases/catalogs/${id}`, options);
			};
			/**
			 * @summary Locate a catalog by ID
			 */
			const locateCatalog = <TData = AxiosResponse<CasesLocateCatalogResponse>>(
				id: string,
				params?: LocateCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/cases/catalogs/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing catalog
			 */
			const updateCatalog2 = <TData = AxiosResponse<CasesCatalog>>(
				id: string,
				casesInputCatalog: CasesInputCatalog,
				params?: UpdateCatalog2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(`/cases/catalogs/${id}`, casesInputCatalog, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing catalog
			 */
			const updateCatalog = <TData = AxiosResponse<CasesCatalog>>(
				id: string,
				casesInputCatalog: CasesInputCatalog,
				params?: UpdateCatalogParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(`/cases/catalogs/${id}`, casesInputCatalog, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				listCatalogs,
				createCatalog,
				deleteCatalog,
				locateCatalog,
				updateCatalog2,
				updateCatalog,
			};
		};
export type ListCatalogsResult = AxiosResponse<CasesCatalogList>;
export type CreateCatalogResult = AxiosResponse<CasesCatalog>;
export type DeleteCatalogResult = AxiosResponse<CasesCatalogList>;
export type LocateCatalogResult = AxiosResponse<CasesLocateCatalogResponse>;
export type UpdateCatalog2Result = AxiosResponse<CasesCatalog>;
export type UpdateCatalogResult = AxiosResponse<CasesCatalog>;

// --- footer end
