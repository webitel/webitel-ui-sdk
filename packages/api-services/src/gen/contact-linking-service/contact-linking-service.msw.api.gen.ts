/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type { WebitelChatEmptyResponse, WebitelChatLookup } from '.././_models';

export const getContactLinkingServiceCreateContactFromConversationResponseMock =
	(overrideResponse: Partial<WebitelChatLookup> = {}): WebitelChatLookup => ({
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		...overrideResponse,
	});

export const getContactLinkingServiceLinkContactToClientResponseMock =
	(): WebitelChatEmptyResponse => ({});

export const getContactLinkingServiceCreateContactFromConversationMockHandler =
	(
		overrideResponse?:
			| WebitelChatLookup
			| ((
					info: Parameters<Parameters<typeof http.post>[1]>[0],
			  ) => Promise<WebitelChatLookup> | WebitelChatLookup),
	) => {
		return http.post('*/chat/:conversationId/contact', async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getContactLinkingServiceCreateContactFromConversationResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		});
	};

export const getContactLinkingServiceLinkContactToClientMockHandler = (
	overrideResponse?:
		| WebitelChatEmptyResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelChatEmptyResponse> | WebitelChatEmptyResponse),
) => {
	return http.post('*/chat/:conversationId/link', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getContactLinkingServiceLinkContactToClientResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getContactLinkingServiceMock = () => [
	getContactLinkingServiceCreateContactFromConversationMockHandler(),
	getContactLinkingServiceLinkContactToClientMockHandler(),
];
