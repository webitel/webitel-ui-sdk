/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { WebitelProtoDataTypeKind } from '.././_models';
import type {
	WebitelProtoDataStruct,
	WebitelProtoDataStructList,
} from '.././_models';

export const getExtensionsDeleteType2ResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStructList> = {},
): WebitelProtoDataStructList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha(20)),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha(20)),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			objclass: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getExtensionsSearchTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStructList> = {},
): WebitelProtoDataStructList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha(20)),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha(20)),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			objclass: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getExtensionsDeleteTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStructList> = {},
): WebitelProtoDataStructList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha(20)),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha(20)),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			objclass: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getExtensionsLocateTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStruct> = {},
): WebitelProtoDataStruct => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	administered: faker.helpers.arrayElement([
		faker.datatype.boolean(),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	display: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	extendable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fields: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			always: faker.helpers.arrayElement([{}, undefined]),
			binary: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			bool: faker.helpers.arrayElement([{}, undefined]),
			datetime: faker.helpers.arrayElement([
				{
					epoch: faker.helpers.arrayElement([faker.number.float(), undefined]),
					format: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					zone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([{}, undefined]),
			disabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			duration: faker.helpers.arrayElement([
				{
					format: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float32: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float64: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			hidden: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			hint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			int: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			kind: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
				undefined,
			]),
			lookup: faker.helpers.arrayElement([
				{
					display: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					query: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			required: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			richtext: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			string: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	indexes: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: {
				fields: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha(20)),
					undefined,
				]),
				include: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha(20)),
					undefined,
				]),
				unique: faker.helpers.arrayElement([
					faker.datatype.boolean(),
					undefined,
				]),
			},
		},
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	objclass: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	primary: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	readonly: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	repo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getExtensionsCreateTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStruct> = {},
): WebitelProtoDataStruct => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	administered: faker.helpers.arrayElement([
		faker.datatype.boolean(),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	display: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	extendable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fields: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			always: faker.helpers.arrayElement([{}, undefined]),
			binary: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			bool: faker.helpers.arrayElement([{}, undefined]),
			datetime: faker.helpers.arrayElement([
				{
					epoch: faker.helpers.arrayElement([faker.number.float(), undefined]),
					format: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					zone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([{}, undefined]),
			disabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			duration: faker.helpers.arrayElement([
				{
					format: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float32: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float64: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			hidden: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			hint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			int: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			kind: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
				undefined,
			]),
			lookup: faker.helpers.arrayElement([
				{
					display: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					query: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			required: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			richtext: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			string: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	indexes: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: {
				fields: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha(20)),
					undefined,
				]),
				include: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha(20)),
					undefined,
				]),
				unique: faker.helpers.arrayElement([
					faker.datatype.boolean(),
					undefined,
				]),
			},
		},
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	objclass: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	primary: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	readonly: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	repo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getExtensionsUpdateTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStruct> = {},
): WebitelProtoDataStruct => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	administered: faker.helpers.arrayElement([
		faker.datatype.boolean(),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	display: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	extendable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fields: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			always: faker.helpers.arrayElement([{}, undefined]),
			binary: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			bool: faker.helpers.arrayElement([{}, undefined]),
			datetime: faker.helpers.arrayElement([
				{
					epoch: faker.helpers.arrayElement([faker.number.float(), undefined]),
					format: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					zone: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([{}, undefined]),
			disabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			duration: faker.helpers.arrayElement([
				{
					format: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float32: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float64: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					max: faker.helpers.arrayElement([faker.number.float(), undefined]),
					min: faker.helpers.arrayElement([faker.number.float(), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			hidden: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			hint: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			int: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			kind: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
				undefined,
			]),
			lookup: faker.helpers.arrayElement([
				{
					display: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					query: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			required: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			richtext: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			string: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					min: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	indexes: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: {
				fields: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha(20)),
					undefined,
				]),
				include: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha(20)),
					undefined,
				]),
				unique: faker.helpers.arrayElement([
					faker.datatype.boolean(),
					undefined,
				]),
			},
		},
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	objclass: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	path: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	primary: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	readonly: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	repo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getExtensionsDeleteType2MockHandler = (
	overrideResponse?:
		| WebitelProtoDataStructList
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelProtoDataStructList> | WebitelProtoDataStructList),
) => {
	return http.delete('*/types/extensions', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getExtensionsDeleteType2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getExtensionsSearchTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStructList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelProtoDataStructList> | WebitelProtoDataStructList),
) => {
	return http.get('*/types/extensions', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getExtensionsSearchTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getExtensionsDeleteTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStructList
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelProtoDataStructList> | WebitelProtoDataStructList),
) => {
	return http.delete('*/types/extensions/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getExtensionsDeleteTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getExtensionsLocateTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStruct
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelProtoDataStruct> | WebitelProtoDataStruct),
) => {
	return http.get('*/types/extensions/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getExtensionsLocateTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getExtensionsCreateTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStruct
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelProtoDataStruct> | WebitelProtoDataStruct),
) => {
	return http.post('*/types/extensions/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getExtensionsCreateTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getExtensionsUpdateTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStruct
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelProtoDataStruct> | WebitelProtoDataStruct),
) => {
	return http.put('*/types/extensions/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getExtensionsUpdateTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getExtensionsMock = () => [
	getExtensionsDeleteType2MockHandler(),
	getExtensionsSearchTypeMockHandler(),
	getExtensionsDeleteTypeMockHandler(),
	getExtensionsLocateTypeMockHandler(),
	getExtensionsCreateTypeMockHandler(),
	getExtensionsUpdateTypeMockHandler(),
];
