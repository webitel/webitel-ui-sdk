/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	CasesInputSLA,
	CasesInputSLABody,
	CasesLocateSLAResponse,
	CasesSLA,
	CasesSLAList,
	CreateSLAParams,
	ListSLAsParams,
	LocateSLAParams,
	UpdateSLA2Params,
	UpdateSLAParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getSlas =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Retrieve a list of SLAs or search SLA conditions
			 */
			const listSLAs = <TData = AxiosResponse<CasesSLAList>>(
				params?: ListSLAsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/cases/slas', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create a new SLA
			 */
			const createSLA = <TData = AxiosResponse<CasesSLA>>(
				casesInputSLABody: CasesInputSLABody,
				params?: CreateSLAParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/cases/slas', casesInputSLABody, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Delete an SLA
			 */
			const deleteSLA = <TData = AxiosResponse<CasesSLA>>(
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/cases/slas/${id}`, options);
			};
			/**
			 * @summary Locate an SLA by ID
			 */
			const locateSLA = <TData = AxiosResponse<CasesLocateSLAResponse>>(
				id: string,
				params?: LocateSLAParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/cases/slas/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing SLA
			 */
			const updateSLA2 = <TData = AxiosResponse<CasesSLA>>(
				id: string,
				casesInputSLA: CasesInputSLA,
				params?: UpdateSLA2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(`/cases/slas/${id}`, casesInputSLA, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing SLA
			 */
			const updateSLA = <TData = AxiosResponse<CasesSLA>>(
				id: string,
				casesInputSLA: CasesInputSLA,
				params?: UpdateSLAParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(`/cases/slas/${id}`, casesInputSLA, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				listSLAs,
				createSLA,
				deleteSLA,
				locateSLA,
				updateSLA2,
				updateSLA,
			};
		};
export type ListSLAsResult = AxiosResponse<CasesSLAList>;
export type CreateSLAResult = AxiosResponse<CasesSLA>;
export type DeleteSLAResult = AxiosResponse<CasesSLA>;
export type LocateSLAResult = AxiosResponse<CasesLocateSLAResponse>;
export type UpdateSLA2Result = AxiosResponse<CasesSLA>;
export type UpdateSLAResult = AxiosResponse<CasesSLA>;

// --- footer end
