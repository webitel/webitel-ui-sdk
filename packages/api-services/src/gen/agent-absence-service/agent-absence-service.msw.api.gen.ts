/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	WfmCreateAgentAbsenceResponse,
	WfmCreateAgentsAbsencesResponse,
	WfmDeleteAgentAbsenceResponse,
	WfmReadAgentAbsenceResponse,
	WfmSearchAgentAbsenceResponse,
	WfmSearchAgentsAbsencesResponse,
	WfmUpdateAgentAbsenceResponse,
} from '.././_models';
import { WfmAbsenceType } from '.././_models';

export const getAgentAbsenceServiceSearchAgentsAbsencesResponseMock = (
	overrideResponse: Partial<WfmSearchAgentsAbsencesResponse> = {},
): WfmSearchAgentsAbsencesResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			absences: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					absentAt: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					domainId: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					typeId: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WfmAbsenceType)),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			agent: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getAgentAbsenceServiceCreateAgentsAbsencesResponseMock = (
	overrideResponse: Partial<WfmCreateAgentsAbsencesResponse> = {},
): WfmCreateAgentsAbsencesResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			absences: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					absentAt: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					domainId: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					typeId: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WfmAbsenceType)),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			agent: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getAgentAbsenceServiceSearchAgentAbsenceResponseMock = (
	overrideResponse: Partial<WfmSearchAgentAbsenceResponse> = {},
): WfmSearchAgentAbsenceResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			absentAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			typeId: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmAbsenceType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getAgentAbsenceServiceCreateAgentAbsenceResponseMock = (
	overrideResponse: Partial<WfmCreateAgentAbsenceResponse> = {},
): WfmCreateAgentAbsenceResponse => ({
	item: faker.helpers.arrayElement([
		{
			absentAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			typeId: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmAbsenceType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getAgentAbsenceServiceDeleteAgentAbsenceResponseMock = (
	overrideResponse: Partial<WfmDeleteAgentAbsenceResponse> = {},
): WfmDeleteAgentAbsenceResponse => ({
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getAgentAbsenceServiceReadAgentAbsenceResponseMock = (
	overrideResponse: Partial<WfmReadAgentAbsenceResponse> = {},
): WfmReadAgentAbsenceResponse => ({
	item: faker.helpers.arrayElement([
		{
			absentAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			typeId: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmAbsenceType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getAgentAbsenceServiceUpdateAgentAbsenceResponseMock = (
	overrideResponse: Partial<WfmUpdateAgentAbsenceResponse> = {},
): WfmUpdateAgentAbsenceResponse => ({
	item: faker.helpers.arrayElement([
		{
			absentAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			typeId: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmAbsenceType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getAgentAbsenceServiceSearchAgentsAbsencesMockHandler = (
	overrideResponse?:
		| WfmSearchAgentsAbsencesResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmSearchAgentsAbsencesResponse>
				| WfmSearchAgentsAbsencesResponse),
) => {
	return http.get('*/wfm/agents/absences', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceSearchAgentsAbsencesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentAbsenceServiceCreateAgentsAbsencesMockHandler = (
	overrideResponse?:
		| WfmCreateAgentsAbsencesResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<WfmCreateAgentsAbsencesResponse>
				| WfmCreateAgentsAbsencesResponse),
) => {
	return http.post('*/wfm/agents/absences', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceCreateAgentsAbsencesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentAbsenceServiceSearchAgentAbsenceMockHandler = (
	overrideResponse?:
		| WfmSearchAgentAbsenceResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmSearchAgentAbsenceResponse>
				| WfmSearchAgentAbsenceResponse),
) => {
	return http.get('*/wfm/agents/:agentId/absences', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceSearchAgentAbsenceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentAbsenceServiceCreateAgentAbsenceMockHandler = (
	overrideResponse?:
		| WfmCreateAgentAbsenceResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<WfmCreateAgentAbsenceResponse>
				| WfmCreateAgentAbsenceResponse),
) => {
	return http.post('*/wfm/agents/:agentId/absences', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceCreateAgentAbsenceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentAbsenceServiceDeleteAgentAbsenceMockHandler = (
	overrideResponse?:
		| WfmDeleteAgentAbsenceResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) =>
				| Promise<WfmDeleteAgentAbsenceResponse>
				| WfmDeleteAgentAbsenceResponse),
) => {
	return http.delete('*/wfm/agents/:agentId/absences/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceDeleteAgentAbsenceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentAbsenceServiceReadAgentAbsenceMockHandler = (
	overrideResponse?:
		| WfmReadAgentAbsenceResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WfmReadAgentAbsenceResponse> | WfmReadAgentAbsenceResponse),
) => {
	return http.get('*/wfm/agents/:agentId/absences/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceReadAgentAbsenceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentAbsenceServiceUpdateAgentAbsenceMockHandler = (
	overrideResponse?:
		| WfmUpdateAgentAbsenceResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) =>
				| Promise<WfmUpdateAgentAbsenceResponse>
				| WfmUpdateAgentAbsenceResponse),
) => {
	return http.put('*/wfm/agents/:agentId/absences/item.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentAbsenceServiceUpdateAgentAbsenceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getAgentAbsenceServiceMock = () => [
	getAgentAbsenceServiceSearchAgentsAbsencesMockHandler(),
	getAgentAbsenceServiceCreateAgentsAbsencesMockHandler(),
	getAgentAbsenceServiceSearchAgentAbsenceMockHandler(),
	getAgentAbsenceServiceCreateAgentAbsenceMockHandler(),
	getAgentAbsenceServiceDeleteAgentAbsenceMockHandler(),
	getAgentAbsenceServiceReadAgentAbsenceMockHandler(),
	getAgentAbsenceServiceUpdateAgentAbsenceMockHandler(),
];
