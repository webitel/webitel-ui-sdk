/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	ApiCreateDeviceResponse,
	ApiDeleteDeviceResponse,
	ApiDeviceAuditResponse,
	ApiListRegistrationsResponse,
	ApiReadDeviceResponse,
	ApiSearchDeviceResponse,
	ApiUpdateDeviceResponse,
} from '.././_models';

export const getDevicesDeleteDevice2ResponseMock = (
	overrideResponse: Partial<ApiDeleteDeviceResponse> = {},
): ApiDeleteDeviceResponse => ({
	deleted: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesSearchDeviceResponseMock = (
	overrideResponse: Partial<ApiSearchDeviceResponse> = {},
): ApiSearchDeviceResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	size: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesCreateDeviceResponseMock = (
	overrideResponse: Partial<ApiCreateDeviceResponse> = {},
): ApiCreateDeviceResponse => ({
	device: faker.helpers.arrayElement([
		{
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesUpdateDevice2ResponseMock = (
	overrideResponse: Partial<ApiUpdateDeviceResponse> = {},
): ApiUpdateDeviceResponse => ({
	device: faker.helpers.arrayElement([
		{
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesUpdateDeviceResponseMock = (
	overrideResponse: Partial<ApiUpdateDeviceResponse> = {},
): ApiUpdateDeviceResponse => ({
	device: faker.helpers.arrayElement([
		{
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesListRegistrationsResponseMock = (
	overrideResponse: Partial<ApiListRegistrationsResponse> = {},
): ApiListRegistrationsResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			callid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			contact: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			device: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			expiresAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			instance: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			received: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			registerAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			socket: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			userAgent: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	size: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesSearchDeviceAuditResponseMock = (
	overrideResponse: Partial<ApiDeviceAuditResponse> = {},
): ApiDeviceAuditResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			device: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			loggedOut: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	size: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesDeleteDeviceResponseMock = (
	overrideResponse: Partial<ApiDeleteDeviceResponse> = {},
): ApiDeleteDeviceResponse => ({
	deleted: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesReadDeviceResponseMock = (
	overrideResponse: Partial<ApiReadDeviceResponse> = {},
): ApiReadDeviceResponse => ({
	device: faker.helpers.arrayElement([
		{
			account: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			brand: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			deletedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			deletedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			hotdesk: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			hotdesks: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => faker.string.alpha(20)),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ip: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			loggedIn: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mac: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			model: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			provision: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha(20),
				},
				undefined,
			]),
			reged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDevicesDeleteDevice2MockHandler = (
	overrideResponse?:
		| ApiDeleteDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ApiDeleteDeviceResponse> | ApiDeleteDeviceResponse),
) => {
	return http.delete('*/devices', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesDeleteDevice2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesSearchDeviceMockHandler = (
	overrideResponse?:
		| ApiSearchDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiSearchDeviceResponse> | ApiSearchDeviceResponse),
) => {
	return http.get('*/devices', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesSearchDeviceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesCreateDeviceMockHandler = (
	overrideResponse?:
		| ApiCreateDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ApiCreateDeviceResponse> | ApiCreateDeviceResponse),
) => {
	return http.post('*/devices', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesCreateDeviceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesUpdateDevice2MockHandler = (
	overrideResponse?:
		| ApiUpdateDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<ApiUpdateDeviceResponse> | ApiUpdateDeviceResponse),
) => {
	return http.patch('*/devices/device.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesUpdateDevice2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesUpdateDeviceMockHandler = (
	overrideResponse?:
		| ApiUpdateDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<ApiUpdateDeviceResponse> | ApiUpdateDeviceResponse),
) => {
	return http.put('*/devices/device.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesUpdateDeviceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesListRegistrationsMockHandler = (
	overrideResponse?:
		| ApiListRegistrationsResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<ApiListRegistrationsResponse>
				| ApiListRegistrationsResponse),
) => {
	return http.get('*/devices/device.id}/registered', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesListRegistrationsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesSearchDeviceAuditMockHandler = (
	overrideResponse?:
		| ApiDeviceAuditResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiDeviceAuditResponse> | ApiDeviceAuditResponse),
) => {
	return http.get('*/devices/device.id}/users/audit', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesSearchDeviceAuditResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesDeleteDeviceMockHandler = (
	overrideResponse?:
		| ApiDeleteDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ApiDeleteDeviceResponse> | ApiDeleteDeviceResponse),
) => {
	return http.delete('*/devices/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesDeleteDeviceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDevicesReadDeviceMockHandler = (
	overrideResponse?:
		| ApiReadDeviceResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiReadDeviceResponse> | ApiReadDeviceResponse),
) => {
	return http.get('*/devices/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDevicesReadDeviceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getDevicesMock = () => [
	getDevicesDeleteDevice2MockHandler(),
	getDevicesSearchDeviceMockHandler(),
	getDevicesCreateDeviceMockHandler(),
	getDevicesUpdateDevice2MockHandler(),
	getDevicesUpdateDeviceMockHandler(),
	getDevicesListRegistrationsMockHandler(),
	getDevicesSearchDeviceAuditMockHandler(),
	getDevicesDeleteDeviceMockHandler(),
	getDevicesReadDeviceMockHandler(),
];
