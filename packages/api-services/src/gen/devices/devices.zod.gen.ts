/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const devicesDeleteDevice2QueryParams = zod.object({
	id: zod.string().optional(),
	permanent: zod.boolean().optional(),
});

export const devicesDeleteDevice2BodyItem = zod.string();
export const devicesDeleteDevice2Body = zod.array(devicesDeleteDevice2BodyItem);

export const devicesDeleteDevice2Response = zod.object({
	deleted: zod
		.array(
			zod.object({
				account: zod.string().optional().describe('username'),
				brand: zod.string().optional().describe('vendor brand name'),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				deletedAt: zod.string().optional(),
				deletedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
				hotdesks: zod.array(zod.string()).optional(),
				id: zod.string().optional(),
				ip: zod.string().optional(),
				loggedIn: zod.string().optional(),
				mac: zod.string().optional(),
				model: zod.string().optional(),
				name: zod.string().optional().describe('display name'),
				password: zod.string().optional(),
				provision: zod.record(zod.string(), zod.string()).optional(),
				reged: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
			}),
		)
		.optional(),
});

export const devicesSearchDeviceQueryParams = zod.object({
	size: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 16'),
	page: zod.number().optional().describe('default: 1'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	ids: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Search Basic Filters ---------------------------\n\nselection: by unique identifier',
		),
	q: zod
		.string()
		.optional()
		.describe(
			'term-of-search: lookup[name,account,hotdesk,brand,model,mac,ip]',
		),
	name: zod
		.string()
		.optional()
		.describe("case-ignore substring match: ILIKE '*' - any; '?' - one"),
	access: zod
		.string()
		.optional()
		.describe(
			'[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!',
		),
	account: zod
		.string()
		.optional()
		.describe(
			"----- Device-Specific Filters ----------------\n\nsubstring like '%name%'",
		),
	hotdesk: zod
		.string()
		.optional()
		.describe('filter: has hotdesk (=pattern); is hotdesk (=*)'),
	userId: zod.string().optional().describe('Object ID'),
	userName: zod.string().optional().describe('Display Name'),
	mac: zod.string().optional().describe('filter: by MAC address'),
	ip: zod.string().optional().describe('filter: by IP address'),
});

export const devicesSearchDeviceResponse = zod.object({
	items: zod
		.array(
			zod.object({
				account: zod.string().optional().describe('username'),
				brand: zod.string().optional().describe('vendor brand name'),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				deletedAt: zod.string().optional(),
				deletedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
				hotdesks: zod.array(zod.string()).optional(),
				id: zod.string().optional(),
				ip: zod.string().optional(),
				loggedIn: zod.string().optional(),
				mac: zod.string().optional(),
				model: zod.string().optional(),
				name: zod.string().optional().describe('display name'),
				password: zod.string().optional(),
				provision: zod.record(zod.string(), zod.string()).optional(),
				reged: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
	size: zod.number().optional(),
});

export const devicesCreateDeviceBody = zod.object({
	account: zod.string().optional().describe('username'),
	brand: zod.string().optional().describe('vendor brand name'),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
	hotdesks: zod.array(zod.string()).optional(),
	id: zod.string().optional(),
	ip: zod.string().optional(),
	loggedIn: zod.string().optional(),
	mac: zod.string().optional(),
	model: zod.string().optional(),
	name: zod.string().optional().describe('display name'),
	password: zod.string().optional(),
	provision: zod.record(zod.string(), zod.string()).optional(),
	reged: zod.boolean().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
});

export const devicesCreateDeviceResponse = zod.object({
	device: zod
		.object({
			account: zod.string().optional().describe('username'),
			brand: zod.string().optional().describe('vendor brand name'),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
			hotdesks: zod.array(zod.string()).optional(),
			id: zod.string().optional(),
			ip: zod.string().optional(),
			loggedIn: zod.string().optional(),
			mac: zod.string().optional(),
			model: zod.string().optional(),
			name: zod.string().optional().describe('display name'),
			password: zod.string().optional(),
			provision: zod.record(zod.string(), zod.string()).optional(),
			reged: zod.boolean().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			user: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
		})
		.optional(),
});

export const devicesUpdateDevice2Params = zod.object({
	'device.id': zod.string().describe('object id'),
});

export const devicesUpdateDevice2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('PATCH: partial update'),
});

export const devicesUpdateDevice2Body = zod.object({
	account: zod.string().optional().describe('username'),
	brand: zod.string().optional().describe('vendor brand name'),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
	hotdesks: zod.array(zod.string()).optional(),
	ip: zod.string().optional(),
	loggedIn: zod.string().optional(),
	mac: zod.string().optional(),
	model: zod.string().optional(),
	name: zod.string().optional().describe('display name'),
	password: zod.string().optional(),
	provision: zod.record(zod.string(), zod.string()).optional(),
	reged: zod.boolean().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
});

export const devicesUpdateDevice2Response = zod.object({
	device: zod
		.object({
			account: zod.string().optional().describe('username'),
			brand: zod.string().optional().describe('vendor brand name'),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
			hotdesks: zod.array(zod.string()).optional(),
			id: zod.string().optional(),
			ip: zod.string().optional(),
			loggedIn: zod.string().optional(),
			mac: zod.string().optional(),
			model: zod.string().optional(),
			name: zod.string().optional().describe('display name'),
			password: zod.string().optional(),
			provision: zod.record(zod.string(), zod.string()).optional(),
			reged: zod.boolean().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			user: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
		})
		.optional(),
});

export const devicesUpdateDeviceParams = zod.object({
	'device.id': zod.string().describe('object id'),
});

export const devicesUpdateDeviceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('PATCH: partial update'),
});

export const devicesUpdateDeviceBody = zod.object({
	account: zod.string().optional().describe('username'),
	brand: zod.string().optional().describe('vendor brand name'),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
	hotdesks: zod.array(zod.string()).optional(),
	ip: zod.string().optional(),
	loggedIn: zod.string().optional(),
	mac: zod.string().optional(),
	model: zod.string().optional(),
	name: zod.string().optional().describe('display name'),
	password: zod.string().optional(),
	provision: zod.record(zod.string(), zod.string()).optional(),
	reged: zod.boolean().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
});

export const devicesUpdateDeviceResponse = zod.object({
	device: zod
		.object({
			account: zod.string().optional().describe('username'),
			brand: zod.string().optional().describe('vendor brand name'),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
			hotdesks: zod.array(zod.string()).optional(),
			id: zod.string().optional(),
			ip: zod.string().optional(),
			loggedIn: zod.string().optional(),
			mac: zod.string().optional(),
			model: zod.string().optional(),
			name: zod.string().optional().describe('display name'),
			password: zod.string().optional(),
			provision: zod.record(zod.string(), zod.string()).optional(),
			reged: zod.boolean().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			user: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
		})
		.optional(),
});

export const devicesListRegistrationsParams = zod.object({
	'device.id': zod.string().describe('Object ID'),
});

export const devicesListRegistrationsQueryParams = zod.object({
	userId: zod.string().optional().describe('Object ID'),
	userName: zod.string().optional().describe('Display Name'),
	deviceName: zod.string().optional().describe('Display Name'),
});

export const devicesListRegistrationsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				callid: zod.string().optional(),
				contact: zod.string().optional(),
				device: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				expiresAt: zod.string().optional(),
				id: zod.string().optional(),
				instance: zod.string().optional(),
				received: zod.string().optional(),
				registerAt: zod.string().optional(),
				socket: zod.string().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				userAgent: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
	size: zod.number().optional(),
});

/**
 * @summary ----- Details (1:M) ----------------------------------------------
 */
export const devicesSearchDeviceAuditParams = zod.object({
	'device.id': zod.string().describe('Object ID'),
});

export const devicesSearchDeviceAuditQueryParams = zod.object({
	userId: zod.string().optional().describe('Object ID'),
	userName: zod.string().optional().describe('Display Name'),
	deviceName: zod.string().optional().describe('Display Name'),
	timeFrom: zod
		.string()
		.optional()
		.describe('Filter: timing range (optional)\n\nunix milliseconds'),
	timeTill: zod.string().optional().describe('unix milliseconds'),
	fields: zod.array(zod.string()).optional().describe('Search Options'),
	sort: zod.array(zod.string()).optional(),
	size: zod.number().optional(),
	page: zod.number().optional(),
});

export const devicesSearchDeviceAuditResponse = zod.object({
	items: zod
		.array(
			zod.object({
				device: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				hotdesk: zod.string().optional(),
				loggedIn: zod.string().optional(),
				loggedOut: zod.string().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
	size: zod.number().optional(),
});

export const devicesDeleteDeviceParams = zod.object({
	id: zod.string(),
});

export const devicesDeleteDeviceQueryParams = zod.object({
	permanent: zod.boolean().optional(),
	ids: zod.array(zod.string()).optional().describe('bulk'),
});

export const devicesDeleteDeviceResponse = zod.object({
	deleted: zod
		.array(
			zod.object({
				account: zod.string().optional().describe('username'),
				brand: zod.string().optional().describe('vendor brand name'),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				deletedAt: zod.string().optional(),
				deletedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
				hotdesks: zod.array(zod.string()).optional(),
				id: zod.string().optional(),
				ip: zod.string().optional(),
				loggedIn: zod.string().optional(),
				mac: zod.string().optional(),
				model: zod.string().optional(),
				name: zod.string().optional().describe('display name'),
				password: zod.string().optional(),
				provision: zod.record(zod.string(), zod.string()).optional(),
				reged: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional()
					.describe('UserId lookup value.'),
			}),
		)
		.optional(),
});

export const devicesReadDeviceParams = zod.object({
	id: zod.string(),
});

export const devicesReadDeviceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('output selection'),
});

export const devicesReadDeviceResponse = zod.object({
	device: zod
		.object({
			account: zod.string().optional().describe('username'),
			brand: zod.string().optional().describe('vendor brand name'),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			hotdesk: zod.boolean().optional().describe('act as a hotdesk'),
			hotdesks: zod.array(zod.string()).optional(),
			id: zod.string().optional(),
			ip: zod.string().optional(),
			loggedIn: zod.string().optional(),
			mac: zod.string().optional(),
			model: zod.string().optional(),
			name: zod.string().optional().describe('display name'),
			password: zod.string().optional(),
			provision: zod.record(zod.string(), zod.string()).optional(),
			reged: zod.boolean().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			user: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
		})
		.optional(),
});
