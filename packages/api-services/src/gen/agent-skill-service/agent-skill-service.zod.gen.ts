/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const deleteAgentSkillsParams = zod.object({
	agent_id: zod.string(),
});

export const deleteAgentSkillsQueryParams = zod.object({
	id: zod.array(zod.string()).optional(),
	skillId: zod.array(zod.string()).optional(),
});

export const deleteAgentSkillsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				capacity: zod.number().optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary List of AgentSkill
 */
export const searchAgentSkillParams = zod.object({
	agent_id: zod.string(),
});

export const searchAgentSkillQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	skillId: zod.array(zod.string()).optional(),
});

export const searchAgentSkillResponse = zod.object({
	items: zod
		.array(
			zod.object({
				capacity: zod.number().optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const patchAgentSkillsParams = zod.object({
	agent_id: zod.string(),
});

export const patchAgentSkillsBody = zod.object({
	capacity: zod.number().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	skillId: zod.array(zod.string()).optional(),
});

export const patchAgentSkillsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				capacity: zod.number().optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create AgentSkill
 */
export const createAgentSkillParams = zod.object({
	agent_id: zod.string(),
});

export const createAgentSkillBody = zod.object({
	capacity: zod.number().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createAgentSkillResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	capacity: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createAgentSkillsParams = zod.object({
	agent_id: zod.string(),
});

export const createAgentSkillsBody = zod.object({
	items: zod
		.array(
			zod.object({
				capacity: zod.number().optional(),
				domainId: zod.string().optional(),
				enabled: zod.boolean().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
});

export const createAgentSkillsResponse = zod.object({
	ids: zod.array(zod.string()).optional(),
});

/**
 * @summary Remove AgentSkill
 */
export const deleteAgentSkillParams = zod.object({
	agent_id: zod.string(),
	id: zod.string(),
});

export const deleteAgentSkillQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteAgentSkillResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	capacity: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary AgentSkill item
 */
export const readAgentSkillParams = zod.object({
	agent_id: zod.string(),
	id: zod.string(),
});

export const readAgentSkillQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readAgentSkillResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	capacity: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchAgentSkillParams = zod.object({
	agent_id: zod.string(),
	id: zod.string(),
});

export const patchAgentSkillBody = zod.object({
	capacity: zod.number().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchAgentSkillResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	capacity: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update AgentSkill
 */
export const updateAgentSkillParams = zod.object({
	agent_id: zod.string(),
	id: zod.string(),
});

export const updateAgentSkillBody = zod.object({
	capacity: zod.number().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateAgentSkillResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	capacity: zod.number().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary SearchLookupAgentNotExistsSkill
 */
export const searchLookupAgentNotExistsSkillParams = zod.object({
	agent_id: zod.string(),
});

export const searchLookupAgentNotExistsSkillQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const searchLookupAgentNotExistsSkillResponse = zod.object({
	items: zod
		.array(
			zod.object({
				activeAgents: zod.number().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				totalAgents: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});
