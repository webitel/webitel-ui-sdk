/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ApiGetCustomerResponse,
	ApiLicenseUsageResponse,
	ApiLicenseUsersResponse,
	ApiServerInfoResponse,
	ApiUpdateCustomerResponse,
	GetCustomer2Params,
	GetCustomerParams,
	LicenseUsage2Params,
	LicenseUsage3Params,
	LicenseUsageParams,
	LicenseUsersParams,
	UpdateCustomerParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getCustomers =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
			 */
			const getCustomer = <TData = AxiosResponse<ApiGetCustomerResponse>>(
				params?: GetCustomerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/customer', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const updateCustomer = <TData = AxiosResponse<ApiUpdateCustomerResponse>>(
				params?: UpdateCustomerParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put('/customer', undefined, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const licenseUsage = <TData = AxiosResponse<ApiLicenseUsageResponse>>(
				customerId: string,
				params?: LicenseUsageParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/customer/${customerId}/license`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
			 */
			const getCustomer2 = <TData = AxiosResponse<ApiGetCustomerResponse>>(
				id: string,
				params?: GetCustomer2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/customer/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const licenseUsage2 = <TData = AxiosResponse<ApiLicenseUsageResponse>>(
				params?: LicenseUsage2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/license', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const licenseUsage3 = <TData = AxiosResponse<ApiLicenseUsageResponse>>(
				params?: LicenseUsage3Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/products', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const licenseUsers = <TData = AxiosResponse<ApiLicenseUsersResponse>>(
				id: string,
				params?: LicenseUsersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/products/${id}/users`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const serverInfo = <TData = AxiosResponse<ApiServerInfoResponse>>(
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/srvinfo', options);
			};

			// --- footer start
			return {
				getCustomer,
				updateCustomer,
				licenseUsage,
				getCustomer2,
				licenseUsage2,
				licenseUsage3,
				licenseUsers,
				serverInfo,
			};
		};
export type GetCustomerResult = AxiosResponse<ApiGetCustomerResponse>;
export type UpdateCustomerResult = AxiosResponse<ApiUpdateCustomerResponse>;
export type LicenseUsageResult = AxiosResponse<ApiLicenseUsageResponse>;
export type GetCustomer2Result = AxiosResponse<ApiGetCustomerResponse>;
export type LicenseUsage2Result = AxiosResponse<ApiLicenseUsageResponse>;
export type LicenseUsage3Result = AxiosResponse<ApiLicenseUsageResponse>;
export type LicenseUsersResult = AxiosResponse<ApiLicenseUsersResponse>;
export type ServerInfoResult = AxiosResponse<ApiServerInfoResponse>;

// --- footer end
