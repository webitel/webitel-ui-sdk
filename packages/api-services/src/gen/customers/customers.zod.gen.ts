/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
 */
export const customersGetCustomerQueryParams = zod.object({
	id: zod
		.string()
		.optional()
		.describe('Available Filters\n\nshow by customer id; serial number (uuid)'),
	valid: zod.boolean().optional().describe('show if valid only!'),
	domainId: zod.string().optional().describe('identifier'),
	domainName: zod.string().optional().describe('display name'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Request Controls\n\nserial,'),
	sort: zod.array(zod.string()).optional(),
});

export const customersGetCustomerResponse = zod.object({
	customer: zod
		.object({
			createdAt: zod.string().optional().describe('local created ms'),
			dnsrv: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			issuedAt: zod
				.string()
				.optional()
				.describe('[required] issuer(CA) created at'),
			license: zod
				.array(
					zod.object({
						competitive: zod.boolean().optional(),
						id: zod.string().optional(),
						limit: zod.number().optional(),
						notAfter: zod.string().optional(),
						notBefore: zod.string().optional(),
						product: zod.string().optional(),
						remain: zod.number().optional().describe('available'),
						scope: zod
							.array(zod.string())
							.optional()
							.describe(
								"list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...",
							),
						status: zod
							.object({
								errors: zod.array(zod.string()).optional(),
								notify: zod.array(zod.string()).optional(),
							})
							.optional(),
						users: zod
							.array(
								zod.object({
									expiresAt: zod.string().optional(),
									id: zod.string().optional(),
									issuedAt: zod.string().optional(),
									prod: zod.string().optional(),
									scope: zod.array(zod.string()).optional(),
									user: zod
										.object({
											id: zod.string().optional(),
											name: zod.string().optional(),
										})
										.optional(),
								}),
							)
							.optional(),
					}),
				)
				.optional()
				.describe('grants issued'),
			limit: zod
				.record(zod.string(), zod.number())
				.optional()
				.describe('defines map[class]limit usage'),
			nextUpdate: zod.string().optional(),
			notAfter: zod.string().optional(),
			notBefore: zod.string().optional(),
			organization: zod.string().optional(),
			revokedAt: zod.string().optional(),
			thisUpdate: zod
				.string()
				.optional()
				.describe('[optional]: issuer(CA) signed at'),
			updatedAt: zod.string().optional(),
			verify: zod
				.object({
					errors: zod.array(zod.string()).optional(),
					notify: zod.array(zod.string()).optional(),
				})
				.optional(),
		})
		.optional(),
});

export const customersUpdateCustomerQueryParams = zod.object({
	organization: zod
		.string()
		.optional()
		.describe('[optional] e.g.: Example Org.'),
	logoPicture: zod.string().optional().describe('[optional] logo source image'),
	certificate: zod
		.string()
		.optional()
		.describe(
			'[optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding',
		),
	revoke: zod.boolean().optional(),
});

export const customersUpdateCustomerResponse = zod.object({
	customer: zod
		.object({
			createdAt: zod.string().optional().describe('local created ms'),
			dnsrv: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			issuedAt: zod
				.string()
				.optional()
				.describe('[required] issuer(CA) created at'),
			license: zod
				.array(
					zod.object({
						competitive: zod.boolean().optional(),
						id: zod.string().optional(),
						limit: zod.number().optional(),
						notAfter: zod.string().optional(),
						notBefore: zod.string().optional(),
						product: zod.string().optional(),
						remain: zod.number().optional().describe('available'),
						scope: zod
							.array(zod.string())
							.optional()
							.describe(
								"list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...",
							),
						status: zod
							.object({
								errors: zod.array(zod.string()).optional(),
								notify: zod.array(zod.string()).optional(),
							})
							.optional(),
						users: zod
							.array(
								zod.object({
									expiresAt: zod.string().optional(),
									id: zod.string().optional(),
									issuedAt: zod.string().optional(),
									prod: zod.string().optional(),
									scope: zod.array(zod.string()).optional(),
									user: zod
										.object({
											id: zod.string().optional(),
											name: zod.string().optional(),
										})
										.optional(),
								}),
							)
							.optional(),
					}),
				)
				.optional()
				.describe('grants issued'),
			limit: zod
				.record(zod.string(), zod.number())
				.optional()
				.describe('defines map[class]limit usage'),
			nextUpdate: zod.string().optional(),
			notAfter: zod.string().optional(),
			notBefore: zod.string().optional(),
			organization: zod.string().optional(),
			revokedAt: zod.string().optional(),
			thisUpdate: zod
				.string()
				.optional()
				.describe('[optional]: issuer(CA) signed at'),
			updatedAt: zod.string().optional(),
			verify: zod
				.object({
					errors: zod.array(zod.string()).optional(),
					notify: zod.array(zod.string()).optional(),
				})
				.optional(),
		})
		.optional(),
});

export const customersLicenseUsageParams = zod.object({
	customer_id: zod.string(),
});

export const customersLicenseUsageQueryParams = zod.object({
	size: zod
		.number()
		.optional()
		.describe('----- Search Options ----- //\n\ndefault: 16'),
	page: zod.number().optional().describe('default: 1'),
	fields: zod.array(zod.string()).optional().describe('set of output fields'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	userId: zod.string().optional().describe('identifier'),
	userName: zod.string().optional().describe('display name'),
	domainId: zod.string().optional().describe('identifier'),
	domainName: zod.string().optional().describe('display name'),
	id: zod.array(zod.string()).optional().describe('by serial number(s)'),
	product: zod.array(zod.string()).optional().describe('by product name(s)'),
	valid: zod
		.boolean()
		.optional()
		.describe('view: all|valid|grantable\n\nshow: available to be granted'),
	q: zod.string().optional().describe('filter: term of search'),
});

export const customersLicenseUsageResponse = zod.object({
	items: zod
		.array(
			zod.object({
				competitive: zod.boolean().optional(),
				id: zod.string().optional(),
				limit: zod.number().optional(),
				notAfter: zod.string().optional(),
				notBefore: zod.string().optional(),
				product: zod.string().optional(),
				remain: zod.number().optional().describe('available'),
				scope: zod
					.array(zod.string())
					.optional()
					.describe(
						"list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...",
					),
				status: zod
					.object({
						errors: zod.array(zod.string()).optional(),
						notify: zod.array(zod.string()).optional(),
					})
					.optional(),
				users: zod
					.array(
						zod.object({
							expiresAt: zod.string().optional(),
							id: zod.string().optional(),
							issuedAt: zod.string().optional(),
							prod: zod.string().optional(),
							scope: zod.array(zod.string()).optional(),
							user: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional().describe('this page number !'),
});

/**
 * @summary rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
 */
export const customersGetCustomer2Params = zod.object({
	id: zod
		.string()
		.describe('Available Filters\n\nshow by customer id; serial number (uuid)'),
});

export const customersGetCustomer2QueryParams = zod.object({
	valid: zod.boolean().optional().describe('show if valid only!'),
	domainId: zod.string().optional().describe('identifier'),
	domainName: zod.string().optional().describe('display name'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Request Controls\n\nserial,'),
	sort: zod.array(zod.string()).optional(),
});

export const customersGetCustomer2Response = zod.object({
	customer: zod
		.object({
			createdAt: zod.string().optional().describe('local created ms'),
			dnsrv: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			issuedAt: zod
				.string()
				.optional()
				.describe('[required] issuer(CA) created at'),
			license: zod
				.array(
					zod.object({
						competitive: zod.boolean().optional(),
						id: zod.string().optional(),
						limit: zod.number().optional(),
						notAfter: zod.string().optional(),
						notBefore: zod.string().optional(),
						product: zod.string().optional(),
						remain: zod.number().optional().describe('available'),
						scope: zod
							.array(zod.string())
							.optional()
							.describe(
								"list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...",
							),
						status: zod
							.object({
								errors: zod.array(zod.string()).optional(),
								notify: zod.array(zod.string()).optional(),
							})
							.optional(),
						users: zod
							.array(
								zod.object({
									expiresAt: zod.string().optional(),
									id: zod.string().optional(),
									issuedAt: zod.string().optional(),
									prod: zod.string().optional(),
									scope: zod.array(zod.string()).optional(),
									user: zod
										.object({
											id: zod.string().optional(),
											name: zod.string().optional(),
										})
										.optional(),
								}),
							)
							.optional(),
					}),
				)
				.optional()
				.describe('grants issued'),
			limit: zod
				.record(zod.string(), zod.number())
				.optional()
				.describe('defines map[class]limit usage'),
			nextUpdate: zod.string().optional(),
			notAfter: zod.string().optional(),
			notBefore: zod.string().optional(),
			organization: zod.string().optional(),
			revokedAt: zod.string().optional(),
			thisUpdate: zod
				.string()
				.optional()
				.describe('[optional]: issuer(CA) signed at'),
			updatedAt: zod.string().optional(),
			verify: zod
				.object({
					errors: zod.array(zod.string()).optional(),
					notify: zod.array(zod.string()).optional(),
				})
				.optional(),
		})
		.optional(),
});

export const customersLicenseUsage2QueryParams = zod.object({
	size: zod
		.number()
		.optional()
		.describe('----- Search Options ----- //\n\ndefault: 16'),
	page: zod.number().optional().describe('default: 1'),
	fields: zod.array(zod.string()).optional().describe('set of output fields'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	userId: zod.string().optional().describe('identifier'),
	userName: zod.string().optional().describe('display name'),
	domainId: zod.string().optional().describe('identifier'),
	domainName: zod.string().optional().describe('display name'),
	customerId: zod.string().optional(),
	id: zod.array(zod.string()).optional().describe('by serial number(s)'),
	product: zod.array(zod.string()).optional().describe('by product name(s)'),
	valid: zod
		.boolean()
		.optional()
		.describe('view: all|valid|grantable\n\nshow: available to be granted'),
	q: zod.string().optional().describe('filter: term of search'),
});

export const customersLicenseUsage2Response = zod.object({
	items: zod
		.array(
			zod.object({
				competitive: zod.boolean().optional(),
				id: zod.string().optional(),
				limit: zod.number().optional(),
				notAfter: zod.string().optional(),
				notBefore: zod.string().optional(),
				product: zod.string().optional(),
				remain: zod.number().optional().describe('available'),
				scope: zod
					.array(zod.string())
					.optional()
					.describe(
						"list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...",
					),
				status: zod
					.object({
						errors: zod.array(zod.string()).optional(),
						notify: zod.array(zod.string()).optional(),
					})
					.optional(),
				users: zod
					.array(
						zod.object({
							expiresAt: zod.string().optional(),
							id: zod.string().optional(),
							issuedAt: zod.string().optional(),
							prod: zod.string().optional(),
							scope: zod.array(zod.string()).optional(),
							user: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional().describe('this page number !'),
});

export const customersLicenseUsage3QueryParams = zod.object({
	size: zod
		.number()
		.optional()
		.describe('----- Search Options ----- //\n\ndefault: 16'),
	page: zod.number().optional().describe('default: 1'),
	fields: zod.array(zod.string()).optional().describe('set of output fields'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	userId: zod.string().optional().describe('identifier'),
	userName: zod.string().optional().describe('display name'),
	domainId: zod.string().optional().describe('identifier'),
	domainName: zod.string().optional().describe('display name'),
	customerId: zod.string().optional(),
	id: zod.array(zod.string()).optional().describe('by serial number(s)'),
	product: zod.array(zod.string()).optional().describe('by product name(s)'),
	valid: zod
		.boolean()
		.optional()
		.describe('view: all|valid|grantable\n\nshow: available to be granted'),
	q: zod.string().optional().describe('filter: term of search'),
});

export const customersLicenseUsage3Response = zod.object({
	items: zod
		.array(
			zod.object({
				competitive: zod.boolean().optional(),
				id: zod.string().optional(),
				limit: zod.number().optional(),
				notAfter: zod.string().optional(),
				notBefore: zod.string().optional(),
				product: zod.string().optional(),
				remain: zod.number().optional().describe('available'),
				scope: zod
					.array(zod.string())
					.optional()
					.describe(
						"list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...",
					),
				status: zod
					.object({
						errors: zod.array(zod.string()).optional(),
						notify: zod.array(zod.string()).optional(),
					})
					.optional(),
				users: zod
					.array(
						zod.object({
							expiresAt: zod.string().optional(),
							id: zod.string().optional(),
							issuedAt: zod.string().optional(),
							prod: zod.string().optional(),
							scope: zod.array(zod.string()).optional(),
							user: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional().describe('this page number !'),
});

export const customersLicenseUsersParams = zod.object({
	id: zod
		.string()
		.describe('----- Search Filters ----- //\n\nREQUIRED Product ID'),
});

export const customersLicenseUsersQueryParams = zod.object({
	size: zod
		.number()
		.optional()
		.describe('----- Search Options ----- //\n\ndefault: 16'),
	page: zod.number().optional().describe('default: 1'),
	fields: zod.array(zod.string()).optional().describe('set of output fields'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	q: zod.string().optional().describe('filter: term of search (username)'),
});

export const customersLicenseUsersResponse = zod.object({
	items: zod
		.array(
			zod.object({
				domain: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				expiresAt: zod.string().optional(),
				issuedAt: zod.string().optional(),
				sessions: zod.number().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional().describe('this page number !'),
});

export const customersServerInfoResponse = zod.object({
	key: zod.string().optional(),
});
