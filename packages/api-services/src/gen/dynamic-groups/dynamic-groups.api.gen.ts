/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ContactsCreateDynamicGroupRequest,
	ContactsDynamicGroup,
	ContactsDynamicGroupInput,
	ContactsDynamicGroupList,
	ContactsLocateDynamicGroupResponse,
	ListDynamicGroupsParams,
	LocateDynamicGroupParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getDynamicGroups =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Retrieve a list of dynamic groups or search dynamic groups
			 */
			const listDynamicGroups = <
				TData = AxiosResponse<ContactsDynamicGroupList>,
			>(
				params?: ListDynamicGroupsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/contacts/groups/dynamic', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create a new dynamic group
			 */
			const createDynamicGroup = <TData = AxiosResponse<ContactsDynamicGroup>>(
				contactsCreateDynamicGroupRequest: ContactsCreateDynamicGroupRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/contacts/groups/dynamic',
					contactsCreateDynamicGroupRequest,
					options,
				);
			};
			/**
			 * @summary Delete a dynamic group
			 */
			const deleteDynamicGroup = <TData = AxiosResponse<ContactsDynamicGroup>>(
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/groups/${id}/dynamic`, options);
			};
			/**
			 * @summary Locate a dynamic group by ID
			 */
			const locateDynamicGroup = <
				TData = AxiosResponse<ContactsLocateDynamicGroupResponse>,
			>(
				id: string,
				params?: LocateDynamicGroupParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/groups/${id}/dynamic`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing dynamic group
			 */
			const updateDynamicGroup2 = <TData = AxiosResponse<ContactsDynamicGroup>>(
				id: string,
				contactsDynamicGroupInput: ContactsDynamicGroupInput,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/groups/${id}/dynamic`,
					contactsDynamicGroupInput,
					options,
				);
			};
			/**
			 * @summary Update an existing dynamic group
			 */
			const updateDynamicGroup = <TData = AxiosResponse<ContactsDynamicGroup>>(
				id: string,
				contactsDynamicGroupInput: ContactsDynamicGroupInput,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/groups/${id}/dynamic`,
					contactsDynamicGroupInput,
					options,
				);
			};

			// --- footer start
			return {
				listDynamicGroups,
				createDynamicGroup,
				deleteDynamicGroup,
				locateDynamicGroup,
				updateDynamicGroup2,
				updateDynamicGroup,
			};
		};
export type ListDynamicGroupsResult = AxiosResponse<ContactsDynamicGroupList>;
export type CreateDynamicGroupResult = AxiosResponse<ContactsDynamicGroup>;
export type DeleteDynamicGroupResult = AxiosResponse<ContactsDynamicGroup>;
export type LocateDynamicGroupResult =
	AxiosResponse<ContactsLocateDynamicGroupResponse>;
export type UpdateDynamicGroup2Result = AxiosResponse<ContactsDynamicGroup>;
export type UpdateDynamicGroupResult = AxiosResponse<ContactsDynamicGroup>;

// --- footer end
