/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	WebitelContactsDynamicGroup,
	WebitelContactsDynamicGroupList,
	WebitelContactsLocateDynamicGroupResponse,
} from '.././_models';

export const getDynamicGroupsListDynamicGroupsResponseMock = (
	overrideResponse: Partial<WebitelContactsDynamicGroupList> = {},
): WebitelContactsDynamicGroupList => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			conditions: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					assignee: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					expression: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			defaultGroup: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDynamicGroupsCreateDynamicGroupResponseMock = (
	overrideResponse: Partial<WebitelContactsDynamicGroup> = {},
): WebitelContactsDynamicGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDynamicGroupsDeleteDynamicGroupResponseMock = (
	overrideResponse: Partial<WebitelContactsDynamicGroup> = {},
): WebitelContactsDynamicGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDynamicGroupsLocateDynamicGroupResponseMock = (
	overrideResponse: Partial<WebitelContactsLocateDynamicGroupResponse> = {},
): WebitelContactsLocateDynamicGroupResponse => ({
	group: faker.helpers.arrayElement([
		{
			conditions: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					assignee: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					expression: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			defaultGroup: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDynamicGroupsUpdateDynamicGroup2ResponseMock = (
	overrideResponse: Partial<WebitelContactsDynamicGroup> = {},
): WebitelContactsDynamicGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDynamicGroupsUpdateDynamicGroupResponseMock = (
	overrideResponse: Partial<WebitelContactsDynamicGroup> = {},
): WebitelContactsDynamicGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDynamicGroupsListDynamicGroupsMockHandler = (
	overrideResponse?:
		| WebitelContactsDynamicGroupList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WebitelContactsDynamicGroupList>
				| WebitelContactsDynamicGroupList),
) => {
	return http.get('*/contacts/groups/dynamic', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDynamicGroupsListDynamicGroupsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDynamicGroupsCreateDynamicGroupMockHandler = (
	overrideResponse?:
		| WebitelContactsDynamicGroup
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelContactsDynamicGroup> | WebitelContactsDynamicGroup),
) => {
	return http.post('*/contacts/groups/dynamic', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDynamicGroupsCreateDynamicGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDynamicGroupsDeleteDynamicGroupMockHandler = (
	overrideResponse?:
		| WebitelContactsDynamicGroup
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelContactsDynamicGroup> | WebitelContactsDynamicGroup),
) => {
	return http.delete('*/contacts/groups/:id/dynamic', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDynamicGroupsDeleteDynamicGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDynamicGroupsLocateDynamicGroupMockHandler = (
	overrideResponse?:
		| WebitelContactsLocateDynamicGroupResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WebitelContactsLocateDynamicGroupResponse>
				| WebitelContactsLocateDynamicGroupResponse),
) => {
	return http.get('*/contacts/groups/:id/dynamic', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDynamicGroupsLocateDynamicGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDynamicGroupsUpdateDynamicGroup2MockHandler = (
	overrideResponse?:
		| WebitelContactsDynamicGroup
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<WebitelContactsDynamicGroup> | WebitelContactsDynamicGroup),
) => {
	return http.patch('*/contacts/groups/:id/dynamic', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDynamicGroupsUpdateDynamicGroup2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDynamicGroupsUpdateDynamicGroupMockHandler = (
	overrideResponse?:
		| WebitelContactsDynamicGroup
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelContactsDynamicGroup> | WebitelContactsDynamicGroup),
) => {
	return http.put('*/contacts/groups/:id/dynamic', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDynamicGroupsUpdateDynamicGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getDynamicGroupsMock = () => [
	getDynamicGroupsListDynamicGroupsMockHandler(),
	getDynamicGroupsCreateDynamicGroupMockHandler(),
	getDynamicGroupsDeleteDynamicGroupMockHandler(),
	getDynamicGroupsLocateDynamicGroupMockHandler(),
	getDynamicGroupsUpdateDynamicGroup2MockHandler(),
	getDynamicGroupsUpdateDynamicGroupMockHandler(),
];
