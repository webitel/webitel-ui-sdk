/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const searchQueueHookParams = zod.object({
	queue_id: zod.number(),
});

export const searchQueueHookQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
	schemaId: zod.array(zod.number()).optional(),
	event: zod.array(zod.string()).optional(),
});

export const searchQueueHookResponse = zod.object({
	items: zod
		.array(
			zod.object({
				enabled: zod.boolean().optional(),
				event: zod.string().optional(),
				id: zod.number().optional(),
				properties: zod.array(zod.string()).optional(),
				schema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const createQueueHookParams = zod.object({
	queue_id: zod.number(),
});

export const createQueueHookBody = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createQueueHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const deleteQueueHookParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const deleteQueueHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const readQueueHookParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const readQueueHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchQueueHookParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const patchQueueHookBody = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchQueueHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateQueueHookParams = zod.object({
	queue_id: zod.number(),
	id: zod.number(),
});

export const updateQueueHookBody = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateQueueHookResponse = zod.object({
	enabled: zod.boolean().optional(),
	event: zod.string().optional(),
	id: zod.number().optional(),
	properties: zod.array(zod.string()).optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
