/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	DictionariesCreateData200,
	DictionariesLocateData200,
	DictionariesUpdateData200,
	DictionariesUpdateData2200,
	WebitelProtoDataDataset,
	WebitelProtoDataStruct,
	WebitelProtoDataStructList,
} from '.././_models';
import { WebitelProtoDataTypeKind } from '.././_models';

export const getDictionariesDeleteDataResponseMock = (
	overrideResponse: Partial<WebitelProtoDataDataset> = {},
): WebitelProtoDataDataset => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		{
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesSearchDataResponseMock = (
	overrideResponse: Partial<WebitelProtoDataDataset> = {},
): WebitelProtoDataDataset => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		{
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesCreateDataResponseMock =
	(): DictionariesCreateData200 => ({});

export const getDictionariesImportCSVResponseMock = (
	overrideResponse: Partial<WebitelProtoDataDataset> = {},
): WebitelProtoDataDataset => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		{
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesDeleteData2ResponseMock = (
	overrideResponse: Partial<WebitelProtoDataDataset> = {},
): WebitelProtoDataDataset => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		{
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesLocateDataResponseMock =
	(): DictionariesLocateData200 => ({});

export const getDictionariesUpdateDataResponseMock =
	(): DictionariesUpdateData200 => ({});

export const getDictionariesUpdateData2ResponseMock =
	(): DictionariesUpdateData2200 => ({});

export const getDictionariesDeleteTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStructList> = {},
): WebitelProtoDataStructList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesSearchTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStructList> = {},
): WebitelProtoDataStructList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			administered: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			display: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extendable: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fields: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					always: faker.helpers.arrayElement([{}, undefined]),
					binary: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					bool: faker.helpers.arrayElement([{}, undefined]),
					datetime: faker.helpers.arrayElement([
						{
							epoch: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							zone: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					default: faker.helpers.arrayElement([{}, undefined]),
					disabled: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					duration: faker.helpers.arrayElement([
						{
							format: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float32: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					float64: faker.helpers.arrayElement([
						{
							frac: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							max: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.number.float({
									min: undefined,
									max: undefined,
									fractionDigits: 2,
								}),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					hidden: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					hint: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					int: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					int64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					kind: faker.helpers.arrayElement([
						faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
						undefined,
					]),
					lookup: faker.helpers.arrayElement([
						{
							display: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							path: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							query: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					readonly: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					required: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					richtext: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					string: faker.helpers.arrayElement([
						{
							maxBytes: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							maxChars: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							multiline: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint32: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
					uint64: faker.helpers.arrayElement([
						{
							max: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							min: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							violation: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha({
										length: { min: 10, max: 20 },
									}),
								},
								undefined,
							]),
						},
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			indexes: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: {
						fields: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						include: faker.helpers.arrayElement([
							Array.from(
								{ length: faker.number.int({ min: 1, max: 10 }) },
								(_, i) => i + 1,
							).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
							undefined,
						]),
						unique: faker.helpers.arrayElement([
							faker.datatype.boolean(),
							undefined,
						]),
					},
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			objclass: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			path: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			primary: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			repo: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesLocateTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStruct> = {},
): WebitelProtoDataStruct => ({
	about: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	administered: faker.helpers.arrayElement([
		faker.datatype.boolean(),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	display: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	extendable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fields: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			always: faker.helpers.arrayElement([{}, undefined]),
			binary: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			bool: faker.helpers.arrayElement([{}, undefined]),
			datetime: faker.helpers.arrayElement([
				{
					epoch: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					format: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					zone: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([{}, undefined]),
			disabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			duration: faker.helpers.arrayElement([
				{
					format: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float32: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float64: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			hidden: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			hint: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			int: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			kind: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
				undefined,
			]),
			lookup: faker.helpers.arrayElement([
				{
					display: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					path: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					query: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			required: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			richtext: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			string: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	indexes: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: {
				fields: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				include: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				unique: faker.helpers.arrayElement([
					faker.datatype.boolean(),
					undefined,
				]),
			},
		},
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	objclass: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	path: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	primary: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	readonly: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	repo: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesCreateTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStruct> = {},
): WebitelProtoDataStruct => ({
	about: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	administered: faker.helpers.arrayElement([
		faker.datatype.boolean(),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	display: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	extendable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fields: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			always: faker.helpers.arrayElement([{}, undefined]),
			binary: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			bool: faker.helpers.arrayElement([{}, undefined]),
			datetime: faker.helpers.arrayElement([
				{
					epoch: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					format: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					zone: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([{}, undefined]),
			disabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			duration: faker.helpers.arrayElement([
				{
					format: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float32: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float64: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			hidden: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			hint: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			int: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			kind: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
				undefined,
			]),
			lookup: faker.helpers.arrayElement([
				{
					display: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					path: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					query: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			required: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			richtext: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			string: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	indexes: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: {
				fields: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				include: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				unique: faker.helpers.arrayElement([
					faker.datatype.boolean(),
					undefined,
				]),
			},
		},
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	objclass: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	path: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	primary: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	readonly: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	repo: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesUpdateTypeResponseMock = (
	overrideResponse: Partial<WebitelProtoDataStruct> = {},
): WebitelProtoDataStruct => ({
	about: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	administered: faker.helpers.arrayElement([
		faker.datatype.boolean(),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	display: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	extendable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fields: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			always: faker.helpers.arrayElement([{}, undefined]),
			binary: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			bool: faker.helpers.arrayElement([{}, undefined]),
			datetime: faker.helpers.arrayElement([
				{
					epoch: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					format: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					zone: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([{}, undefined]),
			disabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			duration: faker.helpers.arrayElement([
				{
					format: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float32: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			float64: faker.helpers.arrayElement([
				{
					frac: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					max: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.number.float({
							min: undefined,
							max: undefined,
							fractionDigits: 2,
						}),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			hidden: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			hint: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			int: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			int64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			kind: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WebitelProtoDataTypeKind)),
				undefined,
			]),
			lookup: faker.helpers.arrayElement([
				{
					display: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					path: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					query: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			readonly: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			required: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			richtext: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			string: faker.helpers.arrayElement([
				{
					maxBytes: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					maxChars: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					multiline: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint32: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
			uint64: faker.helpers.arrayElement([
				{
					max: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					min: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					violation: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha({
								length: { min: 10, max: 20 },
							}),
						},
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	indexes: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: {
				fields: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				include: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				unique: faker.helpers.arrayElement([
					faker.datatype.boolean(),
					undefined,
				]),
			},
		},
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	objclass: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	path: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	primary: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	readonly: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	repo: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDictionariesDeleteDataMockHandler = (
	overrideResponse?:
		| WebitelProtoDataDataset
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelProtoDataDataset> | WebitelProtoDataDataset),
) => {
	return http.delete('*/dictionaries/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesDeleteDataResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesSearchDataMockHandler = (
	overrideResponse?:
		| WebitelProtoDataDataset
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelProtoDataDataset> | WebitelProtoDataDataset),
) => {
	return http.get('*/dictionaries/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesSearchDataResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesCreateDataMockHandler = (
	overrideResponse?:
		| DictionariesCreateData200
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<DictionariesCreateData200> | DictionariesCreateData200),
) => {
	return http.post('*/dictionaries/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesCreateDataResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesImportCSVMockHandler = (
	overrideResponse?:
		| WebitelProtoDataDataset
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelProtoDataDataset> | WebitelProtoDataDataset),
) => {
	return http.post('*/dictionaries/:repo/csv', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesImportCSVResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesDeleteData2MockHandler = (
	overrideResponse?:
		| WebitelProtoDataDataset
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelProtoDataDataset> | WebitelProtoDataDataset),
) => {
	return http.delete('*/dictionaries/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesDeleteData2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesLocateDataMockHandler = (
	overrideResponse?:
		| DictionariesLocateData200
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<DictionariesLocateData200> | DictionariesLocateData200),
) => {
	return http.get('*/dictionaries/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesLocateDataResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesUpdateDataMockHandler = (
	overrideResponse?:
		| DictionariesUpdateData200
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<DictionariesUpdateData200> | DictionariesUpdateData200),
) => {
	return http.patch('*/dictionaries/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesUpdateDataResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesUpdateData2MockHandler = (
	overrideResponse?:
		| DictionariesUpdateData2200
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<DictionariesUpdateData2200> | DictionariesUpdateData2200),
) => {
	return http.put('*/dictionaries/:repo/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesUpdateData2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesDeleteTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStructList
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelProtoDataStructList> | WebitelProtoDataStructList),
) => {
	return http.delete('*/types/dictionaries', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesDeleteTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesSearchTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStructList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelProtoDataStructList> | WebitelProtoDataStructList),
) => {
	return http.get('*/types/dictionaries', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesSearchTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesLocateTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStruct
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelProtoDataStruct> | WebitelProtoDataStruct),
) => {
	return http.get('*/types/dictionaries/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesLocateTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesCreateTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStruct
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelProtoDataStruct> | WebitelProtoDataStruct),
) => {
	return http.post('*/types/dictionaries/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesCreateTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDictionariesUpdateTypeMockHandler = (
	overrideResponse?:
		| WebitelProtoDataStruct
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelProtoDataStruct> | WebitelProtoDataStruct),
) => {
	return http.put('*/types/dictionaries/:repo', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDictionariesUpdateTypeResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getDictionariesMock = () => [
	getDictionariesDeleteDataMockHandler(),
	getDictionariesSearchDataMockHandler(),
	getDictionariesCreateDataMockHandler(),
	getDictionariesImportCSVMockHandler(),
	getDictionariesDeleteData2MockHandler(),
	getDictionariesLocateDataMockHandler(),
	getDictionariesUpdateDataMockHandler(),
	getDictionariesUpdateData2MockHandler(),
	getDictionariesDeleteTypeMockHandler(),
	getDictionariesSearchTypeMockHandler(),
	getDictionariesLocateTypeMockHandler(),
	getDictionariesCreateTypeMockHandler(),
	getDictionariesUpdateTypeMockHandler(),
];
