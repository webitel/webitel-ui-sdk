/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary Delete a specific comment by its etag
 */
export const deleteCommentParams = zod.object({
	etag: zod.string().describe('Identifier of the comment to delete.'),
});

export const deleteCommentQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to return after deletion.'),
});

export const deleteCommentResponse = zod
	.object({
		author: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		canEdit: zod
			.boolean()
			.optional()
			.describe('Indicates if the comment can be edited by current user.'),
		caseId: zod
			.string()
			.optional()
			.describe('Optional relation to the associated case.'),
		createdAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of when the comment was created.'),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		edited: zod
			.boolean()
			.optional()
			.describe(
				'Indicates if the comment was edited; true if created_at < updated_at.',
			),
		etag: zod.string().optional(),
		id: zod
			.string()
			.optional()
			.describe('Main identifier for read, update, and delete operations.'),
		roleIds: zod.array(zod.string()).optional(),
		text: zod.string().optional().describe('The content of the comment.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe('Version number of the comment, used for concurrency control.'),
	})
	.describe('Represents a comment associated with a case.');

/**
 * @summary Retrieve a specific comment by its etag
 */
export const locateCommentParams = zod.object({
	etag: zod.string().describe('Identifier of the comment to retrieve.'),
});

export const locateCommentQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Specific fields to return for the comment.'),
});

export const locateCommentResponse = zod
	.object({
		author: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		canEdit: zod
			.boolean()
			.optional()
			.describe('Indicates if the comment can be edited by current user.'),
		caseId: zod
			.string()
			.optional()
			.describe('Optional relation to the associated case.'),
		createdAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of when the comment was created.'),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		edited: zod
			.boolean()
			.optional()
			.describe(
				'Indicates if the comment was edited; true if created_at < updated_at.',
			),
		etag: zod.string().optional(),
		id: zod
			.string()
			.optional()
			.describe('Main identifier for read, update, and delete operations.'),
		roleIds: zod.array(zod.string()).optional(),
		text: zod.string().optional().describe('The content of the comment.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe('Version number of the comment, used for concurrency control.'),
	})
	.describe('Represents a comment associated with a case.');

/**
 * @summary Update a specific comment by its etag
 */
export const updateComment2Params = zod.object({
	'input.etag': zod.string().describe('Identifier for the comment.'),
});

export const updateComment2QueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to include in the response.'),
});

export const updateComment2Body = zod.object({
	text: zod.string().optional().describe('Content of the comment.'),
	userId: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateComment2Response = zod
	.object({
		author: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		canEdit: zod
			.boolean()
			.optional()
			.describe('Indicates if the comment can be edited by current user.'),
		caseId: zod
			.string()
			.optional()
			.describe('Optional relation to the associated case.'),
		createdAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of when the comment was created.'),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		edited: zod
			.boolean()
			.optional()
			.describe(
				'Indicates if the comment was edited; true if created_at < updated_at.',
			),
		etag: zod.string().optional(),
		id: zod
			.string()
			.optional()
			.describe('Main identifier for read, update, and delete operations.'),
		roleIds: zod.array(zod.string()).optional(),
		text: zod.string().optional().describe('The content of the comment.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe('Version number of the comment, used for concurrency control.'),
	})
	.describe('Represents a comment associated with a case.');

/**
 * @summary Update a specific comment by its etag
 */
export const updateCommentParams = zod.object({
	'input.etag': zod.string().describe('Identifier for the comment.'),
});

export const updateCommentQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to include in the response.'),
});

export const updateCommentBody = zod.object({
	text: zod.string().optional().describe('Content of the comment.'),
	userId: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateCommentResponse = zod
	.object({
		author: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		canEdit: zod
			.boolean()
			.optional()
			.describe('Indicates if the comment can be edited by current user.'),
		caseId: zod
			.string()
			.optional()
			.describe('Optional relation to the associated case.'),
		createdAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of when the comment was created.'),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		edited: zod
			.boolean()
			.optional()
			.describe(
				'Indicates if the comment was edited; true if created_at < updated_at.',
			),
		etag: zod.string().optional(),
		id: zod
			.string()
			.optional()
			.describe('Main identifier for read, update, and delete operations.'),
		roleIds: zod.array(zod.string()).optional(),
		text: zod.string().optional().describe('The content of the comment.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe('Version number of the comment, used for concurrency control.'),
	})
	.describe('Represents a comment associated with a case.');

/**
 * @summary Retrieve a list of comments associated with a specific case
 */
export const listCommentsParams = zod.object({
	case_etag: zod
		.string()
		.describe('Etag or ID of the case for which comments are requested.'),
});

export const listCommentsQueryParams = zod.object({
	page: zod.number().optional().describe('Page number for pagination.'),
	size: zod.number().optional().describe('Number of comments per page.'),
	q: zod.string().optional().describe('Query string for search.'),
	ids: zod.array(zod.string()).optional().describe('Array of requested id.'),
	sort: zod.string().optional().describe('Sorting order.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to return for each comment.'),
});

export const listCommentsResponse = zod
	.object({
		items: zod
			.array(
				zod
					.object({
						author: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						canEdit: zod
							.boolean()
							.optional()
							.describe(
								'Indicates if the comment can be edited by current user.',
							),
						caseId: zod
							.string()
							.optional()
							.describe('Optional relation to the associated case.'),
						createdAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp (in milliseconds) of when the comment was created.',
							),
						createdBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						edited: zod
							.boolean()
							.optional()
							.describe(
								'Indicates if the comment was edited; true if created_at < updated_at.',
							),
						etag: zod.string().optional(),
						id: zod
							.string()
							.optional()
							.describe(
								'Main identifier for read, update, and delete operations.',
							),
						roleIds: zod.array(zod.string()).optional(),
						text: zod
							.string()
							.optional()
							.describe('The content of the comment.'),
						updatedAt: zod
							.string()
							.optional()
							.describe('Timestamp (in milliseconds) of the last update.'),
						updatedBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						ver: zod
							.number()
							.optional()
							.describe(
								'Version number of the comment, used for concurrency control.',
							),
					})
					.describe('Represents a comment associated with a case.'),
			)
			.optional()
			.describe('List of comments on the current page.'),
		next: zod
			.boolean()
			.optional()
			.describe('Flag to indicate if more pages are available.'),
		page: zod.string().optional().describe('Current page number.'),
	})
	.describe('Contains a paginated list of comments.');

/**
 * @summary Publish comment into a specific case
 */
export const publishCommentParams = zod.object({
	case_etag: zod
		.string()
		.describe('Etag or ID of the case to which comments belong.'),
});

export const publishCommentQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Result fields to include in the response.'),
});

export const publishCommentBody = zod
	.object({
		etag: zod.string().optional().describe('Identifier for the comment.'),
		text: zod.string().optional().describe('Content of the comment.'),
		userId: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('Input structure for creating or updating a case comment.');

export const publishCommentResponse = zod
	.object({
		author: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		canEdit: zod
			.boolean()
			.optional()
			.describe('Indicates if the comment can be edited by current user.'),
		caseId: zod
			.string()
			.optional()
			.describe('Optional relation to the associated case.'),
		createdAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of when the comment was created.'),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		edited: zod
			.boolean()
			.optional()
			.describe(
				'Indicates if the comment was edited; true if created_at < updated_at.',
			),
		etag: zod.string().optional(),
		id: zod
			.string()
			.optional()
			.describe('Main identifier for read, update, and delete operations.'),
		roleIds: zod.array(zod.string()).optional(),
		text: zod.string().optional().describe('The content of the comment.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe('Version number of the comment, used for concurrency control.'),
	})
	.describe('Represents a comment associated with a case.');
