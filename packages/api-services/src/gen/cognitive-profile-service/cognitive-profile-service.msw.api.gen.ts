/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { StorageProviderType, StorageServiceType } from '.././_models';
import type {
	StorageCognitiveProfile,
	StorageListCognitiveProfile,
	StorageListCognitiveProfileVoices,
} from '.././_models';

export const getCognitiveProfileServiceSearchCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageListCognitiveProfile> = {},
): StorageListCognitiveProfile => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			properties: faker.helpers.arrayElement([{}, undefined]),
			provider: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(StorageProviderType)),
				undefined,
			]),
			service: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(StorageServiceType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCognitiveProfileServiceCreateCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	properties: faker.helpers.arrayElement([{}, undefined]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCognitiveProfileServiceDeleteCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	properties: faker.helpers.arrayElement([{}, undefined]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCognitiveProfileServiceReadCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	properties: faker.helpers.arrayElement([{}, undefined]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCognitiveProfileServicePatchCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	properties: faker.helpers.arrayElement([{}, undefined]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCognitiveProfileServiceUpdateCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	properties: faker.helpers.arrayElement([{}, undefined]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getCognitiveProfileServiceSearchCognitiveProfileVoicesResponseMock =
	(
		overrideResponse: Partial<StorageListCognitiveProfileVoices> = {},
	): StorageListCognitiveProfileVoices => ({
		items: faker.helpers.arrayElement([
			Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			})),
			undefined,
		]),
		...overrideResponse,
	});

export const getCognitiveProfileServiceSearchCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageListCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageListCognitiveProfile> | StorageListCognitiveProfile),
) => {
	return http.get('*/storage/cognitive_profiles', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCognitiveProfileServiceSearchCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCognitiveProfileServiceCreateCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.post('*/storage/cognitive_profiles', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCognitiveProfileServiceCreateCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCognitiveProfileServiceDeleteCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.delete('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCognitiveProfileServiceDeleteCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCognitiveProfileServiceReadCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.get('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCognitiveProfileServiceReadCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCognitiveProfileServicePatchCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.patch('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCognitiveProfileServicePatchCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCognitiveProfileServiceUpdateCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.put('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCognitiveProfileServiceUpdateCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCognitiveProfileServiceSearchCognitiveProfileVoicesMockHandler =
	(
		overrideResponse?:
			| StorageListCognitiveProfileVoices
			| ((
					info: Parameters<Parameters<typeof http.get>[1]>[0],
			  ) =>
					| Promise<StorageListCognitiveProfileVoices>
					| StorageListCognitiveProfileVoices),
	) => {
		return http.get('*/storage/cognitive_profiles/:id/voice', async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getCognitiveProfileServiceSearchCognitiveProfileVoicesResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		});
	};
export const getCognitiveProfileServiceMock = () => [
	getCognitiveProfileServiceSearchCognitiveProfileMockHandler(),
	getCognitiveProfileServiceCreateCognitiveProfileMockHandler(),
	getCognitiveProfileServiceDeleteCognitiveProfileMockHandler(),
	getCognitiveProfileServiceReadCognitiveProfileMockHandler(),
	getCognitiveProfileServicePatchCognitiveProfileMockHandler(),
	getCognitiveProfileServiceUpdateCognitiveProfileMockHandler(),
	getCognitiveProfileServiceSearchCognitiveProfileVoicesMockHandler(),
];
