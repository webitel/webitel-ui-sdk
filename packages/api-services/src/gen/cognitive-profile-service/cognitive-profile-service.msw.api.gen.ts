/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	StorageCognitiveProfile,
	StorageListCognitiveProfile,
	StorageListCognitiveProfileVoices,
} from '.././_models';
import { StorageProviderType, StorageServiceType } from '.././_models';

export const getSearchCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageListCognitiveProfile> = {},
): StorageListCognitiveProfile => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			default: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			provider: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(StorageProviderType)),
				undefined,
			]),
			service: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(StorageServiceType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateCognitiveProfileResponseMock = (
	overrideResponse: Partial<StorageCognitiveProfile> = {},
): StorageCognitiveProfile => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	default: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	provider: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageProviderType)),
		undefined,
	]),
	service: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageServiceType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchCognitiveProfileVoicesResponseMock = (
	overrideResponse: Partial<StorageListCognitiveProfileVoices> = {},
): StorageListCognitiveProfileVoices => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageListCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageListCognitiveProfile> | StorageListCognitiveProfile),
) => {
	return http.get('*/storage/cognitive_profiles', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.post('*/storage/cognitive_profiles', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.delete('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.get('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.patch('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateCognitiveProfileMockHandler = (
	overrideResponse?:
		| StorageCognitiveProfile
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<StorageCognitiveProfile> | StorageCognitiveProfile),
) => {
	return http.put('*/storage/cognitive_profiles/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateCognitiveProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchCognitiveProfileVoicesMockHandler = (
	overrideResponse?:
		| StorageListCognitiveProfileVoices
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<StorageListCognitiveProfileVoices>
				| StorageListCognitiveProfileVoices),
) => {
	return http.get('*/storage/cognitive_profiles/:id/voice', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchCognitiveProfileVoicesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getCognitiveProfileServiceMock = () => [
	getSearchCognitiveProfileMockHandler(),
	getCreateCognitiveProfileMockHandler(),
	getDeleteCognitiveProfileMockHandler(),
	getReadCognitiveProfileMockHandler(),
	getPatchCognitiveProfileMockHandler(),
	getUpdateCognitiveProfileMockHandler(),
	getSearchCognitiveProfileVoicesMockHandler(),
];
