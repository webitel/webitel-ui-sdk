/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const cognitiveProfileServiceSearchCognitiveProfileQueryParams =
	zod.object({
		page: zod.number().optional(),
		size: zod.number().optional(),
		q: zod.string().optional(),
		sort: zod.string().optional(),
		fields: zod.array(zod.string()).optional(),
		id: zod.array(zod.string()).optional(),
		service: zod.array(zod.enum(['DefaultService', 'STT', 'TTS'])).optional(),
		enabled: zod.boolean().optional(),
	});

export const cognitiveProfileServiceSearchCognitiveProfileResponseItemsItemProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceSearchCognitiveProfileResponseItemsItemServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceSearchCognitiveProfileResponse = zod.object(
	{
		items: zod
			.array(
				zod.object({
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					default: zod.boolean().optional(),
					description: zod.string().optional(),
					enabled: zod.boolean().optional(),
					id: zod.string().optional(),
					name: zod.string().optional(),
					properties: zod.object({}).optional(),
					provider: zod
						.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
						.default(
							cognitiveProfileServiceSearchCognitiveProfileResponseItemsItemProviderDefault,
						),
					service: zod
						.enum(['DefaultService', 'STT', 'TTS'])
						.default(
							cognitiveProfileServiceSearchCognitiveProfileResponseItemsItemServiceDefault,
						),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
				}),
			)
			.optional(),
		next: zod.boolean().optional(),
	},
);

export const cognitiveProfileServiceCreateCognitiveProfileBodyProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceCreateCognitiveProfileBodyServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceCreateCognitiveProfileBody = zod
	.object({
		default: zod.boolean().optional(),
		description: zod.string().optional(),
		enabled: zod.boolean().optional(),
		name: zod.string(),
		properties: zod.object({}),
		provider: zod.enum([
			'DefaultProvider',
			'Microsoft',
			'Google',
			'ElevenLabs',
		]),
		service: zod.enum(['DefaultService', 'STT', 'TTS']),
	})
	.describe('Create cognitive profile request body for TTS and TTS');

export const cognitiveProfileServiceCreateCognitiveProfileResponseProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceCreateCognitiveProfileResponseServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceCreateCognitiveProfileResponse = zod.object(
	{
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		default: zod.boolean().optional(),
		description: zod.string().optional(),
		enabled: zod.boolean().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		properties: zod.object({}).optional(),
		provider: zod
			.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
			.default(
				cognitiveProfileServiceCreateCognitiveProfileResponseProviderDefault,
			),
		service: zod
			.enum(['DefaultService', 'STT', 'TTS'])
			.default(
				cognitiveProfileServiceCreateCognitiveProfileResponseServiceDefault,
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	},
);

/**
 * @summary Remove BackendProfile
 */
export const cognitiveProfileServiceDeleteCognitiveProfileParams = zod.object({
	id: zod.string(),
});

export const cognitiveProfileServiceDeleteCognitiveProfileResponseProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceDeleteCognitiveProfileResponseServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceDeleteCognitiveProfileResponse = zod.object(
	{
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		default: zod.boolean().optional(),
		description: zod.string().optional(),
		enabled: zod.boolean().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		properties: zod.object({}).optional(),
		provider: zod
			.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
			.default(
				cognitiveProfileServiceDeleteCognitiveProfileResponseProviderDefault,
			),
		service: zod
			.enum(['DefaultService', 'STT', 'TTS'])
			.default(
				cognitiveProfileServiceDeleteCognitiveProfileResponseServiceDefault,
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	},
);

export const cognitiveProfileServiceReadCognitiveProfileParams = zod.object({
	id: zod.string(),
});

export const cognitiveProfileServiceReadCognitiveProfileResponseProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceReadCognitiveProfileResponseServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceReadCognitiveProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	default: zod.boolean().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	properties: zod.object({}).optional(),
	provider: zod
		.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
		.default(
			cognitiveProfileServiceReadCognitiveProfileResponseProviderDefault,
		),
	service: zod
		.enum(['DefaultService', 'STT', 'TTS'])
		.default(cognitiveProfileServiceReadCognitiveProfileResponseServiceDefault),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const cognitiveProfileServicePatchCognitiveProfileParams = zod.object({
	id: zod.string(),
});

export const cognitiveProfileServicePatchCognitiveProfileBodyProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServicePatchCognitiveProfileBodyServiceDefault =
	'DefaultService';

export const cognitiveProfileServicePatchCognitiveProfileBody = zod.object({
	default: zod.boolean().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	properties: zod.object({}).optional(),
	provider: zod
		.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
		.default(cognitiveProfileServicePatchCognitiveProfileBodyProviderDefault),
	service: zod
		.enum(['DefaultService', 'STT', 'TTS'])
		.default(cognitiveProfileServicePatchCognitiveProfileBodyServiceDefault),
});

export const cognitiveProfileServicePatchCognitiveProfileResponseProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServicePatchCognitiveProfileResponseServiceDefault =
	'DefaultService';

export const cognitiveProfileServicePatchCognitiveProfileResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	default: zod.boolean().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	properties: zod.object({}).optional(),
	provider: zod
		.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
		.default(
			cognitiveProfileServicePatchCognitiveProfileResponseProviderDefault,
		),
	service: zod
		.enum(['DefaultService', 'STT', 'TTS'])
		.default(
			cognitiveProfileServicePatchCognitiveProfileResponseServiceDefault,
		),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const cognitiveProfileServiceUpdateCognitiveProfileParams = zod.object({
	id: zod.string(),
});

export const cognitiveProfileServiceUpdateCognitiveProfileBodyProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceUpdateCognitiveProfileBodyServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceUpdateCognitiveProfileBody = zod.object({
	default: zod.boolean().optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	properties: zod.object({}).optional(),
	provider: zod
		.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
		.default(cognitiveProfileServiceUpdateCognitiveProfileBodyProviderDefault),
	service: zod
		.enum(['DefaultService', 'STT', 'TTS'])
		.default(cognitiveProfileServiceUpdateCognitiveProfileBodyServiceDefault),
});

export const cognitiveProfileServiceUpdateCognitiveProfileResponseProviderDefault =
	'DefaultProvider';
export const cognitiveProfileServiceUpdateCognitiveProfileResponseServiceDefault =
	'DefaultService';

export const cognitiveProfileServiceUpdateCognitiveProfileResponse = zod.object(
	{
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		default: zod.boolean().optional(),
		description: zod.string().optional(),
		enabled: zod.boolean().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		properties: zod.object({}).optional(),
		provider: zod
			.enum(['DefaultProvider', 'Microsoft', 'Google', 'ElevenLabs'])
			.default(
				cognitiveProfileServiceUpdateCognitiveProfileResponseProviderDefault,
			),
		service: zod
			.enum(['DefaultService', 'STT', 'TTS'])
			.default(
				cognitiveProfileServiceUpdateCognitiveProfileResponseServiceDefault,
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	},
);

/**
 * @summary Search Voices
 */
export const cognitiveProfileServiceSearchCognitiveProfileVoicesParams =
	zod.object({
		id: zod.string(),
	});

export const cognitiveProfileServiceSearchCognitiveProfileVoicesQueryParams =
	zod.object({
		q: zod.string().optional(),
		key: zod.string().optional(),
	});

export const cognitiveProfileServiceSearchCognitiveProfileVoicesResponse =
	zod.object({
		items: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional(),
	});
