/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Retrieve a list of groups or search groups
 */
export const listGroupsQueryTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const listGroupsQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters',
		),
	name: zod.string().optional().describe('Filter by group name.'),
	type: zod
		.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
		.default(listGroupsQueryTypeDefault)
		.describe(
			'Filter by group type.\n\n - GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
		),
	enabled: zod.boolean().optional().describe('Filter by only enabled group'),
});

export const listGroupsResponseItemsItemTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const listGroupsResponse = zod
	.object({
		items: zod
			.array(
				zod.object({
					conditions: zod
						.array(
							zod.object({
								assignee: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe('Reference Object unique ID.'),
										name: zod
											.string()
											.optional()
											.describe('Reference Object display name.'),
										type: zod
											.string()
											.optional()
											.describe('Reference Object well-known type.'),
									})
									.optional()
									.describe(
										'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
									),
								expression: zod
									.string()
									.optional()
									.describe(
										'The query or condition expression used to evaluate the group.',
									),
								group: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe('Reference Object unique ID.'),
										name: zod
											.string()
											.optional()
											.describe('Reference Object display name.'),
										type: zod
											.string()
											.optional()
											.describe('Reference Object well-known type.'),
									})
									.optional()
									.describe(
										'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
									),
								id: zod
									.string()
									.optional()
									.describe('The unique ID of the condition.'),
							}),
						)
						.optional()
						.describe('List of dynamic conditions associated with the group.'),
					contactsSize: zod.string().optional(),
					createdAt: zod
						.string()
						.optional()
						.describe("Timestamp(milli) of the group's creation."),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					defaultGroup: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					description: zod
						.string()
						.optional()
						.describe('The description of the group.'),
					enabled: zod.boolean().optional(),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the group. Never changes.'),
					name: zod.string().optional().describe('The name of the group.'),
					type: zod
						.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
						.default(listGroupsResponseItemsItemTypeDefault)
						.describe(
							'- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
						),
					updatedAt: zod
						.string()
						.optional()
						.describe('Timestamp(milli) of the last group update.'),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
				}),
			)
			.optional()
			.describe('List of groups.'),
		next: zod.boolean().optional().describe('Have more records.'),
		page: zod
			.number()
			.optional()
			.describe('Page number of the partial result.'),
	})
	.describe('A list of Groups.');

/**
 * @summary Create a new group
 */
export const createGroupBody = zod
	.object({
		description: zod
			.string()
			.optional()
			.describe('The description of the group.'),
		enabled: zod
			.boolean()
			.optional()
			.describe('The enabled status of the group.'),
		name: zod.string().describe('The name of the group.'),
	})
	.describe('Request message for creating a new group.');

export const createGroupResponseTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const createGroupResponse = zod.object({
	conditions: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				expression: zod
					.string()
					.optional()
					.describe(
						'The query or condition expression used to evaluate the group.',
					),
				group: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				id: zod.string().optional().describe('The unique ID of the condition.'),
			}),
		)
		.optional()
		.describe('List of dynamic conditions associated with the group.'),
	contactsSize: zod.string().optional(),
	createdAt: zod
		.string()
		.optional()
		.describe("Timestamp(milli) of the group's creation."),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	defaultGroup: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	description: zod
		.string()
		.optional()
		.describe('The description of the group.'),
	enabled: zod.boolean().optional(),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the group. Never changes.'),
	name: zod.string().optional().describe('The name of the group.'),
	type: zod
		.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
		.default(createGroupResponseTypeDefault)
		.describe(
			'- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
		),
	updatedAt: zod
		.string()
		.optional()
		.describe('Timestamp(milli) of the last group update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

/**
 * @summary Attach contacts to multiple groups
 */
export const addContactsToGroupsBody = zod
	.object({
		contactIds: zod
			.array(zod.string())
			.optional()
			.describe('List of contact IDs to add to the group.'),
		groupIds: zod
			.array(zod.string())
			.optional()
			.describe('The unique ID of the group.'),
	})
	.describe('Request message for adding contacts to a group.');

export const addContactsToGroupsResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						about: zod
							.string()
							.optional()
							.describe(
								'BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text.',
							),
						comments: zod
							.object({
								data: zod
									.array(
										zod.object({
											createdAt: zod
												.string()
												.optional()
												.describe('The user who created this Field.'),
											createdBy: zod
												.object({
													id: zod
														.string()
														.optional()
														.describe('Reference Object unique ID.'),
													name: zod
														.string()
														.optional()
														.describe('Reference Object display name.'),
													type: zod
														.string()
														.optional()
														.describe('Reference Object well-known type.'),
												})
												.optional()
												.describe(
													'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
												),
											etag: zod
												.string()
												.optional()
												.describe(
													'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
												),
											format: zod
												.array(
													zod.object({
														bold: zod.object({}).optional(),
														codeblock: zod
															.object({
																language: zod.string().optional(),
															})
															.optional(),
														italic: zod.object({}).optional(),
														length: zod
															.number()
															.optional()
															.describe('Length text runes count.'),
														link: zod
															.object({
																url: zod.string().optional(),
															})
															.optional(),
														monospace: zod.object({}).optional(),
														offset: zod
															.number()
															.optional()
															.describe('Offset text runes count.'),
														strikethrough: zod.object({}).optional(),
														underline: zod.object({}).optional(),
													}),
												)
												.optional()
												.describe('Styles of the text components.'),
											id: zod
												.string()
												.optional()
												.describe(
													'The unique ID of the Comment. Never changes.',
												),
											text: zod
												.string()
												.optional()
												.describe('Rich Text, multi-line[d] string value.'),
											updatedAt: zod
												.string()
												.optional()
												.describe(
													'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
												),
											updatedBy: zod
												.object({
													id: zod
														.string()
														.optional()
														.describe('Reference Object unique ID.'),
													name: zod
														.string()
														.optional()
														.describe('Reference Object display name.'),
													type: zod
														.string()
														.optional()
														.describe('Reference Object well-known type.'),
												})
												.optional()
												.describe(
													'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
												),
											ver: zod
												.number()
												.optional()
												.describe(
													'Version of the latest update. Numeric sequence.',
												),
										}),
									)
									.optional()
									.describe('Comment dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Comment dataset.'),
						createdAt: zod.string().optional(),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						domain: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						emails: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												email: zod
													.string()
													.optional()
													.describe('The email address.'),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this phone number is default within other channels of the same type(phone).',
													),
												type: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
												verified: zod.boolean().optional(),
											})
											.describe("The Contact's email address."),
									)
									.optional()
									.describe('EmailAddress dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Email dataset.'),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						groups: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												group: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe("The Contact's Group association."),
									)
									.optional()
									.describe('Group dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe(
								'Contact groups dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactGroupList.data are always subordinate to some contact.id.',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						imclients: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												app: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												externalId: zod
													.string()
													.optional()
													.describe('External user id.'),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												protocol: zod
													.string()
													.optional()
													.describe('Protocol used to connect the IM client.'),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												user: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
												via: zod
													.string()
													.optional()
													.describe(
														'[Via] App(-specific) peer(-id) to connect[from] the IM client.',
													),
											})
											.describe("A contact's [I]nstant[M]essaging client."),
									)
									.optional()
									.describe('IMClient dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional(),
						labels: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												label: zod
													.string()
													.optional()
													.describe(
														'REQUIRED. Tag value;\nNOTE: Keep in mind, hashtags are not case-sensitive,\nbut adding capital letters does make them easier to read:\n#MakeAWish vs. #makeawish.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"A Contact's associated Tag.\nOutput purpose only.",
											),
									)
									.optional()
									.describe('Label(s) dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('Page number of partial result.'),
							})
							.optional()
							.describe(
								'LabelList dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id.',
							),
						languages: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												code: zod.string().optional(),
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												lang: zod.string().optional(),
												name: zod.string().optional(),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this association is the default\namong others of the same type.',
													),
												region: zod.string().optional(),
												script: zod.string().optional(),
												tag: zod.string().optional(),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"A Contact's locale preference.\nOutput purpose only.",
											),
									)
									.optional()
									.describe("Page of the Contact's Language(s) dataset."),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('Page number of partial result dataset records.'),
							})
							.optional()
							.describe(
								'LabelsData\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id.',
							),
						managers: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this association is the default\namong others of the same type.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												user: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe("Manager. The Contact's responsible User."),
									)
									.optional()
									.describe('Manager dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Manager dataset.'),
						mode: zod
							.string()
							.optional()
							.describe('[R]ecord[b]ased[A]ccess[C]ontrol mode granted.'),
						name: zod
							.object({
								commonName: zod
									.string()
									.optional()
									.describe(
										"REQUIRED. End-User's full name in displayable form\nincluding all name parts, possibly including titles and suffixes,\nordered according to the End-User's locale and preferences.",
									),
								familyName: zod.string().optional(),
								givenName: zod.string().optional(),
								middleName: zod
									.string()
									.optional()
									.describe(
										'OPTIONAL. Middle name(s) of the End-User.\nNote that in some cultures, people can have multiple middle names;\nall can be present, with the names being separated by space characters.\nAlso note that in some cultures, middle names are not used.',
									),
								verified: zod
									.boolean()
									.optional()
									.describe(
										'Indicate whether Contact, as a Person, realy owns this associated name.',
									),
							})
							.optional()
							.describe(
								"A contact's name.\nIf the name is a mononym, the family name is empty.\n\nInspired:\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\nhttps://developers.google.com/people/api/rest/v1/people#name",
							),
						phones: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												number: zod
													.string()
													.optional()
													.describe('The phone number.'),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this phone number is default within other channels of the same type(phone).',
													),
												type: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
												verified: zod.boolean().optional(),
											})
											.describe("The Contact's phone number."),
									)
									.optional()
									.describe('PhoneNumber dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('PhoneNumber dataset.'),
						photos: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												photoId: zod.string().optional(),
												photoUrl: zod.string().optional(),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'True if the photo is a default photo; false if the photo is a user-provided photo.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
											),
									)
									.optional()
									.describe('Photo dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Photo dataset.'),
						timezones: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this association is the default\namong others of the same type.',
													),
												timezone: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe("A Contact's timezone preference."),
									)
									.optional()
									.describe('Timezone dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe(
								'Timezone dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactTimezones.data are always subordinate to some contact.id.',
							),
						updatedAt: zod.string().optional(),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						variables: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												key: zod
													.string()
													.optional()
													.describe('Key name of the variable.'),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												value: zod
													.any()
													.optional()
													.describe('JSON value of the variable.'),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"The Contact's variable.\nArbitrary data that is populated by users or clients.\nDuplicate keys and values are allowed.",
											),
									)
									.optional()
									.describe('Variable dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Variable dataset.'),
						ver: zod
							.number()
							.optional()
							.describe(
								'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
							),
					})
					.describe('The Contact principal source.\nOUTPUT purpose only.'),
			)
			.optional()
			.describe('Contact(s) dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Contact dataset.');

/**
 * @summary Remove contacts from a group
 */
export const removeContactsFromGroupParams = zod.object({
	group_id: zod.string().describe('The unique ID of the group.'),
});

export const removeContactsFromGroupQueryParams = zod.object({
	contactIds: zod
		.array(zod.string())
		.optional()
		.describe('List of contact IDs to remove from the group.'),
});

export const removeContactsFromGroupResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						about: zod
							.string()
							.optional()
							.describe(
								'BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text.',
							),
						comments: zod
							.object({
								data: zod
									.array(
										zod.object({
											createdAt: zod
												.string()
												.optional()
												.describe('The user who created this Field.'),
											createdBy: zod
												.object({
													id: zod
														.string()
														.optional()
														.describe('Reference Object unique ID.'),
													name: zod
														.string()
														.optional()
														.describe('Reference Object display name.'),
													type: zod
														.string()
														.optional()
														.describe('Reference Object well-known type.'),
												})
												.optional()
												.describe(
													'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
												),
											etag: zod
												.string()
												.optional()
												.describe(
													'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
												),
											format: zod
												.array(
													zod.object({
														bold: zod.object({}).optional(),
														codeblock: zod
															.object({
																language: zod.string().optional(),
															})
															.optional(),
														italic: zod.object({}).optional(),
														length: zod
															.number()
															.optional()
															.describe('Length text runes count.'),
														link: zod
															.object({
																url: zod.string().optional(),
															})
															.optional(),
														monospace: zod.object({}).optional(),
														offset: zod
															.number()
															.optional()
															.describe('Offset text runes count.'),
														strikethrough: zod.object({}).optional(),
														underline: zod.object({}).optional(),
													}),
												)
												.optional()
												.describe('Styles of the text components.'),
											id: zod
												.string()
												.optional()
												.describe(
													'The unique ID of the Comment. Never changes.',
												),
											text: zod
												.string()
												.optional()
												.describe('Rich Text, multi-line[d] string value.'),
											updatedAt: zod
												.string()
												.optional()
												.describe(
													'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
												),
											updatedBy: zod
												.object({
													id: zod
														.string()
														.optional()
														.describe('Reference Object unique ID.'),
													name: zod
														.string()
														.optional()
														.describe('Reference Object display name.'),
													type: zod
														.string()
														.optional()
														.describe('Reference Object well-known type.'),
												})
												.optional()
												.describe(
													'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
												),
											ver: zod
												.number()
												.optional()
												.describe(
													'Version of the latest update. Numeric sequence.',
												),
										}),
									)
									.optional()
									.describe('Comment dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Comment dataset.'),
						createdAt: zod.string().optional(),
						createdBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						domain: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						emails: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												email: zod
													.string()
													.optional()
													.describe('The email address.'),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this phone number is default within other channels of the same type(phone).',
													),
												type: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
												verified: zod.boolean().optional(),
											})
											.describe("The Contact's email address."),
									)
									.optional()
									.describe('EmailAddress dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Email dataset.'),
						etag: zod
							.string()
							.optional()
							.describe(
								'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
							),
						groups: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												group: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe("The Contact's Group association."),
									)
									.optional()
									.describe('Group dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe(
								'Contact groups dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactGroupList.data are always subordinate to some contact.id.',
							),
						id: zod
							.string()
							.optional()
							.describe('The unique ID of the association. Never changes.'),
						imclients: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												app: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												externalId: zod
													.string()
													.optional()
													.describe('External user id.'),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												protocol: zod
													.string()
													.optional()
													.describe('Protocol used to connect the IM client.'),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												user: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
												via: zod
													.string()
													.optional()
													.describe(
														'[Via] App(-specific) peer(-id) to connect[from] the IM client.',
													),
											})
											.describe("A contact's [I]nstant[M]essaging client."),
									)
									.optional()
									.describe('IMClient dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional(),
						labels: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												label: zod
													.string()
													.optional()
													.describe(
														'REQUIRED. Tag value;\nNOTE: Keep in mind, hashtags are not case-sensitive,\nbut adding capital letters does make them easier to read:\n#MakeAWish vs. #makeawish.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"A Contact's associated Tag.\nOutput purpose only.",
											),
									)
									.optional()
									.describe('Label(s) dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('Page number of partial result.'),
							})
							.optional()
							.describe(
								'LabelList dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id.',
							),
						languages: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												code: zod.string().optional(),
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												lang: zod.string().optional(),
												name: zod.string().optional(),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this association is the default\namong others of the same type.',
													),
												region: zod.string().optional(),
												script: zod.string().optional(),
												tag: zod.string().optional(),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"A Contact's locale preference.\nOutput purpose only.",
											),
									)
									.optional()
									.describe("Page of the Contact's Language(s) dataset."),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('Page number of partial result dataset records.'),
							})
							.optional()
							.describe(
								'LabelsData\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id.',
							),
						managers: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this association is the default\namong others of the same type.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												user: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe("Manager. The Contact's responsible User."),
									)
									.optional()
									.describe('Manager dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Manager dataset.'),
						mode: zod
							.string()
							.optional()
							.describe('[R]ecord[b]ased[A]ccess[C]ontrol mode granted.'),
						name: zod
							.object({
								commonName: zod
									.string()
									.optional()
									.describe(
										"REQUIRED. End-User's full name in displayable form\nincluding all name parts, possibly including titles and suffixes,\nordered according to the End-User's locale and preferences.",
									),
								familyName: zod.string().optional(),
								givenName: zod.string().optional(),
								middleName: zod
									.string()
									.optional()
									.describe(
										'OPTIONAL. Middle name(s) of the End-User.\nNote that in some cultures, people can have multiple middle names;\nall can be present, with the names being separated by space characters.\nAlso note that in some cultures, middle names are not used.',
									),
								verified: zod
									.boolean()
									.optional()
									.describe(
										'Indicate whether Contact, as a Person, realy owns this associated name.',
									),
							})
							.optional()
							.describe(
								"A contact's name.\nIf the name is a mononym, the family name is empty.\n\nInspired:\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\nhttps://developers.google.com/people/api/rest/v1/people#name",
							),
						phones: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												number: zod
													.string()
													.optional()
													.describe('The phone number.'),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this phone number is default within other channels of the same type(phone).',
													),
												type: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
												verified: zod.boolean().optional(),
											})
											.describe("The Contact's phone number."),
									)
									.optional()
									.describe('PhoneNumber dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('PhoneNumber dataset.'),
						photos: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												photoId: zod.string().optional(),
												photoUrl: zod.string().optional(),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'True if the photo is a default photo; false if the photo is a user-provided photo.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact.",
											),
									)
									.optional()
									.describe('Photo dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Photo dataset.'),
						timezones: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												primary: zod
													.boolean()
													.optional()
													.describe(
														'Indicates whether this association is the default\namong others of the same type.',
													),
												timezone: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe("A Contact's timezone preference."),
									)
									.optional()
									.describe('Timezone dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe(
								'Timezone dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactTimezones.data are always subordinate to some contact.id.',
							),
						updatedAt: zod.string().optional(),
						updatedBy: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						user: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe('Reference Object unique ID.'),
								name: zod
									.string()
									.optional()
									.describe('Reference Object display name.'),
								type: zod
									.string()
									.optional()
									.describe('Reference Object well-known type.'),
							})
							.optional()
							.describe(
								'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
							),
						variables: zod
							.object({
								data: zod
									.array(
										zod
											.object({
												createdAt: zod
													.string()
													.optional()
													.describe('The user who created this Field.'),
												createdBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												etag: zod
													.string()
													.optional()
													.describe(
														'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
													),
												id: zod
													.string()
													.optional()
													.describe(
														'The unique ID of the association. Never changes.',
													),
												key: zod
													.string()
													.optional()
													.describe('Key name of the variable.'),
												updatedAt: zod
													.string()
													.optional()
													.describe(
														'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
													),
												updatedBy: zod
													.object({
														id: zod
															.string()
															.optional()
															.describe('Reference Object unique ID.'),
														name: zod
															.string()
															.optional()
															.describe('Reference Object display name.'),
														type: zod
															.string()
															.optional()
															.describe('Reference Object well-known type.'),
													})
													.optional()
													.describe(
														'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
													),
												value: zod
													.any()
													.optional()
													.describe('JSON value of the variable.'),
												ver: zod
													.number()
													.optional()
													.describe(
														'Version of the latest update. Numeric sequence.',
													),
											})
											.describe(
												"The Contact's variable.\nArbitrary data that is populated by users or clients.\nDuplicate keys and values are allowed.",
											),
									)
									.optional()
									.describe('Variable dataset page.'),
								next: zod.boolean().optional(),
								page: zod
									.number()
									.optional()
									.describe('The page number of the partial result.'),
							})
							.optional()
							.describe('Variable dataset.'),
						ver: zod
							.number()
							.optional()
							.describe(
								'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
							),
					})
					.describe('The Contact principal source.\nOUTPUT purpose only.'),
			)
			.optional()
			.describe('Contact(s) dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe('Contact dataset.');

/**
 * @summary Delete a group
 */
export const deleteGroupParams = zod.object({
	id: zod.string().describe('The unique ID of the group to delete.'),
});

export const deleteGroupResponseTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const deleteGroupResponse = zod.object({
	conditions: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				expression: zod
					.string()
					.optional()
					.describe(
						'The query or condition expression used to evaluate the group.',
					),
				group: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				id: zod.string().optional().describe('The unique ID of the condition.'),
			}),
		)
		.optional()
		.describe('List of dynamic conditions associated with the group.'),
	contactsSize: zod.string().optional(),
	createdAt: zod
		.string()
		.optional()
		.describe("Timestamp(milli) of the group's creation."),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	defaultGroup: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	description: zod
		.string()
		.optional()
		.describe('The description of the group.'),
	enabled: zod.boolean().optional(),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the group. Never changes.'),
	name: zod.string().optional().describe('The name of the group.'),
	type: zod
		.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
		.default(deleteGroupResponseTypeDefault)
		.describe(
			'- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
		),
	updatedAt: zod
		.string()
		.optional()
		.describe('Timestamp(milli) of the last group update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

/**
 * @summary Locate a group by ID
 */
export const locateGroupParams = zod.object({
	id: zod.string().describe('The unique ID of the group to locate.'),
});

export const locateGroupQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
});

export const locateGroupResponseGroupTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const locateGroupResponse = zod
	.object({
		group: zod
			.object({
				conditions: zod
					.array(
						zod.object({
							assignee: zod
								.object({
									id: zod
										.string()
										.optional()
										.describe('Reference Object unique ID.'),
									name: zod
										.string()
										.optional()
										.describe('Reference Object display name.'),
									type: zod
										.string()
										.optional()
										.describe('Reference Object well-known type.'),
								})
								.optional()
								.describe(
									'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
								),
							expression: zod
								.string()
								.optional()
								.describe(
									'The query or condition expression used to evaluate the group.',
								),
							group: zod
								.object({
									id: zod
										.string()
										.optional()
										.describe('Reference Object unique ID.'),
									name: zod
										.string()
										.optional()
										.describe('Reference Object display name.'),
									type: zod
										.string()
										.optional()
										.describe('Reference Object well-known type.'),
								})
								.optional()
								.describe(
									'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
								),
							id: zod
								.string()
								.optional()
								.describe('The unique ID of the condition.'),
						}),
					)
					.optional()
					.describe('List of dynamic conditions associated with the group.'),
				contactsSize: zod.string().optional(),
				createdAt: zod
					.string()
					.optional()
					.describe("Timestamp(milli) of the group's creation."),
				createdBy: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				defaultGroup: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				description: zod
					.string()
					.optional()
					.describe('The description of the group.'),
				enabled: zod.boolean().optional(),
				id: zod
					.string()
					.optional()
					.describe('The unique ID of the group. Never changes.'),
				name: zod.string().optional().describe('The name of the group.'),
				type: zod
					.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
					.default(locateGroupResponseGroupTypeDefault)
					.describe(
						'- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
					),
				updatedAt: zod
					.string()
					.optional()
					.describe('Timestamp(milli) of the last group update.'),
				updatedBy: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
			})
			.optional(),
	})
	.describe('Response message for locating a group.');

/**
 * @summary Update an existing group
 */
export const updateGroup2Params = zod.object({
	id: zod.string().describe('The unique ID of the group to update.'),
});

export const updateGroup2Body = zod.object({
	description: zod
		.string()
		.optional()
		.describe('The new description of the group.'),
	enabled: zod
		.boolean()
		.optional()
		.describe('The new enabled status of the group.'),
	name: zod.string().optional().describe('The new name of the group.'),
});

export const updateGroup2ResponseTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const updateGroup2Response = zod.object({
	conditions: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				expression: zod
					.string()
					.optional()
					.describe(
						'The query or condition expression used to evaluate the group.',
					),
				group: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				id: zod.string().optional().describe('The unique ID of the condition.'),
			}),
		)
		.optional()
		.describe('List of dynamic conditions associated with the group.'),
	contactsSize: zod.string().optional(),
	createdAt: zod
		.string()
		.optional()
		.describe("Timestamp(milli) of the group's creation."),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	defaultGroup: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	description: zod
		.string()
		.optional()
		.describe('The description of the group.'),
	enabled: zod.boolean().optional(),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the group. Never changes.'),
	name: zod.string().optional().describe('The name of the group.'),
	type: zod
		.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
		.default(updateGroup2ResponseTypeDefault)
		.describe(
			'- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
		),
	updatedAt: zod
		.string()
		.optional()
		.describe('Timestamp(milli) of the last group update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});

/**
 * @summary Update an existing group
 */
export const updateGroupParams = zod.object({
	id: zod.string().describe('The unique ID of the group to update.'),
});

export const updateGroupBody = zod.object({
	description: zod
		.string()
		.optional()
		.describe('The new description of the group.'),
	enabled: zod
		.boolean()
		.optional()
		.describe('The new enabled status of the group.'),
	name: zod.string().optional().describe('The new name of the group.'),
});

export const updateGroupResponseTypeDefault = 'GROUP_TYPE_UNSPECIFIED';

export const updateGroupResponse = zod.object({
	conditions: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				expression: zod
					.string()
					.optional()
					.describe(
						'The query or condition expression used to evaluate the group.',
					),
				group: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				id: zod.string().optional().describe('The unique ID of the condition.'),
			}),
		)
		.optional()
		.describe('List of dynamic conditions associated with the group.'),
	contactsSize: zod.string().optional(),
	createdAt: zod
		.string()
		.optional()
		.describe("Timestamp(milli) of the group's creation."),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	defaultGroup: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	description: zod
		.string()
		.optional()
		.describe('The description of the group.'),
	enabled: zod.boolean().optional(),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the group. Never changes.'),
	name: zod.string().optional().describe('The name of the group.'),
	type: zod
		.enum(['GROUP_TYPE_UNSPECIFIED', 'STATIC', 'DYNAMIC'])
		.default(updateGroupResponseTypeDefault)
		.describe(
			'- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group',
		),
	updatedAt: zod
		.string()
		.optional()
		.describe('Timestamp(milli) of the last group update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
});
