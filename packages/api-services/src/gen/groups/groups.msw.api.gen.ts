/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	ContactsContactList,
	ContactsGroup,
	ContactsGroupList,
	ContactsLocateGroupResponse,
} from '.././_models';
import { ContactsGroupType } from '.././_models';

export const getListGroupsResponseMock = (
	overrideResponse: Partial<ContactsGroupList> = {},
): ContactsGroupList => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			conditions: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					assignee: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					expression: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			contactsSize: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			defaultGroup: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(ContactsGroupType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateGroupResponseMock = (
	overrideResponse: Partial<ContactsGroup> = {},
): ContactsGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	contactsSize: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(ContactsGroupType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getAddContactsToGroupsResponseMock = (
	overrideResponse: Partial<ContactsContactList> = {},
): ContactsContactList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			comments: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								Array.from(
									{ length: faker.number.int({ min: 1, max: 10 }) },
									(_, i) => i + 1,
								).map(() => ({
									bold: faker.helpers.arrayElement([{}, undefined]),
									codeblock: faker.helpers.arrayElement([
										{
											language: faker.helpers.arrayElement([
												faker.string.alpha({ length: { min: 10, max: 20 } }),
												undefined,
											]),
										},
										undefined,
									]),
									italic: faker.helpers.arrayElement([{}, undefined]),
									length: faker.helpers.arrayElement([
										faker.number.int({
											min: undefined,
											max: undefined,
											multipleOf: undefined,
										}),
										undefined,
									]),
									link: faker.helpers.arrayElement([
										{
											url: faker.helpers.arrayElement([
												faker.string.alpha({ length: { min: 10, max: 20 } }),
												undefined,
											]),
										},
										undefined,
									]),
									monospace: faker.helpers.arrayElement([{}, undefined]),
									offset: faker.helpers.arrayElement([
										faker.number.int({
											min: undefined,
											max: undefined,
											multipleOf: undefined,
										}),
										undefined,
									]),
									strikethrough: faker.helpers.arrayElement([{}, undefined]),
									underline: faker.helpers.arrayElement([{}, undefined]),
								})),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							text: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domain: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			emails: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							email: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							verified: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			groups: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							group: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			imclients: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							app: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							externalId: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							protocol: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							user: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							via: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			labels: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							label: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			languages: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							code: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							lang: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							region: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							script: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							tag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			managers: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							user: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			mode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				{
					commonName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					familyName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					givenName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					middleName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			phones: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							number: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							verified: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			photos: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							photoId: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							photoUrl: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			timezones: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							timezone: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			variables: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							key: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							value: faker.helpers.arrayElement([{}, undefined]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getRemoveContactsFromGroupResponseMock = (
	overrideResponse: Partial<ContactsContactList> = {},
): ContactsContactList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			comments: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								Array.from(
									{ length: faker.number.int({ min: 1, max: 10 }) },
									(_, i) => i + 1,
								).map(() => ({
									bold: faker.helpers.arrayElement([{}, undefined]),
									codeblock: faker.helpers.arrayElement([
										{
											language: faker.helpers.arrayElement([
												faker.string.alpha({ length: { min: 10, max: 20 } }),
												undefined,
											]),
										},
										undefined,
									]),
									italic: faker.helpers.arrayElement([{}, undefined]),
									length: faker.helpers.arrayElement([
										faker.number.int({
											min: undefined,
											max: undefined,
											multipleOf: undefined,
										}),
										undefined,
									]),
									link: faker.helpers.arrayElement([
										{
											url: faker.helpers.arrayElement([
												faker.string.alpha({ length: { min: 10, max: 20 } }),
												undefined,
											]),
										},
										undefined,
									]),
									monospace: faker.helpers.arrayElement([{}, undefined]),
									offset: faker.helpers.arrayElement([
										faker.number.int({
											min: undefined,
											max: undefined,
											multipleOf: undefined,
										}),
										undefined,
									]),
									strikethrough: faker.helpers.arrayElement([{}, undefined]),
									underline: faker.helpers.arrayElement([{}, undefined]),
								})),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							text: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domain: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			emails: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							email: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							verified: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			groups: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							group: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			imclients: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							app: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							externalId: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							protocol: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							user: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							via: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			labels: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							label: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			languages: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							code: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							lang: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							region: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							script: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							tag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			managers: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							user: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			mode: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				{
					commonName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					familyName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					givenName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					middleName: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			phones: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							number: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
							verified: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			photos: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							photoId: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							photoUrl: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			timezones: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							timezone: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			variables: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							key: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha({ length: { min: 10, max: 20 } }),
										undefined,
									]),
								},
								undefined,
							]),
							value: faker.helpers.arrayElement([{}, undefined]),
							ver: faker.helpers.arrayElement([
								faker.number.int({
									min: undefined,
									max: undefined,
									multipleOf: undefined,
								}),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteGroupResponseMock = (
	overrideResponse: Partial<ContactsGroup> = {},
): ContactsGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	contactsSize: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(ContactsGroupType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getLocateGroupResponseMock = (
	overrideResponse: Partial<ContactsLocateGroupResponse> = {},
): ContactsLocateGroupResponse => ({
	group: faker.helpers.arrayElement([
		{
			conditions: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					assignee: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					expression: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			contactsSize: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			defaultGroup: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(ContactsGroupType)),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateGroup2ResponseMock = (
	overrideResponse: Partial<ContactsGroup> = {},
): ContactsGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	contactsSize: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(ContactsGroupType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateGroupResponseMock = (
	overrideResponse: Partial<ContactsGroup> = {},
): ContactsGroup => ({
	conditions: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			assignee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			group: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	contactsSize: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	defaultGroup: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(ContactsGroupType)),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getListGroupsMockHandler = (
	overrideResponse?:
		| ContactsGroupList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ContactsGroupList> | ContactsGroupList),
) => {
	return http.get('*/contacts/groups', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getListGroupsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateGroupMockHandler = (
	overrideResponse?:
		| ContactsGroup
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ContactsGroup> | ContactsGroup),
) => {
	return http.post('*/contacts/groups', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAddContactsToGroupsMockHandler = (
	overrideResponse?:
		| ContactsContactList
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ContactsContactList> | ContactsContactList),
) => {
	return http.post('*/contacts/groups/contacts:attach', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAddContactsToGroupsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getRemoveContactsFromGroupMockHandler = (
	overrideResponse?:
		| ContactsContactList
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ContactsContactList> | ContactsContactList),
) => {
	return http.delete('*/contacts/groups/:groupId/contact', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getRemoveContactsFromGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteGroupMockHandler = (
	overrideResponse?:
		| ContactsGroup
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ContactsGroup> | ContactsGroup),
) => {
	return http.delete('*/contacts/groups/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLocateGroupMockHandler = (
	overrideResponse?:
		| ContactsLocateGroupResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ContactsLocateGroupResponse> | ContactsLocateGroupResponse),
) => {
	return http.get('*/contacts/groups/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLocateGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateGroup2MockHandler = (
	overrideResponse?:
		| ContactsGroup
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<ContactsGroup> | ContactsGroup),
) => {
	return http.patch('*/contacts/groups/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateGroup2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateGroupMockHandler = (
	overrideResponse?:
		| ContactsGroup
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<ContactsGroup> | ContactsGroup),
) => {
	return http.put('*/contacts/groups/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateGroupResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getGroupsMock = () => [
	getListGroupsMockHandler(),
	getCreateGroupMockHandler(),
	getAddContactsToGroupsMockHandler(),
	getRemoveContactsFromGroupMockHandler(),
	getDeleteGroupMockHandler(),
	getLocateGroupMockHandler(),
	getUpdateGroup2MockHandler(),
	getUpdateGroupMockHandler(),
];
