/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	EngineCreatePresetQueryRequest,
	EngineListPresetQuery,
	EnginePresetQuery,
	EnginePresetQueryServicePatchPresetQueryBody,
	EnginePresetQueryServiceUpdatePresetQueryBody,
	SearchPresetQueryParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getPresetQueryService =
		// --- title end
		() => {
			// --- header end
			const searchPresetQuery = <TData = AxiosResponse<EngineListPresetQuery>>(
				params?: SearchPresetQueryParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/preset/query', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const createPresetQuery = <TData = AxiosResponse<EnginePresetQuery>>(
				engineCreatePresetQueryRequest: EngineCreatePresetQueryRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/call_center/preset/query',
					engineCreatePresetQueryRequest,
					options,
				);
			};
			const deletePresetQuery = <TData = AxiosResponse<EnginePresetQuery>>(
				id: number,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/call_center/preset/query/${id}`, options);
			};
			const readPresetQuery = <TData = AxiosResponse<EnginePresetQuery>>(
				id: number,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/preset/query/${id}`, options);
			};
			const patchPresetQuery = <TData = AxiosResponse<EnginePresetQuery>>(
				id: number,
				enginePresetQueryServicePatchPresetQueryBody: EnginePresetQueryServicePatchPresetQueryBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/preset/query/${id}`,
					enginePresetQueryServicePatchPresetQueryBody,
					options,
				);
			};
			const updatePresetQuery = <TData = AxiosResponse<EnginePresetQuery>>(
				id: number,
				enginePresetQueryServiceUpdatePresetQueryBody: EnginePresetQueryServiceUpdatePresetQueryBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/call_center/preset/query/${id}`,
					enginePresetQueryServiceUpdatePresetQueryBody,
					options,
				);
			};

			// --- footer start
			return {
				searchPresetQuery,
				createPresetQuery,
				deletePresetQuery,
				readPresetQuery,
				patchPresetQuery,
				updatePresetQuery,
			};
		};
export type SearchPresetQueryResult = AxiosResponse<EngineListPresetQuery>;
export type CreatePresetQueryResult = AxiosResponse<EnginePresetQuery>;
export type DeletePresetQueryResult = AxiosResponse<EnginePresetQuery>;
export type ReadPresetQueryResult = AxiosResponse<EnginePresetQuery>;
export type PatchPresetQueryResult = AxiosResponse<EnginePresetQuery>;
export type UpdatePresetQueryResult = AxiosResponse<EnginePresetQuery>;

// --- footer end
