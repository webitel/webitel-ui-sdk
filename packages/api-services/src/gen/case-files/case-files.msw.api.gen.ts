/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type { CasesCaseFileList, CasesFile } from '.././_models';

export const getListFilesResponseMock = (
	overrideResponse: Partial<CasesCaseFileList> = {},
): CasesCaseFileList => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			author: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			mime: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			size: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteFileResponseMock = (
	overrideResponse: Partial<CasesFile> = {},
): CasesFile => ({
	author: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	mime: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	size: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getListFilesMockHandler = (
	overrideResponse?:
		| CasesCaseFileList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<CasesCaseFileList> | CasesCaseFileList),
) => {
	return http.get('*/cases/:caseEtag/files', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getListFilesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteFileMockHandler = (
	overrideResponse?:
		| CasesFile
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<CasesFile> | CasesFile),
) => {
	return http.delete('*/cases/:caseEtag/files/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteFileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getCaseFilesMock = () => [
	getListFilesMockHandler(),
	getDeleteFileMockHandler(),
];
