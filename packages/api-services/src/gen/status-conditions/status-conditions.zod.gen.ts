/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary Retrieve a list of statuses or search status conditions
 */
export const listStatusConditionsParams = zod.object({
	status_id: zod.string().describe('Filter by Status Id.'),
});

export const listStatusConditionsQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.string()
		.optional()
		.describe('Sort the result according to fields.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
});

export const listStatusConditionsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				final: zod.boolean().optional(),
				id: zod.string().optional(),
				initial: zod.boolean().optional(),
				name: zod.string().optional(),
				statusId: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Create a new status condition
 */
export const createStatusConditionParams = zod.object({
	status_id: zod.string(),
});

export const createStatusConditionQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const createStatusConditionBody = zod.object({
	description: zod.string().optional(),
	name: zod.string().optional(),
});

export const createStatusConditionResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	final: zod.boolean().optional(),
	id: zod.string().optional(),
	initial: zod.boolean().optional(),
	name: zod.string().optional(),
	statusId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Delete a status condition
 */
export const deleteStatusConditionParams = zod.object({
	status_id: zod.string(),
	id: zod.string(),
});

export const deleteStatusConditionResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	final: zod.boolean().optional(),
	id: zod.string().optional(),
	initial: zod.boolean().optional(),
	name: zod.string().optional(),
	statusId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Locate a status condition by ID
 */
export const locateStatusConditionParams = zod.object({
	status_id: zod.string().describe('ID of the status to be located'),
	id: zod.string().describe('ID of the status condition to be located'),
});

export const locateStatusConditionQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const locateStatusConditionResponse = zod.object({
	status: zod
		.object({
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			description: zod.string().optional(),
			final: zod.boolean().optional(),
			id: zod.string().optional(),
			initial: zod.boolean().optional(),
			name: zod.string().optional(),
			statusId: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing status condition
 */
export const updateStatusCondition2Params = zod.object({
	status_id: zod.string(),
	id: zod.string(),
});

export const updateStatusCondition2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateStatusCondition2Body = zod.object({
	description: zod.string().optional(),
	final: zod.boolean().optional(),
	initial: zod.boolean().optional(),
	name: zod.string().optional(),
});

export const updateStatusCondition2Response = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	final: zod.boolean().optional(),
	id: zod.string().optional(),
	initial: zod.boolean().optional(),
	name: zod.string().optional(),
	statusId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing status condition
 */
export const updateStatusConditionParams = zod.object({
	status_id: zod.string(),
	id: zod.string(),
});

export const updateStatusConditionQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateStatusConditionBody = zod.object({
	description: zod.string().optional(),
	final: zod.boolean().optional(),
	initial: zod.boolean().optional(),
	name: zod.string().optional(),
});

export const updateStatusConditionResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	final: zod.boolean().optional(),
	id: zod.string().optional(),
	initial: zod.boolean().optional(),
	name: zod.string().optional(),
	statusId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
