/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	ApiReadClassResponse,
	ApiSearchClassesResponse,
	ApiUpdateClassResponse,
} from '.././_models';

export const getClassesSearchClassesResponseMock = (
	overrideResponse: Partial<ApiSearchClassesResponse> = {},
): ApiSearchClassesResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			abac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			class: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			obac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			rbac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	size: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getClassesUpdateClass2ResponseMock = (
	overrideResponse: Partial<ApiUpdateClassResponse> = {},
): ApiUpdateClassResponse => ({
	class: faker.helpers.arrayElement([
		{
			abac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			class: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			obac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			rbac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getClassesUpdateClassResponseMock = (
	overrideResponse: Partial<ApiUpdateClassResponse> = {},
): ApiUpdateClassResponse => ({
	class: faker.helpers.arrayElement([
		{
			abac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			class: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			obac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			rbac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getClassesReadClassResponseMock = (
	overrideResponse: Partial<ApiReadClassResponse> = {},
): ApiReadClassResponse => ({
	class: faker.helpers.arrayElement([
		{
			abac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			class: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			obac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			rbac: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getClassesSearchClassesMockHandler = (
	overrideResponse?:
		| ApiSearchClassesResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiSearchClassesResponse> | ApiSearchClassesResponse),
) => {
	return http.get('*/objclass', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getClassesSearchClassesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getClassesUpdateClass2MockHandler = (
	overrideResponse?:
		| ApiUpdateClassResponse
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<ApiUpdateClassResponse> | ApiUpdateClassResponse),
) => {
	return http.patch('*/objclass/_class.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getClassesUpdateClass2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getClassesUpdateClassMockHandler = (
	overrideResponse?:
		| ApiUpdateClassResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<ApiUpdateClassResponse> | ApiUpdateClassResponse),
) => {
	return http.put('*/objclass/_class.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getClassesUpdateClassResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getClassesReadClassMockHandler = (
	overrideResponse?:
		| ApiReadClassResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiReadClassResponse> | ApiReadClassResponse),
) => {
	return http.get('*/objclass/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getClassesReadClassResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getClassesMock = () => [
	getClassesSearchClassesMockHandler(),
	getClassesUpdateClass2MockHandler(),
	getClassesUpdateClassMockHandler(),
	getClassesReadClassMockHandler(),
];
