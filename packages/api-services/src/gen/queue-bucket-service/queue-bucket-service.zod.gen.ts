/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary SearchQueueRouting
 */
export const searchQueueBucketParams = zod.object({
	queue_id: zod.string(),
});

export const searchQueueBucketQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const searchQueueBucketResponse = zod.object({
	items: zod
		.array(
			zod.object({
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				disabled: zod.boolean().optional(),
				id: zod.string().optional(),
				priority: zod.number().optional(),
				ratio: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create QueueBucket
 */
export const createQueueBucketParams = zod.object({
	queue_id: zod.string(),
});

export const createQueueBucketBody = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

export const createQueueBucketResponse = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	id: zod.string().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

/**
 * @summary DeleteQueueRouting
 */
export const deleteQueueBucketParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const deleteQueueBucketResponse = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	id: zod.string().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

/**
 * @summary ReadQueueRouting
 */
export const readQueueBucketParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const readQueueBucketResponse = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	id: zod.string().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

export const patchQueueBucketParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const patchQueueBucketBody = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

export const patchQueueBucketResponse = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	id: zod.string().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

/**
 * @summary UpdateQueueBucket
 */
export const updateQueueBucketParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const updateQueueBucketBody = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});

export const updateQueueBucketResponse = zod.object({
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	disabled: zod.boolean().optional(),
	id: zod.string().optional(),
	priority: zod.number().optional(),
	ratio: zod.number().optional(),
});
