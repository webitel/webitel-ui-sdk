/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	EngineListQueueBucket,
	EngineQueueBucket,
	EngineQueueBucketServiceCreateQueueBucketBody,
	EngineQueueBucketServicePatchQueueBucketBody,
	EngineQueueBucketServiceUpdateQueueBucketBody,
	SearchQueueBucketParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getQueueBucketService =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary SearchQueueRouting
			 */
			const searchQueueBucket = <TData = AxiosResponse<EngineListQueueBucket>>(
				queueId: string,
				params?: SearchQueueBucketParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/queues/${queueId}/buckets`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create QueueBucket
			 */
			const createQueueBucket = <TData = AxiosResponse<EngineQueueBucket>>(
				queueId: string,
				engineQueueBucketServiceCreateQueueBucketBody: EngineQueueBucketServiceCreateQueueBucketBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/call_center/queues/${queueId}/buckets`,
					engineQueueBucketServiceCreateQueueBucketBody,
					options,
				);
			};
			/**
			 * @summary DeleteQueueRouting
			 */
			const deleteQueueBucket = <TData = AxiosResponse<EngineQueueBucket>>(
				queueId: string,
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(
					`/call_center/queues/${queueId}/buckets/${id}`,
					options,
				);
			};
			/**
			 * @summary ReadQueueRouting
			 */
			const readQueueBucket = <TData = AxiosResponse<EngineQueueBucket>>(
				queueId: string,
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(
					`/call_center/queues/${queueId}/buckets/${id}`,
					options,
				);
			};
			const patchQueueBucket = <TData = AxiosResponse<EngineQueueBucket>>(
				queueId: string,
				id: string,
				engineQueueBucketServicePatchQueueBucketBody: EngineQueueBucketServicePatchQueueBucketBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/queues/${queueId}/buckets/${id}`,
					engineQueueBucketServicePatchQueueBucketBody,
					options,
				);
			};
			/**
			 * @summary UpdateQueueBucket
			 */
			const updateQueueBucket = <TData = AxiosResponse<EngineQueueBucket>>(
				queueId: string,
				id: string,
				engineQueueBucketServiceUpdateQueueBucketBody: EngineQueueBucketServiceUpdateQueueBucketBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/call_center/queues/${queueId}/buckets/${id}`,
					engineQueueBucketServiceUpdateQueueBucketBody,
					options,
				);
			};

			// --- footer start
			return {
				searchQueueBucket,
				createQueueBucket,
				deleteQueueBucket,
				readQueueBucket,
				patchQueueBucket,
				updateQueueBucket,
			};
		};
export type SearchQueueBucketResult = AxiosResponse<EngineListQueueBucket>;
export type CreateQueueBucketResult = AxiosResponse<EngineQueueBucket>;
export type DeleteQueueBucketResult = AxiosResponse<EngineQueueBucket>;
export type ReadQueueBucketResult = AxiosResponse<EngineQueueBucket>;
export type PatchQueueBucketResult = AxiosResponse<EngineQueueBucket>;
export type UpdateQueueBucketResult = AxiosResponse<EngineQueueBucket>;

// --- footer end
