/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ContactsContactGroup,
	ContactsContactGroupList,
	ContactsInputContactGroup,
	DeleteContactGroupParams,
	DeleteContactGroupsParams,
	ListContactGroupsParams,
	LocateContactGroupParams,
	MergeContactGroupsParams,
	ResetContactGroupsParams,
	UpdateContactGroup2Body,
	UpdateContactGroup2Params,
	UpdateContactGroupBody,
	UpdateContactGroupParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getContactGroups =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove the Contact's group(s).
			 */
			const deleteContactGroups = <
				TData = AxiosResponse<ContactsContactGroupList>,
			>(
				contactId: string,
				params: DeleteContactGroupsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/groups`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary List of the Contact's group(s).
			 */
			const listContactGroups = <
				TData = AxiosResponse<ContactsContactGroupList>,
			>(
				contactId: string,
				params?: ListContactGroupsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/groups`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate more group(s) with the Contact.
			 */
			const mergeContactGroups = <
				TData = AxiosResponse<ContactsContactGroupList>,
			>(
				contactId: string,
				contactsInputContactGroup: ContactsInputContactGroup[],
				params?: MergeContactGroupsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/groups`,
					contactsInputContactGroup,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Resets all groups of the contact according to the input dataset.
			 */
			const resetContactGroups = <
				TData = AxiosResponse<ContactsContactGroupList>,
			>(
				contactId: string,
				contactsInputContactGroup: ContactsInputContactGroup[],
				params?: ResetContactGroupsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/groups`,
					contactsInputContactGroup,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the Contact's group association.
			 */
			const deleteContactGroup = <TData = AxiosResponse<ContactsContactGroup>>(
				contactId: string,
				etag: string,
				params?: DeleteContactGroupParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/groups/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the Contact's group association.
			 */
			const locateContactGroup = <TData = AxiosResponse<ContactsContactGroup>>(
				contactId: string,
				etag: string,
				params?: LocateContactGroupParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/groups/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the Contact's group details.
			 */
			const updateContactGroup2 = <
				TData = AxiosResponse<ContactsContactGroupList>,
			>(
				contactId: string,
				etag: string,
				updateContactGroup2Body: UpdateContactGroup2Body,
				params?: UpdateContactGroup2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/groups/${etag}`,
					updateContactGroup2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the Contact's group details.
			 */
			const updateContactGroup = <
				TData = AxiosResponse<ContactsContactGroupList>,
			>(
				contactId: string,
				etag: string,
				updateContactGroupBody: UpdateContactGroupBody,
				params?: UpdateContactGroupParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/groups/${etag}`,
					updateContactGroupBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				deleteContactGroups,
				listContactGroups,
				mergeContactGroups,
				resetContactGroups,
				deleteContactGroup,
				locateContactGroup,
				updateContactGroup2,
				updateContactGroup,
			};
		};
export type DeleteContactGroupsResult = AxiosResponse<ContactsContactGroupList>;
export type ListContactGroupsResult = AxiosResponse<ContactsContactGroupList>;
export type MergeContactGroupsResult = AxiosResponse<ContactsContactGroupList>;
export type ResetContactGroupsResult = AxiosResponse<ContactsContactGroupList>;
export type DeleteContactGroupResult = AxiosResponse<ContactsContactGroup>;
export type LocateContactGroupResult = AxiosResponse<ContactsContactGroup>;
export type UpdateContactGroup2Result = AxiosResponse<ContactsContactGroupList>;
export type UpdateContactGroupResult = AxiosResponse<ContactsContactGroupList>;

// --- footer end
