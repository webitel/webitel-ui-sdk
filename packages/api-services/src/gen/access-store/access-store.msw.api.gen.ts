/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type {
	ApiListAccessResponseV1,
	ApiToggleDefaultAccessResponse,
	ApiUpdateAccessResponseV1,
} from '.././_models';

export const getAccessStoreListDefaultAccessResponseMock = (
	overrideResponse: Partial<ApiListAccessResponseV1> = {},
): ApiListAccessResponseV1 => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			granted: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			grantee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			grantor: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getAccessStoreToggleDefaultAccessResponseMock = (
	overrideResponse: Partial<ApiToggleDefaultAccessResponse> = {},
): ApiToggleDefaultAccessResponse => ({
	granted: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			granted: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			grantee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			grantor: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	revoked: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			granted: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			grantee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			grantor: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getAccessStoreListObjectAccessResponseMock = (
	overrideResponse: Partial<ApiListAccessResponseV1> = {},
): ApiListAccessResponseV1 => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			granted: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			grantee: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			grantor: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					user: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getAccessStoreToggleObjectAccessResponseMock = (
	overrideResponse: Partial<ApiUpdateAccessResponseV1> = {},
): ApiUpdateAccessResponseV1 => ({
	granted: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	revoked: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getAccessStoreListDefaultAccessMockHandler = (
	overrideResponse?:
		| ApiListAccessResponseV1
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiListAccessResponseV1> | ApiListAccessResponseV1),
) => {
	return http.get('*/acl/object.name}/object.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAccessStoreListDefaultAccessResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAccessStoreToggleDefaultAccessMockHandler = (
	overrideResponse?:
		| ApiToggleDefaultAccessResponse
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) =>
				| Promise<ApiToggleDefaultAccessResponse>
				| ApiToggleDefaultAccessResponse),
) => {
	return http.patch(
		'*/acl/object.name}/object.id}/grantor/:grantor',
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getAccessStoreToggleDefaultAccessResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		},
	);
};

export const getAccessStoreListObjectAccessMockHandler = (
	overrideResponse?:
		| ApiListAccessResponseV1
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ApiListAccessResponseV1> | ApiListAccessResponseV1),
) => {
	return http.get('*/object.name}/object.id}/acl', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAccessStoreListObjectAccessResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAccessStoreToggleObjectAccessMockHandler = (
	overrideResponse?:
		| ApiUpdateAccessResponseV1
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<ApiUpdateAccessResponseV1> | ApiUpdateAccessResponseV1),
) => {
	return http.patch('*/object.name}/object.id}/acl', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAccessStoreToggleObjectAccessResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getAccessStoreMock = () => [
	getAccessStoreListDefaultAccessMockHandler(),
	getAccessStoreToggleDefaultAccessMockHandler(),
	getAccessStoreListObjectAccessMockHandler(),
	getAccessStoreToggleObjectAccessMockHandler(),
];
