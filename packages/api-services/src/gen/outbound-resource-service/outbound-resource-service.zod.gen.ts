/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary List of OutboundResource
 */
export const searchOutboundResourceQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const searchOutboundResourceResponse = zod.object({
	items: zod
		.array(
			zod.object({
				parameters: zod
					.object({
						cidType: zod.string().optional(),
						ignoreEarlyMedia: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				enabled: zod.boolean().optional(),
				errorIds: zod.array(zod.string()).optional(),
				failureDialDelay: zod.number().optional(),
				gateway: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				lastErrorAt: zod.string().optional(),
				lastErrorId: zod.string().optional(),
				limit: zod.number().optional(),
				maxSuccessivelyErrors: zod.number().optional(),
				name: zod.string().optional(),
				number: zod.string().optional(),
				patterns: zod.array(zod.string()).optional(),
				reserve: zod.boolean().optional(),
				rps: zod.number().optional(),
				successivelyErrors: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create OutboundResource
 */
export const createOutboundResourceBody = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const createOutboundResourceResponse = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	lastErrorAt: zod.string().optional(),
	lastErrorId: zod.string().optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	successivelyErrors: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Remove OutboundResource
 */
export const deleteOutboundResourceParams = zod.object({
	id: zod.string(),
});

export const deleteOutboundResourceQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteOutboundResourceResponse = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	lastErrorAt: zod.string().optional(),
	lastErrorId: zod.string().optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	successivelyErrors: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary OutboundResource item
 */
export const readOutboundResourceParams = zod.object({
	id: zod.string(),
});

export const readOutboundResourceQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readOutboundResourceResponse = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	lastErrorAt: zod.string().optional(),
	lastErrorId: zod.string().optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	successivelyErrors: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Patch OutboundResource
 */
export const patchOutboundResourceParams = zod.object({
	id: zod.string(),
});

export const patchOutboundResourceBody = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	fields: zod.array(zod.string()).optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchOutboundResourceResponse = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	lastErrorAt: zod.string().optional(),
	lastErrorId: zod.string().optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	successivelyErrors: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Update OutboundResource
 */
export const updateOutboundResourceParams = zod.object({
	id: zod.string(),
});

export const updateOutboundResourceBody = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const updateOutboundResourceResponse = zod.object({
	parameters: zod
		.object({
			cidType: zod.string().optional(),
			ignoreEarlyMedia: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	enabled: zod.boolean().optional(),
	errorIds: zod.array(zod.string()).optional(),
	failureDialDelay: zod.number().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	lastErrorAt: zod.string().optional(),
	lastErrorId: zod.string().optional(),
	limit: zod.number().optional(),
	maxSuccessivelyErrors: zod.number().optional(),
	name: zod.string().optional(),
	number: zod.string().optional(),
	patterns: zod.array(zod.string()).optional(),
	reserve: zod.boolean().optional(),
	rps: zod.number().optional(),
	successivelyErrors: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Remove ResourceDisplays
 */
export const deleteOutboundResourceDisplaysParams = zod.object({
	resource_id: zod.string(),
});

export const deleteOutboundResourceDisplaysQueryParams = zod.object({
	items: zod.array(zod.string()).optional(),
});

export const deleteOutboundResourceDisplaysResponse = zod.object({});

/**
 * @summary List of ResourceDisplay
 */
export const searchOutboundResourceDisplayParams = zod.object({
	resource_id: zod.string(),
});

export const searchOutboundResourceDisplayQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const searchOutboundResourceDisplayResponse = zod.object({
	items: zod
		.array(
			zod.object({
				display: zod.string().optional(),
				id: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create CreateOutboundResourceDisplay
 */
export const createOutboundResourceDisplayParams = zod.object({
	resource_id: zod.string(),
});

export const createOutboundResourceDisplayBody = zod.object({
	display: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const createOutboundResourceDisplayResponse = zod.object({
	display: zod.string().optional(),
	id: zod.string().optional(),
});

/**
 * @summary Create CreateOutboundResourceDisplay
 */
export const createOutboundResourceDisplayBulkParams = zod.object({
	resource_id: zod.string(),
});

export const createOutboundResourceDisplayBulkBody = zod.object({
	items: zod
		.array(
			zod.object({
				display: zod.string().optional(),
				domainId: zod.string().optional(),
				resourceId: zod.string().optional(),
			}),
		)
		.optional(),
});

export const createOutboundResourceDisplayBulkResponse = zod.object({
	id: zod.array(zod.string()).optional(),
});

/**
 * @summary Remove ResourceDisplay
 */
export const deleteOutboundResourceDisplayParams = zod.object({
	resource_id: zod.string(),
	id: zod.string(),
});

export const deleteOutboundResourceDisplayQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteOutboundResourceDisplayResponse = zod.object({
	display: zod.string().optional(),
	id: zod.string().optional(),
});

/**
 * @summary ResourceDisplay item
 */
export const readOutboundResourceDisplayParams = zod.object({
	resource_id: zod.string(),
	id: zod.string(),
});

export const readOutboundResourceDisplayQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readOutboundResourceDisplayResponse = zod.object({
	display: zod.string().optional(),
	id: zod.string().optional(),
});

/**
 * @summary Update ResourceDisplay
 */
export const updateOutboundResourceDisplayParams = zod.object({
	resource_id: zod.string(),
	id: zod.string(),
});

export const updateOutboundResourceDisplayBody = zod.object({
	display: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const updateOutboundResourceDisplayResponse = zod.object({
	display: zod.string().optional(),
	id: zod.string().optional(),
});
