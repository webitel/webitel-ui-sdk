/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const searchAuditFormQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
	teamId: zod.array(zod.number()).optional(),
	enabled: zod.boolean().optional(),
	editable: zod
		.boolean()
		.optional()
		.describe('bool archive = 9;\n\nbool active = 11; // not archive'),
	question: zod.string().optional(),
});

export const searchAuditFormResponseItemsItemQuestionsItemTypeDefault =
	'question_default';

export const searchAuditFormResponse = zod.object({
	items: zod
		.array(
			zod.object({
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				editable: zod.boolean().optional(),
				enabled: zod.boolean().optional(),
				id: zod.number().optional(),
				name: zod.string().optional(),
				questions: zod
					.array(
						zod.object({
							criticalViolation: zod.boolean().optional(),
							description: zod.string().optional(),
							max: zod.number().optional(),
							min: zod.number().optional(),
							options: zod
								.array(
									zod.object({
										name: zod.string().optional(),
										score: zod.number().optional(),
									}),
								)
								.optional(),
							question: zod.string().optional(),
							required: zod.boolean().optional(),
							type: zod
								.enum([
									'question_default',
									'question_score',
									'question_option',
									'question_yes',
								])
								.default(
									searchAuditFormResponseItemsItemQuestionsItemTypeDefault,
								),
						}),
					)
					.optional(),
				teams: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const createAuditFormBodyQuestionsItemTypeDefault = 'question_default';

export const createAuditFormBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(createAuditFormBodyQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const createAuditFormResponseQuestionsItemTypeDefault =
	'question_default';

export const createAuditFormResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	editable: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(createAuditFormResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const searchAuditRateParams = zod.object({
	form_id: zod.number(),
});

export const searchAuditRateQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	createdAtFrom: zod.string().optional(),
	createdAtTo: zod.string().optional(),
	id: zod.array(zod.number()).optional(),
	callId: zod.array(zod.string()).optional(),
	ratedUser: zod.array(zod.string()).optional(),
});

export const searchAuditRateResponseItemsItemQuestionsItemTypeDefault =
	'question_default';

export const searchAuditRateResponse = zod.object({
	items: zod
		.array(
			zod.object({
				answers: zod
					.array(
						zod.object({
							comment: zod.string().optional(),
							score: zod.number().optional(),
							updatedAt: zod.string().optional(),
							updatedBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				comment: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				criticalCount: zod.string().optional(),
				form: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				questions: zod
					.array(
						zod.object({
							criticalViolation: zod.boolean().optional(),
							description: zod.string().optional(),
							max: zod.number().optional(),
							min: zod.number().optional(),
							options: zod
								.array(
									zod.object({
										name: zod.string().optional(),
										score: zod.number().optional(),
									}),
								)
								.optional(),
							question: zod.string().optional(),
							required: zod.boolean().optional(),
							type: zod
								.enum([
									'question_default',
									'question_score',
									'question_option',
									'question_yes',
								])
								.default(
									searchAuditRateResponseItemsItemQuestionsItemTypeDefault,
								),
						}),
					)
					.optional(),
				ratedUser: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				scoreOptional: zod.number().optional(),
				scoreRequired: zod.number().optional(),
				selectYesCount: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const deleteAuditFormParams = zod.object({
	id: zod.number(),
});

export const deleteAuditFormResponseQuestionsItemTypeDefault =
	'question_default';

export const deleteAuditFormResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	editable: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(deleteAuditFormResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const readAuditFormParams = zod.object({
	id: zod.number(),
});

export const readAuditFormResponseQuestionsItemTypeDefault = 'question_default';

export const readAuditFormResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	editable: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(readAuditFormResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchAuditFormParams = zod.object({
	id: zod.number(),
});

export const patchAuditFormBodyQuestionsItemTypeDefault = 'question_default';

export const patchAuditFormBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(patchAuditFormBodyQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const patchAuditFormResponseQuestionsItemTypeDefault =
	'question_default';

export const patchAuditFormResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	editable: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(patchAuditFormResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateAuditFormParams = zod.object({
	id: zod.number(),
});

export const updateAuditFormBodyQuestionsItemTypeDefault = 'question_default';

export const updateAuditFormBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(updateAuditFormBodyQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const updateAuditFormResponseQuestionsItemTypeDefault =
	'question_default';

export const updateAuditFormResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	editable: zod.boolean().optional(),
	enabled: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(updateAuditFormResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	teams: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createAuditFormRateBody = zod.object({
	answers: zod
		.array(
			zod.object({
				score: zod.number().optional(),
			}),
		)
		.optional(),
	callId: zod.string().optional(),
	comment: zod.string().optional(),
	form: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createAuditFormRateResponseQuestionsItemTypeDefault =
	'question_default';

export const createAuditFormRateResponse = zod.object({
	answers: zod
		.array(
			zod.object({
				comment: zod.string().optional(),
				score: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	comment: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	criticalCount: zod.string().optional(),
	form: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(createAuditFormRateResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	ratedUser: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	scoreOptional: zod.number().optional(),
	scoreRequired: zod.number().optional(),
	selectYesCount: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const deleteAuditRateParams = zod.object({
	id: zod.string(),
});

export const deleteAuditRateResponseQuestionsItemTypeDefault =
	'question_default';

export const deleteAuditRateResponse = zod.object({
	answers: zod
		.array(
			zod.object({
				comment: zod.string().optional(),
				score: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	comment: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	criticalCount: zod.string().optional(),
	form: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(deleteAuditRateResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	ratedUser: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	scoreOptional: zod.number().optional(),
	scoreRequired: zod.number().optional(),
	selectYesCount: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const readAuditRateParams = zod.object({
	id: zod.string(),
});

export const readAuditRateResponseQuestionsItemTypeDefault = 'question_default';

export const readAuditRateResponse = zod.object({
	answers: zod
		.array(
			zod.object({
				comment: zod.string().optional(),
				score: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	comment: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	criticalCount: zod.string().optional(),
	form: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(readAuditRateResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	ratedUser: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	scoreOptional: zod.number().optional(),
	scoreRequired: zod.number().optional(),
	selectYesCount: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateAuditRateParams = zod.object({
	id: zod.string(),
});

export const updateAuditRateBody = zod.object({
	answers: zod
		.array(
			zod.object({
				comment: zod.string().optional(),
				score: zod.number().optional(),
			}),
		)
		.optional(),
	comment: zod.string().optional(),
});

export const updateAuditRateResponseQuestionsItemTypeDefault =
	'question_default';

export const updateAuditRateResponse = zod.object({
	answers: zod
		.array(
			zod.object({
				comment: zod.string().optional(),
				score: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	comment: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	criticalCount: zod.string().optional(),
	form: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	questions: zod
		.array(
			zod.object({
				criticalViolation: zod.boolean().optional(),
				description: zod.string().optional(),
				max: zod.number().optional(),
				min: zod.number().optional(),
				options: zod
					.array(
						zod.object({
							name: zod.string().optional(),
							score: zod.number().optional(),
						}),
					)
					.optional(),
				question: zod.string().optional(),
				required: zod.boolean().optional(),
				type: zod
					.enum([
						'question_default',
						'question_score',
						'question_option',
						'question_yes',
					])
					.default(updateAuditRateResponseQuestionsItemTypeDefault),
			}),
		)
		.optional(),
	ratedUser: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	scoreOptional: zod.number().optional(),
	scoreRequired: zod.number().optional(),
	selectYesCount: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
