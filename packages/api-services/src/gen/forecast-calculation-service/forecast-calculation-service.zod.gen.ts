/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const forecastCalculationServiceSearchForecastCalculationQueryParams =
	zod.object({
		q: zod.string().optional(),
		page: zod.number().optional(),
		size: zod.number().optional(),
		sort: zod.string().optional(),
		fields: zod.array(zod.string()).optional(),
	});

export const forecastCalculationServiceSearchForecastCalculationResponse =
	zod.object({
		items: zod
			.array(
				zod.object({
					args: zod.array(zod.string()).optional(),
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					description: zod.string().optional(),
					domainId: zod.string().optional(),
					id: zod.string().optional(),
					name: zod.string().optional(),
					procedure: zod.string().optional(),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
				}),
			)
			.optional(),
		next: zod.boolean().optional(),
	});

export const forecastCalculationServiceCreateForecastCalculationBody =
	zod.object({
		item: zod
			.object({
				args: zod.array(zod.string()).optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				procedure: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			})
			.optional(),
	});

export const forecastCalculationServiceCreateForecastCalculationResponse =
	zod.object({
		item: zod
			.object({
				args: zod.array(zod.string()).optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				procedure: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			})
			.optional(),
	});

export const forecastCalculationServiceDeleteForecastCalculationParams =
	zod.object({
		id: zod.string(),
	});

export const forecastCalculationServiceDeleteForecastCalculationResponse =
	zod.object({
		id: zod.string().optional(),
	});

export const forecastCalculationServiceReadForecastCalculationParams =
	zod.object({
		id: zod.string(),
	});

export const forecastCalculationServiceReadForecastCalculationQueryParams =
	zod.object({
		fields: zod.array(zod.string()).optional(),
	});

export const forecastCalculationServiceReadForecastCalculationResponse =
	zod.object({
		item: zod
			.object({
				args: zod.array(zod.string()).optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				procedure: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			})
			.optional(),
	});

export const forecastCalculationServiceExecuteForecastCalculationParams =
	zod.object({
		id: zod.string(),
	});

export const forecastCalculationServiceExecuteForecastCalculationQueryParams =
	zod.object({
		teamId: zod.string().optional(),
		forecastDataFrom: zod.string().optional(),
		forecastDataTo: zod.string().optional(),
	});

export const forecastCalculationServiceExecuteForecastCalculationResponse =
	zod.object({
		items: zod
			.array(
				zod.object({
					agents: zod.string().optional(),
					timestamp: zod.string().optional(),
				}),
			)
			.optional(),
	});

export const forecastCalculationServiceUpdateForecastCalculationParams =
	zod.object({
		'item.id': zod.string(),
	});

export const forecastCalculationServiceUpdateForecastCalculationBody =
	zod.object({
		item: zod
			.object({
				args: zod.array(zod.string()).optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				name: zod.string().optional(),
				procedure: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			})
			.optional(),
	});

export const forecastCalculationServiceUpdateForecastCalculationResponse =
	zod.object({
		item: zod
			.object({
				args: zod.array(zod.string()).optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				procedure: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			})
			.optional(),
	});
