/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type {
	WfmCreateForecastCalculationResponse,
	WfmDeleteForecastCalculationResponse,
	WfmExecuteForecastCalculationResponse,
	WfmReadForecastCalculationResponse,
	WfmSearchForecastCalculationResponse,
	WfmUpdateForecastCalculationResponse,
} from '.././_models';

export const getForecastCalculationServiceSearchForecastCalculationResponseMock =
	(
		overrideResponse: Partial<WfmSearchForecastCalculationResponse> = {},
	): WfmSearchForecastCalculationResponse => ({
		items: faker.helpers.arrayElement([
			Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				args: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				createdAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				createdBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
				description: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				domainId: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				procedure: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
			})),
			undefined,
		]),
		next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
		...overrideResponse,
	});

export const getForecastCalculationServiceCreateForecastCalculationResponseMock =
	(
		overrideResponse: Partial<WfmCreateForecastCalculationResponse> = {},
	): WfmCreateForecastCalculationResponse => ({
		item: faker.helpers.arrayElement([
			{
				args: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				createdAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				createdBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
				description: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				domainId: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				procedure: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
			},
			undefined,
		]),
		...overrideResponse,
	});

export const getForecastCalculationServiceDeleteForecastCalculationResponseMock =
	(
		overrideResponse: Partial<WfmDeleteForecastCalculationResponse> = {},
	): WfmDeleteForecastCalculationResponse => ({
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		...overrideResponse,
	});

export const getForecastCalculationServiceReadForecastCalculationResponseMock =
	(
		overrideResponse: Partial<WfmReadForecastCalculationResponse> = {},
	): WfmReadForecastCalculationResponse => ({
		item: faker.helpers.arrayElement([
			{
				args: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				createdAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				createdBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
				description: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				domainId: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				procedure: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
			},
			undefined,
		]),
		...overrideResponse,
	});

export const getForecastCalculationServiceExecuteForecastCalculationResponseMock =
	(
		overrideResponse: Partial<WfmExecuteForecastCalculationResponse> = {},
	): WfmExecuteForecastCalculationResponse => ({
		items: faker.helpers.arrayElement([
			Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				agents: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				timestamp: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			})),
			undefined,
		]),
		...overrideResponse,
	});

export const getForecastCalculationServiceUpdateForecastCalculationResponseMock =
	(
		overrideResponse: Partial<WfmUpdateForecastCalculationResponse> = {},
	): WfmUpdateForecastCalculationResponse => ({
		item: faker.helpers.arrayElement([
			{
				args: faker.helpers.arrayElement([
					Array.from(
						{ length: faker.number.int({ min: 1, max: 10 }) },
						(_, i) => i + 1,
					).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
					undefined,
				]),
				createdAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				createdBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
				description: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				domainId: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				procedure: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedAt: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				updatedBy: faker.helpers.arrayElement([
					{
						id: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
						name: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
			},
			undefined,
		]),
		...overrideResponse,
	});

export const getForecastCalculationServiceSearchForecastCalculationMockHandler =
	(
		overrideResponse?:
			| WfmSearchForecastCalculationResponse
			| ((
					info: Parameters<Parameters<typeof http.get>[1]>[0],
			  ) =>
					| Promise<WfmSearchForecastCalculationResponse>
					| WfmSearchForecastCalculationResponse),
	) => {
		return http.get('*/wfm/lookups/forecast_calculation', async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getForecastCalculationServiceSearchForecastCalculationResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		});
	};

export const getForecastCalculationServiceCreateForecastCalculationMockHandler =
	(
		overrideResponse?:
			| WfmCreateForecastCalculationResponse
			| ((
					info: Parameters<Parameters<typeof http.post>[1]>[0],
			  ) =>
					| Promise<WfmCreateForecastCalculationResponse>
					| WfmCreateForecastCalculationResponse),
	) => {
		return http.post('*/wfm/lookups/forecast_calculation', async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getForecastCalculationServiceCreateForecastCalculationResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		});
	};

export const getForecastCalculationServiceDeleteForecastCalculationMockHandler =
	(
		overrideResponse?:
			| WfmDeleteForecastCalculationResponse
			| ((
					info: Parameters<Parameters<typeof http.delete>[1]>[0],
			  ) =>
					| Promise<WfmDeleteForecastCalculationResponse>
					| WfmDeleteForecastCalculationResponse),
	) => {
		return http.delete(
			'*/wfm/lookups/forecast_calculation/:id',
			async (info) => {
				await delay(1000);

				return new HttpResponse(
					JSON.stringify(
						overrideResponse !== undefined
							? typeof overrideResponse === 'function'
								? await overrideResponse(info)
								: overrideResponse
							: getForecastCalculationServiceDeleteForecastCalculationResponseMock(),
					),
					{ status: 200, headers: { 'Content-Type': 'application/json' } },
				);
			},
		);
	};

export const getForecastCalculationServiceReadForecastCalculationMockHandler = (
	overrideResponse?:
		| WfmReadForecastCalculationResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmReadForecastCalculationResponse>
				| WfmReadForecastCalculationResponse),
) => {
	return http.get('*/wfm/lookups/forecast_calculation/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getForecastCalculationServiceReadForecastCalculationResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getForecastCalculationServiceExecuteForecastCalculationMockHandler =
	(
		overrideResponse?:
			| WfmExecuteForecastCalculationResponse
			| ((
					info: Parameters<Parameters<typeof http.get>[1]>[0],
			  ) =>
					| Promise<WfmExecuteForecastCalculationResponse>
					| WfmExecuteForecastCalculationResponse),
	) => {
		return http.get(
			'*/wfm/lookups/forecast_calculation/:id/execute',
			async (info) => {
				await delay(1000);

				return new HttpResponse(
					JSON.stringify(
						overrideResponse !== undefined
							? typeof overrideResponse === 'function'
								? await overrideResponse(info)
								: overrideResponse
							: getForecastCalculationServiceExecuteForecastCalculationResponseMock(),
					),
					{ status: 200, headers: { 'Content-Type': 'application/json' } },
				);
			},
		);
	};

export const getForecastCalculationServiceUpdateForecastCalculationMockHandler =
	(
		overrideResponse?:
			| WfmUpdateForecastCalculationResponse
			| ((
					info: Parameters<Parameters<typeof http.put>[1]>[0],
			  ) =>
					| Promise<WfmUpdateForecastCalculationResponse>
					| WfmUpdateForecastCalculationResponse),
	) => {
		return http.put(
			'*/wfm/lookups/forecast_calculation/item.id}',
			async (info) => {
				await delay(1000);

				return new HttpResponse(
					JSON.stringify(
						overrideResponse !== undefined
							? typeof overrideResponse === 'function'
								? await overrideResponse(info)
								: overrideResponse
							: getForecastCalculationServiceUpdateForecastCalculationResponseMock(),
					),
					{ status: 200, headers: { 'Content-Type': 'application/json' } },
				);
			},
		);
	};
export const getForecastCalculationServiceMock = () => [
	getForecastCalculationServiceSearchForecastCalculationMockHandler(),
	getForecastCalculationServiceCreateForecastCalculationMockHandler(),
	getForecastCalculationServiceDeleteForecastCalculationMockHandler(),
	getForecastCalculationServiceReadForecastCalculationMockHandler(),
	getForecastCalculationServiceExecuteForecastCalculationMockHandler(),
	getForecastCalculationServiceUpdateForecastCalculationMockHandler(),
];
