/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { EngineEmailAuthType } from '.././_models';
import type {
	EngineEmailProfile,
	EngineListEmailProfile,
	EngineLoginEmailProfileResponse,
	EngineLogoutEmailProfileResponse,
	EngineTestEmailProfileResponse,
} from '.././_models';

export const getSearchEmailProfileResponseMock = (
	overrideResponse: Partial<EngineListEmailProfile> = {},
): EngineListEmailProfile => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			activityAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			authType: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			fetchError: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			fetchInterval: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			imapHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			imapPort: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			listen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			logged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			login: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			mailbox: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			params: faker.helpers.arrayElement([
				{
					oauth2: faker.helpers.arrayElement([
						{
							clientId: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							clientSecret: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							redirectUrl: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
				},
				undefined,
			]),
			password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			schema: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			smtpHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			smtpPort: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateEmailProfileResponseMock = (
	overrideResponse: Partial<EngineEmailProfile> = {},
): EngineEmailProfile => ({
	activityAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	authType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fetchError: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	fetchInterval: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	imapHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imapPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	listen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	logged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	login: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	mailbox: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	params: faker.helpers.arrayElement([
		{
			oauth2: faker.helpers.arrayElement([
				{
					clientId: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					clientSecret: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					redirectUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	smtpHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	smtpPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteEmailProfileResponseMock = (
	overrideResponse: Partial<EngineEmailProfile> = {},
): EngineEmailProfile => ({
	activityAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	authType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fetchError: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	fetchInterval: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	imapHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imapPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	listen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	logged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	login: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	mailbox: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	params: faker.helpers.arrayElement([
		{
			oauth2: faker.helpers.arrayElement([
				{
					clientId: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					clientSecret: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					redirectUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	smtpHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	smtpPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadEmailProfileResponseMock = (
	overrideResponse: Partial<EngineEmailProfile> = {},
): EngineEmailProfile => ({
	activityAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	authType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fetchError: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	fetchInterval: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	imapHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imapPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	listen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	logged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	login: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	mailbox: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	params: faker.helpers.arrayElement([
		{
			oauth2: faker.helpers.arrayElement([
				{
					clientId: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					clientSecret: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					redirectUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	smtpHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	smtpPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchEmailProfileResponseMock = (
	overrideResponse: Partial<EngineEmailProfile> = {},
): EngineEmailProfile => ({
	activityAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	authType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fetchError: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	fetchInterval: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	imapHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imapPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	listen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	logged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	login: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	mailbox: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	params: faker.helpers.arrayElement([
		{
			oauth2: faker.helpers.arrayElement([
				{
					clientId: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					clientSecret: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					redirectUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	smtpHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	smtpPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateEmailProfileResponseMock = (
	overrideResponse: Partial<EngineEmailProfile> = {},
): EngineEmailProfile => ({
	activityAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	authType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	fetchError: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	fetchInterval: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	imapHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imapPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	listen: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	logged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	login: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	mailbox: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	params: faker.helpers.arrayElement([
		{
			oauth2: faker.helpers.arrayElement([
				{
					clientId: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					clientSecret: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					redirectUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	password: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	smtpHost: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	smtpPort: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getLoginEmailProfileResponseMock = (
	overrideResponse: Partial<EngineLoginEmailProfileResponse> = {},
): EngineLoginEmailProfileResponse => ({
	authType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineEmailAuthType)),
		undefined,
	]),
	cookie: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha(20),
		},
		undefined,
	]),
	redirectUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getLogoutEmailProfileResponseMock =
	(): EngineLogoutEmailProfileResponse => ({});

export const getTestEmailProfileResponseMock = (
	overrideResponse: Partial<EngineTestEmailProfileResponse> = {},
): EngineTestEmailProfileResponse => ({
	error: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	...overrideResponse,
});

export const getSearchEmailProfileMockHandler = (
	overrideResponse?:
		| EngineListEmailProfile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListEmailProfile> | EngineListEmailProfile),
) => {
	return http.get('*/email/profile', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateEmailProfileMockHandler = (
	overrideResponse?:
		| EngineEmailProfile
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineEmailProfile> | EngineEmailProfile),
) => {
	return http.post('*/email/profile', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteEmailProfileMockHandler = (
	overrideResponse?:
		| EngineEmailProfile
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineEmailProfile> | EngineEmailProfile),
) => {
	return http.delete('*/email/profile/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadEmailProfileMockHandler = (
	overrideResponse?:
		| EngineEmailProfile
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineEmailProfile> | EngineEmailProfile),
) => {
	return http.get('*/email/profile/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchEmailProfileMockHandler = (
	overrideResponse?:
		| EngineEmailProfile
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineEmailProfile> | EngineEmailProfile),
) => {
	return http.patch('*/email/profile/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateEmailProfileMockHandler = (
	overrideResponse?:
		| EngineEmailProfile
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineEmailProfile> | EngineEmailProfile),
) => {
	return http.put('*/email/profile/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLoginEmailProfileMockHandler = (
	overrideResponse?:
		| EngineLoginEmailProfileResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<EngineLoginEmailProfileResponse>
				| EngineLoginEmailProfileResponse),
) => {
	return http.get('*/email/profile/:id/login', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLoginEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLogoutEmailProfileMockHandler = (
	overrideResponse?:
		| EngineLogoutEmailProfileResponse
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) =>
				| Promise<EngineLogoutEmailProfileResponse>
				| EngineLogoutEmailProfileResponse),
) => {
	return http.patch('*/email/profile/:id/logout', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLogoutEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTestEmailProfileMockHandler = (
	overrideResponse?:
		| EngineTestEmailProfileResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<EngineTestEmailProfileResponse>
				| EngineTestEmailProfileResponse),
) => {
	return http.get('*/email/profile/:id/test', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTestEmailProfileResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getEmailProfileServiceMock = () => [
	getSearchEmailProfileMockHandler(),
	getCreateEmailProfileMockHandler(),
	getDeleteEmailProfileMockHandler(),
	getReadEmailProfileMockHandler(),
	getPatchEmailProfileMockHandler(),
	getUpdateEmailProfileMockHandler(),
	getLoginEmailProfileMockHandler(),
	getLogoutEmailProfileMockHandler(),
	getTestEmailProfileMockHandler(),
];
