/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary Search EmailProfile
 */
export const searchEmailProfileQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
});

export const searchEmailProfileResponseItemsItemAuthTypeDefault =
	'EmailAuthTypeUndefined';

export const searchEmailProfileResponse = zod.object({
	items: zod
		.array(
			zod.object({
				activityAt: zod.string().optional(),
				authType: zod
					.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
					.default(searchEmailProfileResponseItemsItemAuthTypeDefault),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				enabled: zod.boolean().optional(),
				fetchError: zod.string().optional(),
				fetchInterval: zod.number().optional(),
				id: zod.string().optional(),
				imapHost: zod.string().optional(),
				imapPort: zod.number().optional(),
				listen: zod.boolean().optional(),
				logged: zod.boolean().optional(),
				login: zod.string().optional(),
				mailbox: zod.string().optional(),
				name: zod.string().optional(),
				params: zod
					.object({
						oauth2: zod
							.object({
								clientId: zod.string().optional(),
								clientSecret: zod.string().optional(),
								redirectUrl: zod.string().optional(),
							})
							.optional(),
					})
					.optional(),
				password: zod.string().optional(),
				schema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				smtpHost: zod.string().optional(),
				smtpPort: zod.number().optional(),
				state: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create EmailProfile
 */
export const createEmailProfileBodyAuthTypeDefault = 'EmailAuthTypeUndefined';

export const createEmailProfileBody = zod.object({
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(createEmailProfileBodyAuthTypeDefault),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchInterval: zod.number().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
});

export const createEmailProfileResponseAuthTypeDefault =
	'EmailAuthTypeUndefined';

export const createEmailProfileResponse = zod.object({
	activityAt: zod.string().optional(),
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(createEmailProfileResponseAuthTypeDefault),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchError: zod.string().optional(),
	fetchInterval: zod.number().optional(),
	id: zod.string().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	logged: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
	state: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Remove EmailProfile
 */
export const deleteEmailProfileParams = zod.object({
	id: zod.string(),
});

export const deleteEmailProfileResponseAuthTypeDefault =
	'EmailAuthTypeUndefined';

export const deleteEmailProfileResponse = zod.object({
	activityAt: zod.string().optional(),
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(deleteEmailProfileResponseAuthTypeDefault),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchError: zod.string().optional(),
	fetchInterval: zod.number().optional(),
	id: zod.string().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	logged: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
	state: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary EmailProfile item
 */
export const readEmailProfileParams = zod.object({
	id: zod.string(),
});

export const readEmailProfileResponseAuthTypeDefault = 'EmailAuthTypeUndefined';

export const readEmailProfileResponse = zod.object({
	activityAt: zod.string().optional(),
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(readEmailProfileResponseAuthTypeDefault),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchError: zod.string().optional(),
	fetchInterval: zod.number().optional(),
	id: zod.string().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	logged: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
	state: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const patchEmailProfileParams = zod.object({
	id: zod.string(),
});

export const patchEmailProfileBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchInterval: zod.number().optional(),
	fields: zod.array(zod.string()).optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
});

export const patchEmailProfileResponseAuthTypeDefault =
	'EmailAuthTypeUndefined';

export const patchEmailProfileResponse = zod.object({
	activityAt: zod.string().optional(),
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(patchEmailProfileResponseAuthTypeDefault),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchError: zod.string().optional(),
	fetchInterval: zod.number().optional(),
	id: zod.string().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	logged: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
	state: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update EmailProfile
 */
export const updateEmailProfileParams = zod.object({
	id: zod.string(),
});

export const updateEmailProfileBodyAuthTypeDefault = 'EmailAuthTypeUndefined';

export const updateEmailProfileBody = zod.object({
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(updateEmailProfileBodyAuthTypeDefault),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchInterval: zod.number().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
});

export const updateEmailProfileResponseAuthTypeDefault =
	'EmailAuthTypeUndefined';

export const updateEmailProfileResponse = zod.object({
	activityAt: zod.string().optional(),
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(updateEmailProfileResponseAuthTypeDefault),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	fetchError: zod.string().optional(),
	fetchInterval: zod.number().optional(),
	id: zod.string().optional(),
	imapHost: zod.string().optional(),
	imapPort: zod.number().optional(),
	listen: zod.boolean().optional(),
	logged: zod.boolean().optional(),
	login: zod.string().optional(),
	mailbox: zod.string().optional(),
	name: zod.string().optional(),
	params: zod
		.object({
			oauth2: zod
				.object({
					clientId: zod.string().optional(),
					clientSecret: zod.string().optional(),
					redirectUrl: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
	password: zod.string().optional(),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	smtpHost: zod.string().optional(),
	smtpPort: zod.number().optional(),
	state: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const loginEmailProfileParams = zod.object({
	id: zod.number(),
});

export const loginEmailProfileResponseAuthTypeDefault =
	'EmailAuthTypeUndefined';

export const loginEmailProfileResponse = zod.object({
	authType: zod
		.enum(['EmailAuthTypeUndefined', 'Plain', 'OAuth2'])
		.default(loginEmailProfileResponseAuthTypeDefault),
	cookie: zod.record(zod.string(), zod.string()).optional(),
	redirectUrl: zod.string().optional(),
});

export const logoutEmailProfileParams = zod.object({
	id: zod.number(),
});

export const logoutEmailProfileResponse = zod.object({});

/**
 * @summary EmailProfile check login
 */
export const testEmailProfileParams = zod.object({
	id: zod.number(),
});

export const testEmailProfileResponse = zod.object({
	error: zod.string().optional(),
});
