/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const addUserAccessTokenParams = zod.object({
	'token.user.id': zod.string().describe('identifier'),
});

export const addUserAccessTokenQueryParams = zod.object({
	enable: zod
		.boolean()
		.optional()
		.describe(
			'ObjectId user = 1; // [required]\n string usage = 2;  // [optional] usage description\n bool enable = 3;',
		),
});

export const addUserAccessTokenBody = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	token: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	usage: zod.string().optional(),
	user: zod
		.object({
			name: zod.string().optional(),
		})
		.optional(),
});

export const addUserAccessTokenResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		id: zod.string().optional(),
		token: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		usage: zod.string().optional(),
		user: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('UserId lookup value.');

export const updateUserAccessToken2Params = zod.object({
	'update.user.id': zod.string().describe('identifier'),
	'update.id': zod.string().describe('tokenKey::token_key'),
});

export const updateUserAccessToken2QueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('[optional] PATCH implementation'),
	enable: zod.boolean().optional(),
});

export const updateUserAccessToken2Body = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	token: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	usage: zod.string().optional(),
	user: zod
		.object({
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateUserAccessToken2Response = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		id: zod.string().optional(),
		token: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		usage: zod.string().optional(),
		user: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('UserId lookup value.');

export const updateUserAccessTokenParams = zod.object({
	'update.user.id': zod.string().describe('identifier'),
	'update.id': zod.string().describe('tokenKey::token_key'),
});

export const updateUserAccessTokenQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('[optional] PATCH implementation'),
	enable: zod.boolean().optional(),
});

export const updateUserAccessTokenBody = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	token: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	usage: zod.string().optional(),
	user: zod
		.object({
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateUserAccessTokenResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		id: zod.string().optional(),
		token: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		usage: zod.string().optional(),
		user: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('UserId lookup value.');

export const listUserAccessTokenParams = zod.object({
	'user.id': zod.string().describe('identifier'),
});

export const listUserAccessTokenQueryParams = zod.object({
	userName: zod.string().optional().describe('display name'),
	q: zod
		.string()
		.optional()
		.describe('int32 page = 2;\nint64 size = 3;\n\n.usage ILIKE :q'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Search Options -------------------------\n\nselect: output (fields,...)',
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('select: order by (fields,...)'),
	page: zod.number().optional().describe('select: offset {page}'),
	size: zod.number().optional().describe('select: limit {size}'),
});

export const listUserAccessTokenResponse = zod.object({
	items: zod
		.array(
			zod
				.object({
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					deletedAt: zod.string().optional(),
					deletedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					id: zod.string().optional(),
					token: zod.string().optional(),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					usage: zod.string().optional(),
					user: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
				})
				.describe('UserId lookup value.'),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
	size: zod.string().optional(),
});

export const deleteUserAccessTokenParams = zod.object({
	'user.id': zod.string().describe('identifier'),
	id: zod.string().describe('tokenKey::uuid'),
});

export const deleteUserAccessTokenQueryParams = zod.object({
	userName: zod.string().optional().describe('display name'),
});

export const deleteUserAccessTokenResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		id: zod.string().optional(),
		token: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		usage: zod.string().optional(),
		user: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('UserId lookup value.');

export const getUserAccessTokenParams = zod.object({
	'user.id': zod.string().describe('identifier'),
	id: zod.string().describe('tokenKey::uuid'),
});

export const getUserAccessTokenQueryParams = zod.object({
	userName: zod.string().optional().describe('display name'),
});

export const getUserAccessTokenResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		id: zod.string().optional(),
		token: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		usage: zod.string().optional(),
		user: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('UserId lookup value.');
