/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const attemptCallbackParams = zod.object({
	attempt_id: zod.string(),
});

export const attemptCallbackBody = zod.object({
	agentId: zod.number().optional(),
	description: zod.string().optional(),
	display: zod.boolean().optional(),
	excludeCurrentCommunication: zod.boolean().optional(),
	expireAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	onlyCurrentCommunication: zod.boolean().optional(),
	status: zod.string().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waitBetweenRetries: zod.number().optional(),
});

export const attemptCallbackResponse = zod.object({
	status: zod.string().optional(),
});

/**
 * @summary Search of Member
 */
export const searchMembersQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	queueId: zod.array(zod.number()).optional(),
	bucketId: zod.array(zod.number()).optional(),
	destination: zod.string().optional(),
	createdAtFrom: zod.string().optional(),
	createdAtTo: zod.string().optional(),
	offeringAtFrom: zod.string().optional(),
	offeringAtTo: zod.string().optional(),
	stopCause: zod.array(zod.string()).optional(),
	priorityFrom: zod.string().optional(),
	priorityTo: zod.string().optional(),
	name: zod.string().optional(),
	attemptsFrom: zod.string().optional(),
	attemptsTo: zod.string().optional(),
	agentId: zod.array(zod.number()).optional(),
});

export const searchMembersResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				attempts: zod.number().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				communications: zod
					.array(
						zod.object({
							attempts: zod.number().optional(),
							description: zod.string().optional(),
							destination: zod.string().optional(),
							display: zod.string().optional(),
							dtmf: zod.string().optional(),
							id: zod.string().optional(),
							lastActivityAt: zod.string().optional(),
							lastCause: zod.string().optional(),
							priority: zod.number().optional(),
							resource: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							state: zod.number().optional(),
							stopAt: zod.string().optional(),
							type: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				createdAt: zod.string().optional(),
				expireAt: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				minOfferingAt: zod.string().optional(),
				name: zod.string().optional(),
				priority: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reserved: zod.boolean().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopCause: zod.string().optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const patchMemberOneParams = zod.object({
	id: zod.string(),
});

export const patchMemberOneBody = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	domainId: zod.string().optional(),
	expireAt: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchMemberOneResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				attempts: zod.number().optional(),
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				lastCause: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.number().optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	expireAt: zod.string().optional(),
	id: zod.string().optional(),
	lastActivityAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reserved: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary SearchAttempts
 */
export const searchAttemptsQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	joinedAtFrom: zod.string().optional(),
	joinedAtTo: zod.string().optional(),
	id: zod.array(zod.string()).optional(),
	queueId: zod.array(zod.string()).optional(),
	bucketId: zod.array(zod.string()).optional(),
	memberId: zod.array(zod.string()).optional(),
	agentId: zod.array(zod.string()).optional(),
	result: zod.array(zod.string()).optional(),
	leavingAtFrom: zod.string().optional(),
	leavingAtTo: zod.string().optional(),
	offeringAtFrom: zod.string().optional(),
	offeringAtTo: zod.string().optional(),
	durationFrom: zod.string().optional(),
	durationTo: zod.string().optional(),
	offeredAgentId: zod.array(zod.string()).optional(),
});

export const searchAttemptsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				agentCallId: zod.string().optional(),
				attempts: zod.number().optional(),
				bridgedAt: zod.string().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				channel: zod.string().optional(),
				destination: zod
					.object({
						attempts: zod.number().optional(),
						description: zod.string().optional(),
						destination: zod.string().optional(),
						display: zod.string().optional(),
						dtmf: zod.string().optional(),
						id: zod.string().optional(),
						lastActivityAt: zod.string().optional(),
						lastCause: zod.string().optional(),
						priority: zod.number().optional(),
						resource: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						state: zod.number().optional(),
						stopAt: zod.string().optional(),
						type: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					})
					.optional(),
				display: zod.string().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				lastStateChange: zod.string().optional(),
				leavingAt: zod.string().optional(),
				list: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				member: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				memberCallId: zod.string().optional(),
				offeringAt: zod.string().optional(),
				position: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reportingAt: zod.string().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				result: zod.string().optional(),
				state: zod.string().optional(),
				timeout: zod.string().optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const resetActiveAttemptsBody = zod.object({
	attemptType: zod.array(zod.string()).optional(),
	idleForMinutes: zod.string().optional(),
	result: zod.string().optional(),
});

export const resetActiveAttemptsResponse = zod.object({});

/**
 * @summary SearchMemberAttempts
 */
export const searchAttemptsHistoryQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	joinedAtFrom: zod.string().optional(),
	joinedAtTo: zod.string().optional(),
	id: zod.array(zod.string()).optional(),
	queueId: zod.array(zod.string()).optional(),
	bucketId: zod.array(zod.string()).optional(),
	memberId: zod.array(zod.string()).optional(),
	agentId: zod.array(zod.string()).optional(),
	result: zod.array(zod.string()).optional(),
	leavingAtFrom: zod.string().optional(),
	leavingAtTo: zod.string().optional(),
	offeringAtFrom: zod.string().optional(),
	offeringAtTo: zod.string().optional(),
	durationFrom: zod.string().optional(),
	durationTo: zod.string().optional(),
	offeredAgentId: zod.array(zod.string()).optional(),
});

export const searchAttemptsHistoryResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				agentCallId: zod.string().optional(),
				amdResult: zod.string().optional(),
				attempts: zod.number().optional(),
				bridgedAt: zod.string().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				channel: zod.string().optional(),
				destination: zod
					.object({
						attempts: zod.number().optional(),
						description: zod.string().optional(),
						destination: zod.string().optional(),
						display: zod.string().optional(),
						dtmf: zod.string().optional(),
						id: zod.string().optional(),
						lastActivityAt: zod.string().optional(),
						lastCause: zod.string().optional(),
						priority: zod.number().optional(),
						resource: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						state: zod.number().optional(),
						stopAt: zod.string().optional(),
						type: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					})
					.optional(),
				display: zod.string().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				leavingAt: zod.string().optional(),
				list: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				member: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				memberCallId: zod.string().optional(),
				offeredAgents: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				offeringAt: zod.string().optional(),
				position: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reportingAt: zod.string().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				result: zod.string().optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const attemptsRenewalResultParams = zod.object({
	attempt_id: zod.string(),
});

export const attemptsRenewalResultBody = zod.object({
	renewal: zod.number().optional(),
});

export const attemptsRenewalResultResponse = zod.object({});

/**
 * @summary DeleteAllMembers
 */
export const deleteAllMembersBody = zod.object({
	agentId: zod.array(zod.number()).optional(),
	attempts: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	bucketId: zod.array(zod.number()).optional(),
	createdAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	destination: zod.string().optional(),
	id: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	numbers: zod.array(zod.string()).optional(),
	offeringAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	priority: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	q: zod.string().optional(),
	queueId: zod.array(zod.string()).optional(),
	size: zod.number().optional(),
	sort: zod.string().optional(),
	stopCause: zod.array(zod.string()).optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	withoutMembers: zod.boolean().optional(),
});

export const deleteAllMembersResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				attempts: zod.number().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				communications: zod
					.array(
						zod.object({
							attempts: zod.number().optional(),
							description: zod.string().optional(),
							destination: zod.string().optional(),
							display: zod.string().optional(),
							dtmf: zod.string().optional(),
							id: zod.string().optional(),
							lastActivityAt: zod.string().optional(),
							lastCause: zod.string().optional(),
							priority: zod.number().optional(),
							resource: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							state: zod.number().optional(),
							stopAt: zod.string().optional(),
							type: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				createdAt: zod.string().optional(),
				expireAt: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				minOfferingAt: zod.string().optional(),
				name: zod.string().optional(),
				priority: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reserved: zod.boolean().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopCause: zod.string().optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary DeleteMembers
 */
export const deleteMembersParams = zod.object({
	queue_id: zod.string(),
});

export const deleteMembersBody = zod.object({
	agentId: zod.array(zod.number()).optional(),
	attempts: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	bucketId: zod.array(zod.number()).optional(),
	createdAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	destination: zod.string().optional(),
	id: zod.array(zod.string()).optional(),
	ids: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	numbers: zod.array(zod.string()).optional(),
	offeringAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	priority: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	q: zod.string().optional(),
	size: zod.number().optional(),
	sort: zod.string().optional(),
	stopCause: zod.array(zod.string()).optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	withoutMembers: zod.boolean().optional(),
});

export const deleteMembersResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				attempts: zod.number().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				communications: zod
					.array(
						zod.object({
							attempts: zod.number().optional(),
							description: zod.string().optional(),
							destination: zod.string().optional(),
							display: zod.string().optional(),
							dtmf: zod.string().optional(),
							id: zod.string().optional(),
							lastActivityAt: zod.string().optional(),
							lastCause: zod.string().optional(),
							priority: zod.number().optional(),
							resource: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							state: zod.number().optional(),
							stopAt: zod.string().optional(),
							type: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				createdAt: zod.string().optional(),
				expireAt: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				minOfferingAt: zod.string().optional(),
				name: zod.string().optional(),
				priority: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reserved: zod.boolean().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopCause: zod.string().optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary List of Member
 */
export const searchMemberInQueueParams = zod.object({
	queue_id: zod.number(),
});

export const searchMemberInQueueQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.string()).optional(),
	bucketId: zod.array(zod.number()).optional(),
	destination: zod.string().optional(),
	createdAtFrom: zod.string().optional(),
	createdAtTo: zod.string().optional(),
	offeringAtFrom: zod.string().optional(),
	offeringAtTo: zod.string().optional(),
	stopCause: zod.array(zod.string()).optional(),
	priorityFrom: zod.string().optional(),
	priorityTo: zod.string().optional(),
	name: zod.string().optional(),
	attemptsFrom: zod.string().optional(),
	attemptsTo: zod.string().optional(),
	agentId: zod.array(zod.number()).optional(),
	variablesString: zod
		.string()
		.optional()
		.describe(
			'This is a request variable of the map type. The query format is "map_name[key]=value", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age["bob"]=18',
		),
});

export const searchMemberInQueueResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				attempts: zod.number().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				communications: zod
					.array(
						zod.object({
							attempts: zod.number().optional(),
							description: zod.string().optional(),
							destination: zod.string().optional(),
							display: zod.string().optional(),
							dtmf: zod.string().optional(),
							id: zod.string().optional(),
							lastActivityAt: zod.string().optional(),
							lastCause: zod.string().optional(),
							priority: zod.number().optional(),
							resource: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							state: zod.number().optional(),
							stopAt: zod.string().optional(),
							type: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				createdAt: zod.string().optional(),
				expireAt: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				minOfferingAt: zod.string().optional(),
				name: zod.string().optional(),
				priority: zod.number().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reserved: zod.boolean().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopCause: zod.string().optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create Member
 */
export const createMemberParams = zod.object({
	queue_id: zod.string(),
});

export const createMemberBody = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	domainId: zod.string().optional(),
	expireAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const createMemberResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				attempts: zod.number().optional(),
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				lastCause: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.number().optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	expireAt: zod.string().optional(),
	id: zod.string().optional(),
	lastActivityAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reserved: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Create Member
 */
export const createMemberBulkParams = zod.object({
	queue_id: zod.string(),
});

export const createMemberBulkBody = zod.object({
	fileName: zod.string().optional(),
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				communications: zod
					.array(
						zod.object({
							description: zod.string().optional(),
							destination: zod.string().optional(),
							display: zod.string().optional(),
							dtmf: zod.string().optional(),
							priority: zod.number().optional(),
							resource: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							stopAt: zod.string().optional(),
							type: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				expireAt: zod.string().optional(),
				minOfferingAt: zod.string().optional(),
				name: zod.string().optional(),
				priority: zod.number().optional(),
				skill: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
});

export const createMemberBulkResponse = zod.object({
	ids: zod.array(zod.string()).optional(),
});

/**
 * @summary ResetMembers
 */
export const resetMembersParams = zod.object({
	queue_id: zod.string(),
});

export const resetMembersBody = zod.object({
	agentId: zod.array(zod.number()).optional(),
	bucketId: zod.array(zod.string()).optional(),
	createdAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	id: zod.array(zod.string()).optional(),
	ids: zod.array(zod.string()).optional(),
	numbers: zod.array(zod.string()).optional(),
	priority: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.array(zod.string()).optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const resetMembersResponse = zod.object({
	count: zod.string().optional(),
});

/**
 * @summary DeleteMember
 */
export const deleteMemberParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const deleteMemberQueryParams = zod.object({
	domainId: zod.string().optional(),
	force: zod.boolean().optional(),
});

export const deleteMemberResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				attempts: zod.number().optional(),
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				lastCause: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.number().optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	expireAt: zod.string().optional(),
	id: zod.string().optional(),
	lastActivityAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reserved: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary ReadQueueRouting
 */
export const readMemberParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const readMemberQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readMemberResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				attempts: zod.number().optional(),
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				lastCause: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.number().optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	expireAt: zod.string().optional(),
	id: zod.string().optional(),
	lastActivityAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reserved: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Patch Member
 */
export const patchMemberParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const patchMemberBody = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	domainId: zod.string().optional(),
	expireAt: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchMemberResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				attempts: zod.number().optional(),
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				lastCause: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.number().optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	expireAt: zod.string().optional(),
	id: zod.string().optional(),
	lastActivityAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reserved: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary UpdateMember
 */
export const updateMemberParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const updateMemberBody = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	domainId: zod.string().optional(),
	expireAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const updateMemberResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	attempts: zod.number().optional(),
	bucket: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	communications: zod
		.array(
			zod.object({
				attempts: zod.number().optional(),
				description: zod.string().optional(),
				destination: zod.string().optional(),
				display: zod.string().optional(),
				dtmf: zod.string().optional(),
				id: zod.string().optional(),
				lastActivityAt: zod.string().optional(),
				lastCause: zod.string().optional(),
				priority: zod.number().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.number().optional(),
				stopAt: zod.string().optional(),
				type: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	expireAt: zod.string().optional(),
	id: zod.string().optional(),
	lastActivityAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	name: zod.string().optional(),
	priority: zod.number().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reserved: zod.boolean().optional(),
	skill: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	stopCause: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary SearchMemberAttempts
 */
export const searchMemberAttemptsParams = zod.object({
	queue_id: zod.string(),
	member_id: zod.string(),
});

export const searchMemberAttemptsQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const searchMemberAttemptsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				active: zod.boolean().optional(),
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				answeredAt: zod.string().optional(),
				attempts: zod.number().optional(),
				bridgedAt: zod.string().optional(),
				bucket: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional(),
				destination: zod.string().optional(),
				hangupAt: zod.string().optional(),
				id: zod.string().optional(),
				legAId: zod.string().optional(),
				legBId: zod.string().optional(),
				member: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				node: zod.string().optional(),
				originateAt: zod.string().optional(),
				resource: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				result: zod.string().optional(),
				weight: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Offline queue
 */
export const createAttemptParams = zod.object({
	queue_id: zod.string(),
	member_id: zod.string(),
});

export const createAttemptBody = zod.object({
	agentId: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const createAttemptResponse = zod.object({
	attemptId: zod.string().optional(),
});

export const attemptResultParams = zod.object({
	queue_id: zod.number(),
	member_id: zod.string(),
	attempt_id: zod.string(),
});

export const attemptResultBody = zod.object({
	agentId: zod.number().optional(),
	description: zod.string().optional(),
	display: zod.boolean().optional(),
	excludeCurrentCommunication: zod.boolean().optional(),
	expireAt: zod.string().optional(),
	minOfferingAt: zod.string().optional(),
	nextMemberId: zod.string().optional(),
	onlyCurrentCommunication: zod.boolean().optional(),
	status: zod.string().optional(),
	transferQueueId: zod.string().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waitBetweenRetries: zod.number().optional(),
});

export const attemptResultResponse = zod.object({
	status: zod.string().optional(),
});
