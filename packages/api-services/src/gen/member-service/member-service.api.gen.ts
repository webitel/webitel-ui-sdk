/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	DeleteMemberParams,
	EngineAttemptRenewalResultResponse,
	EngineAttemptResultResponse,
	EngineCreateAttemptResponse,
	EngineDeleteAllMembersRequest,
	EngineListAttempt,
	EngineListHistoryAttempt,
	EngineListMember,
	EngineListMemberAttempt,
	EngineMemberBulkResponse,
	EngineMemberInQueue,
	EngineMemberServiceAttemptCallbackBody,
	EngineMemberServiceAttemptResultBody,
	EngineMemberServiceAttemptsRenewalResultBody,
	EngineMemberServiceCreateAttemptBody,
	EngineMemberServiceCreateMemberBody,
	EngineMemberServiceCreateMemberBulkBody,
	EngineMemberServiceDeleteMembersBody,
	EngineMemberServicePatchMemberBody,
	EngineMemberServicePatchMemberOneBody,
	EngineMemberServiceResetMembersBody,
	EngineMemberServiceUpdateMemberBody,
	EngineResetActiveAttemptsRequest,
	EngineResetActiveAttemptsResponse,
	EngineResetMembersResponse,
	ReadMemberParams,
	SearchAttemptsHistoryParams,
	SearchAttemptsParams,
	SearchMemberAttemptsParams,
	SearchMemberInQueueParams,
	SearchMembersParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getMemberService =
		// --- title end
		() => {
			// --- header end
			const attemptCallback = <
				TData = AxiosResponse<EngineAttemptResultResponse>,
			>(
				attemptId: string,
				engineMemberServiceAttemptCallbackBody: EngineMemberServiceAttemptCallbackBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/attempts/${attemptId}`,
					engineMemberServiceAttemptCallbackBody,
					options,
				);
			};
			/**
			 * @summary Search of Member
			 */
			const searchMembers = <TData = AxiosResponse<EngineListMember>>(
				params?: SearchMembersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/members', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const patchMemberOne = <TData = AxiosResponse<EngineMemberInQueue>>(
				id: string,
				engineMemberServicePatchMemberOneBody: EngineMemberServicePatchMemberOneBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/members/${id}`,
					engineMemberServicePatchMemberOneBody,
					options,
				);
			};
			/**
			 * @summary SearchAttempts
			 */
			const searchAttempts = <TData = AxiosResponse<EngineListAttempt>>(
				params?: SearchAttemptsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/queues/attempts/active', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const resetActiveAttempts = <
				TData = AxiosResponse<EngineResetActiveAttemptsResponse>,
			>(
				engineResetActiveAttemptsRequest: EngineResetActiveAttemptsRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/call_center/queues/attempts/active/reset',
					engineResetActiveAttemptsRequest,
					options,
				);
			};
			/**
			 * @summary SearchMemberAttempts
			 */
			const searchAttemptsHistory = <
				TData = AxiosResponse<EngineListHistoryAttempt>,
			>(
				params?: SearchAttemptsHistoryParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/queues/attempts/history', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const attemptsRenewalResult = <
				TData = AxiosResponse<EngineAttemptRenewalResultResponse>,
			>(
				attemptId: string,
				engineMemberServiceAttemptsRenewalResultBody: EngineMemberServiceAttemptsRenewalResultBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/queues/attempts/${attemptId}/renewal`,
					engineMemberServiceAttemptsRenewalResultBody,
					options,
				);
			};
			/**
			 * @summary DeleteAllMembers
			 */
			const deleteAllMembers = <TData = AxiosResponse<EngineListMember>>(
				engineDeleteAllMembersRequest: EngineDeleteAllMembersRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete('/call_center/queues/members', {
					data: engineDeleteAllMembersRequest,
					...options,
				});
			};
			/**
			 * @summary DeleteMembers
			 */
			const deleteMembers = <TData = AxiosResponse<EngineListMember>>(
				queueId: string,
				engineMemberServiceDeleteMembersBody: EngineMemberServiceDeleteMembersBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/call_center/queues/${queueId}/members`, {
					data: engineMemberServiceDeleteMembersBody,
					...options,
				});
			};
			/**
			 * @summary List of Member
			 */
			const searchMemberInQueue = <TData = AxiosResponse<EngineListMember>>(
				queueId: number,
				params?: SearchMemberInQueueParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/queues/${queueId}/members`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create Member
			 */
			const createMember = <TData = AxiosResponse<EngineMemberInQueue>>(
				queueId: string,
				engineMemberServiceCreateMemberBody: EngineMemberServiceCreateMemberBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/call_center/queues/${queueId}/members`,
					engineMemberServiceCreateMemberBody,
					options,
				);
			};
			/**
			 * @summary Create Member
			 */
			const createMemberBulk = <
				TData = AxiosResponse<EngineMemberBulkResponse>,
			>(
				queueId: string,
				engineMemberServiceCreateMemberBulkBody: EngineMemberServiceCreateMemberBulkBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/call_center/queues/${queueId}/members/bulk`,
					engineMemberServiceCreateMemberBulkBody,
					options,
				);
			};
			/**
			 * @summary ResetMembers
			 */
			const resetMembers = <TData = AxiosResponse<EngineResetMembersResponse>>(
				queueId: string,
				engineMemberServiceResetMembersBody: EngineMemberServiceResetMembersBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/queues/${queueId}/members/reset`,
					engineMemberServiceResetMembersBody,
					options,
				);
			};
			/**
			 * @summary DeleteMember
			 */
			const deleteMember = <TData = AxiosResponse<EngineMemberInQueue>>(
				queueId: string,
				id: string,
				params?: DeleteMemberParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/call_center/queues/${queueId}/members/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary ReadQueueRouting
			 */
			const readMember = <TData = AxiosResponse<EngineMemberInQueue>>(
				queueId: string,
				id: string,
				params?: ReadMemberParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/queues/${queueId}/members/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Patch Member
			 */
			const patchMember = <TData = AxiosResponse<EngineMemberInQueue>>(
				queueId: string,
				id: string,
				engineMemberServicePatchMemberBody: EngineMemberServicePatchMemberBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/queues/${queueId}/members/${id}`,
					engineMemberServicePatchMemberBody,
					options,
				);
			};
			/**
			 * @summary UpdateMember
			 */
			const updateMember = <TData = AxiosResponse<EngineMemberInQueue>>(
				queueId: string,
				id: string,
				engineMemberServiceUpdateMemberBody: EngineMemberServiceUpdateMemberBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/call_center/queues/${queueId}/members/${id}`,
					engineMemberServiceUpdateMemberBody,
					options,
				);
			};
			/**
			 * @summary SearchMemberAttempts
			 */
			const searchMemberAttempts = <
				TData = AxiosResponse<EngineListMemberAttempt>,
			>(
				queueId: string,
				memberId: string,
				params?: SearchMemberAttemptsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(
					`/call_center/queues/${queueId}/members/${memberId}/attempts`,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Offline queue
			 */
			const createAttempt = <
				TData = AxiosResponse<EngineCreateAttemptResponse>,
			>(
				queueId: string,
				memberId: string,
				engineMemberServiceCreateAttemptBody: EngineMemberServiceCreateAttemptBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/call_center/queues/${queueId}/members/${memberId}/attempts`,
					engineMemberServiceCreateAttemptBody,
					options,
				);
			};
			const attemptResult = <
				TData = AxiosResponse<EngineAttemptResultResponse>,
			>(
				queueId: number,
				memberId: string,
				attemptId: string,
				engineMemberServiceAttemptResultBody: EngineMemberServiceAttemptResultBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/queues/${queueId}/members/${memberId}/attempts/${attemptId}`,
					engineMemberServiceAttemptResultBody,
					options,
				);
			};

			// --- footer start
			return {
				attemptCallback,
				searchMembers,
				patchMemberOne,
				searchAttempts,
				resetActiveAttempts,
				searchAttemptsHistory,
				attemptsRenewalResult,
				deleteAllMembers,
				deleteMembers,
				searchMemberInQueue,
				createMember,
				createMemberBulk,
				resetMembers,
				deleteMember,
				readMember,
				patchMember,
				updateMember,
				searchMemberAttempts,
				createAttempt,
				attemptResult,
			};
		};
export type AttemptCallbackResult = AxiosResponse<EngineAttemptResultResponse>;
export type SearchMembersResult = AxiosResponse<EngineListMember>;
export type PatchMemberOneResult = AxiosResponse<EngineMemberInQueue>;
export type SearchAttemptsResult = AxiosResponse<EngineListAttempt>;
export type ResetActiveAttemptsResult =
	AxiosResponse<EngineResetActiveAttemptsResponse>;
export type SearchAttemptsHistoryResult =
	AxiosResponse<EngineListHistoryAttempt>;
export type AttemptsRenewalResultResult =
	AxiosResponse<EngineAttemptRenewalResultResponse>;
export type DeleteAllMembersResult = AxiosResponse<EngineListMember>;
export type DeleteMembersResult = AxiosResponse<EngineListMember>;
export type SearchMemberInQueueResult = AxiosResponse<EngineListMember>;
export type CreateMemberResult = AxiosResponse<EngineMemberInQueue>;
export type CreateMemberBulkResult = AxiosResponse<EngineMemberBulkResponse>;
export type ResetMembersResult = AxiosResponse<EngineResetMembersResponse>;
export type DeleteMemberResult = AxiosResponse<EngineMemberInQueue>;
export type ReadMemberResult = AxiosResponse<EngineMemberInQueue>;
export type PatchMemberResult = AxiosResponse<EngineMemberInQueue>;
export type UpdateMemberResult = AxiosResponse<EngineMemberInQueue>;
export type SearchMemberAttemptsResult = AxiosResponse<EngineListMemberAttempt>;
export type CreateAttemptResult = AxiosResponse<EngineCreateAttemptResponse>;
export type AttemptResultResult = AxiosResponse<EngineAttemptResultResponse>;

// --- footer end
