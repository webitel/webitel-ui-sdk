/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	StorageImportTemplate,
	StorageListImportTemplate,
} from '.././_models';
import { StorageImportSourceType } from '.././_models';

export const getSearchImportTemplateResponseMock = (
	overrideResponse: Partial<StorageListImportTemplate> = {},
): StorageListImportTemplate => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			parameters: faker.helpers.arrayElement([{}, undefined]),
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			source: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			sourceId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			sourceType: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(StorageImportSourceType)),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateImportTemplateResponseMock = (
	overrideResponse: Partial<StorageImportTemplate> = {},
): StorageImportTemplate => ({
	parameters: faker.helpers.arrayElement([{}, undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	source: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	sourceId: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	sourceType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageImportSourceType)),
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteImportTemplateResponseMock = (
	overrideResponse: Partial<StorageImportTemplate> = {},
): StorageImportTemplate => ({
	parameters: faker.helpers.arrayElement([{}, undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	source: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	sourceId: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	sourceType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageImportSourceType)),
		undefined,
	]),
	...overrideResponse,
});

export const getReadImportTemplateResponseMock = (
	overrideResponse: Partial<StorageImportTemplate> = {},
): StorageImportTemplate => ({
	parameters: faker.helpers.arrayElement([{}, undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	source: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	sourceId: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	sourceType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageImportSourceType)),
		undefined,
	]),
	...overrideResponse,
});

export const getPatchImportTemplateResponseMock = (
	overrideResponse: Partial<StorageImportTemplate> = {},
): StorageImportTemplate => ({
	parameters: faker.helpers.arrayElement([{}, undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	source: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	sourceId: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	sourceType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageImportSourceType)),
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateImportTemplateResponseMock = (
	overrideResponse: Partial<StorageImportTemplate> = {},
): StorageImportTemplate => ({
	parameters: faker.helpers.arrayElement([{}, undefined]),
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	source: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	sourceId: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	sourceType: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(StorageImportSourceType)),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchImportTemplateMockHandler = (
	overrideResponse?:
		| StorageListImportTemplate
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageListImportTemplate> | StorageListImportTemplate),
) => {
	return http.get('*/storage/import_templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchImportTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateImportTemplateMockHandler = (
	overrideResponse?:
		| StorageImportTemplate
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<StorageImportTemplate> | StorageImportTemplate),
) => {
	return http.post('*/storage/import_templates', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateImportTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteImportTemplateMockHandler = (
	overrideResponse?:
		| StorageImportTemplate
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<StorageImportTemplate> | StorageImportTemplate),
) => {
	return http.delete('*/storage/import_templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteImportTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadImportTemplateMockHandler = (
	overrideResponse?:
		| StorageImportTemplate
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageImportTemplate> | StorageImportTemplate),
) => {
	return http.get('*/storage/import_templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadImportTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchImportTemplateMockHandler = (
	overrideResponse?:
		| StorageImportTemplate
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<StorageImportTemplate> | StorageImportTemplate),
) => {
	return http.patch('*/storage/import_templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchImportTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateImportTemplateMockHandler = (
	overrideResponse?:
		| StorageImportTemplate
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<StorageImportTemplate> | StorageImportTemplate),
) => {
	return http.put('*/storage/import_templates/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateImportTemplateResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getImportTemplateServiceMock = () => [
	getSearchImportTemplateMockHandler(),
	getCreateImportTemplateMockHandler(),
	getDeleteImportTemplateMockHandler(),
	getReadImportTemplateMockHandler(),
	getPatchImportTemplateMockHandler(),
	getUpdateImportTemplateMockHandler(),
];
