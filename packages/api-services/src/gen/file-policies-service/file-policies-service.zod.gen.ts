/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary List of FilePolicy
 */
export const filePoliciesServiceSearchFilePoliciesQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const filePoliciesServiceSearchFilePoliciesResponseItemsItemChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceSearchFilePoliciesResponse = zod.object({
	items: zod
		.array(
			zod.object({
				channels: zod
					.array(
						zod.enum([
							'UnknownChannel',
							'ChatChannel',
							'MailChannel',
							'CallChannel',
							'LogChannel',
							'MediaChannel',
							'KnowledgebaseChannel',
							'CasesChannel',
						]),
					)
					.optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				enabled: zod.boolean().optional(),
				encrypt: zod.boolean().optional(),
				id: zod.number().optional(),
				maxUploadSize: zod.string().optional(),
				mimeTypes: zod.array(zod.string()).optional(),
				name: zod.string().optional(),
				position: zod.number().optional(),
				retentionDays: zod.number().optional(),
				speedDownload: zod.string().optional(),
				speedUpload: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create FilePolicy
 */
export const filePoliciesServiceCreateFilePolicyBodyChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceCreateFilePolicyBody = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
});

export const filePoliciesServiceCreateFilePolicyResponseChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceCreateFilePolicyResponse = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	position: zod.number().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const filePoliciesServiceMovePositionFilePolicyParams = zod.object({
	from_id: zod.number(),
	to_id: zod.number(),
});

export const filePoliciesServiceMovePositionFilePolicyBody = zod.object({
	fromId: zod.number().optional(),
	toId: zod.number().optional(),
});

export const filePoliciesServiceMovePositionFilePolicyResponse = zod.object({
	success: zod.boolean().optional(),
});

/**
 * @summary Remove FilePolicy
 */
export const filePoliciesServiceDeleteFilePolicyParams = zod.object({
	id: zod.number(),
});

export const filePoliciesServiceDeleteFilePolicyResponseChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceDeleteFilePolicyResponse = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	position: zod.number().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary FilePolicy item
 */
export const filePoliciesServiceReadFilePolicyParams = zod.object({
	id: zod.number(),
});

export const filePoliciesServiceReadFilePolicyResponseChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceReadFilePolicyResponse = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	position: zod.number().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Patch FilePolicy
 */
export const filePoliciesServicePatchFilePolicyParams = zod.object({
	id: zod.number(),
});

export const filePoliciesServicePatchFilePolicyBodyChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServicePatchFilePolicyBody = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
});

export const filePoliciesServicePatchFilePolicyResponseChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServicePatchFilePolicyResponse = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	position: zod.number().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update FilePolicy
 */
export const filePoliciesServiceUpdateFilePolicyParams = zod.object({
	id: zod.number(),
});

export const filePoliciesServiceUpdateFilePolicyBodyChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceUpdateFilePolicyBody = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
});

export const filePoliciesServiceUpdateFilePolicyResponseChannelsItemDefault =
	'UnknownChannel';

export const filePoliciesServiceUpdateFilePolicyResponse = zod.object({
	channels: zod
		.array(
			zod.enum([
				'UnknownChannel',
				'ChatChannel',
				'MailChannel',
				'CallChannel',
				'LogChannel',
				'MediaChannel',
				'KnowledgebaseChannel',
				'CasesChannel',
			]),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	maxUploadSize: zod.string().optional(),
	mimeTypes: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	position: zod.number().optional(),
	retentionDays: zod.number().optional(),
	speedDownload: zod.string().optional(),
	speedUpload: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const filePoliciesServiceFilePolicyApplyParams = zod.object({
	id: zod.number(),
});

export const filePoliciesServiceFilePolicyApplyBody = zod.object({
	id: zod.number().optional(),
});

export const filePoliciesServiceFilePolicyApplyResponse = zod.object({
	count: zod.string().optional(),
});
