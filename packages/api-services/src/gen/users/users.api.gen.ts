/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ApiCreateUserRequest,
	ApiCreateUserResponse,
	ApiDeleteUsersResponse,
	ApiLogoutUserResponse,
	ApiReadUserResponse,
	ApiSearchUsersRequest,
	ApiSearchUsersResponse,
	ApiUpdatePasswordRequest,
	ApiUpdatePasswordResponse,
	ApiUser,
	DeleteUsers2Params,
	DeleteUsersParams,
	ReadUser2Params,
	ReadUserParams,
	SearchUsersParams,
	UpdateUser2Body,
	UpdateUser2Params,
	UpdateUserBody,
	UpdateUserParams,
	UsersLogoutUserBody,
} from '.././_models';

// --- header start
//

export const // --- title start
	getUsers =
		// --- title end
		() => {
			// --- header end
			const readUser2 = <TData = AxiosResponse<ApiReadUserResponse>>(
				params?: ReadUser2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/user', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const deleteUsers2 = <TData = AxiosResponse<ApiDeleteUsersResponse>>(
				deleteUsers2Body: string[],
				params?: DeleteUsers2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete('/users', {
					data: deleteUsers2Body,
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const searchUsers = <TData = AxiosResponse<ApiSearchUsersResponse>>(
				params?: SearchUsersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/users', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const createUser = <TData = AxiosResponse<ApiCreateUserResponse>>(
				apiCreateUserRequest: ApiCreateUserRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/users', apiCreateUserRequest, options);
			};
			const updatePassword = <TData = AxiosResponse<ApiUpdatePasswordResponse>>(
				apiUpdatePasswordRequest: ApiUpdatePasswordRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					'/users/password',
					apiUpdatePasswordRequest,
					options,
				);
			};
			const searchUsers2 = <TData = AxiosResponse<ApiSearchUsersResponse>>(
				apiSearchUsersRequest: ApiSearchUsersRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/users/search', apiSearchUsersRequest, options);
			};
			const deleteUsers = <TData = AxiosResponse<ApiDeleteUsersResponse>>(
				id: string,
				params?: DeleteUsersParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/users/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const readUser = <TData = AxiosResponse<ApiReadUserResponse>>(
				id: string,
				params?: ReadUserParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/users/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const logoutUser = <TData = AxiosResponse<ApiLogoutUserResponse>>(
				id: string,
				usersLogoutUserBody: UsersLogoutUserBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(`/users/${id}/logout`, usersLogoutUserBody, options);
			};
			const updateUser2 = <TData = AxiosResponse<ApiUser>>(
				updateUser2Body: UpdateUser2Body,
				params?: UpdateUser2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch('/users/user.id}', updateUser2Body, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const updateUser = <TData = AxiosResponse<ApiUser>>(
				updateUserBody: UpdateUserBody,
				params?: UpdateUserParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put('/users/user.id}', updateUserBody, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				readUser2,
				deleteUsers2,
				searchUsers,
				createUser,
				updatePassword,
				searchUsers2,
				deleteUsers,
				readUser,
				logoutUser,
				updateUser2,
				updateUser,
			};
		};
export type ReadUser2Result = AxiosResponse<ApiReadUserResponse>;
export type DeleteUsers2Result = AxiosResponse<ApiDeleteUsersResponse>;
export type SearchUsersResult = AxiosResponse<ApiSearchUsersResponse>;
export type CreateUserResult = AxiosResponse<ApiCreateUserResponse>;
export type UpdatePasswordResult = AxiosResponse<ApiUpdatePasswordResponse>;
export type SearchUsers2Result = AxiosResponse<ApiSearchUsersResponse>;
export type DeleteUsersResult = AxiosResponse<ApiDeleteUsersResponse>;
export type ReadUserResult = AxiosResponse<ApiReadUserResponse>;
export type LogoutUserResult = AxiosResponse<ApiLogoutUserResponse>;
export type UpdateUser2Result = AxiosResponse<ApiUser>;
export type UpdateUserResult = AxiosResponse<ApiUser>;

// --- footer end
