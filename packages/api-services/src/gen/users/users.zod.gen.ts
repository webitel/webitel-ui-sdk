/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const usersReadUser2QueryParams = zod.object({
	id: zod.string().optional(),
	fields: zod.array(zod.string()).optional().describe('partial output'),
});

export const usersReadUser2Response = zod.object({
	user: zod
		.object({
			chatName: zod
				.string()
				.optional()
				.describe(
					'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
				),
			contact: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			device: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			devices: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional()
				.describe(
					'[editable] list of unique `regular` devices, attached to this user',
				),
			email: zod.string().optional(),
			extension: zod.string().optional(),
			hotdesks: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			license: zod
				.array(
					zod.object({
						expiresAt: zod.string().optional(),
						id: zod.string().optional(),
						issuedAt: zod.string().optional(),
						prod: zod.string().optional(),
						scope: zod.array(zod.string()).optional(),
						user: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					}),
				)
				.optional(),
			name: zod.string().optional(),
			password: zod.string().optional(),
			permissions: zod
				.array(
					zod.object({
						id: zod
							.string()
							.optional()
							.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
						name: zod.string().optional(),
						usage: zod.string().optional(),
					}),
				)
				.optional(),
			presence: zod
				.object({
					expires: zod.number().optional(),
					id: zod.string().optional(),
					note: zod.string().optional(),
					status: zod.string().optional(),
					timestamp: zod.string().optional(),
				})
				.optional(),
			profile: zod.record(zod.string(), zod.string()).optional(),
			roles: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			totpUrl: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			username: zod.string().optional(),
		})
		.optional()
		.describe('User profile.'),
});

export const usersDeleteUsers2QueryParams = zod.object({
	id: zod.string().optional().describe('ONE /users/{id}'),
	permanent: zod.boolean().optional(),
});

export const usersDeleteUsers2BodyItem = zod.string();
export const usersDeleteUsers2Body = zod.array(usersDeleteUsers2BodyItem);

export const usersDeleteUsers2Response = zod.object({
	deleted: zod
		.array(
			zod
				.object({
					chatName: zod
						.string()
						.optional()
						.describe(
							'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
						),
					contact: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					deletedAt: zod.string().optional(),
					deletedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					device: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					devices: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional()
						.describe(
							'[editable] list of unique `regular` devices, attached to this user',
						),
					email: zod.string().optional(),
					extension: zod.string().optional(),
					hotdesks: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					id: zod.string().optional(),
					license: zod
						.array(
							zod.object({
								expiresAt: zod.string().optional(),
								id: zod.string().optional(),
								issuedAt: zod.string().optional(),
								prod: zod.string().optional(),
								scope: zod.array(zod.string()).optional(),
								user: zod
									.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
									})
									.optional(),
							}),
						)
						.optional(),
					name: zod.string().optional(),
					password: zod.string().optional(),
					permissions: zod
						.array(
							zod.object({
								id: zod
									.string()
									.optional()
									.describe(
										"[required] e.g.: 'read', 'playback_record_file', ...",
									),
								name: zod.string().optional(),
								usage: zod.string().optional(),
							}),
						)
						.optional(),
					presence: zod
						.object({
							expires: zod.number().optional(),
							id: zod.string().optional(),
							note: zod.string().optional(),
							status: zod.string().optional(),
							timestamp: zod.string().optional(),
						})
						.optional(),
					profile: zod.record(zod.string(), zod.string()).optional(),
					roles: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					totpUrl: zod.string().optional(),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					username: zod.string().optional(),
				})
				.describe('User profile.'),
		)
		.optional(),
});

export const usersSearchUsersQueryParams = zod.object({
	id: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Base Filters ---------------------------\n\nfilter: .id = any({id}...)',
		),
	notId: zod
		.array(zod.string())
		.optional()
		.describe('filter: .id <> all({not_ids}...)'),
	q: zod
		.string()
		.optional()
		.describe(
			"----- User-specific Filters ------------------\n\nfilter: (.name|.username|.extension|.status) ILIKE '{q}'",
		),
	name: zod.string().optional().describe("filter: .name ILIKE '{name}'"),
	status: zod.string().optional().describe("filter: .status ILIKE '{status}'"),
	username: zod
		.string()
		.optional()
		.describe("filter: .username ILIKE '{username}'"),
	extension: zod
		.string()
		.optional()
		.describe("filter: .extension LIKE '{extension}'"),
	any: zod
		.boolean()
		.optional()
		.describe(
			"----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY\n\nfilter: include 'deleted' ALSO ! (inactive)",
		),
	deleted: zod
		.boolean()
		.optional()
		.describe('filter: .deleted_at NOTNULL (view: RECYCLE)'),
	presenceStatus: zod.string().optional(),
	presenceNote: zod.string().optional(),
	fields: zod
		.array(zod.string())
		.optional()
		.describe(
			'// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------\n\nselect: output (fields,...)',
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('select: order by (fields,...)'),
	page: zod.number().optional().describe('select: offset {page}'),
	size: zod.number().optional().describe('select: limit {size}'),
});

export const usersSearchUsersResponse = zod.object({
	items: zod
		.array(
			zod
				.object({
					chatName: zod
						.string()
						.optional()
						.describe(
							'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
						),
					contact: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					deletedAt: zod.string().optional(),
					deletedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					device: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					devices: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional()
						.describe(
							'[editable] list of unique `regular` devices, attached to this user',
						),
					email: zod.string().optional(),
					extension: zod.string().optional(),
					hotdesks: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					id: zod.string().optional(),
					license: zod
						.array(
							zod.object({
								expiresAt: zod.string().optional(),
								id: zod.string().optional(),
								issuedAt: zod.string().optional(),
								prod: zod.string().optional(),
								scope: zod.array(zod.string()).optional(),
								user: zod
									.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
									})
									.optional(),
							}),
						)
						.optional(),
					name: zod.string().optional(),
					password: zod.string().optional(),
					permissions: zod
						.array(
							zod.object({
								id: zod
									.string()
									.optional()
									.describe(
										"[required] e.g.: 'read', 'playback_record_file', ...",
									),
								name: zod.string().optional(),
								usage: zod.string().optional(),
							}),
						)
						.optional(),
					presence: zod
						.object({
							expires: zod.number().optional(),
							id: zod.string().optional(),
							note: zod.string().optional(),
							status: zod.string().optional(),
							timestamp: zod.string().optional(),
						})
						.optional(),
					profile: zod.record(zod.string(), zod.string()).optional(),
					roles: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					totpUrl: zod.string().optional(),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					username: zod.string().optional(),
				})
				.describe('User profile.'),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
	size: zod.number().optional(),
});

export const usersCreateUserBody = zod.object({
	confirmPassword: zod.string().optional(),
	user: zod
		.object({
			chatName: zod
				.string()
				.optional()
				.describe(
					'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
				),
			contact: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			device: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			devices: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional()
				.describe(
					'[editable] list of unique `regular` devices, attached to this user',
				),
			email: zod.string().optional(),
			extension: zod.string().optional(),
			hotdesks: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			license: zod
				.array(
					zod.object({
						expiresAt: zod.string().optional(),
						id: zod.string().optional(),
						issuedAt: zod.string().optional(),
						prod: zod.string().optional(),
						scope: zod.array(zod.string()).optional(),
						user: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					}),
				)
				.optional(),
			name: zod.string().optional(),
			password: zod.string().optional(),
			permissions: zod
				.array(
					zod.object({
						id: zod
							.string()
							.optional()
							.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
						name: zod.string().optional(),
						usage: zod.string().optional(),
					}),
				)
				.optional(),
			presence: zod
				.object({
					expires: zod.number().optional(),
					id: zod.string().optional(),
					note: zod.string().optional(),
					status: zod.string().optional(),
					timestamp: zod.string().optional(),
				})
				.optional(),
			profile: zod.record(zod.string(), zod.string()).optional(),
			roles: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			totpUrl: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			username: zod.string().optional(),
		})
		.optional()
		.describe('User profile.'),
	userPassword: zod.string().optional(),
});

export const usersCreateUserResponse = zod.object({
	user: zod
		.object({
			chatName: zod
				.string()
				.optional()
				.describe(
					'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
				),
			contact: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			device: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			devices: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional()
				.describe(
					'[editable] list of unique `regular` devices, attached to this user',
				),
			email: zod.string().optional(),
			extension: zod.string().optional(),
			hotdesks: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			license: zod
				.array(
					zod.object({
						expiresAt: zod.string().optional(),
						id: zod.string().optional(),
						issuedAt: zod.string().optional(),
						prod: zod.string().optional(),
						scope: zod.array(zod.string()).optional(),
						user: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					}),
				)
				.optional(),
			name: zod.string().optional(),
			password: zod.string().optional(),
			permissions: zod
				.array(
					zod.object({
						id: zod
							.string()
							.optional()
							.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
						name: zod.string().optional(),
						usage: zod.string().optional(),
					}),
				)
				.optional(),
			presence: zod
				.object({
					expires: zod.number().optional(),
					id: zod.string().optional(),
					note: zod.string().optional(),
					status: zod.string().optional(),
					timestamp: zod.string().optional(),
				})
				.optional(),
			profile: zod.record(zod.string(), zod.string()).optional(),
			roles: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			totpUrl: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			username: zod.string().optional(),
		})
		.optional()
		.describe('User profile.'),
});

export const usersSearchUsers2Body = zod.object({
	any: zod
		.boolean()
		.optional()
		.describe("filter: include 'deleted' ALSO ! (inactive)"),
	deleted: zod.boolean().optional(),
	extension: zod.string().optional(),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('select: output (fields,...)'),
	id: zod.array(zod.string()).optional().describe('filter: .id = any({id}...)'),
	name: zod.string().optional(),
	notId: zod.array(zod.string()).optional(),
	page: zod.number().optional(),
	presence: zod
		.object({
			note: zod.string().optional(),
			status: zod.string().optional(),
		})
		.optional(),
	q: zod
		.string()
		.optional()
		.describe("filter: (.name|.username|.extension|.status) ILIKE '{q}'"),
	size: zod.number().optional(),
	sort: zod.array(zod.string()).optional(),
	status: zod.string().optional(),
	username: zod.string().optional(),
});

export const usersSearchUsers2Response = zod.object({
	items: zod
		.array(
			zod
				.object({
					chatName: zod
						.string()
						.optional()
						.describe(
							'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
						),
					contact: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					deletedAt: zod.string().optional(),
					deletedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					device: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					devices: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional()
						.describe(
							'[editable] list of unique `regular` devices, attached to this user',
						),
					email: zod.string().optional(),
					extension: zod.string().optional(),
					hotdesks: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					id: zod.string().optional(),
					license: zod
						.array(
							zod.object({
								expiresAt: zod.string().optional(),
								id: zod.string().optional(),
								issuedAt: zod.string().optional(),
								prod: zod.string().optional(),
								scope: zod.array(zod.string()).optional(),
								user: zod
									.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
									})
									.optional(),
							}),
						)
						.optional(),
					name: zod.string().optional(),
					password: zod.string().optional(),
					permissions: zod
						.array(
							zod.object({
								id: zod
									.string()
									.optional()
									.describe(
										"[required] e.g.: 'read', 'playback_record_file', ...",
									),
								name: zod.string().optional(),
								usage: zod.string().optional(),
							}),
						)
						.optional(),
					presence: zod
						.object({
							expires: zod.number().optional(),
							id: zod.string().optional(),
							note: zod.string().optional(),
							status: zod.string().optional(),
							timestamp: zod.string().optional(),
						})
						.optional(),
					profile: zod.record(zod.string(), zod.string()).optional(),
					roles: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					totpUrl: zod.string().optional(),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					username: zod.string().optional(),
				})
				.describe('User profile.'),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
	size: zod.number().optional(),
});

export const usersDeleteUsersParams = zod.object({
	id: zod.string().describe('ONE /users/{id}'),
});

export const usersDeleteUsersQueryParams = zod.object({
	selection: zod
		.array(zod.string())
		.optional()
		.describe('MANY /users .ids=[id,...]'),
	permanent: zod.boolean().optional(),
});

export const usersDeleteUsersResponse = zod.object({
	deleted: zod
		.array(
			zod
				.object({
					chatName: zod
						.string()
						.optional()
						.describe(
							'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
						),
					contact: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					createdAt: zod.string().optional(),
					createdBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					deletedAt: zod.string().optional(),
					deletedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					device: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
					devices: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional()
						.describe(
							'[editable] list of unique `regular` devices, attached to this user',
						),
					email: zod.string().optional(),
					extension: zod.string().optional(),
					hotdesks: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					id: zod.string().optional(),
					license: zod
						.array(
							zod.object({
								expiresAt: zod.string().optional(),
								id: zod.string().optional(),
								issuedAt: zod.string().optional(),
								prod: zod.string().optional(),
								scope: zod.array(zod.string()).optional(),
								user: zod
									.object({
										id: zod.string().optional(),
										name: zod.string().optional(),
									})
									.optional(),
							}),
						)
						.optional(),
					name: zod.string().optional(),
					password: zod.string().optional(),
					permissions: zod
						.array(
							zod.object({
								id: zod
									.string()
									.optional()
									.describe(
										"[required] e.g.: 'read', 'playback_record_file', ...",
									),
								name: zod.string().optional(),
								usage: zod.string().optional(),
							}),
						)
						.optional(),
					presence: zod
						.object({
							expires: zod.number().optional(),
							id: zod.string().optional(),
							note: zod.string().optional(),
							status: zod.string().optional(),
							timestamp: zod.string().optional(),
						})
						.optional(),
					profile: zod.record(zod.string(), zod.string()).optional(),
					roles: zod
						.array(
							zod.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							}),
						)
						.optional(),
					totpUrl: zod.string().optional(),
					updatedAt: zod.string().optional(),
					updatedBy: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional()
						.describe('UserId lookup value.'),
					username: zod.string().optional(),
				})
				.describe('User profile.'),
		)
		.optional(),
});

export const usersReadUserParams = zod.object({
	id: zod.string(),
});

export const usersReadUserQueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('partial output'),
});

export const usersReadUserResponse = zod.object({
	user: zod
		.object({
			chatName: zod
				.string()
				.optional()
				.describe(
					'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
				),
			contact: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			deletedAt: zod.string().optional(),
			deletedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			device: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			devices: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional()
				.describe(
					'[editable] list of unique `regular` devices, attached to this user',
				),
			email: zod.string().optional(),
			extension: zod.string().optional(),
			hotdesks: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			id: zod.string().optional(),
			license: zod
				.array(
					zod.object({
						expiresAt: zod.string().optional(),
						id: zod.string().optional(),
						issuedAt: zod.string().optional(),
						prod: zod.string().optional(),
						scope: zod.array(zod.string()).optional(),
						user: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					}),
				)
				.optional(),
			name: zod.string().optional(),
			password: zod.string().optional(),
			permissions: zod
				.array(
					zod.object({
						id: zod
							.string()
							.optional()
							.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
						name: zod.string().optional(),
						usage: zod.string().optional(),
					}),
				)
				.optional(),
			presence: zod
				.object({
					expires: zod.number().optional(),
					id: zod.string().optional(),
					note: zod.string().optional(),
					status: zod.string().optional(),
					timestamp: zod.string().optional(),
				})
				.optional(),
			profile: zod.record(zod.string(), zod.string()).optional(),
			roles: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			totpUrl: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional()
				.describe('UserId lookup value.'),
			username: zod.string().optional(),
		})
		.optional()
		.describe('User profile.'),
});

export const usersLogoutUserParams = zod.object({
	id: zod.string(),
});

export const usersLogoutUserBody = zod.object({});

export const usersLogoutUserResponse = zod.object({});

export const usersUpdateUser2Params = zod.object({
	'user.id': zod.string().describe('Object ID'),
});

export const usersUpdateUser2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('PATCH: partial update'),
});

export const usersUpdateUser2Body = zod.object({
	chatName: zod
		.string()
		.optional()
		.describe(
			'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
		),
	contact: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	devices: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional()
		.describe(
			'[editable] list of unique `regular` devices, attached to this user',
		),
	email: zod.string().optional(),
	extension: zod.string().optional(),
	hotdesks: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	license: zod
		.array(
			zod.object({
				expiresAt: zod.string().optional(),
				id: zod.string().optional(),
				issuedAt: zod.string().optional(),
				prod: zod.string().optional(),
				scope: zod.array(zod.string()).optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	permissions: zod
		.array(
			zod.object({
				id: zod
					.string()
					.optional()
					.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
				name: zod.string().optional(),
				usage: zod.string().optional(),
			}),
		)
		.optional(),
	presence: zod
		.object({
			expires: zod.number().optional(),
			id: zod.string().optional(),
			note: zod.string().optional(),
			status: zod.string().optional(),
			timestamp: zod.string().optional(),
		})
		.optional(),
	profile: zod.record(zod.string(), zod.string()).optional(),
	roles: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	totpUrl: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	username: zod.string().optional(),
});

export const usersUpdateUser2Response = zod
	.object({
		chatName: zod
			.string()
			.optional()
			.describe(
				'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
			),
		contact: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional()
			.describe('UserId lookup value.'),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional()
			.describe('UserId lookup value.'),
		device: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		devices: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional()
			.describe(
				'[editable] list of unique `regular` devices, attached to this user',
			),
		email: zod.string().optional(),
		extension: zod.string().optional(),
		hotdesks: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional(),
		id: zod.string().optional(),
		license: zod
			.array(
				zod.object({
					expiresAt: zod.string().optional(),
					id: zod.string().optional(),
					issuedAt: zod.string().optional(),
					prod: zod.string().optional(),
					scope: zod.array(zod.string()).optional(),
					user: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
				}),
			)
			.optional(),
		name: zod.string().optional(),
		password: zod.string().optional(),
		permissions: zod
			.array(
				zod.object({
					id: zod
						.string()
						.optional()
						.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
					name: zod.string().optional(),
					usage: zod.string().optional(),
				}),
			)
			.optional(),
		presence: zod
			.object({
				expires: zod.number().optional(),
				id: zod.string().optional(),
				note: zod.string().optional(),
				status: zod.string().optional(),
				timestamp: zod.string().optional(),
			})
			.optional(),
		profile: zod.record(zod.string(), zod.string()).optional(),
		roles: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional(),
		totpUrl: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional()
			.describe('UserId lookup value.'),
		username: zod.string().optional(),
	})
	.describe('User profile.');

export const usersUpdateUserParams = zod.object({
	'user.id': zod.string().describe('Object ID'),
});

export const usersUpdateUserQueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('PATCH: partial update'),
});

export const usersUpdateUserBody = zod.object({
	chatName: zod
		.string()
		.optional()
		.describe(
			'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
		),
	contact: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	deletedAt: zod.string().optional(),
	deletedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	device: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	devices: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional()
		.describe(
			'[editable] list of unique `regular` devices, attached to this user',
		),
	email: zod.string().optional(),
	extension: zod.string().optional(),
	hotdesks: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	license: zod
		.array(
			zod.object({
				expiresAt: zod.string().optional(),
				id: zod.string().optional(),
				issuedAt: zod.string().optional(),
				prod: zod.string().optional(),
				scope: zod.array(zod.string()).optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	name: zod.string().optional(),
	password: zod.string().optional(),
	permissions: zod
		.array(
			zod.object({
				id: zod
					.string()
					.optional()
					.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
				name: zod.string().optional(),
				usage: zod.string().optional(),
			}),
		)
		.optional(),
	presence: zod
		.object({
			expires: zod.number().optional(),
			id: zod.string().optional(),
			note: zod.string().optional(),
			status: zod.string().optional(),
			timestamp: zod.string().optional(),
		})
		.optional(),
	profile: zod.record(zod.string(), zod.string()).optional(),
	roles: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	totpUrl: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional()
		.describe('UserId lookup value.'),
	username: zod.string().optional(),
});

export const usersUpdateUserResponse = zod
	.object({
		chatName: zod
			.string()
			.optional()
			.describe(
				'The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients.',
			),
		contact: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional()
			.describe('UserId lookup value.'),
		deletedAt: zod.string().optional(),
		deletedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional()
			.describe('UserId lookup value.'),
		device: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		devices: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional()
			.describe(
				'[editable] list of unique `regular` devices, attached to this user',
			),
		email: zod.string().optional(),
		extension: zod.string().optional(),
		hotdesks: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional(),
		id: zod.string().optional(),
		license: zod
			.array(
				zod.object({
					expiresAt: zod.string().optional(),
					id: zod.string().optional(),
					issuedAt: zod.string().optional(),
					prod: zod.string().optional(),
					scope: zod.array(zod.string()).optional(),
					user: zod
						.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						})
						.optional(),
				}),
			)
			.optional(),
		name: zod.string().optional(),
		password: zod.string().optional(),
		permissions: zod
			.array(
				zod.object({
					id: zod
						.string()
						.optional()
						.describe("[required] e.g.: 'read', 'playback_record_file', ..."),
					name: zod.string().optional(),
					usage: zod.string().optional(),
				}),
			)
			.optional(),
		presence: zod
			.object({
				expires: zod.number().optional(),
				id: zod.string().optional(),
				note: zod.string().optional(),
				status: zod.string().optional(),
				timestamp: zod.string().optional(),
			})
			.optional(),
		profile: zod.record(zod.string(), zod.string()).optional(),
		roles: zod
			.array(
				zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			)
			.optional(),
		totpUrl: zod.string().optional(),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional()
			.describe('UserId lookup value.'),
		username: zod.string().optional(),
	})
	.describe('User profile.');
