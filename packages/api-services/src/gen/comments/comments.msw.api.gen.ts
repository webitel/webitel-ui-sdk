/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type { ContactsComment, ContactsCommentList } from '.././_models';

export const getSearchCommentsResponseMock = (
	overrideResponse: Partial<ContactsCommentList> = {},
): ContactsCommentList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			format: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					bold: faker.helpers.arrayElement([{}, undefined]),
					codeblock: faker.helpers.arrayElement([
						{
							language: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					italic: faker.helpers.arrayElement([{}, undefined]),
					length: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					link: faker.helpers.arrayElement([
						{
							url: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						},
						undefined,
					]),
					monospace: faker.helpers.arrayElement([{}, undefined]),
					offset: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					strikethrough: faker.helpers.arrayElement([{}, undefined]),
					underline: faker.helpers.arrayElement([{}, undefined]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			text: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getPublishCommentCommentsResponseMock = (
	overrideResponse: Partial<ContactsComment> = {},
): ContactsComment => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	format: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			bold: faker.helpers.arrayElement([{}, undefined]),
			codeblock: faker.helpers.arrayElement([
				{
					language: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			italic: faker.helpers.arrayElement([{}, undefined]),
			length: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			link: faker.helpers.arrayElement([
				{
					url: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			monospace: faker.helpers.arrayElement([{}, undefined]),
			offset: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			strikethrough: faker.helpers.arrayElement([{}, undefined]),
			underline: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	text: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteCommentCommentsResponseMock = (): ContactsComment[] =>
	Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1,
	).map(() => ({
		createdAt: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		createdBy: faker.helpers.arrayElement([
			{
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				type: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			},
			undefined,
		]),
		etag: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		format: faker.helpers.arrayElement([
			Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				bold: faker.helpers.arrayElement([{}, undefined]),
				codeblock: faker.helpers.arrayElement([
					{
						language: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
				italic: faker.helpers.arrayElement([{}, undefined]),
				length: faker.helpers.arrayElement([
					faker.number.int({
						min: undefined,
						max: undefined,
						multipleOf: undefined,
					}),
					undefined,
				]),
				link: faker.helpers.arrayElement([
					{
						url: faker.helpers.arrayElement([
							faker.string.alpha({ length: { min: 10, max: 20 } }),
							undefined,
						]),
					},
					undefined,
				]),
				monospace: faker.helpers.arrayElement([{}, undefined]),
				offset: faker.helpers.arrayElement([
					faker.number.int({
						min: undefined,
						max: undefined,
						multipleOf: undefined,
					}),
					undefined,
				]),
				strikethrough: faker.helpers.arrayElement([{}, undefined]),
				underline: faker.helpers.arrayElement([{}, undefined]),
			})),
			undefined,
		]),
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		text: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		updatedAt: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		updatedBy: faker.helpers.arrayElement([
			{
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				type: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			},
			undefined,
		]),
		ver: faker.helpers.arrayElement([
			faker.number.int({
				min: undefined,
				max: undefined,
				multipleOf: undefined,
			}),
			undefined,
		]),
	}));

export const getUpdateCommentCommentsResponseMock = (
	overrideResponse: Partial<ContactsComment> = {},
): ContactsComment => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	format: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			bold: faker.helpers.arrayElement([{}, undefined]),
			codeblock: faker.helpers.arrayElement([
				{
					language: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			italic: faker.helpers.arrayElement([{}, undefined]),
			length: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			link: faker.helpers.arrayElement([
				{
					url: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			monospace: faker.helpers.arrayElement([{}, undefined]),
			offset: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			strikethrough: faker.helpers.arrayElement([{}, undefined]),
			underline: faker.helpers.arrayElement([{}, undefined]),
		})),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	text: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchCommentsMockHandler = (
	overrideResponse?:
		| ContactsCommentList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<ContactsCommentList> | ContactsCommentList),
) => {
	return http.get('*/contacts/:contactId/comments', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchCommentsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPublishCommentCommentsMockHandler = (
	overrideResponse?:
		| ContactsComment
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<ContactsComment> | ContactsComment),
) => {
	return http.post('*/contacts/:contactId/comments', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPublishCommentCommentsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteCommentCommentsMockHandler = (
	overrideResponse?:
		| ContactsComment[]
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<ContactsComment[]> | ContactsComment[]),
) => {
	return http.delete('*/contacts/:contactId/comments/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteCommentCommentsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateCommentCommentsMockHandler = (
	overrideResponse?:
		| ContactsComment
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<ContactsComment> | ContactsComment),
) => {
	return http.put('*/contacts/:contactId/comments/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateCommentCommentsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getCommentsMock = () => [
	getSearchCommentsMockHandler(),
	getPublishCommentCommentsMockHandler(),
	getDeleteCommentCommentsMockHandler(),
	getUpdateCommentCommentsMockHandler(),
];
