/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const agentChatServiceGetAgentChatsQueryParams = zod.object({
	size: zod.number().optional().describe('default'),
	page: zod.number().optional(),
	q: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	sort: zod.string().optional(),
	onlyClosed: zod.boolean().optional().describe('filter'),
	onlyUnprocessed: zod.boolean().optional(),
});

export const agentChatServiceGetAgentChatsResponseItemsItemLastMessageKeyboardButtonsItemRowItemShareDefault =
	'phone';

export const agentChatServiceGetAgentChatsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				closeReason: zod.string().optional(),
				closedAt: zod.string().optional(),
				contact: zod
					.object({
						id: zod
							.string()
							.optional()
							.describe(
								'Contact unique **ID**entifier.\nContact **type**-specific string.',
							),
						name: zod.string().optional().describe('Contact display **name**.'),
						type: zod
							.string()
							.optional()
							.describe('Contact **type** provider.'),
					})
					.optional()
					.describe('Peer contact.'),
				gateway: zod
					.object({
						id: zod
							.string()
							.optional()
							.describe(
								'Contact unique **ID**entifier.\nContact **type**-specific string.',
							),
						name: zod.string().optional().describe('Contact display **name**.'),
						type: zod
							.string()
							.optional()
							.describe('Contact **type** provider.'),
					})
					.optional()
					.describe('Peer contact.'),
				id: zod.string().optional(),
				lastMessage: zod
					.object({
						chat: zod
							.object({
								context: zod
									.record(zod.string(), zod.string())
									.optional()
									.describe('Context. Variables.'),
								dc: zod
									.string()
									.optional()
									.describe('[D]omain[C]omponent primary ID.'),
								id: zod
									.string()
									.optional()
									.describe(
										'Unique identifier for this chat.\n[FROM] Member / Channel ID.\n\n// [TO] Group. Conversation ID.\n string chat_id = 2;',
									),
								invite: zod
									.object({
										date: zod.string().optional(),
										from: zod.string().optional(),
									})
									.optional(),
								join: zod
									.string()
									.optional()
									.describe(
										'OPTIONAL. A non-zero value indicates that\nthe participant has joined the chat.',
									),
								left: zod.string().optional(),
								peer: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe(
												'Contact unique **ID**entifier.\nContact **type**-specific string.',
											),
										name: zod
											.string()
											.optional()
											.describe('Contact display **name**.'),
										type: zod
											.string()
											.optional()
											.describe('Contact **type** provider.'),
									})
									.optional()
									.describe('Peer contact.'),
								queue: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe(
												'Contact unique **ID**entifier.\nContact **type**-specific string.',
											),
										name: zod
											.string()
											.optional()
											.describe('Contact display **name**.'),
										type: zod
											.string()
											.optional()
											.describe('Contact **type** provider.'),
									})
									.optional()
									.describe('Peer contact.'),
								title: zod.string().optional().describe('[TO]: Chat title.'),
								via: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe(
												'Contact unique **ID**entifier.\nContact **type**-specific string.',
											),
										name: zod
											.string()
											.optional()
											.describe('Contact display **name**.'),
										type: zod
											.string()
											.optional()
											.describe('Contact **type** provider.'),
									})
									.optional()
									.describe('Peer contact.'),
							})
							.optional()
							.describe(
								'The Chat info.\nAlias: participant, subscriber, member, peer, leg.',
							),
						context: zod
							.record(zod.string(), zod.string())
							.optional()
							.describe('Context. Variables. Environment.'),
						date: zod
							.string()
							.optional()
							.describe('Timestamp when this message was sent (published).'),
						edit: zod
							.string()
							.optional()
							.describe('Timestamp when this message was last edited.'),
						file: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
								size: zod.string().optional(),
								type: zod.string().optional(),
								url: zod.string().optional(),
							})
							.optional()
							.describe('Media File.'),
						from: zod
							.object({
								id: zod
									.string()
									.optional()
									.describe(
										'Contact unique **ID**entifier.\nContact **type**-specific string.',
									),
								name: zod
									.string()
									.optional()
									.describe('Contact display **name**.'),
								type: zod
									.string()
									.optional()
									.describe('Contact **type** provider.'),
							})
							.optional()
							.describe('Peer contact.'),
						id: zod
							.string()
							.optional()
							.describe('Unique message identifier inside this chat.'),
						keyboard: zod
							.object({
								buttons: zod
									.array(
										zod.object({
											row: zod
												.array(
													zod.object({
														code: zod
															.string()
															.optional()
															.describe('Postback/Callback data.'),
														share: zod
															.enum(['phone', 'email', 'contact', 'location'])
															.default(
																agentChatServiceGetAgentChatsResponseItemsItemLastMessageKeyboardButtonsItemRowItemShareDefault,
															)
															.describe(
																'- phone: Phone Number\n - email: Email Address\n - contact: General Form\n - location: Current Location',
															),
														text: zod
															.string()
															.optional()
															.describe('Caption to display.'),
														url: zod
															.string()
															.optional()
															.describe('URL to navigate to ..'),
													}),
												)
												.optional(),
										}),
									)
									.optional(),
								noInput: zod
									.boolean()
									.optional()
									.describe(
										'An option used to block input to force\nthe user to respond with one of the buttons.',
									),
							})
							.optional(),
						kind: zod.string().optional(),
						postback: zod
							.object({
								code: zod
									.string()
									.optional()
									.describe('Data associated with the Button.'),
								mid: zod
									.string()
									.optional()
									.describe('Message ID of the button.'),
								text: zod
									.string()
									.optional()
									.describe("Button's display caption."),
							})
							.optional()
							.describe('Postback. Reply Button Click[ed].'),
						sender: zod
							.object({
								context: zod
									.record(zod.string(), zod.string())
									.optional()
									.describe('Context. Variables.'),
								dc: zod
									.string()
									.optional()
									.describe('[D]omain[C]omponent primary ID.'),
								id: zod
									.string()
									.optional()
									.describe(
										'Unique identifier for this chat.\n[FROM] Member / Channel ID.\n\n// [TO] Group. Conversation ID.\n string chat_id = 2;',
									),
								invite: zod
									.object({
										date: zod.string().optional(),
										from: zod.string().optional(),
									})
									.optional(),
								join: zod
									.string()
									.optional()
									.describe(
										'OPTIONAL. A non-zero value indicates that\nthe participant has joined the chat.',
									),
								left: zod.string().optional(),
								peer: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe(
												'Contact unique **ID**entifier.\nContact **type**-specific string.',
											),
										name: zod
											.string()
											.optional()
											.describe('Contact display **name**.'),
										type: zod
											.string()
											.optional()
											.describe('Contact **type** provider.'),
									})
									.optional()
									.describe('Peer contact.'),
								queue: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe(
												'Contact unique **ID**entifier.\nContact **type**-specific string.',
											),
										name: zod
											.string()
											.optional()
											.describe('Contact display **name**.'),
										type: zod
											.string()
											.optional()
											.describe('Contact **type** provider.'),
									})
									.optional()
									.describe('Peer contact.'),
								title: zod.string().optional().describe('[TO]: Chat title.'),
								via: zod
									.object({
										id: zod
											.string()
											.optional()
											.describe(
												'Contact unique **ID**entifier.\nContact **type**-specific string.',
											),
										name: zod
											.string()
											.optional()
											.describe('Contact display **name**.'),
										type: zod
											.string()
											.optional()
											.describe('Contact **type** provider.'),
									})
									.optional()
									.describe('Peer contact.'),
							})
							.optional()
							.describe(
								'The Chat info.\nAlias: participant, subscriber, member, peer, leg.',
							),
						text: zod.string().optional().describe('Message Text.'),
					})
					.optional()
					.describe('Chat Message.'),
				queue: zod
					.object({
						id: zod
							.string()
							.optional()
							.describe(
								'Contact unique **ID**entifier.\nContact **type**-specific string.',
							),
						name: zod.string().optional().describe('Contact display **name**.'),
						type: zod
							.string()
							.optional()
							.describe('Contact **type** provider.'),
					})
					.optional()
					.describe('Peer contact.'),
				startedAt: zod.string().optional(),
				title: zod.string().optional(),
				unprocessedClose: zod.boolean().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const agentChatServiceGetAgentChatsCounterQueryParams = zod.object({
	onlyClosed: zod.boolean().optional(),
	onlyUnprocessed: zod.boolean().optional(),
});

export const agentChatServiceGetAgentChatsCounterResponse = zod.object({
	count: zod.number().optional(),
});

export const agentChatServiceMarkChatProcessedParams = zod.object({
	chat_id: zod.string(),
});

export const agentChatServiceMarkChatProcessedResponse = zod.object({});
