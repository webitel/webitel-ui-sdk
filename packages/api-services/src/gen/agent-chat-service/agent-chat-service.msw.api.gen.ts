/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { WebitelChatButtonRequest } from '.././_models';
import type {
	WebitelChatGetAgentChatsResponse,
	WebitelChatMarkChatProcessedResponse,
} from '.././_models';

export const getAgentChatServiceGetAgentChatsResponseMock = (
	overrideResponse: Partial<WebitelChatGetAgentChatsResponse> = {},
): WebitelChatGetAgentChatsResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			closeReason: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			closedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			contact: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			gateway: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			lastMessage: faker.helpers.arrayElement([
				{
					chat: faker.helpers.arrayElement([
						{
							context: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
							dc: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							invite: faker.helpers.arrayElement([
								{
									date: faker.helpers.arrayElement([
										faker.number.int({ min: undefined, max: undefined }),
										undefined,
									]),
									from: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							join: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							left: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							peer: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							queue: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							title: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							via: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
						},
						undefined,
					]),
					context: faker.helpers.arrayElement([
						{
							[faker.string.alphanumeric(5)]: faker.string.alpha(20),
						},
						undefined,
					]),
					date: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					edit: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					file: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							size: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							url: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					from: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					keyboard: faker.helpers.arrayElement([
						{
							buttons: faker.helpers.arrayElement([
								Array.from(
									{ length: faker.number.int({ min: 1, max: 10 }) },
									(_, i) => i + 1,
								).map(() => ({
									row: faker.helpers.arrayElement([
										Array.from(
											{ length: faker.number.int({ min: 1, max: 10 }) },
											(_, i) => i + 1,
										).map(() => ({
											code: faker.helpers.arrayElement([
												faker.string.alpha(20),
												undefined,
											]),
											share: faker.helpers.arrayElement([
												faker.helpers.arrayElement(
													Object.values(WebitelChatButtonRequest),
												),
												undefined,
											]),
											text: faker.helpers.arrayElement([
												faker.string.alpha(20),
												undefined,
											]),
											url: faker.helpers.arrayElement([
												faker.string.alpha(20),
												undefined,
											]),
										})),
										undefined,
									]),
								})),
								undefined,
							]),
							noInput: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						},
						undefined,
					]),
					postback: faker.helpers.arrayElement([
						{
							code: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							mid: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							text: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					sender: faker.helpers.arrayElement([
						{
							context: faker.helpers.arrayElement([
								{
									[faker.string.alphanumeric(5)]: faker.string.alpha(20),
								},
								undefined,
							]),
							dc: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							invite: faker.helpers.arrayElement([
								{
									date: faker.helpers.arrayElement([
										faker.number.int({ min: undefined, max: undefined }),
										undefined,
									]),
									from: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							join: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							left: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							peer: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							queue: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							title: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							via: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
						},
						undefined,
					]),
					text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			queue: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			startedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			unprocessedClose: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getAgentChatServiceMarkChatProcessedResponseMock =
	(): WebitelChatMarkChatProcessedResponse => ({});

export const getAgentChatServiceGetAgentChatsMockHandler = (
	overrideResponse?:
		| WebitelChatGetAgentChatsResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WebitelChatGetAgentChatsResponse>
				| WebitelChatGetAgentChatsResponse),
) => {
	return http.get('*/agent/chats', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentChatServiceGetAgentChatsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getAgentChatServiceMarkChatProcessedMockHandler = (
	overrideResponse?:
		| WebitelChatMarkChatProcessedResponse
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) =>
				| Promise<WebitelChatMarkChatProcessedResponse>
				| WebitelChatMarkChatProcessedResponse),
) => {
	return http.patch('*/agent/chats/:chatId', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getAgentChatServiceMarkChatProcessedResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getAgentChatServiceMock = () => [
	getAgentChatServiceGetAgentChatsMockHandler(),
	getAgentChatServiceMarkChatProcessedMockHandler(),
];
