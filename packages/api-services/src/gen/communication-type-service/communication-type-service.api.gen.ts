/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	DeleteCommunicationTypeParams,
	EngineCommunicationType,
	EngineCommunicationTypeRequest,
	EngineCommunicationTypeServicePatchCommunicationTypeBody,
	EngineCommunicationTypeServiceUpdateCommunicationTypeBody,
	EngineListCommunicationType,
	ReadCommunicationTypeParams,
	SearchCommunicationTypeParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getCommunicationTypeService =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary List of CommunicationType
			 */
			const searchCommunicationType = <
				TData = AxiosResponse<EngineListCommunicationType>,
			>(
				params?: SearchCommunicationTypeParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/call_center/communication_type', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create CommunicationType
			 */
			const createCommunicationType = <
				TData = AxiosResponse<EngineCommunicationType>,
			>(
				engineCommunicationTypeRequest: EngineCommunicationTypeRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/call_center/communication_type',
					engineCommunicationTypeRequest,
					options,
				);
			};
			/**
			 * @summary Remove CommunicationType
			 */
			const deleteCommunicationType = <
				TData = AxiosResponse<EngineCommunicationType>,
			>(
				id: string,
				params?: DeleteCommunicationTypeParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/call_center/communication_type/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary CommunicationType item
			 */
			const readCommunicationType = <
				TData = AxiosResponse<EngineCommunicationType>,
			>(
				id: string,
				params?: ReadCommunicationTypeParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/call_center/communication_type/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const patchCommunicationType = <
				TData = AxiosResponse<EngineCommunicationType>,
			>(
				id: string,
				engineCommunicationTypeServicePatchCommunicationTypeBody: EngineCommunicationTypeServicePatchCommunicationTypeBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/call_center/communication_type/${id}`,
					engineCommunicationTypeServicePatchCommunicationTypeBody,
					options,
				);
			};
			/**
			 * @summary Update CommunicationType
			 */
			const updateCommunicationType = <
				TData = AxiosResponse<EngineCommunicationType>,
			>(
				id: string,
				engineCommunicationTypeServiceUpdateCommunicationTypeBody: EngineCommunicationTypeServiceUpdateCommunicationTypeBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/call_center/communication_type/${id}`,
					engineCommunicationTypeServiceUpdateCommunicationTypeBody,
					options,
				);
			};

			// --- footer start
			return {
				searchCommunicationType,
				createCommunicationType,
				deleteCommunicationType,
				readCommunicationType,
				patchCommunicationType,
				updateCommunicationType,
			};
		};
export type SearchCommunicationTypeResult =
	AxiosResponse<EngineListCommunicationType>;
export type CreateCommunicationTypeResult =
	AxiosResponse<EngineCommunicationType>;
export type DeleteCommunicationTypeResult =
	AxiosResponse<EngineCommunicationType>;
export type ReadCommunicationTypeResult =
	AxiosResponse<EngineCommunicationType>;
export type PatchCommunicationTypeResult =
	AxiosResponse<EngineCommunicationType>;
export type UpdateCommunicationTypeResult =
	AxiosResponse<EngineCommunicationType>;

// --- footer end
