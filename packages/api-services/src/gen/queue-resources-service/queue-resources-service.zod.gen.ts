/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary SearchQueueResourceGroup
 */
export const searchQueueResourceGroupParams = zod.object({
	queue_id: zod.string(),
});

export const searchQueueResourceGroupQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const searchQueueResourceGroupResponse = zod.object({
	items: zod
		.array(
			zod.object({
				communication: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				resourceGroup: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary CreateQueueResourceGroup
 */
export const createQueueResourceGroupParams = zod.object({
	queue_id: zod.string(),
});

export const createQueueResourceGroupBody = zod.object({
	domainId: zod.string().optional(),
	resourceGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createQueueResourceGroupResponse = zod.object({
	communication: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	resourceGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary DeleteQueueResourceGroup
 */
export const deleteQueueResourceGroupParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const deleteQueueResourceGroupQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteQueueResourceGroupResponse = zod.object({
	communication: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	resourceGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary ReadQueueResourceGroup
 */
export const readQueueResourceGroupParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const readQueueResourceGroupQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readQueueResourceGroupResponse = zod.object({
	communication: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	resourceGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary UpdateQueueResourceGroup
 */
export const updateQueueResourceGroupParams = zod.object({
	queue_id: zod.string(),
	id: zod.string(),
});

export const updateQueueResourceGroupBody = zod.object({
	domainId: zod.string().optional(),
	resourceGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateQueueResourceGroupResponse = zod.object({
	communication: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	resourceGroup: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
