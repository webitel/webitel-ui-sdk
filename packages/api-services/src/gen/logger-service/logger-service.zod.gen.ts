/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const loggerServiceSearchLogByConfigIdParams = zod.object({
	config_id: zod.number(),
});

export const loggerServiceSearchLogByConfigIdQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	userId: zod.array(zod.string()).optional(),
	action: zod
		.array(
			zod.enum(['default_no_action', 'create', 'update', 'read', 'delete']),
		)
		.optional(),
	userIp: zod.string().optional(),
	dateFrom: zod.string().optional(),
	dateTo: zod.string().optional(),
});

export const loggerServiceSearchLogByConfigIdResponse = zod.object({
	items: zod
		.array(
			zod.object({
				action: zod.string().optional(),
				configId: zod.number().optional(),
				date: zod.string().optional(),
				id: zod.number().optional(),
				newState: zod.string().optional(),
				object: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				record: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				user: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				userIp: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const loggerServiceSearchLogByUserIdParams = zod.object({
	user_id: zod.number().describe('REQUIRED filter'),
});

export const loggerServiceSearchLogByUserIdQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	objectId: zod.array(zod.string()).optional().describe('SPECIFIC filter.'),
	action: zod
		.array(
			zod.enum(['default_no_action', 'create', 'update', 'read', 'delete']),
		)
		.optional()
		.describe('GENERAL filters.'),
	userIp: zod.string().optional(),
	dateFrom: zod.string().optional(),
	dateTo: zod.string().optional(),
});

export const loggerServiceSearchLogByUserIdResponse = zod.object({
	items: zod
		.array(
			zod.object({
				action: zod.string().optional(),
				configId: zod.number().optional(),
				date: zod.string().optional(),
				id: zod.number().optional(),
				newState: zod.string().optional(),
				object: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				record: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				user: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				userIp: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const loggerServiceSearchLogByRecordIdParams = zod.object({
	object: zod
		.enum([
			'cc_queue',
			'schema',
			'users',
			'devices',
			'calendars',
			'cc_list',
			'cc_team',
			'cc_agent',
			'cc_resource',
			'cc_resource_group',
			'chat_bots',
			'cases',
			'contacts',
			'cc_list_number',
			'case_comments',
			'record_file',
		])
		.describe('SPECIFIC filter'),
	record_id: zod.number().describe('REQUIRED filter'),
});

export const loggerServiceSearchLogByRecordIdQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	action: zod
		.array(
			zod.enum(['default_no_action', 'create', 'update', 'read', 'delete']),
		)
		.optional()
		.describe('GENERAL filters.'),
	userId: zod.array(zod.string()).optional(),
	userIp: zod.string().optional(),
	dateFrom: zod.string().optional(),
	dateTo: zod.string().optional(),
});

export const loggerServiceSearchLogByRecordIdResponse = zod.object({
	items: zod
		.array(
			zod.object({
				action: zod.string().optional(),
				configId: zod.number().optional(),
				date: zod.string().optional(),
				id: zod.number().optional(),
				newState: zod.string().optional(),
				object: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				record: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				user: zod
					.object({
						id: zod.number().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				userIp: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});
