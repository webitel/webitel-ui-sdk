/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	EmailsDeleteEmailParams,
	EmailsDeleteEmailsParams,
	EmailsListEmailsParams,
	EmailsLocateEmailParams,
	EmailsMergeEmailsParams,
	EmailsResetEmailsParams,
	EmailsUpdateEmail2Body,
	EmailsUpdateEmail2Params,
	EmailsUpdateEmailBody,
	EmailsUpdateEmailParams,
	WebitelContactsEmailAddress,
	WebitelContactsEmailList,
	WebitelContactsInputEmailAddress,
} from '.././_models';

// --- header start
//

export const // --- title start
	getEmails =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove email address(es) of the contact.
			 */
			const emailsDeleteEmails = <
				TData = AxiosResponse<WebitelContactsEmailList>,
			>(
				contactId: string,
				params: EmailsDeleteEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/emails`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locates email address(es) of the contact.
			 */
			const emailsListEmails = <
				TData = AxiosResponse<WebitelContactsEmailList>,
			>(
				contactId: string,
				params?: EmailsListEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/emails`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update or append email address(es) of the contact.
			 */
			const emailsMergeEmails = <
				TData = AxiosResponse<WebitelContactsEmailList>,
			>(
				contactId: string,
				webitelContactsInputEmailAddress: WebitelContactsInputEmailAddress[],
				params?: EmailsMergeEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/emails`,
					webitelContactsInputEmailAddress,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Resets all emails of the contact according to the input dataset.
			 */
			const emailsResetEmails = <
				TData = AxiosResponse<WebitelContactsEmailList>,
			>(
				contactId: string,
				webitelContactsInputEmailAddress: WebitelContactsInputEmailAddress[],
				params?: EmailsResetEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/emails`,
					webitelContactsInputEmailAddress,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the contact's email address link
			 */
			const emailsDeleteEmail = <
				TData = AxiosResponse<WebitelContactsEmailAddress>,
			>(
				contactId: string,
				etag: string,
				params?: EmailsDeleteEmailParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/emails/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the email address link.
			 */
			const emailsLocateEmail = <
				TData = AxiosResponse<WebitelContactsEmailAddress>,
			>(
				contactId: string,
				etag: string,
				params?: EmailsLocateEmailParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/emails/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the contact's email address link details
			 */
			const emailsUpdateEmail2 = <
				TData = AxiosResponse<WebitelContactsEmailList>,
			>(
				contactId: string,
				etag: string,
				emailsUpdateEmail2Body: EmailsUpdateEmail2Body,
				params?: EmailsUpdateEmail2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/emails/${etag}`,
					emailsUpdateEmail2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the contact's email address link details
			 */
			const emailsUpdateEmail = <
				TData = AxiosResponse<WebitelContactsEmailList>,
			>(
				contactId: string,
				etag: string,
				emailsUpdateEmailBody: EmailsUpdateEmailBody,
				params?: EmailsUpdateEmailParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/emails/${etag}`,
					emailsUpdateEmailBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				emailsDeleteEmails,
				emailsListEmails,
				emailsMergeEmails,
				emailsResetEmails,
				emailsDeleteEmail,
				emailsLocateEmail,
				emailsUpdateEmail2,
				emailsUpdateEmail,
			};
		};
export type EmailsDeleteEmailsResult = AxiosResponse<WebitelContactsEmailList>;
export type EmailsListEmailsResult = AxiosResponse<WebitelContactsEmailList>;
export type EmailsMergeEmailsResult = AxiosResponse<WebitelContactsEmailList>;
export type EmailsResetEmailsResult = AxiosResponse<WebitelContactsEmailList>;
export type EmailsDeleteEmailResult =
	AxiosResponse<WebitelContactsEmailAddress>;
export type EmailsLocateEmailResult =
	AxiosResponse<WebitelContactsEmailAddress>;
export type EmailsUpdateEmail2Result = AxiosResponse<WebitelContactsEmailList>;
export type EmailsUpdateEmailResult = AxiosResponse<WebitelContactsEmailList>;

// --- footer end
