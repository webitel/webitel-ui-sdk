/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ContactsEmailAddress,
	ContactsEmailList,
	ContactsInputEmailAddress,
	DeleteEmailParams,
	DeleteEmailsParams,
	ListEmailsParams,
	LocateEmailParams,
	MergeEmailsParams,
	ResetEmailsParams,
	UpdateEmail2Body,
	UpdateEmail2Params,
	UpdateEmailBody,
	UpdateEmailParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getEmails =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove email address(es) of the contact.
			 */
			const deleteEmails = <TData = AxiosResponse<ContactsEmailList>>(
				contactId: string,
				params: DeleteEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/emails`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locates email address(es) of the contact.
			 */
			const listEmails = <TData = AxiosResponse<ContactsEmailList>>(
				contactId: string,
				params?: ListEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/emails`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update or append email address(es) of the contact.
			 */
			const mergeEmails = <TData = AxiosResponse<ContactsEmailList>>(
				contactId: string,
				contactsInputEmailAddress: ContactsInputEmailAddress[],
				params?: MergeEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/emails`,
					contactsInputEmailAddress,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Resets all emails of the contact according to the input dataset.
			 */
			const resetEmails = <TData = AxiosResponse<ContactsEmailList>>(
				contactId: string,
				contactsInputEmailAddress: ContactsInputEmailAddress[],
				params?: ResetEmailsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/emails`,
					contactsInputEmailAddress,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the contact's email address link
			 */
			const deleteEmail = <TData = AxiosResponse<ContactsEmailAddress>>(
				contactId: string,
				etag: string,
				params?: DeleteEmailParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/emails/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the email address link.
			 */
			const locateEmail = <TData = AxiosResponse<ContactsEmailAddress>>(
				contactId: string,
				etag: string,
				params?: LocateEmailParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/emails/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the contact's email address link details
			 */
			const updateEmail2 = <TData = AxiosResponse<ContactsEmailList>>(
				contactId: string,
				etag: string,
				updateEmail2Body: UpdateEmail2Body,
				params?: UpdateEmail2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/emails/${etag}`,
					updateEmail2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the contact's email address link details
			 */
			const updateEmail = <TData = AxiosResponse<ContactsEmailList>>(
				contactId: string,
				etag: string,
				updateEmailBody: UpdateEmailBody,
				params?: UpdateEmailParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/emails/${etag}`,
					updateEmailBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				deleteEmails,
				listEmails,
				mergeEmails,
				resetEmails,
				deleteEmail,
				locateEmail,
				updateEmail2,
				updateEmail,
			};
		};
export type DeleteEmailsResult = AxiosResponse<ContactsEmailList>;
export type ListEmailsResult = AxiosResponse<ContactsEmailList>;
export type MergeEmailsResult = AxiosResponse<ContactsEmailList>;
export type ResetEmailsResult = AxiosResponse<ContactsEmailList>;
export type DeleteEmailResult = AxiosResponse<ContactsEmailAddress>;
export type LocateEmailResult = AxiosResponse<ContactsEmailAddress>;
export type UpdateEmail2Result = AxiosResponse<ContactsEmailList>;
export type UpdateEmailResult = AxiosResponse<ContactsEmailList>;

// --- footer end
