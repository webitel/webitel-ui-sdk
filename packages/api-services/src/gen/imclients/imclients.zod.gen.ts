/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Search IM client links
 */
export const iMClientsListIMClientsParams = zod.object({
	contact_id: zod.string().describe('Link contact ID.'),
});

export const iMClientsListIMClientsQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search term: IMClient.\n`?` - matches any one character\n`*` - matches 0 or more characters\nSearch fields: {user,app}',
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
	id: zod
		.array(zod.string())
		.optional()
		.describe('Link(s) with unique ID only.'),
});

export const iMClientsListIMClientsResponse = zod.object({
	data: zod
		.array(
			zod
				.object({
					app: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					createdAt: zod
						.string()
						.optional()
						.describe('The user who created this Field.'),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					etag: zod
						.string()
						.optional()
						.describe(
							'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
						),
					externalId: zod.string().optional().describe('External user id.'),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the association. Never changes.'),
					protocol: zod
						.string()
						.optional()
						.describe('Protocol used to connect the IM client.'),
					updatedAt: zod
						.string()
						.optional()
						.describe(
							'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
						),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					user: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					ver: zod
						.number()
						.optional()
						.describe('Version of the latest update. Numeric sequence.'),
					via: zod
						.string()
						.optional()
						.describe(
							'[Via] App(-specific) peer(-id) to connect[from] the IM client.',
						),
				})
				.describe("A contact's [I]nstant[M]essaging client."),
		)
		.optional()
		.describe('IMClient dataset page.'),
	next: zod.boolean().optional(),
	page: zod
		.number()
		.optional()
		.describe('The page number of the partial result.'),
});

export const iMClientsDeleteIMClientParams = zod.object({
	contact_id: zod.string(),
	id: zod.string(),
});

export const iMClientsDeleteIMClientResponse = zod.object({});
