/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const createCallBody = zod.object({
	destination: zod.string().optional(),
	domainId: zod.string().optional(),
	from: zod
		.object({
			appId: zod.string().optional(),
			extension: zod.string().optional(),
			id: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	params: zod
		.object({
			audio: zod.boolean().optional(),
			cancelDistribute: zod.boolean().optional(),
			disableAutoAnswer: zod.boolean().optional(),
			disableStun: zod.boolean().optional(),
			display: zod.string().optional(),
			hideNumber: zod.boolean().optional(),
			isOnline: zod.boolean().optional(),
			record: zod.boolean().optional(),
			screen: zod.boolean().optional(),
			timeout: zod.number().optional(),
			variables: zod.record(zod.string(), zod.string()).optional(),
			video: zod.boolean().optional(),
		})
		.optional(),
	to: zod
		.object({
			appId: zod.string().optional(),
			extension: zod.string().optional(),
			id: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
});

export const createCallResponse = zod.object({
	id: zod.string().optional(),
});

export const searchActiveCallQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	createdAtFrom: zod.string().optional(),
	createdAtTo: zod.string().optional(),
	userId: zod.array(zod.string()).optional(),
	agentId: zod.array(zod.string()).optional(),
	queueId: zod.array(zod.string()).optional(),
	teamId: zod.array(zod.string()).optional(),
	memberId: zod.array(zod.string()).optional(),
	gatewayId: zod.array(zod.string()).optional(),
	durationFrom: zod.string().optional(),
	durationTo: zod.string().optional(),
	skipParent: zod.boolean().optional(),
	parentId: zod.string().optional(),
	cause: zod.array(zod.string()).optional(),
	existsFile: zod.boolean().optional(),
	domainId: zod.string().optional(),
	number: zod.string().optional(),
	direction: zod.array(zod.string()).optional(),
	answeredAtFrom: zod.string().optional(),
	answeredAtTo: zod.string().optional(),
	missed: zod.boolean().optional(),
	storedAtFrom: zod.string().optional(),
	storedAtTo: zod.string().optional(),
	supervisorId: zod.array(zod.string()).optional(),
	state: zod.array(zod.string()).optional(),
});

export const searchActiveCallResponse = zod.object({
	items: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				answeredAt: zod.string().optional(),
				appId: zod.string().optional(),
				billSec: zod.number().optional(),
				blindTransfer: zod.string().optional(),
				bridgedAt: zod.string().optional(),
				bridgedId: zod.string().optional(),
				createdAt: zod.string().optional(),
				destination: zod.string().optional(),
				direction: zod.string().optional(),
				display: zod.string().optional(),
				duration: zod.number().optional(),
				extension: zod.string().optional(),
				from: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						number: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				gateway: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				holdSec: zod.number().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				leavingAt: zod.string().optional(),
				member: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				parentId: zod.string().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				queueBridgedAt: zod.string().optional(),
				queueDurationSec: zod.number().optional(),
				queueWaitSec: zod.number().optional(),
				reportingAt: zod.string().optional(),
				reportingSec: zod.number().optional(),
				state: zod.string().optional(),
				supervisor: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				timestamp: zod.string().optional(),
				to: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						number: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				type: zod.string().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
				waitSec: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const hangupCallParams = zod.object({
	id: zod.string(),
});

export const hangupCallBody = zod.object({
	appId: zod.string().optional(),
	cause: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const hangupCallResponse = zod.object({});

/**
 * @summary Call item
 */
export const readCallParams = zod.object({
	id: zod.string(),
});

export const readCallQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readCallResponse = zod.object({
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	answeredAt: zod.string().optional(),
	appId: zod.string().optional(),
	billSec: zod.number().optional(),
	blindTransfer: zod.string().optional(),
	bridgedAt: zod.string().optional(),
	bridgedId: zod.string().optional(),
	createdAt: zod.string().optional(),
	destination: zod.string().optional(),
	direction: zod.string().optional(),
	display: zod.string().optional(),
	duration: zod.number().optional(),
	extension: zod.string().optional(),
	from: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			number: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	holdSec: zod.number().optional(),
	id: zod.string().optional(),
	joinedAt: zod.string().optional(),
	leavingAt: zod.string().optional(),
	member: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	parentId: zod.string().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	queueBridgedAt: zod.string().optional(),
	queueDurationSec: zod.number().optional(),
	queueWaitSec: zod.number().optional(),
	reportingAt: zod.string().optional(),
	reportingSec: zod.number().optional(),
	state: zod.string().optional(),
	supervisor: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timestamp: zod.string().optional(),
	to: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			number: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	type: zod.string().optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waitSec: zod.number().optional(),
});

/**
 * @summary Call item
 */
export const confirmPushParams = zod.object({
	id: zod.string(),
});

export const confirmPushResponse = zod.object({});

export const dtmfCallParams = zod.object({
	id: zod.string(),
});

export const dtmfCallBody = zod.object({
	appId: zod.string().optional(),
	digit: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const dtmfCallResponse = zod.object({});

export const eavesdropCallParams = zod.object({
	id: zod.string(),
});

export const eavesdropCallBody = zod.object({
	appId: zod.string().optional(),
	control: zod.boolean().optional(),
	from: zod
		.object({
			appId: zod.string().optional(),
			extension: zod.string().optional(),
			id: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	listenA: zod.boolean().optional(),
	listenB: zod.boolean().optional(),
	whisperA: zod.boolean().optional(),
	whisperB: zod.boolean().optional(),
});

export const eavesdropCallResponse = zod.object({
	id: zod.string().optional(),
});

export const holdCallParams = zod.object({
	id: zod.string(),
});

export const holdCallBody = zod.object({
	appId: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const holdCallResponse = zod.object({
	state: zod.string().optional(),
});

export const blindTransferCallParams = zod.object({
	id: zod.string(),
});

export const blindTransferCallBody = zod.object({
	appId: zod.string().optional(),
	destination: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const blindTransferCallResponse = zod.object({});

export const unHoldCallParams = zod.object({
	id: zod.string(),
});

export const unHoldCallBody = zod.object({
	appId: zod.string().optional(),
	domainId: zod.string().optional(),
});

export const unHoldCallResponse = zod.object({
	state: zod.string().optional(),
});

export const setVariablesCallParams = zod.object({
	id: zod.string(),
});

export const setVariablesCallBody = zod.object({
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const setVariablesCallResponse = zod.object({});

/**
 * @summary List of call
 */
export const searchHistoryCallQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	createdAtFrom: zod.string().optional(),
	createdAtTo: zod.string().optional(),
	userId: zod.array(zod.string()).optional(),
	agentId: zod.array(zod.string()).optional(),
	queueId: zod.array(zod.string()).optional(),
	teamId: zod.array(zod.string()).optional(),
	memberId: zod.array(zod.string()).optional(),
	gatewayId: zod.array(zod.string()).optional(),
	durationFrom: zod.string().optional(),
	durationTo: zod.string().optional(),
	skipParent: zod.boolean().optional(),
	parentId: zod.string().optional(),
	cause: zod.array(zod.string()).optional(),
	hasFile: zod.boolean().optional(),
	domainId: zod.string().optional(),
	number: zod.string().optional(),
	direction: zod.string().optional(),
	answeredAtFrom: zod.string().optional(),
	answeredAtTo: zod.string().optional(),
	missed: zod.boolean().optional(),
	storedAtFrom: zod.string().optional(),
	storedAtTo: zod.string().optional(),
	id: zod.array(zod.string()).optional(),
	transferFrom: zod.array(zod.string()).optional(),
	transferTo: zod.array(zod.string()).optional(),
	dependencyId: zod.string().optional(),
	tags: zod.array(zod.string()).optional(),
	variablesString: zod
		.string()
		.optional()
		.describe(
			'This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18',
		),
	amdResult: zod.array(zod.string()).optional(),
	fts: zod.string().optional(),
	directions: zod.array(zod.string()).optional(),
	hasTranscript: zod.boolean().optional(),
	agentDescription: zod.string().optional(),
	ownerId: zod.array(zod.string()).optional(),
	granteeId: zod.array(zod.string()).optional(),
	amdAiResult: zod.array(zod.string()).optional(),
	talkFrom: zod.string().optional(),
	talkTo: zod.string().optional(),
	rated: zod.boolean().optional(),
	ratedBy: zod.array(zod.string()).optional(),
	scoreRequiredFrom: zod.string().optional(),
	scoreRequiredTo: zod.string().optional(),
	scoreOptionalFrom: zod.string().optional(),
	scoreOptionalTo: zod.string().optional(),
	ratedUser: zod.array(zod.string()).optional(),
	contactId: zod.array(zod.string()).optional(),
	schemaId: zod.array(zod.number()).optional(),
	hasTransfer: zod.boolean().optional(),
	timeline: zod.boolean().optional(),
});

export const searchHistoryCallResponseItemsItemFilesJobItemActionDefault =
	'undefined';
export const searchHistoryCallResponseItemsItemFilesJobItemStateDefault =
	'idle';

export const searchHistoryCallResponse = zod.object({
	items: zod
		.array(
			zod.object({
				tags: zod.array(zod.string()).optional(),
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				agentDescription: zod.string().optional(),
				allowEvaluation: zod.boolean().optional(),
				amdAiLogs: zod.array(zod.string()).optional(),
				amdAiResult: zod.string().optional(),
				amdResult: zod.string().optional(),
				annotations: zod
					.array(
						zod.object({
							callId: zod.string().optional(),
							createdAt: zod.string().optional(),
							createdBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							endSec: zod.number().optional(),
							id: zod.string().optional(),
							note: zod.string().optional(),
							startSec: zod.number().optional(),
							updatedAt: zod.string().optional(),
							updatedBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				answeredAt: zod.string().optional(),
				appId: zod.string().optional(),
				attemptId: zod.string().optional(),
				billSec: zod.number().optional(),
				blindTransfer: zod.string().optional(),
				blindTransfers: zod
					.array(
						zod.object({
							number: zod.string().optional(),
							time: zod.string().optional(),
							user: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				bridgedAt: zod.string().optional(),
				bridgedId: zod.string().optional(),
				cause: zod.string().optional(),
				contact: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional(),
				destination: zod.string().optional(),
				destinationName: zod.string().optional(),
				direction: zod.string().optional(),
				display: zod.string().optional(),
				duration: zod.number().optional(),
				extension: zod.string().optional(),
				files: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							mimeType: zod.string().optional(),
							name: zod.string().optional(),
							size: zod.string().optional(),
							startAt: zod.string().optional(),
							startRecord: zod.string().optional(),
							stopAt: zod.string().optional(),
						}),
					)
					.optional(),
				filesJob: zod
					.array(
						zod.object({
							action: zod
								.enum(['undefined', 'STT', 'delete'])
								.default(
									searchHistoryCallResponseItemsItemFilesJobItemActionDefault,
								),
							createdAt: zod.string().optional(),
							errorDetail: zod.string().optional(),
							fileId: zod.string().optional(),
							id: zod.string().optional(),
							state: zod
								.enum(['idle', 'active', 'finished', 'error'])
								.default(
									searchHistoryCallResponseItemsItemFilesJobItemStateDefault,
								),
						}),
					)
					.optional(),
				forms: zod
					.array(
						zod.object({
							agent: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							reportingAt: zod.string().optional(),
						}),
					)
					.optional(),
				from: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						number: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				fromNumber: zod.string().optional(),
				gateway: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				grantee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				hangupAt: zod.string().optional(),
				hangupBy: zod.string().optional(),
				hangupDisposition: zod.string().optional(),
				hangupPhrase: zod.string().optional(),
				hasChildren: zod.boolean().optional(),
				hold: zod
					.array(
						zod.object({
							sec: zod.number().optional(),
							start: zod.string().optional(),
							stop: zod.string().optional(),
						}),
					)
					.optional(),
				holdSec: zod.number().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				leavingAt: zod.string().optional(),
				member: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				memberId: zod.string().optional(),
				parentId: zod.string().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				queueBridgedAt: zod.string().optional(),
				queueDurationSec: zod.number().optional(),
				queueWaitSec: zod.number().optional(),
				rateId: zod.string().optional(),
				ratedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				ratedUser: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reportingAt: zod.string().optional(),
				reportingSec: zod.number().optional(),
				result: zod.string().optional(),
				schemas: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				scoreOptional: zod.number().optional(),
				scoreRequired: zod.number().optional(),
				sipCode: zod.number().optional(),
				storedAt: zod.string().optional(),
				talkSec: zod.number().optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				to: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						number: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				toNumber: zod.string().optional(),
				transcripts: zod
					.array(
						zod.object({
							file: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							fileId: zod.string().optional(),
							id: zod.string().optional(),
							locale: zod.string().optional(),
						}),
					)
					.optional(),
				transferFrom: zod.string().optional(),
				transferTo: zod.string().optional(),
				type: zod.string().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
				waitSec: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary List of call
 */
export const searchHistoryCallPostBody = zod.object({
	tags: zod.array(zod.string()).optional(),
	agentDescription: zod.string().optional(),
	agentId: zod.array(zod.string()).optional(),
	amdAiResult: zod.array(zod.string()).optional(),
	amdResult: zod.array(zod.string()).optional(),
	answeredAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	cause: zod.array(zod.string()).optional(),
	contactId: zod.array(zod.string()).optional(),
	createdAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	dependencyId: zod.string().optional(),
	direction: zod.string().optional(),
	directions: zod.array(zod.string()).optional(),
	domainId: zod.string().optional(),
	duration: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	fields: zod.array(zod.string()).optional(),
	fts: zod.string().optional(),
	gatewayId: zod.array(zod.string()).optional(),
	granteeId: zod.array(zod.string()).optional(),
	hasFile: zod.boolean().optional(),
	hasTranscript: zod.boolean().optional(),
	hasTransfer: zod.boolean().optional(),
	id: zod.array(zod.string()).optional(),
	memberId: zod.array(zod.string()).optional(),
	missed: zod.boolean().optional(),
	number: zod.string().optional(),
	ownerId: zod.array(zod.string()).optional(),
	page: zod.number().optional(),
	parentId: zod.string().optional(),
	q: zod.string().optional(),
	queueId: zod.array(zod.string()).optional(),
	rated: zod.boolean().optional(),
	ratedBy: zod.array(zod.string()).optional(),
	ratedUser: zod.array(zod.string()).optional(),
	schemaId: zod.array(zod.number()).optional(),
	scoreOptional: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	scoreRequired: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	size: zod.number().optional(),
	skipParent: zod.boolean().optional(),
	sort: zod.string().optional(),
	storedAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	talk: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	teamId: zod.array(zod.string()).optional(),
	timeline: zod.boolean().optional(),
	transferFrom: zod.array(zod.string()).optional(),
	transferTo: zod.array(zod.string()).optional(),
	userId: zod.array(zod.string()).optional(),
	variablesString: zod.record(zod.string(), zod.string()).optional(),
});

export const searchHistoryCallPostResponseItemsItemFilesJobItemActionDefault =
	'undefined';
export const searchHistoryCallPostResponseItemsItemFilesJobItemStateDefault =
	'idle';

export const searchHistoryCallPostResponse = zod.object({
	items: zod
		.array(
			zod.object({
				tags: zod.array(zod.string()).optional(),
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				agentDescription: zod.string().optional(),
				allowEvaluation: zod.boolean().optional(),
				amdAiLogs: zod.array(zod.string()).optional(),
				amdAiResult: zod.string().optional(),
				amdResult: zod.string().optional(),
				annotations: zod
					.array(
						zod.object({
							callId: zod.string().optional(),
							createdAt: zod.string().optional(),
							createdBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							endSec: zod.number().optional(),
							id: zod.string().optional(),
							note: zod.string().optional(),
							startSec: zod.number().optional(),
							updatedAt: zod.string().optional(),
							updatedBy: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				answeredAt: zod.string().optional(),
				appId: zod.string().optional(),
				attemptId: zod.string().optional(),
				billSec: zod.number().optional(),
				blindTransfer: zod.string().optional(),
				blindTransfers: zod
					.array(
						zod.object({
							number: zod.string().optional(),
							time: zod.string().optional(),
							user: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
						}),
					)
					.optional(),
				bridgedAt: zod.string().optional(),
				bridgedId: zod.string().optional(),
				cause: zod.string().optional(),
				contact: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional(),
				destination: zod.string().optional(),
				destinationName: zod.string().optional(),
				direction: zod.string().optional(),
				display: zod.string().optional(),
				duration: zod.number().optional(),
				extension: zod.string().optional(),
				files: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							mimeType: zod.string().optional(),
							name: zod.string().optional(),
							size: zod.string().optional(),
							startAt: zod.string().optional(),
							startRecord: zod.string().optional(),
							stopAt: zod.string().optional(),
						}),
					)
					.optional(),
				filesJob: zod
					.array(
						zod.object({
							action: zod
								.enum(['undefined', 'STT', 'delete'])
								.default(
									searchHistoryCallPostResponseItemsItemFilesJobItemActionDefault,
								),
							createdAt: zod.string().optional(),
							errorDetail: zod.string().optional(),
							fileId: zod.string().optional(),
							id: zod.string().optional(),
							state: zod
								.enum(['idle', 'active', 'finished', 'error'])
								.default(
									searchHistoryCallPostResponseItemsItemFilesJobItemStateDefault,
								),
						}),
					)
					.optional(),
				forms: zod
					.array(
						zod.object({
							agent: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							reportingAt: zod.string().optional(),
						}),
					)
					.optional(),
				from: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						number: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				fromNumber: zod.string().optional(),
				gateway: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				grantee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				hangupAt: zod.string().optional(),
				hangupBy: zod.string().optional(),
				hangupDisposition: zod.string().optional(),
				hangupPhrase: zod.string().optional(),
				hasChildren: zod.boolean().optional(),
				hold: zod
					.array(
						zod.object({
							sec: zod.number().optional(),
							start: zod.string().optional(),
							stop: zod.string().optional(),
						}),
					)
					.optional(),
				holdSec: zod.number().optional(),
				id: zod.string().optional(),
				joinedAt: zod.string().optional(),
				leavingAt: zod.string().optional(),
				member: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				memberId: zod.string().optional(),
				parentId: zod.string().optional(),
				queue: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				queueBridgedAt: zod.string().optional(),
				queueDurationSec: zod.number().optional(),
				queueWaitSec: zod.number().optional(),
				rateId: zod.string().optional(),
				ratedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				ratedUser: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reportingAt: zod.string().optional(),
				reportingSec: zod.number().optional(),
				result: zod.string().optional(),
				schemas: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				scoreOptional: zod.number().optional(),
				scoreRequired: zod.number().optional(),
				sipCode: zod.number().optional(),
				storedAt: zod.string().optional(),
				talkSec: zod.number().optional(),
				team: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				to: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						number: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				toNumber: zod.string().optional(),
				transcripts: zod
					.array(
						zod.object({
							file: zod
								.object({
									id: zod.string().optional(),
									name: zod.string().optional(),
								})
								.optional(),
							fileId: zod.string().optional(),
							id: zod.string().optional(),
							locale: zod.string().optional(),
						}),
					)
					.optional(),
				transferFrom: zod.string().optional(),
				transferTo: zod.string().optional(),
				type: zod.string().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				variables: zod.record(zod.string(), zod.string()).optional(),
				waitSec: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const aggregateHistoryCallBody = zod.object({
	tags: zod.array(zod.string()).optional(),
	agentDescription: zod.string().optional(),
	agentId: zod.array(zod.string()).optional(),
	aggs: zod
		.array(
			zod.object({
				avg: zod.array(zod.string()).optional(),
				count: zod.array(zod.string()).optional(),
				group: zod
					.array(
						zod.object({
							aggregate: zod.string().optional(),
							desc: zod.boolean().optional(),
							field: zod.string().optional(),
							id: zod.string().optional(),
							interval: zod.string().optional(),
							top: zod.number().optional(),
						}),
					)
					.optional(),
				limit: zod.number().optional(),
				max: zod.array(zod.string()).optional(),
				min: zod.array(zod.string()).optional(),
				name: zod.string().optional(),
				sort: zod.array(zod.string()).optional(),
				sum: zod.array(zod.string()).optional(),
			}),
		)
		.optional(),
	amdResult: zod.array(zod.string()).optional(),
	answeredAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	cause: zod.array(zod.string()).optional(),
	contactId: zod.array(zod.string()).optional(),
	createdAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	dependencyId: zod.string().optional(),
	direction: zod.string().optional(),
	directions: zod.array(zod.string()).optional(),
	domainId: zod.string().optional(),
	duration: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	fts: zod.string().optional(),
	gatewayId: zod.array(zod.string()).optional(),
	hasFile: zod.boolean().optional(),
	hasTranscript: zod.boolean().optional(),
	id: zod.array(zod.string()).optional(),
	memberId: zod.array(zod.string()).optional(),
	missed: zod.boolean().optional(),
	number: zod.string().optional(),
	page: zod.number().optional(),
	parentId: zod.string().optional(),
	q: zod.string().optional(),
	queueId: zod.array(zod.string()).optional(),
	size: zod.number().optional(),
	skipParent: zod.boolean().optional(),
	storedAt: zod
		.object({
			from: zod.string().optional(),
			to: zod.string().optional(),
		})
		.optional(),
	teamId: zod.array(zod.string()).optional(),
	transferFrom: zod.array(zod.string()).optional(),
	transferTo: zod.array(zod.string()).optional(),
	userId: zod.array(zod.string()).optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const aggregateHistoryCallResponse = zod.object({
	items: zod
		.array(
			zod.object({
				name: zod.string().optional(),
			}),
		)
		.optional(),
});

export const createCallAnnotationParams = zod.object({
	call_id: zod.string(),
});

export const createCallAnnotationBody = zod.object({
	endSec: zod.number().optional(),
	note: zod.string().optional(),
	startSec: zod.number().optional(),
});

export const createCallAnnotationResponse = zod.object({
	callId: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	endSec: zod.number().optional(),
	id: zod.string().optional(),
	note: zod.string().optional(),
	startSec: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const deleteCallAnnotationParams = zod.object({
	call_id: zod.string(),
	id: zod.string(),
});

export const deleteCallAnnotationResponse = zod.object({
	callId: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	endSec: zod.number().optional(),
	id: zod.string().optional(),
	note: zod.string().optional(),
	startSec: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateCallAnnotationParams = zod.object({
	call_id: zod.string(),
	id: zod.string(),
});

export const updateCallAnnotationBody = zod.object({
	endSec: zod.number().optional(),
	note: zod.string().optional(),
	startSec: zod.number().optional(),
});

export const updateCallAnnotationResponse = zod.object({
	callId: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	endSec: zod.number().optional(),
	id: zod.string().optional(),
	note: zod.string().optional(),
	startSec: zod.number().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const redialCallParams = zod.object({
	call_id: zod.string(),
});

export const redialCallBody = zod.object({});

export const redialCallResponse = zod.object({
	id: zod.string().optional(),
});

export const patchHistoryCallParams = zod.object({
	id: zod.string(),
});

export const patchHistoryCallBody = zod.object({
	hideMissed: zod.boolean().optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchHistoryCallResponseFilesJobItemActionDefault = 'undefined';
export const patchHistoryCallResponseFilesJobItemStateDefault = 'idle';

export const patchHistoryCallResponse = zod.object({
	tags: zod.array(zod.string()).optional(),
	agent: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	agentDescription: zod.string().optional(),
	allowEvaluation: zod.boolean().optional(),
	amdAiLogs: zod.array(zod.string()).optional(),
	amdAiResult: zod.string().optional(),
	amdResult: zod.string().optional(),
	annotations: zod
		.array(
			zod.object({
				callId: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				endSec: zod.number().optional(),
				id: zod.string().optional(),
				note: zod.string().optional(),
				startSec: zod.number().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	answeredAt: zod.string().optional(),
	appId: zod.string().optional(),
	attemptId: zod.string().optional(),
	billSec: zod.number().optional(),
	blindTransfer: zod.string().optional(),
	blindTransfers: zod
		.array(
			zod.object({
				number: zod.string().optional(),
				time: zod.string().optional(),
				user: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	bridgedAt: zod.string().optional(),
	bridgedId: zod.string().optional(),
	cause: zod.string().optional(),
	contact: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	destination: zod.string().optional(),
	destinationName: zod.string().optional(),
	direction: zod.string().optional(),
	display: zod.string().optional(),
	duration: zod.number().optional(),
	extension: zod.string().optional(),
	files: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				mimeType: zod.string().optional(),
				name: zod.string().optional(),
				size: zod.string().optional(),
				startAt: zod.string().optional(),
				startRecord: zod.string().optional(),
				stopAt: zod.string().optional(),
			}),
		)
		.optional(),
	filesJob: zod
		.array(
			zod.object({
				action: zod
					.enum(['undefined', 'STT', 'delete'])
					.default(patchHistoryCallResponseFilesJobItemActionDefault),
				createdAt: zod.string().optional(),
				errorDetail: zod.string().optional(),
				fileId: zod.string().optional(),
				id: zod.string().optional(),
				state: zod
					.enum(['idle', 'active', 'finished', 'error'])
					.default(patchHistoryCallResponseFilesJobItemStateDefault),
			}),
		)
		.optional(),
	forms: zod
		.array(
			zod.object({
				agent: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				reportingAt: zod.string().optional(),
			}),
		)
		.optional(),
	from: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			number: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	fromNumber: zod.string().optional(),
	gateway: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	grantee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	hangupAt: zod.string().optional(),
	hangupBy: zod.string().optional(),
	hangupDisposition: zod.string().optional(),
	hangupPhrase: zod.string().optional(),
	hasChildren: zod.boolean().optional(),
	hold: zod
		.array(
			zod.object({
				sec: zod.number().optional(),
				start: zod.string().optional(),
				stop: zod.string().optional(),
			}),
		)
		.optional(),
	holdSec: zod.number().optional(),
	id: zod.string().optional(),
	joinedAt: zod.string().optional(),
	leavingAt: zod.string().optional(),
	member: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	memberId: zod.string().optional(),
	parentId: zod.string().optional(),
	queue: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	queueBridgedAt: zod.string().optional(),
	queueDurationSec: zod.number().optional(),
	queueWaitSec: zod.number().optional(),
	rateId: zod.string().optional(),
	ratedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	ratedUser: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	reportingAt: zod.string().optional(),
	reportingSec: zod.number().optional(),
	result: zod.string().optional(),
	schemas: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	scoreOptional: zod.number().optional(),
	scoreRequired: zod.number().optional(),
	sipCode: zod.number().optional(),
	storedAt: zod.string().optional(),
	talkSec: zod.number().optional(),
	team: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	to: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			number: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	toNumber: zod.string().optional(),
	transcripts: zod
		.array(
			zod.object({
				file: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				fileId: zod.string().optional(),
				id: zod.string().optional(),
				locale: zod.string().optional(),
			}),
		)
		.optional(),
	transferFrom: zod.string().optional(),
	transferTo: zod.string().optional(),
	type: zod.string().optional(),
	user: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	variables: zod.record(zod.string(), zod.string()).optional(),
	waitSec: zod.number().optional(),
});
