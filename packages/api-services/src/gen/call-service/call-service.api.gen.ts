/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	EngineActiveCall,
	EngineAggregateHistoryCallRequest,
	EngineBlindTransferCallResponse,
	EngineCallAnnotation,
	EngineCallServiceBlindTransferCallBody,
	EngineCallServiceCreateCallAnnotationBody,
	EngineCallServiceDtmfCallBody,
	EngineCallServiceEavesdropCallBody,
	EngineCallServiceHangupCallBody,
	EngineCallServiceHoldCallBody,
	EngineCallServicePatchHistoryCallBody,
	EngineCallServiceRedialCallBody,
	EngineCallServiceSetVariablesCallBody,
	EngineCallServiceUnHoldCallBody,
	EngineCallServiceUpdateCallAnnotationBody,
	EngineConfirmPushResponse,
	EngineCreateCallRequest,
	EngineCreateCallResponse,
	EngineDtmfCallResponse,
	EngineHangupCallResponse,
	EngineHistoryCall,
	EngineHoldCallResponse,
	EngineListAggregate,
	EngineListCall,
	EngineListHistoryCall,
	EngineSearchHistoryCallRequest,
	EngineSetVariablesCallResponse,
	ReadCallParams,
	SearchActiveCallParams,
	SearchHistoryCallParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getCallService =
		// --- title end
		() => {
			// --- header end
			const createCall = <TData = AxiosResponse<EngineCreateCallResponse>>(
				engineCreateCallRequest: EngineCreateCallRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/calls', engineCreateCallRequest, options);
			};
			const searchActiveCall = <TData = AxiosResponse<EngineListCall>>(
				params?: SearchActiveCallParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/calls/active', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const hangupCall = <TData = AxiosResponse<EngineHangupCallResponse>>(
				id: string,
				engineCallServiceHangupCallBody: EngineCallServiceHangupCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/calls/active/${id}`, {
					data: engineCallServiceHangupCallBody,
					...options,
				});
			};
			/**
			 * @summary Call item
			 */
			const readCall = <TData = AxiosResponse<EngineActiveCall>>(
				id: string,
				params?: ReadCallParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/calls/active/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Call item
			 */
			const confirmPush = <TData = AxiosResponse<EngineConfirmPushResponse>>(
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/active/${id}/confirm_push`,
					undefined,
					options,
				);
			};
			const dtmfCall = <TData = AxiosResponse<EngineDtmfCallResponse>>(
				id: string,
				engineCallServiceDtmfCallBody: EngineCallServiceDtmfCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/active/${id}/dtmf`,
					engineCallServiceDtmfCallBody,
					options,
				);
			};
			const eavesdropCall = <TData = AxiosResponse<EngineCreateCallResponse>>(
				id: string,
				engineCallServiceEavesdropCallBody: EngineCallServiceEavesdropCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/calls/active/${id}/eavesdrop`,
					engineCallServiceEavesdropCallBody,
					options,
				);
			};
			const holdCall = <TData = AxiosResponse<EngineHoldCallResponse>>(
				id: string,
				engineCallServiceHoldCallBody: EngineCallServiceHoldCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/active/${id}/hold`,
					engineCallServiceHoldCallBody,
					options,
				);
			};
			const blindTransferCall = <
				TData = AxiosResponse<EngineBlindTransferCallResponse>,
			>(
				id: string,
				engineCallServiceBlindTransferCallBody: EngineCallServiceBlindTransferCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/active/${id}/transfer`,
					engineCallServiceBlindTransferCallBody,
					options,
				);
			};
			const unHoldCall = <TData = AxiosResponse<EngineHoldCallResponse>>(
				id: string,
				engineCallServiceUnHoldCallBody: EngineCallServiceUnHoldCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/active/${id}/unhold`,
					engineCallServiceUnHoldCallBody,
					options,
				);
			};
			const setVariablesCall = <
				TData = AxiosResponse<EngineSetVariablesCallResponse>,
			>(
				id: string,
				engineCallServiceSetVariablesCallBody: EngineCallServiceSetVariablesCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/active/${id}/variables`,
					engineCallServiceSetVariablesCallBody,
					options,
				);
			};
			/**
			 * @summary List of call
			 */
			const searchHistoryCall = <TData = AxiosResponse<EngineListHistoryCall>>(
				params?: SearchHistoryCallParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/calls/history', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary List of call
			 */
			const searchHistoryCallPost = <
				TData = AxiosResponse<EngineListHistoryCall>,
			>(
				engineSearchHistoryCallRequest: EngineSearchHistoryCallRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/calls/history',
					engineSearchHistoryCallRequest,
					options,
				);
			};
			const aggregateHistoryCall = <TData = AxiosResponse<EngineListAggregate>>(
				engineAggregateHistoryCallRequest: EngineAggregateHistoryCallRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/calls/history/aggregate',
					engineAggregateHistoryCallRequest,
					options,
				);
			};
			const createCallAnnotation = <
				TData = AxiosResponse<EngineCallAnnotation>,
			>(
				callId: string,
				engineCallServiceCreateCallAnnotationBody: EngineCallServiceCreateCallAnnotationBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/calls/history/${callId}/annotation`,
					engineCallServiceCreateCallAnnotationBody,
					options,
				);
			};
			const deleteCallAnnotation = <
				TData = AxiosResponse<EngineCallAnnotation>,
			>(
				callId: string,
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(
					`/calls/history/${callId}/annotation/${id}`,
					options,
				);
			};
			const updateCallAnnotation = <
				TData = AxiosResponse<EngineCallAnnotation>,
			>(
				callId: string,
				id: string,
				engineCallServiceUpdateCallAnnotationBody: EngineCallServiceUpdateCallAnnotationBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/calls/history/${callId}/annotation/${id}`,
					engineCallServiceUpdateCallAnnotationBody,
					options,
				);
			};
			const redialCall = <TData = AxiosResponse<EngineCreateCallResponse>>(
				callId: string,
				engineCallServiceRedialCallBody: EngineCallServiceRedialCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/calls/history/${callId}/redial`,
					engineCallServiceRedialCallBody,
					options,
				);
			};
			const patchHistoryCall = <TData = AxiosResponse<EngineHistoryCall>>(
				id: string,
				engineCallServicePatchHistoryCallBody: EngineCallServicePatchHistoryCallBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/calls/history/${id}`,
					engineCallServicePatchHistoryCallBody,
					options,
				);
			};

			// --- footer start
			return {
				createCall,
				searchActiveCall,
				hangupCall,
				readCall,
				confirmPush,
				dtmfCall,
				eavesdropCall,
				holdCall,
				blindTransferCall,
				unHoldCall,
				setVariablesCall,
				searchHistoryCall,
				searchHistoryCallPost,
				aggregateHistoryCall,
				createCallAnnotation,
				deleteCallAnnotation,
				updateCallAnnotation,
				redialCall,
				patchHistoryCall,
			};
		};
export type CreateCallResult = AxiosResponse<EngineCreateCallResponse>;
export type SearchActiveCallResult = AxiosResponse<EngineListCall>;
export type HangupCallResult = AxiosResponse<EngineHangupCallResponse>;
export type ReadCallResult = AxiosResponse<EngineActiveCall>;
export type ConfirmPushResult = AxiosResponse<EngineConfirmPushResponse>;
export type DtmfCallResult = AxiosResponse<EngineDtmfCallResponse>;
export type EavesdropCallResult = AxiosResponse<EngineCreateCallResponse>;
export type HoldCallResult = AxiosResponse<EngineHoldCallResponse>;
export type BlindTransferCallResult =
	AxiosResponse<EngineBlindTransferCallResponse>;
export type UnHoldCallResult = AxiosResponse<EngineHoldCallResponse>;
export type SetVariablesCallResult =
	AxiosResponse<EngineSetVariablesCallResponse>;
export type SearchHistoryCallResult = AxiosResponse<EngineListHistoryCall>;
export type SearchHistoryCallPostResult = AxiosResponse<EngineListHistoryCall>;
export type AggregateHistoryCallResult = AxiosResponse<EngineListAggregate>;
export type CreateCallAnnotationResult = AxiosResponse<EngineCallAnnotation>;
export type DeleteCallAnnotationResult = AxiosResponse<EngineCallAnnotation>;
export type UpdateCallAnnotationResult = AxiosResponse<EngineCallAnnotation>;
export type RedialCallResult = AxiosResponse<EngineCreateCallResponse>;
export type PatchHistoryCallResult = AxiosResponse<EngineHistoryCall>;

// --- footer end
