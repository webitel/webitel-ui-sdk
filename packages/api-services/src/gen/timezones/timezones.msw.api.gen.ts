/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	WebitelContactsTimezone,
	WebitelContactsTimezoneList,
} from '.././_models';

export const getTimezonesDeleteTimezonesResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezoneList> = {},
): WebitelContactsTimezoneList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesListTimezonesResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezoneList> = {},
): WebitelContactsTimezoneList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesMergeTimezonesResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezoneList> = {},
): WebitelContactsTimezoneList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesResetTimezonesResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezoneList> = {},
): WebitelContactsTimezoneList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesDeleteTimezoneResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezone> = {},
): WebitelContactsTimezone => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesLocateTimezoneResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezone> = {},
): WebitelContactsTimezone => ({
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesUpdateTimezone2ResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezoneList> = {},
): WebitelContactsTimezoneList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesUpdateTimezoneResponseMock = (
	overrideResponse: Partial<WebitelContactsTimezoneList> = {},
): WebitelContactsTimezoneList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			primary: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getTimezonesDeleteTimezonesMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezoneList
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelContactsTimezoneList> | WebitelContactsTimezoneList),
) => {
	return http.delete('*/contacts/:contactId/timezones', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesDeleteTimezonesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesListTimezonesMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezoneList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelContactsTimezoneList> | WebitelContactsTimezoneList),
) => {
	return http.get('*/contacts/:contactId/timezones', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesListTimezonesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesMergeTimezonesMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezoneList
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelContactsTimezoneList> | WebitelContactsTimezoneList),
) => {
	return http.post('*/contacts/:contactId/timezones', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesMergeTimezonesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesResetTimezonesMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezoneList
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelContactsTimezoneList> | WebitelContactsTimezoneList),
) => {
	return http.put('*/contacts/:contactId/timezones', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesResetTimezonesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesDeleteTimezoneMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezone
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelContactsTimezone> | WebitelContactsTimezone),
) => {
	return http.delete('*/contacts/:contactId/timezones/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesDeleteTimezoneResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesLocateTimezoneMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezone
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelContactsTimezone> | WebitelContactsTimezone),
) => {
	return http.get('*/contacts/:contactId/timezones/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesLocateTimezoneResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesUpdateTimezone2MockHandler = (
	overrideResponse?:
		| WebitelContactsTimezoneList
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<WebitelContactsTimezoneList> | WebitelContactsTimezoneList),
) => {
	return http.patch('*/contacts/:contactId/timezones/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesUpdateTimezone2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getTimezonesUpdateTimezoneMockHandler = (
	overrideResponse?:
		| WebitelContactsTimezoneList
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelContactsTimezoneList> | WebitelContactsTimezoneList),
) => {
	return http.put('*/contacts/:contactId/timezones/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getTimezonesUpdateTimezoneResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getTimezonesMock = () => [
	getTimezonesDeleteTimezonesMockHandler(),
	getTimezonesListTimezonesMockHandler(),
	getTimezonesMergeTimezonesMockHandler(),
	getTimezonesResetTimezonesMockHandler(),
	getTimezonesDeleteTimezoneMockHandler(),
	getTimezonesLocateTimezoneMockHandler(),
	getTimezonesUpdateTimezone2MockHandler(),
	getTimezonesUpdateTimezoneMockHandler(),
];
