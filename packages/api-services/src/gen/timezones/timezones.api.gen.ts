/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	TimezonesDeleteTimezoneParams,
	TimezonesDeleteTimezonesParams,
	TimezonesListTimezonesParams,
	TimezonesLocateTimezoneParams,
	TimezonesMergeTimezonesParams,
	TimezonesResetTimezonesParams,
	TimezonesUpdateTimezone2Body,
	TimezonesUpdateTimezone2Params,
	TimezonesUpdateTimezoneBody,
	TimezonesUpdateTimezoneParams,
	WebitelContactsInputTimezone,
	WebitelContactsTimezone,
	WebitelContactsTimezoneList,
} from '.././_models';

// --- header start
//

export const // --- title start
	getTimezones =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Remove the Contact's timezone(s).
			 */
			const timezonesDeleteTimezones = <
				TData = AxiosResponse<WebitelContactsTimezoneList>,
			>(
				contactId: string,
				params: TimezonesDeleteTimezonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/timezones`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary List of the Contact's timezone(s).
			 */
			const timezonesListTimezones = <
				TData = AxiosResponse<WebitelContactsTimezoneList>,
			>(
				contactId: string,
				params?: TimezonesListTimezonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/timezones`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Associate more timezone(s) with the Contact.
			 */
			const timezonesMergeTimezones = <
				TData = AxiosResponse<WebitelContactsTimezoneList>,
			>(
				contactId: string,
				webitelContactsInputTimezone: WebitelContactsInputTimezone[],
				params?: TimezonesMergeTimezonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/contacts/${contactId}/timezones`,
					webitelContactsInputTimezone,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Resets all timezones of the contact according to the input dataset.
			 */
			const timezonesResetTimezones = <
				TData = AxiosResponse<WebitelContactsTimezoneList>,
			>(
				contactId: string,
				webitelContactsInputTimezone: WebitelContactsInputTimezone[],
				params?: TimezonesResetTimezonesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/timezones`,
					webitelContactsInputTimezone,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Remove the Contact's timezone association.
			 */
			const timezonesDeleteTimezone = <
				TData = AxiosResponse<WebitelContactsTimezone>,
			>(
				contactId: string,
				etag: string,
				params?: TimezonesDeleteTimezoneParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${contactId}/timezones/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate the Contact's timezone association.
			 */
			const timezonesLocateTimezone = <
				TData = AxiosResponse<WebitelContactsTimezone>,
			>(
				contactId: string,
				etag: string,
				params?: TimezonesLocateTimezoneParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/timezones/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update the Contact's timezone details.
			 */
			const timezonesUpdateTimezone2 = <
				TData = AxiosResponse<WebitelContactsTimezoneList>,
			>(
				contactId: string,
				etag: string,
				timezonesUpdateTimezone2Body: TimezonesUpdateTimezone2Body,
				params?: TimezonesUpdateTimezone2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/contacts/${contactId}/timezones/${etag}`,
					timezonesUpdateTimezone2Body,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update the Contact's timezone details.
			 */
			const timezonesUpdateTimezone = <
				TData = AxiosResponse<WebitelContactsTimezoneList>,
			>(
				contactId: string,
				etag: string,
				timezonesUpdateTimezoneBody: TimezonesUpdateTimezoneBody,
				params?: TimezonesUpdateTimezoneParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/contacts/${contactId}/timezones/${etag}`,
					timezonesUpdateTimezoneBody,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};

			// --- footer start
			return {
				timezonesDeleteTimezones,
				timezonesListTimezones,
				timezonesMergeTimezones,
				timezonesResetTimezones,
				timezonesDeleteTimezone,
				timezonesLocateTimezone,
				timezonesUpdateTimezone2,
				timezonesUpdateTimezone,
			};
		};
export type TimezonesDeleteTimezonesResult =
	AxiosResponse<WebitelContactsTimezoneList>;
export type TimezonesListTimezonesResult =
	AxiosResponse<WebitelContactsTimezoneList>;
export type TimezonesMergeTimezonesResult =
	AxiosResponse<WebitelContactsTimezoneList>;
export type TimezonesResetTimezonesResult =
	AxiosResponse<WebitelContactsTimezoneList>;
export type TimezonesDeleteTimezoneResult =
	AxiosResponse<WebitelContactsTimezone>;
export type TimezonesLocateTimezoneResult =
	AxiosResponse<WebitelContactsTimezone>;
export type TimezonesUpdateTimezone2Result =
	AxiosResponse<WebitelContactsTimezoneList>;
export type TimezonesUpdateTimezoneResult =
	AxiosResponse<WebitelContactsTimezoneList>;

// --- footer end
