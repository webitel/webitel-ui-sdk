/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	WfmCreateWorkingScheduleRequest,
	WfmCreateWorkingScheduleResponse,
	WfmDeleteWorkingScheduleResponse,
	WfmReadWorkingScheduleForecastResponse,
	WfmReadWorkingScheduleResponse,
	WfmSearchWorkingScheduleResponse,
	WfmUpdateWorkingScheduleAddAgentsResponse,
	WfmUpdateWorkingScheduleRemoveAgentResponse,
	WfmUpdateWorkingScheduleResponse,
	WorkingScheduleServiceReadWorkingScheduleForecastParams,
	WorkingScheduleServiceReadWorkingScheduleParams,
	WorkingScheduleServiceSearchWorkingScheduleParams,
	WorkingScheduleServiceUpdateWorkingScheduleAddAgentsBody,
	WorkingScheduleServiceUpdateWorkingScheduleBody,
} from '.././_models';

// --- header start
//

export const // --- title start
	getWorkingScheduleService =
		// --- title end
		() => {
			// --- header end
			const workingScheduleServiceSearchWorkingSchedule = <
				TData = AxiosResponse<WfmSearchWorkingScheduleResponse>,
			>(
				params?: WorkingScheduleServiceSearchWorkingScheduleParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/wfm/lookups/working_schedules', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const workingScheduleServiceCreateWorkingSchedule = <
				TData = AxiosResponse<WfmCreateWorkingScheduleResponse>,
			>(
				wfmCreateWorkingScheduleRequest: WfmCreateWorkingScheduleRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					'/wfm/lookups/working_schedules',
					wfmCreateWorkingScheduleRequest,
					options,
				);
			};
			const workingScheduleServiceDeleteWorkingSchedule = <
				TData = AxiosResponse<WfmDeleteWorkingScheduleResponse>,
			>(
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/wfm/lookups/working_schedules/${id}`, options);
			};
			const workingScheduleServiceReadWorkingSchedule = <
				TData = AxiosResponse<WfmReadWorkingScheduleResponse>,
			>(
				id: string,
				params?: WorkingScheduleServiceReadWorkingScheduleParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/wfm/lookups/working_schedules/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const workingScheduleServiceUpdateWorkingScheduleAddAgents = <
				TData = AxiosResponse<WfmUpdateWorkingScheduleAddAgentsResponse>,
			>(
				id: string,
				workingScheduleServiceUpdateWorkingScheduleAddAgentsBody: WorkingScheduleServiceUpdateWorkingScheduleAddAgentsBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/wfm/lookups/working_schedules/${id}/agents`,
					workingScheduleServiceUpdateWorkingScheduleAddAgentsBody,
					options,
				);
			};
			const workingScheduleServiceUpdateWorkingScheduleRemoveAgent = <
				TData = AxiosResponse<WfmUpdateWorkingScheduleRemoveAgentResponse>,
			>(
				id: string,
				agentId: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(
					`/wfm/lookups/working_schedules/${id}/agents/${agentId}`,
					options,
				);
			};
			const workingScheduleServiceReadWorkingScheduleForecast = <
				TData = AxiosResponse<WfmReadWorkingScheduleForecastResponse>,
			>(
				id: string,
				params?: WorkingScheduleServiceReadWorkingScheduleForecastParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/wfm/lookups/working_schedules/${id}/forecast`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const workingScheduleServiceUpdateWorkingSchedule = <
				TData = AxiosResponse<WfmUpdateWorkingScheduleResponse>,
			>(
				workingScheduleServiceUpdateWorkingScheduleBody: WorkingScheduleServiceUpdateWorkingScheduleBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/wfm/lookups/working_schedules/item.id}',
					workingScheduleServiceUpdateWorkingScheduleBody,
					options,
				);
			};

			// --- footer start
			return {
				workingScheduleServiceSearchWorkingSchedule,
				workingScheduleServiceCreateWorkingSchedule,
				workingScheduleServiceDeleteWorkingSchedule,
				workingScheduleServiceReadWorkingSchedule,
				workingScheduleServiceUpdateWorkingScheduleAddAgents,
				workingScheduleServiceUpdateWorkingScheduleRemoveAgent,
				workingScheduleServiceReadWorkingScheduleForecast,
				workingScheduleServiceUpdateWorkingSchedule,
			};
		};
export type WorkingScheduleServiceSearchWorkingScheduleResult =
	AxiosResponse<WfmSearchWorkingScheduleResponse>;
export type WorkingScheduleServiceCreateWorkingScheduleResult =
	AxiosResponse<WfmCreateWorkingScheduleResponse>;
export type WorkingScheduleServiceDeleteWorkingScheduleResult =
	AxiosResponse<WfmDeleteWorkingScheduleResponse>;
export type WorkingScheduleServiceReadWorkingScheduleResult =
	AxiosResponse<WfmReadWorkingScheduleResponse>;
export type WorkingScheduleServiceUpdateWorkingScheduleAddAgentsResult =
	AxiosResponse<WfmUpdateWorkingScheduleAddAgentsResponse>;
export type WorkingScheduleServiceUpdateWorkingScheduleRemoveAgentResult =
	AxiosResponse<WfmUpdateWorkingScheduleRemoveAgentResponse>;
export type WorkingScheduleServiceReadWorkingScheduleForecastResult =
	AxiosResponse<WfmReadWorkingScheduleForecastResponse>;
export type WorkingScheduleServiceUpdateWorkingScheduleResult =
	AxiosResponse<WfmUpdateWorkingScheduleResponse>;

// --- footer end
