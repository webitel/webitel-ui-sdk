/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	WfmCreateWorkingScheduleResponse,
	WfmDeleteWorkingScheduleResponse,
	WfmReadWorkingScheduleForecastResponse,
	WfmReadWorkingScheduleResponse,
	WfmSearchWorkingScheduleResponse,
	WfmUpdateWorkingScheduleAddAgentsResponse,
	WfmUpdateWorkingScheduleRemoveAgentResponse,
	WfmUpdateWorkingScheduleResponse,
} from '.././_models';
import { WfmWorkingScheduleState } from '.././_models';

export const getWorkingScheduleServiceSearchWorkingScheduleResponseMock = (
	overrideResponse: Partial<WfmSearchWorkingScheduleResponse> = {},
): WfmSearchWorkingScheduleResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			agents: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			blockOutsideActivity: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			calendar: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extraSkills: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			state: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmWorkingScheduleState)),
				undefined,
			]),
			team: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			totalAgents: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getWorkingScheduleServiceCreateWorkingScheduleResponseMock = (
	overrideResponse: Partial<WfmCreateWorkingScheduleResponse> = {},
): WfmCreateWorkingScheduleResponse => ({
	item: faker.helpers.arrayElement([
		{
			agents: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			blockOutsideActivity: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			calendar: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extraSkills: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			state: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmWorkingScheduleState)),
				undefined,
			]),
			team: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			totalAgents: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getWorkingScheduleServiceDeleteWorkingScheduleResponseMock = (
	overrideResponse: Partial<WfmDeleteWorkingScheduleResponse> = {},
): WfmDeleteWorkingScheduleResponse => ({
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getWorkingScheduleServiceReadWorkingScheduleResponseMock = (
	overrideResponse: Partial<WfmReadWorkingScheduleResponse> = {},
): WfmReadWorkingScheduleResponse => ({
	item: faker.helpers.arrayElement([
		{
			agents: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			blockOutsideActivity: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			calendar: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extraSkills: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			state: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmWorkingScheduleState)),
				undefined,
			]),
			team: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			totalAgents: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getWorkingScheduleServiceUpdateWorkingScheduleAddAgentsResponseMock =
	(
		overrideResponse: Partial<WfmUpdateWorkingScheduleAddAgentsResponse> = {},
	): WfmUpdateWorkingScheduleAddAgentsResponse => ({
		agents: faker.helpers.arrayElement([
			Array.from(
				{ length: faker.number.int({ min: 1, max: 10 }) },
				(_, i) => i + 1,
			).map(() => ({
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			})),
			undefined,
		]),
		...overrideResponse,
	});

export const getWorkingScheduleServiceUpdateWorkingScheduleRemoveAgentResponseMock =
	(
		overrideResponse: Partial<WfmUpdateWorkingScheduleRemoveAgentResponse> = {},
	): WfmUpdateWorkingScheduleRemoveAgentResponse => ({
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		...overrideResponse,
	});

export const getWorkingScheduleServiceReadWorkingScheduleForecastResponseMock =
	(
		overrideResponse: Partial<WfmReadWorkingScheduleForecastResponse> = {},
	): WfmReadWorkingScheduleForecastResponse => ({
		items: faker.helpers.arrayElement([
			{
				[faker.string.alphanumeric(5)]: {
					forecast: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							agents: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
							hour: faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						})),
						undefined,
					]),
				},
			},
			undefined,
		]),
		...overrideResponse,
	});

export const getWorkingScheduleServiceUpdateWorkingScheduleResponseMock = (
	overrideResponse: Partial<WfmUpdateWorkingScheduleResponse> = {},
): WfmUpdateWorkingScheduleResponse => ({
	item: faker.helpers.arrayElement([
		{
			agents: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			blockOutsideActivity: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			calendar: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			domainId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			endTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			extraSkills: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				})),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startDateAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startTimeAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			state: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(WfmWorkingScheduleState)),
				undefined,
			]),
			team: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			totalAgents: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getWorkingScheduleServiceSearchWorkingScheduleMockHandler = (
	overrideResponse?:
		| WfmSearchWorkingScheduleResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmSearchWorkingScheduleResponse>
				| WfmSearchWorkingScheduleResponse),
) => {
	return http.get('*/wfm/lookups/working_schedules', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getWorkingScheduleServiceSearchWorkingScheduleResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getWorkingScheduleServiceCreateWorkingScheduleMockHandler = (
	overrideResponse?:
		| WfmCreateWorkingScheduleResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<WfmCreateWorkingScheduleResponse>
				| WfmCreateWorkingScheduleResponse),
) => {
	return http.post('*/wfm/lookups/working_schedules', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getWorkingScheduleServiceCreateWorkingScheduleResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getWorkingScheduleServiceDeleteWorkingScheduleMockHandler = (
	overrideResponse?:
		| WfmDeleteWorkingScheduleResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) =>
				| Promise<WfmDeleteWorkingScheduleResponse>
				| WfmDeleteWorkingScheduleResponse),
) => {
	return http.delete('*/wfm/lookups/working_schedules/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getWorkingScheduleServiceDeleteWorkingScheduleResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getWorkingScheduleServiceReadWorkingScheduleMockHandler = (
	overrideResponse?:
		| WfmReadWorkingScheduleResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmReadWorkingScheduleResponse>
				| WfmReadWorkingScheduleResponse),
) => {
	return http.get('*/wfm/lookups/working_schedules/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getWorkingScheduleServiceReadWorkingScheduleResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getWorkingScheduleServiceUpdateWorkingScheduleAddAgentsMockHandler =
	(
		overrideResponse?:
			| WfmUpdateWorkingScheduleAddAgentsResponse
			| ((
					info: Parameters<Parameters<typeof http.post>[1]>[0],
			  ) =>
					| Promise<WfmUpdateWorkingScheduleAddAgentsResponse>
					| WfmUpdateWorkingScheduleAddAgentsResponse),
	) => {
		return http.post(
			'*/wfm/lookups/working_schedules/:id/agents',
			async (info) => {
				await delay(1000);

				return new HttpResponse(
					JSON.stringify(
						overrideResponse !== undefined
							? typeof overrideResponse === 'function'
								? await overrideResponse(info)
								: overrideResponse
							: getWorkingScheduleServiceUpdateWorkingScheduleAddAgentsResponseMock(),
					),
					{ status: 200, headers: { 'Content-Type': 'application/json' } },
				);
			},
		);
	};

export const getWorkingScheduleServiceUpdateWorkingScheduleRemoveAgentMockHandler =
	(
		overrideResponse?:
			| WfmUpdateWorkingScheduleRemoveAgentResponse
			| ((
					info: Parameters<Parameters<typeof http.delete>[1]>[0],
			  ) =>
					| Promise<WfmUpdateWorkingScheduleRemoveAgentResponse>
					| WfmUpdateWorkingScheduleRemoveAgentResponse),
	) => {
		return http.delete(
			'*/wfm/lookups/working_schedules/:id/agents/:agentId',
			async (info) => {
				await delay(1000);

				return new HttpResponse(
					JSON.stringify(
						overrideResponse !== undefined
							? typeof overrideResponse === 'function'
								? await overrideResponse(info)
								: overrideResponse
							: getWorkingScheduleServiceUpdateWorkingScheduleRemoveAgentResponseMock(),
					),
					{ status: 200, headers: { 'Content-Type': 'application/json' } },
				);
			},
		);
	};

export const getWorkingScheduleServiceReadWorkingScheduleForecastMockHandler = (
	overrideResponse?:
		| WfmReadWorkingScheduleForecastResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WfmReadWorkingScheduleForecastResponse>
				| WfmReadWorkingScheduleForecastResponse),
) => {
	return http.get(
		'*/wfm/lookups/working_schedules/:id/forecast',
		async (info) => {
			await delay(1000);

			return new HttpResponse(
				JSON.stringify(
					overrideResponse !== undefined
						? typeof overrideResponse === 'function'
							? await overrideResponse(info)
							: overrideResponse
						: getWorkingScheduleServiceReadWorkingScheduleForecastResponseMock(),
				),
				{ status: 200, headers: { 'Content-Type': 'application/json' } },
			);
		},
	);
};

export const getWorkingScheduleServiceUpdateWorkingScheduleMockHandler = (
	overrideResponse?:
		| WfmUpdateWorkingScheduleResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) =>
				| Promise<WfmUpdateWorkingScheduleResponse>
				| WfmUpdateWorkingScheduleResponse),
) => {
	return http.put('*/wfm/lookups/working_schedules/item.id}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getWorkingScheduleServiceUpdateWorkingScheduleResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getWorkingScheduleServiceMock = () => [
	getWorkingScheduleServiceSearchWorkingScheduleMockHandler(),
	getWorkingScheduleServiceCreateWorkingScheduleMockHandler(),
	getWorkingScheduleServiceDeleteWorkingScheduleMockHandler(),
	getWorkingScheduleServiceReadWorkingScheduleMockHandler(),
	getWorkingScheduleServiceUpdateWorkingScheduleAddAgentsMockHandler(),
	getWorkingScheduleServiceUpdateWorkingScheduleRemoveAgentMockHandler(),
	getWorkingScheduleServiceReadWorkingScheduleForecastMockHandler(),
	getWorkingScheduleServiceUpdateWorkingScheduleMockHandler(),
];
