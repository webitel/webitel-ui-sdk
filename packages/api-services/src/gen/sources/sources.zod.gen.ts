/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary Retrieve a list of sources or search sources
 */
export const listSourcesQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.string()
		.optional()
		.describe('Sort the result according to fields.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
	type: zod
		.array(
			zod.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			]),
		)
		.optional()
		.describe(
			'Filter by source type.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
		),
});

export const listSourcesResponseItemsItemTypeDefault = 'TYPE_UNSPECIFIED';

export const listSourcesResponse = zod
	.object({
		items: zod
			.array(
				zod
					.object({
						createdAt: zod.string().optional(),
						createdBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						description: zod.string().optional(),
						id: zod.string().optional(),
						name: zod.string().optional(),
						type: zod
							.enum([
								'TYPE_UNSPECIFIED',
								'CALL',
								'CHAT',
								'SOCIAL_MEDIA',
								'EMAIL',
								'API',
								'MANUAL',
							])
							.default(listSourcesResponseItemsItemTypeDefault)
							.describe(
								'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
							),
						updatedAt: zod.string().optional(),
						updatedBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
					})
					.describe('Represents a source entity in the contact system.'),
			)
			.optional()
			.describe('List of sources.'),
		next: zod.boolean().optional().describe('Have more records.'),
		page: zod
			.number()
			.optional()
			.describe('Page number of the partial result.'),
	})
	.describe('A list of sources.');

/**
 * @summary Create a new source
 */
export const createSourceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const createSourceBodyTypeDefault = 'TYPE_UNSPECIFIED';

export const createSourceBody = zod.object({
	description: zod
		.string()
		.optional()
		.describe('The description of the source.'),
	name: zod.string().optional().describe('The name of the source.'),
	type: zod
		.enum([
			'TYPE_UNSPECIFIED',
			'CALL',
			'CHAT',
			'SOCIAL_MEDIA',
			'EMAIL',
			'API',
			'MANUAL',
		])
		.default(createSourceBodyTypeDefault)
		.describe(
			'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
		),
});

export const createSourceResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const createSourceResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		description: zod.string().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.default(createSourceResponseTypeDefault)
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('Represents a source entity in the contact system.');

/**
 * @summary Delete a source
 */
export const deleteSourceParams = zod.object({
	id: zod.string().describe('The unique ID of the source to delete.'),
});

export const deleteSourceResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const deleteSourceResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		description: zod.string().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.default(deleteSourceResponseTypeDefault)
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('Represents a source entity in the contact system.');

/**
 * @summary Locate a source by ID
 */
export const locateSourceParams = zod.object({
	id: zod.string().describe('The unique ID of the source to locate.'),
});

export const locateSourceQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
});

export const locateSourceResponseSourceTypeDefault = 'TYPE_UNSPECIFIED';

export const locateSourceResponse = zod
	.object({
		source: zod
			.object({
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				type: zod
					.enum([
						'TYPE_UNSPECIFIED',
						'CALL',
						'CHAT',
						'SOCIAL_MEDIA',
						'EMAIL',
						'API',
						'MANUAL',
					])
					.default(locateSourceResponseSourceTypeDefault)
					.describe(
						'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
					),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			})
			.optional()
			.describe('Represents a source entity in the contact system.'),
	})
	.describe('Response message for locating a source.');

/**
 * @summary Update an existing source
 */
export const updateSource2Params = zod.object({
	id: zod.string(),
});

export const updateSource2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateSource2BodyTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSource2Body = zod.object({
	description: zod
		.string()
		.optional()
		.describe('The description of the source.'),
	name: zod.string().optional().describe('The name of the source.'),
	type: zod
		.enum([
			'TYPE_UNSPECIFIED',
			'CALL',
			'CHAT',
			'SOCIAL_MEDIA',
			'EMAIL',
			'API',
			'MANUAL',
		])
		.default(updateSource2BodyTypeDefault)
		.describe(
			'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
		),
});

export const updateSource2ResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSource2Response = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		description: zod.string().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.default(updateSource2ResponseTypeDefault)
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('Represents a source entity in the contact system.');

/**
 * @summary Update an existing source
 */
export const updateSourceParams = zod.object({
	id: zod.string(),
});

export const updateSourceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateSourceBodyTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSourceBody = zod.object({
	description: zod
		.string()
		.optional()
		.describe('The description of the source.'),
	name: zod.string().optional().describe('The name of the source.'),
	type: zod
		.enum([
			'TYPE_UNSPECIFIED',
			'CALL',
			'CHAT',
			'SOCIAL_MEDIA',
			'EMAIL',
			'API',
			'MANUAL',
		])
		.default(updateSourceBodyTypeDefault)
		.describe(
			'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
		),
});

export const updateSourceResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSourceResponse = zod
	.object({
		createdAt: zod.string().optional(),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		description: zod.string().optional(),
		id: zod.string().optional(),
		name: zod.string().optional(),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.default(updateSourceResponseTypeDefault)
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod.string().optional(),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('Represents a source entity in the contact system.');
