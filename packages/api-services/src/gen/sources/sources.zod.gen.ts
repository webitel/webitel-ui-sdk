/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary Retrieve a list of sources or search sources
 */
export const listSourcesQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.string()
		.optional()
		.describe('Sort the result according to fields.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
	type: zod
		.array(
			zod.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			]),
		)
		.optional()
		.describe(
			'Filter by source type.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
		),
});

export const listSourcesResponseItemsItemDescriptionMax = 500;
export const listSourcesResponseItemsItemNameMin = 3;

export const listSourcesResponseItemsItemNameMax = 100;

export const listSourcesResponseItemsItemNameRegExp = /^[a-zA-Z0-9_\-\s]+$/;
export const listSourcesResponseItemsItemTypeDefault = 'TYPE_UNSPECIFIED';

export const listSourcesResponse = zod
	.object({
		items: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.describe(
								'Unix timestamp representing when the source was created.',
							),
						createdBy: zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
						description: zod
							.string()
							.max(listSourcesResponseItemsItemDescriptionMax)
							.optional()
							.describe(
								"An optional longer explanation of the source's purpose.",
							),
						id: zod
							.string()
							.describe(
								'Unique identifier for the source, generated automatically.',
							),
						name: zod
							.string()
							.min(listSourcesResponseItemsItemNameMin)
							.max(listSourcesResponseItemsItemNameMax)
							.regex(listSourcesResponseItemsItemNameRegExp)
							.describe('A unique, descriptive name for the source.'),
						type: zod
							.enum([
								'TYPE_UNSPECIFIED',
								'CALL',
								'CHAT',
								'SOCIAL_MEDIA',
								'EMAIL',
								'API',
								'MANUAL',
							])
							.describe(
								'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
							),
						updatedAt: zod
							.string()
							.describe('Unix timestamp representing the most recent update.'),
						updatedBy: zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					})
					.describe(
						'Represents a data source in the contact management system.',
					),
			)
			.optional()
			.describe('List of sources.'),
		next: zod.boolean().optional().describe('Have more records.'),
		page: zod
			.number()
			.optional()
			.describe('Page number of the partial result.'),
	})
	.describe('A list of sources.');

/**
 * @summary Create a new source
 */
export const createSourceQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe(
			'Optional list of specific fields to return after creation\n\nSpecific fields to include in response',
		),
});

export const createSourceBodyDefault = { name: 'Default Source', type: 'CALL' };
export const createSourceBodyDescriptionDefault = 'No description provided';
export const createSourceBodyDescriptionMax = 500;
export const createSourceBodyNameDefault = 'New Source';
export const createSourceBodyNameMin = 2;

export const createSourceBodyNameMax = 100;

export const createSourceBodyNameRegExp = /^[a-zA-Z0-9_\- ]+$/;
export const createSourceBodyTypeDefault = 'TYPE_UNSPECIFIED';

export const createSourceBody = zod
	.object({
		description: zod
			.string()
			.max(createSourceBodyDescriptionMax)
			.default(createSourceBodyDescriptionDefault)
			.describe('A short description of the source'),
		name: zod
			.string()
			.min(createSourceBodyNameMin)
			.max(createSourceBodyNameMax)
			.regex(createSourceBodyNameRegExp)
			.describe('The name of the source'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
	})
	.describe('The data structure representing a source');

export const createSourceResponseDescriptionMax = 500;
export const createSourceResponseNameMin = 3;

export const createSourceResponseNameMax = 100;

export const createSourceResponseNameRegExp = /^[a-zA-Z0-9_\-\s]+$/;
export const createSourceResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const createSourceResponse = zod
	.object({
		createdAt: zod
			.string()
			.describe('Unix timestamp representing when the source was created.'),
		createdBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
		description: zod
			.string()
			.max(createSourceResponseDescriptionMax)
			.optional()
			.describe("An optional longer explanation of the source's purpose."),
		id: zod
			.string()
			.describe('Unique identifier for the source, generated automatically.'),
		name: zod
			.string()
			.min(createSourceResponseNameMin)
			.max(createSourceResponseNameMax)
			.regex(createSourceResponseNameRegExp)
			.describe('A unique, descriptive name for the source.'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod
			.string()
			.describe('Unix timestamp representing the most recent update.'),
		updatedBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
	})
	.describe('Represents a data source in the contact management system.');

/**
 * @summary Delete a source
 */
export const deleteSourceParams = zod.object({
	id: zod.string().describe('The unique ID of the source to delete.'),
});

export const deleteSourceResponseDescriptionMax = 500;
export const deleteSourceResponseNameMin = 3;

export const deleteSourceResponseNameMax = 100;

export const deleteSourceResponseNameRegExp = /^[a-zA-Z0-9_\-\s]+$/;
export const deleteSourceResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const deleteSourceResponse = zod
	.object({
		createdAt: zod
			.string()
			.describe('Unix timestamp representing when the source was created.'),
		createdBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
		description: zod
			.string()
			.max(deleteSourceResponseDescriptionMax)
			.optional()
			.describe("An optional longer explanation of the source's purpose."),
		id: zod
			.string()
			.describe('Unique identifier for the source, generated automatically.'),
		name: zod
			.string()
			.min(deleteSourceResponseNameMin)
			.max(deleteSourceResponseNameMax)
			.regex(deleteSourceResponseNameRegExp)
			.describe('A unique, descriptive name for the source.'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod
			.string()
			.describe('Unix timestamp representing the most recent update.'),
		updatedBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
	})
	.describe('Represents a data source in the contact management system.');

/**
 * @summary Locate a source by ID
 */
export const locateSourceParams = zod.object({
	id: zod.string().describe('The unique ID of the source to locate.'),
});

export const locateSourceQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
});

export const locateSourceResponseSourceDescriptionMax = 500;
export const locateSourceResponseSourceNameMin = 3;

export const locateSourceResponseSourceNameMax = 100;

export const locateSourceResponseSourceNameRegExp = /^[a-zA-Z0-9_\-\s]+$/;
export const locateSourceResponseSourceTypeDefault = 'TYPE_UNSPECIFIED';

export const locateSourceResponse = zod
	.object({
		source: zod
			.object({
				createdAt: zod
					.string()
					.describe('Unix timestamp representing when the source was created.'),
				createdBy: zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
				description: zod
					.string()
					.max(locateSourceResponseSourceDescriptionMax)
					.optional()
					.describe("An optional longer explanation of the source's purpose."),
				id: zod
					.string()
					.describe(
						'Unique identifier for the source, generated automatically.',
					),
				name: zod
					.string()
					.min(locateSourceResponseSourceNameMin)
					.max(locateSourceResponseSourceNameMax)
					.regex(locateSourceResponseSourceNameRegExp)
					.describe('A unique, descriptive name for the source.'),
				type: zod
					.enum([
						'TYPE_UNSPECIFIED',
						'CALL',
						'CHAT',
						'SOCIAL_MEDIA',
						'EMAIL',
						'API',
						'MANUAL',
					])
					.describe(
						'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
					),
				updatedAt: zod
					.string()
					.describe('Unix timestamp representing the most recent update.'),
				updatedBy: zod.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				}),
			})
			.optional()
			.describe('Represents a data source in the contact management system.'),
	})
	.describe('Response message for locating a source.');

/**
 * @summary Update an existing source
 */
export const updateSource2Params = zod.object({
	id: zod.string(),
});

export const updateSource2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateSource2BodyDefault = {
	name: 'Default Source',
	type: 'CALL',
};
export const updateSource2BodyDescriptionDefault = 'No description provided';
export const updateSource2BodyDescriptionMax = 500;
export const updateSource2BodyNameDefault = 'New Source';
export const updateSource2BodyNameMin = 2;

export const updateSource2BodyNameMax = 100;

export const updateSource2BodyNameRegExp = /^[a-zA-Z0-9_\- ]+$/;
export const updateSource2BodyTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSource2Body = zod
	.object({
		description: zod
			.string()
			.max(updateSource2BodyDescriptionMax)
			.default(updateSource2BodyDescriptionDefault)
			.describe('A short description of the source'),
		name: zod
			.string()
			.min(updateSource2BodyNameMin)
			.max(updateSource2BodyNameMax)
			.regex(updateSource2BodyNameRegExp)
			.describe('The name of the source'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
	})
	.describe('The data structure representing a source');

export const updateSource2ResponseDescriptionMax = 500;
export const updateSource2ResponseNameMin = 3;

export const updateSource2ResponseNameMax = 100;

export const updateSource2ResponseNameRegExp = /^[a-zA-Z0-9_\-\s]+$/;
export const updateSource2ResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSource2Response = zod
	.object({
		createdAt: zod
			.string()
			.describe('Unix timestamp representing when the source was created.'),
		createdBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
		description: zod
			.string()
			.max(updateSource2ResponseDescriptionMax)
			.optional()
			.describe("An optional longer explanation of the source's purpose."),
		id: zod
			.string()
			.describe('Unique identifier for the source, generated automatically.'),
		name: zod
			.string()
			.min(updateSource2ResponseNameMin)
			.max(updateSource2ResponseNameMax)
			.regex(updateSource2ResponseNameRegExp)
			.describe('A unique, descriptive name for the source.'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod
			.string()
			.describe('Unix timestamp representing the most recent update.'),
		updatedBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
	})
	.describe('Represents a data source in the contact management system.');

/**
 * @summary Update an existing source
 */
export const updateSourceParams = zod.object({
	id: zod.string(),
});

export const updateSourceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateSourceBodyDefault = { name: 'Default Source', type: 'CALL' };
export const updateSourceBodyDescriptionDefault = 'No description provided';
export const updateSourceBodyDescriptionMax = 500;
export const updateSourceBodyNameDefault = 'New Source';
export const updateSourceBodyNameMin = 2;

export const updateSourceBodyNameMax = 100;

export const updateSourceBodyNameRegExp = /^[a-zA-Z0-9_\- ]+$/;
export const updateSourceBodyTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSourceBody = zod
	.object({
		description: zod
			.string()
			.max(updateSourceBodyDescriptionMax)
			.default(updateSourceBodyDescriptionDefault)
			.describe('A short description of the source'),
		name: zod
			.string()
			.min(updateSourceBodyNameMin)
			.max(updateSourceBodyNameMax)
			.regex(updateSourceBodyNameRegExp)
			.describe('The name of the source'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
	})
	.describe('The data structure representing a source');

export const updateSourceResponseDescriptionMax = 500;
export const updateSourceResponseNameMin = 3;

export const updateSourceResponseNameMax = 100;

export const updateSourceResponseNameRegExp = /^[a-zA-Z0-9_\-\s]+$/;
export const updateSourceResponseTypeDefault = 'TYPE_UNSPECIFIED';

export const updateSourceResponse = zod
	.object({
		createdAt: zod
			.string()
			.describe('Unix timestamp representing when the source was created.'),
		createdBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
		description: zod
			.string()
			.max(updateSourceResponseDescriptionMax)
			.optional()
			.describe("An optional longer explanation of the source's purpose."),
		id: zod
			.string()
			.describe('Unique identifier for the source, generated automatically.'),
		name: zod
			.string()
			.min(updateSourceResponseNameMin)
			.max(updateSourceResponseNameMax)
			.regex(updateSourceResponseNameRegExp)
			.describe('A unique, descriptive name for the source.'),
		type: zod
			.enum([
				'TYPE_UNSPECIFIED',
				'CALL',
				'CHAT',
				'SOCIAL_MEDIA',
				'EMAIL',
				'API',
				'MANUAL',
			])
			.describe(
				'Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.',
			),
		updatedAt: zod
			.string()
			.describe('Unix timestamp representing the most recent update.'),
		updatedBy: zod.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		}),
	})
	.describe('Represents a data source in the contact management system.');
