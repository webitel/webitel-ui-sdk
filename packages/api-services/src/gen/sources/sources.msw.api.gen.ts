/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';
import type {
	WebitelCasesLocateSourceResponse,
	WebitelCasesSource,
	WebitelCasesSourceList,
} from '.././_models';
import { WebitelCasesSourceType } from '.././_models';

export const getListSourcesResponseMock = (
	overrideResponse: Partial<WebitelCasesSourceList> = {},
): WebitelCasesSourceList => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
			createdBy: {
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			},
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 500 } }),
				undefined,
			]),
			id: faker.string.alpha({ length: { min: 10, max: 20 } }),
			name: faker.helpers.fromRegExp('^[a-zA-Z0-9_-s]+$'),
			type: faker.helpers.arrayElement(Object.values(WebitelCasesSourceType)),
			updatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
			updatedBy: {
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			},
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateSourceResponseMock = (
	overrideResponse: Partial<WebitelCasesSource> = {},
): WebitelCasesSource => ({
	createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	createdBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 500 } }),
		undefined,
	]),
	id: faker.string.alpha({ length: { min: 10, max: 20 } }),
	name: faker.helpers.fromRegExp('^[a-zA-Z0-9_-s]+$'),
	type: faker.helpers.arrayElement(Object.values(WebitelCasesSourceType)),
	updatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	updatedBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	...overrideResponse,
});

export const getDeleteSourceResponseMock = (
	overrideResponse: Partial<WebitelCasesSource> = {},
): WebitelCasesSource => ({
	createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	createdBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 500 } }),
		undefined,
	]),
	id: faker.string.alpha({ length: { min: 10, max: 20 } }),
	name: faker.helpers.fromRegExp('^[a-zA-Z0-9_-s]+$'),
	type: faker.helpers.arrayElement(Object.values(WebitelCasesSourceType)),
	updatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	updatedBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	...overrideResponse,
});

export const getLocateSourceResponseMock = (
	overrideResponse: Partial<WebitelCasesLocateSourceResponse> = {},
): WebitelCasesLocateSourceResponse => ({
	source: faker.helpers.arrayElement([
		{
			createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
			createdBy: {
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			},
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 500 } }),
				undefined,
			]),
			id: faker.string.alpha({ length: { min: 10, max: 20 } }),
			name: faker.helpers.fromRegExp('^[a-zA-Z0-9_-s]+$'),
			type: faker.helpers.arrayElement(Object.values(WebitelCasesSourceType)),
			updatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
			updatedBy: {
				id: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
				name: faker.helpers.arrayElement([
					faker.string.alpha({ length: { min: 10, max: 20 } }),
					undefined,
				]),
			},
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateSource2ResponseMock = (
	overrideResponse: Partial<WebitelCasesSource> = {},
): WebitelCasesSource => ({
	createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	createdBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 500 } }),
		undefined,
	]),
	id: faker.string.alpha({ length: { min: 10, max: 20 } }),
	name: faker.helpers.fromRegExp('^[a-zA-Z0-9_-s]+$'),
	type: faker.helpers.arrayElement(Object.values(WebitelCasesSourceType)),
	updatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	updatedBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	...overrideResponse,
});

export const getUpdateSourceResponseMock = (
	overrideResponse: Partial<WebitelCasesSource> = {},
): WebitelCasesSource => ({
	createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	createdBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 500 } }),
		undefined,
	]),
	id: faker.string.alpha({ length: { min: 10, max: 20 } }),
	name: faker.helpers.fromRegExp('^[a-zA-Z0-9_-s]+$'),
	type: faker.helpers.arrayElement(Object.values(WebitelCasesSourceType)),
	updatedAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
	updatedBy: {
		id: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
		name: faker.helpers.arrayElement([
			faker.string.alpha({ length: { min: 10, max: 20 } }),
			undefined,
		]),
	},
	...overrideResponse,
});

export const getListSourcesMockHandler = (
	overrideResponse?:
		| WebitelCasesSourceList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelCasesSourceList> | WebitelCasesSourceList),
) => {
	return http.get('*/cases/sources', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getListSourcesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateSourceMockHandler = (
	overrideResponse?:
		| WebitelCasesSource
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelCasesSource> | WebitelCasesSource),
) => {
	return http.post('*/cases/sources', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateSourceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteSourceMockHandler = (
	overrideResponse?:
		| WebitelCasesSource
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelCasesSource> | WebitelCasesSource),
) => {
	return http.delete('*/cases/sources/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteSourceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLocateSourceMockHandler = (
	overrideResponse?:
		| WebitelCasesLocateSourceResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<WebitelCasesLocateSourceResponse>
				| WebitelCasesLocateSourceResponse),
) => {
	return http.get('*/cases/sources/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLocateSourceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateSource2MockHandler = (
	overrideResponse?:
		| WebitelCasesSource
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<WebitelCasesSource> | WebitelCasesSource),
) => {
	return http.patch('*/cases/sources/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateSource2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateSourceMockHandler = (
	overrideResponse?:
		| WebitelCasesSource
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<WebitelCasesSource> | WebitelCasesSource),
) => {
	return http.put('*/cases/sources/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateSourceResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getSourcesMock = () => [
	getListSourcesMockHandler(),
	getCreateSourceMockHandler(),
	getDeleteSourceMockHandler(),
	getLocateSourceMockHandler(),
	getUpdateSource2MockHandler(),
	getUpdateSourceMockHandler(),
];
