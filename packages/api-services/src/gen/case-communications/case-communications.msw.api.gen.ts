/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import { CasesCaseCommunicationsTypes } from '.././_models';
import type {
	CasesLinkCommunicationResponse,
	CasesListCommunicationsResponse,
	CasesUnlinkCommunicationResponse,
} from '.././_models';

export const getListCommunicationsResponseMock = (
	overrideResponse: Partial<CasesListCommunicationsResponse> = {},
): CasesListCommunicationsResponse => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			communicationId: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			communicationType: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(CasesCaseCommunicationsTypes)),
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLinkCommunicationResponseMock = (
	overrideResponse: Partial<CasesLinkCommunicationResponse> = {},
): CasesLinkCommunicationResponse => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			communicationId: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			communicationType: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(CasesCaseCommunicationsTypes)),
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getUnlinkCommunicationResponseMock = (
	overrideResponse: Partial<CasesUnlinkCommunicationResponse> = {},
): CasesUnlinkCommunicationResponse => ({
	affected: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getListCommunicationsMockHandler = (
	overrideResponse?:
		| CasesListCommunicationsResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) =>
				| Promise<CasesListCommunicationsResponse>
				| CasesListCommunicationsResponse),
) => {
	return http.get('*/cases/:caseEtag/communication', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getListCommunicationsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLinkCommunicationMockHandler = (
	overrideResponse?:
		| CasesLinkCommunicationResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<CasesLinkCommunicationResponse>
				| CasesLinkCommunicationResponse),
) => {
	return http.post('*/cases/:caseEtag/communication', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLinkCommunicationResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUnlinkCommunicationMockHandler = (
	overrideResponse?:
		| CasesUnlinkCommunicationResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) =>
				| Promise<CasesUnlinkCommunicationResponse>
				| CasesUnlinkCommunicationResponse),
) => {
	return http.delete('*/cases/:caseEtag/communication/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUnlinkCommunicationResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getCaseCommunicationsMock = () => [
	getListCommunicationsMockHandler(),
	getLinkCommunicationMockHandler(),
	getUnlinkCommunicationMockHandler(),
];
