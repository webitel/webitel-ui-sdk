/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

export const searchSchemaVariableQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
});

export const searchSchemaVariableResponse = zod.object({
	items: zod
		.array(
			zod.object({
				encrypt: zod.boolean().optional(),
				id: zod.number().optional(),
				name: zod.string().optional(),
				value: zod.any().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const createSchemaVariableBody = zod.object({
	encrypt: zod.boolean().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const createSchemaVariableResponse = zod.object({
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const deleteSchemaVariableParams = zod.object({
	id: zod.number(),
});

export const deleteSchemaVariableResponse = zod.object({
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const readSchemaVariableParams = zod.object({
	id: zod.number(),
});

export const readSchemaVariableResponse = zod.object({
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const patchSchemaVariableParams = zod.object({
	id: zod.number(),
});

export const patchSchemaVariableBody = zod.object({
	encrypt: zod.boolean().optional(),
	fields: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const patchSchemaVariableResponse = zod.object({
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const updateSchemaVariableParams = zod.object({
	id: zod.number(),
});

export const updateSchemaVariableBody = zod.object({
	encrypt: zod.boolean().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});

export const updateSchemaVariableResponse = zod.object({
	encrypt: zod.boolean().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	value: zod.any().optional(),
});
