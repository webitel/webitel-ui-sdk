/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type {
	EngineListSchemaVariable,
	EngineSchemaVariable,
} from '.././_models';

export const getSearchSchemaVariableResponseMock = (
	overrideResponse: Partial<EngineListSchemaVariable> = {},
): EngineListSchemaVariable => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			encrypt: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateSchemaVariableResponseMock = (
	overrideResponse: Partial<EngineSchemaVariable> = {},
): EngineSchemaVariable => ({
	encrypt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteSchemaVariableResponseMock = (
	overrideResponse: Partial<EngineSchemaVariable> = {},
): EngineSchemaVariable => ({
	encrypt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getReadSchemaVariableResponseMock = (
	overrideResponse: Partial<EngineSchemaVariable> = {},
): EngineSchemaVariable => ({
	encrypt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getPatchSchemaVariableResponseMock = (
	overrideResponse: Partial<EngineSchemaVariable> = {},
): EngineSchemaVariable => ({
	encrypt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateSchemaVariableResponseMock = (
	overrideResponse: Partial<EngineSchemaVariable> = {},
): EngineSchemaVariable => ({
	encrypt: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	...overrideResponse,
});

export const getSearchSchemaVariableMockHandler = (
	overrideResponse?:
		| EngineListSchemaVariable
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListSchemaVariable> | EngineListSchemaVariable),
) => {
	return http.get('*/routing/schema/variables', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchSchemaVariableResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateSchemaVariableMockHandler = (
	overrideResponse?:
		| EngineSchemaVariable
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineSchemaVariable> | EngineSchemaVariable),
) => {
	return http.post('*/routing/schema/variables', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateSchemaVariableResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteSchemaVariableMockHandler = (
	overrideResponse?:
		| EngineSchemaVariable
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineSchemaVariable> | EngineSchemaVariable),
) => {
	return http.delete('*/routing/schema/variables/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteSchemaVariableResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadSchemaVariableMockHandler = (
	overrideResponse?:
		| EngineSchemaVariable
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineSchemaVariable> | EngineSchemaVariable),
) => {
	return http.get('*/routing/schema/variables/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadSchemaVariableResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchSchemaVariableMockHandler = (
	overrideResponse?:
		| EngineSchemaVariable
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineSchemaVariable> | EngineSchemaVariable),
) => {
	return http.patch('*/routing/schema/variables/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchSchemaVariableResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateSchemaVariableMockHandler = (
	overrideResponse?:
		| EngineSchemaVariable
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineSchemaVariable> | EngineSchemaVariable),
) => {
	return http.put('*/routing/schema/variables/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateSchemaVariableResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getSchemaVariablesServiceMock = () => [
	getSearchSchemaVariableMockHandler(),
	getCreateSchemaVariableMockHandler(),
	getDeleteSchemaVariableMockHandler(),
	getReadSchemaVariableMockHandler(),
	getPatchSchemaVariableMockHandler(),
	getUpdateSchemaVariableMockHandler(),
];
