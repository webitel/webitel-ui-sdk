/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	StorageDeleteFileTranscriptResponse,
	StorageListPhrases,
	StoragePutFileTranscriptResponse,
	StorageStartFileTranscriptResponse,
} from '.././_models';

export const getFileTranscriptServiceDeleteFileTranscriptResponseMock = (
	overrideResponse: Partial<StorageDeleteFileTranscriptResponse> = {},
): StorageDeleteFileTranscriptResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => faker.number.int({ min: undefined, max: undefined })),
		undefined,
	]),
	...overrideResponse,
});

export const getFileTranscriptServiceCreateFileTranscriptResponseMock = (
	overrideResponse: Partial<StorageStartFileTranscriptResponse> = {},
): StorageStartFileTranscriptResponse => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			action: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			fileId: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			state: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		})),
		undefined,
	]),
	...overrideResponse,
});

export const getFileTranscriptServicePutFileTranscriptResponseMock = (
	overrideResponse: Partial<StoragePutFileTranscriptResponse> = {},
): StoragePutFileTranscriptResponse => ({
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getFileTranscriptServiceGetFileTranscriptPhrasesResponseMock = (
	overrideResponse: Partial<StorageListPhrases> = {},
): StorageListPhrases => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			channel: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			endSec: faker.helpers.arrayElement([faker.number.float(), undefined]),
			phrase: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			startSec: faker.helpers.arrayElement([faker.number.float(), undefined]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getFileTranscriptServiceDeleteFileTranscriptMockHandler = (
	overrideResponse?:
		| StorageDeleteFileTranscriptResponse
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) =>
				| Promise<StorageDeleteFileTranscriptResponse>
				| StorageDeleteFileTranscriptResponse),
) => {
	return http.delete('*/storage/transcript_file', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileTranscriptServiceDeleteFileTranscriptResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileTranscriptServiceCreateFileTranscriptMockHandler = (
	overrideResponse?:
		| StorageStartFileTranscriptResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<StorageStartFileTranscriptResponse>
				| StorageStartFileTranscriptResponse),
) => {
	return http.post('*/storage/transcript_file', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileTranscriptServiceCreateFileTranscriptResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileTranscriptServicePutFileTranscriptMockHandler = (
	overrideResponse?:
		| StoragePutFileTranscriptResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) =>
				| Promise<StoragePutFileTranscriptResponse>
				| StoragePutFileTranscriptResponse),
) => {
	return http.put('*/storage/transcript_file', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileTranscriptServicePutFileTranscriptResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getFileTranscriptServiceGetFileTranscriptPhrasesMockHandler = (
	overrideResponse?:
		| StorageListPhrases
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<StorageListPhrases> | StorageListPhrases),
) => {
	return http.get('*/storage/transcript_file/:id/phrases', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getFileTranscriptServiceGetFileTranscriptPhrasesResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getFileTranscriptServiceMock = () => [
	getFileTranscriptServiceDeleteFileTranscriptMockHandler(),
	getFileTranscriptServiceCreateFileTranscriptMockHandler(),
	getFileTranscriptServicePutFileTranscriptMockHandler(),
	getFileTranscriptServiceGetFileTranscriptPhrasesMockHandler(),
];
