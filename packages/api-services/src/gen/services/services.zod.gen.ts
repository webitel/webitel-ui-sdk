/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Retrieve a list of services or search services within a catalog
 */
export const listServicesQueryParams = zod.object({
	page: zod.number().optional().describe('Page number for pagination'),
	size: zod.number().optional().describe('Number of records per page'),
	sort: zod.string().optional().describe('Sorting options by fields'),
	id: zod
		.array(zod.string())
		.optional()
		.describe('List of IDs to filter the services'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
	rootId: zod
		.string()
		.optional()
		.describe('Filter services by catalog ID (required)'),
	state: zod
		.boolean()
		.optional()
		.describe('Filter by state (true for active, false for inactive)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const listServicesResponse = zod.object({
	items: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				catalogId: zod.string().optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				group: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				rootId: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod.array(zod.any()).optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Create a new service within a catalog
 */
export const createServiceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const createServiceBody = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	catalogId: zod.string().optional(),
	code: zod.string().optional(),
	description: zod.string().optional(),
	group: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	name: zod.string().optional(),
	rootId: zod.string().optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
});

export const createServiceResponse = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	catalogId: zod.string().optional(),
	code: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	group: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	rootId: zod.string().optional(),
	searched: zod.boolean().optional(),
	service: zod.array(zod.any()).optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Delete a service
 */
export const deleteServiceParams = zod.object({
	id: zod
		.array(zod.string())
		.min(1)
		.describe('ID of the service to be deleted'),
});

export const deleteServiceResponse = zod.object({
	items: zod
		.array(
			zod.object({
				assignee: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				catalogId: zod.string().optional(),
				code: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				group: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
						type: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				rootId: zod.string().optional(),
				searched: zod.boolean().optional(),
				service: zod.array(zod.any()).optional(),
				sla: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				state: zod.boolean().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

/**
 * @summary Locate a service by ID
 */
export const locateServiceParams = zod.object({
	id: zod.string().describe('ID of the service to be located'),
});

export const locateServiceQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const locateServiceResponse = zod.object({
	service: zod
		.object({
			assignee: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			catalogId: zod.string().optional(),
			code: zod.string().optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			description: zod.string().optional(),
			group: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
					type: zod.string().optional(),
				})
				.optional(),
			id: zod.string().optional(),
			name: zod.string().optional(),
			rootId: zod.string().optional(),
			searched: zod.boolean().optional(),
			service: zod.array(zod.any()).optional(),
			sla: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			state: zod.boolean().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing service
 */
export const updateService2Params = zod.object({
	id: zod.string().describe('ID of the service to be updated'),
});

export const updateService2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateService2Body = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	catalogId: zod.string().optional(),
	code: zod.string().optional(),
	description: zod.string().optional(),
	group: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	name: zod.string().optional(),
	rootId: zod.string().optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
});

export const updateService2Response = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	catalogId: zod.string().optional(),
	code: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	group: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	rootId: zod.string().optional(),
	searched: zod.boolean().optional(),
	service: zod.array(zod.any()).optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing service
 */
export const updateServiceParams = zod.object({
	id: zod.string().describe('ID of the service to be updated'),
});

export const updateServiceQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateServiceBody = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	catalogId: zod.string().optional(),
	code: zod.string().optional(),
	description: zod.string().optional(),
	group: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	name: zod.string().optional(),
	rootId: zod.string().optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
});

export const updateServiceResponse = zod.object({
	assignee: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	catalogId: zod.string().optional(),
	code: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	group: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
			type: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	rootId: zod.string().optional(),
	searched: zod.boolean().optional(),
	service: zod.array(zod.any()).optional(),
	sla: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	state: zod.boolean().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
