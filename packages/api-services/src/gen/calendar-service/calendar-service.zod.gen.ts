/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary List of calendar
 */
export const searchCalendarQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const searchCalendarResponse = zod.object({
	items: zod
		.array(
			zod.object({
				accepts: zod
					.array(
						zod.object({
							day: zod.number().optional(),
							disabled: zod.boolean().optional(),
							endTimeOfDay: zod.number().optional(),
							startTimeOfDay: zod.number().optional(),
						}),
					)
					.optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				description: zod.string().optional(),
				domainId: zod.string().optional(),
				endAt: zod.string().optional(),
				excepts: zod
					.array(
						zod.object({
							date: zod.string().optional(),
							disabled: zod.boolean().optional(),
							name: zod.string().optional(),
							repeat: zod.boolean().optional(),
							workStart: zod.number().optional(),
							workStop: zod.number().optional(),
							working: zod.boolean().optional(),
						}),
					)
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				specials: zod
					.array(
						zod.object({
							day: zod.number().optional(),
							disabled: zod.boolean().optional(),
							endTimeOfDay: zod.number().optional(),
							startTimeOfDay: zod.number().optional(),
						}),
					)
					.optional(),
				startAt: zod.string().optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create calendar
 */
export const createCalendarBody = zod.object({
	accepts: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	endAt: zod.string().optional(),
	excepts: zod
		.array(
			zod.object({
				date: zod.string().optional(),
				disabled: zod.boolean().optional(),
				name: zod.string().optional(),
				repeat: zod.boolean().optional(),
				workStart: zod.number().optional(),
				workStop: zod.number().optional(),
				working: zod.boolean().optional(),
			}),
		)
		.optional(),
	name: zod.string().optional(),
	specials: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	startAt: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const createCalendarResponse = zod.object({
	accepts: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	endAt: zod.string().optional(),
	excepts: zod
		.array(
			zod.object({
				date: zod.string().optional(),
				disabled: zod.boolean().optional(),
				name: zod.string().optional(),
				repeat: zod.boolean().optional(),
				workStart: zod.number().optional(),
				workStop: zod.number().optional(),
				working: zod.boolean().optional(),
			}),
		)
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	specials: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	startAt: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary List timezones
 */
export const searchTimezonesQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
});

export const searchTimezonesResponse = zod.object({
	items: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
				offset: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Remove calendar
 */
export const deleteCalendarParams = zod.object({
	id: zod.string(),
});

export const deleteCalendarQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const deleteCalendarResponse = zod.object({
	accepts: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	endAt: zod.string().optional(),
	excepts: zod
		.array(
			zod.object({
				date: zod.string().optional(),
				disabled: zod.boolean().optional(),
				name: zod.string().optional(),
				repeat: zod.boolean().optional(),
				workStart: zod.number().optional(),
				workStop: zod.number().optional(),
				working: zod.boolean().optional(),
			}),
		)
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	specials: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	startAt: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Calendar item
 */
export const readCalendarParams = zod.object({
	id: zod.string(),
});

export const readCalendarQueryParams = zod.object({
	domainId: zod.string().optional(),
});

export const readCalendarResponse = zod.object({
	accepts: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	endAt: zod.string().optional(),
	excepts: zod
		.array(
			zod.object({
				date: zod.string().optional(),
				disabled: zod.boolean().optional(),
				name: zod.string().optional(),
				repeat: zod.boolean().optional(),
				workStart: zod.number().optional(),
				workStop: zod.number().optional(),
				working: zod.boolean().optional(),
			}),
		)
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	specials: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	startAt: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update calendar
 */
export const updateCalendarParams = zod.object({
	id: zod.string(),
});

export const updateCalendarBody = zod.object({
	accepts: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	endAt: zod.string().optional(),
	excepts: zod
		.array(
			zod.object({
				date: zod.string().optional(),
				disabled: zod.boolean().optional(),
				name: zod.string().optional(),
				repeat: zod.boolean().optional(),
				workStart: zod.number().optional(),
				workStop: zod.number().optional(),
				working: zod.boolean().optional(),
			}),
		)
		.optional(),
	name: zod.string().optional(),
	specials: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	startAt: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateCalendarResponse = zod.object({
	accepts: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	description: zod.string().optional(),
	domainId: zod.string().optional(),
	endAt: zod.string().optional(),
	excepts: zod
		.array(
			zod.object({
				date: zod.string().optional(),
				disabled: zod.boolean().optional(),
				name: zod.string().optional(),
				repeat: zod.boolean().optional(),
				workStart: zod.number().optional(),
				workStop: zod.number().optional(),
				working: zod.boolean().optional(),
			}),
		)
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	specials: zod
		.array(
			zod.object({
				day: zod.number().optional(),
				disabled: zod.boolean().optional(),
				endTimeOfDay: zod.number().optional(),
				startTimeOfDay: zod.number().optional(),
			}),
		)
		.optional(),
	startAt: zod.string().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
