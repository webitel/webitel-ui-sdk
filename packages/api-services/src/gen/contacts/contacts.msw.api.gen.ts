/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
	WebitelContactsContact,
	WebitelContactsContactList,
} from '.././_models';

export const getContactsSearchContactsResponseMock = (
	overrideResponse: Partial<WebitelContactsContactList> = {},
): WebitelContactsContactList => ({
	data: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			comments: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							format: faker.helpers.arrayElement([
								Array.from(
									{ length: faker.number.int({ min: 1, max: 10 }) },
									(_, i) => i + 1,
								).map(() => ({
									bold: faker.helpers.arrayElement([{}, undefined]),
									codeblock: faker.helpers.arrayElement([
										{
											language: faker.helpers.arrayElement([
												faker.string.alpha(20),
												undefined,
											]),
										},
										undefined,
									]),
									italic: faker.helpers.arrayElement([{}, undefined]),
									length: faker.helpers.arrayElement([
										faker.number.int({ min: undefined, max: undefined }),
										undefined,
									]),
									link: faker.helpers.arrayElement([
										{
											url: faker.helpers.arrayElement([
												faker.string.alpha(20),
												undefined,
											]),
										},
										undefined,
									]),
									monospace: faker.helpers.arrayElement([{}, undefined]),
									offset: faker.helpers.arrayElement([
										faker.number.int({ min: undefined, max: undefined }),
										undefined,
									]),
									strikethrough: faker.helpers.arrayElement([{}, undefined]),
									underline: faker.helpers.arrayElement([{}, undefined]),
								})),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							text: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			custom: faker.helpers.arrayElement([{}, undefined]),
			domain: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			emails: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							email: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							verified: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			groups: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							group: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			imclients: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							app: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							protocol: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							user: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							via: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			labels: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							label: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			languages: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							code: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							lang: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							region: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							script: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							tag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			managers: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							user: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			mode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([
				{
					commonName: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					familyName: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					givenName: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					middleName: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				},
				undefined,
			]),
			phones: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							number: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							verified: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			photos: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							photoId: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							photoUrl: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			timezones: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							primary: faker.helpers.arrayElement([
								faker.datatype.boolean(),
								undefined,
							]),
							timezone: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			user: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			variables: faker.helpers.arrayElement([
				{
					data: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							createdAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							createdBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							etag: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							key: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							updatedAt: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							updatedBy: faker.helpers.arrayElement([
								{
									id: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									name: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
									type: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							value: faker.helpers.arrayElement([{}, undefined]),
							ver: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
						})),
						undefined,
					]),
					next: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					page: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				},
				undefined,
			]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getContactsCreateContactResponseMock = (
	overrideResponse: Partial<WebitelContactsContact> = {},
): WebitelContactsContact => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	comments: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					format: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							bold: faker.helpers.arrayElement([{}, undefined]),
							codeblock: faker.helpers.arrayElement([
								{
									language: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							italic: faker.helpers.arrayElement([{}, undefined]),
							length: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							link: faker.helpers.arrayElement([
								{
									url: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							monospace: faker.helpers.arrayElement([{}, undefined]),
							offset: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							strikethrough: faker.helpers.arrayElement([{}, undefined]),
							underline: faker.helpers.arrayElement([{}, undefined]),
						})),
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	custom: faker.helpers.arrayElement([{}, undefined]),
	domain: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	emails: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					email: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	groups: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imclients: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					app: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					protocol: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					via: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	labels: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					label: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	languages: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					lang: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					region: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					script: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					tag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	managers: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	mode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([
		{
			commonName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			familyName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			givenName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			middleName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			verified: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		},
		undefined,
	]),
	phones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					number: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	photos: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					photoId: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					photoUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	timezones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timezone: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					value: faker.helpers.arrayElement([{}, undefined]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getContactsDeleteContactResponseMock = (
	overrideResponse: Partial<WebitelContactsContact> = {},
): WebitelContactsContact => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	comments: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					format: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							bold: faker.helpers.arrayElement([{}, undefined]),
							codeblock: faker.helpers.arrayElement([
								{
									language: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							italic: faker.helpers.arrayElement([{}, undefined]),
							length: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							link: faker.helpers.arrayElement([
								{
									url: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							monospace: faker.helpers.arrayElement([{}, undefined]),
							offset: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							strikethrough: faker.helpers.arrayElement([{}, undefined]),
							underline: faker.helpers.arrayElement([{}, undefined]),
						})),
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	custom: faker.helpers.arrayElement([{}, undefined]),
	domain: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	emails: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					email: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	groups: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imclients: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					app: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					protocol: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					via: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	labels: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					label: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	languages: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					lang: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					region: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					script: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					tag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	managers: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	mode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([
		{
			commonName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			familyName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			givenName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			middleName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			verified: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		},
		undefined,
	]),
	phones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					number: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	photos: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					photoId: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					photoUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	timezones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timezone: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					value: faker.helpers.arrayElement([{}, undefined]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getContactsLocateContactResponseMock = (
	overrideResponse: Partial<WebitelContactsContact> = {},
): WebitelContactsContact => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	comments: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					format: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							bold: faker.helpers.arrayElement([{}, undefined]),
							codeblock: faker.helpers.arrayElement([
								{
									language: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							italic: faker.helpers.arrayElement([{}, undefined]),
							length: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							link: faker.helpers.arrayElement([
								{
									url: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							monospace: faker.helpers.arrayElement([{}, undefined]),
							offset: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							strikethrough: faker.helpers.arrayElement([{}, undefined]),
							underline: faker.helpers.arrayElement([{}, undefined]),
						})),
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	custom: faker.helpers.arrayElement([{}, undefined]),
	domain: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	emails: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					email: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	groups: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imclients: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					app: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					protocol: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					via: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	labels: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					label: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	languages: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					lang: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					region: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					script: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					tag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	managers: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	mode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([
		{
			commonName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			familyName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			givenName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			middleName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			verified: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		},
		undefined,
	]),
	phones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					number: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	photos: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					photoId: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					photoUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	timezones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timezone: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					value: faker.helpers.arrayElement([{}, undefined]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getContactsUpdateContactResponseMock = (
	overrideResponse: Partial<WebitelContactsContact> = {},
): WebitelContactsContact => ({
	about: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	comments: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					format: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							bold: faker.helpers.arrayElement([{}, undefined]),
							codeblock: faker.helpers.arrayElement([
								{
									language: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							italic: faker.helpers.arrayElement([{}, undefined]),
							length: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							link: faker.helpers.arrayElement([
								{
									url: faker.helpers.arrayElement([
										faker.string.alpha(20),
										undefined,
									]),
								},
								undefined,
							]),
							monospace: faker.helpers.arrayElement([{}, undefined]),
							offset: faker.helpers.arrayElement([
								faker.number.int({ min: undefined, max: undefined }),
								undefined,
							]),
							strikethrough: faker.helpers.arrayElement([{}, undefined]),
							underline: faker.helpers.arrayElement([{}, undefined]),
						})),
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					text: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	custom: faker.helpers.arrayElement([{}, undefined]),
	domain: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	emails: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					email: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	groups: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					group: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	imclients: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					app: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					protocol: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					via: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	labels: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					label: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	languages: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					lang: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					region: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					script: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					tag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	managers: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					user: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	mode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	name: faker.helpers.arrayElement([
		{
			commonName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			familyName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			givenName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			middleName: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			verified: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
		},
		undefined,
	]),
	phones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					number: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					type: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					verified: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	photos: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					photoId: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					photoUrl: faker.helpers.arrayElement([
						faker.string.alpha(20),
						undefined,
					]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	timezones: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					primary: faker.helpers.arrayElement([
						faker.datatype.boolean(),
						undefined,
					]),
					timezone: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	user: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			data: faker.helpers.arrayElement([
				Array.from(
					{ length: faker.number.int({ min: 1, max: 10 }) },
					(_, i) => i + 1,
				).map(() => ({
					createdAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					createdBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					key: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
					updatedAt: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					updatedBy: faker.helpers.arrayElement([
						{
							id: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							name: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
							type: faker.helpers.arrayElement([
								faker.string.alpha(20),
								undefined,
							]),
						},
						undefined,
					]),
					value: faker.helpers.arrayElement([{}, undefined]),
					ver: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
				})),
				undefined,
			]),
			next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
			page: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		},
		undefined,
	]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getContactsSearchContactsMockHandler = (
	overrideResponse?:
		| WebitelContactsContactList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelContactsContactList> | WebitelContactsContactList),
) => {
	return http.get('*/contacts', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getContactsSearchContactsResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getContactsCreateContactMockHandler = (
	overrideResponse?:
		| WebitelContactsContact
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<WebitelContactsContact> | WebitelContactsContact),
) => {
	return http.post('*/contacts', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getContactsCreateContactResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getContactsDeleteContactMockHandler = (
	overrideResponse?:
		| WebitelContactsContact
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<WebitelContactsContact> | WebitelContactsContact),
) => {
	return http.delete('*/contacts/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getContactsDeleteContactResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getContactsLocateContactMockHandler = (
	overrideResponse?:
		| WebitelContactsContact
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<WebitelContactsContact> | WebitelContactsContact),
) => {
	return http.get('*/contacts/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getContactsLocateContactResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getContactsUpdateContactMockHandler = (
	overrideResponse?:
		| WebitelContactsContact
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<WebitelContactsContact> | WebitelContactsContact),
) => {
	return http.patch('*/contacts/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getContactsUpdateContactResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getContactsMock = () => [
	getContactsSearchContactsMockHandler(),
	getContactsCreateContactMockHandler(),
	getContactsDeleteContactMockHandler(),
	getContactsLocateContactMockHandler(),
	getContactsUpdateContactMockHandler(),
];
