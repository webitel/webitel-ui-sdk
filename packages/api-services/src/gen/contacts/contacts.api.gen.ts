/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ContactsContactList,
	ContactsInputContact,
	CreateContactParams,
	DeleteContactParams,
	LocateContactParams,
	SearchContactsParams,
	UpdateContactBody,
	UpdateContactParams,
	WebitelcontactsContact,
} from '.././_models';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
	T,
>() => T extends Y ? 1 : 2
	? A
	: B;

type WritableKeys<T> = {
	[P in keyof T]-?: IfEquals<
		{ [Q in P]: T[P] },
		{ -readonly [Q in P]: T[P] },
		P
	>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
	k: infer I,
) => void
	? I
	: never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
	? {
			[P in keyof Writable<T>]: T[P] extends object
				? NonReadonly<NonNullable<T[P]>>
				: T[P];
		}
	: DistributeReadOnlyOverUnions<T>;

// --- header start
//

export const // --- title start
	getContacts =
		// --- title end
		() => {
			// --- header end
			/**
 * | Field       | Type 
| ----------- | ---- 
| **----------- READ-ONLY -----------** | 
| `id`        | int64 
| `ver`       | int32 
| `etag`      | string 
| **---------- OPERATIONAL ----------** | 
| `created_at` | int64(epoch:milli) 
| `created_by` | lookup(user) 
| `updated_at` | int64(epoch:milli) 
| `updated_by` | lookup(user) 
| **---------- ATTRIBUTES -----------** | 
| `name`      | name! 
| `about`     | string 
| `labels`    | list[label!] 
| `emails`    | list[email!] 
| `photos`    | list[photo!] 
| `phones`    | list[phone!] 
| `managers`  | list[manager!] 
| `comments`  | list[comment!] 
| `addresses` | list[address!] 
| `languages` | list[language!] 
| `timezones` | list[timezone!] 
| `variables` | list[variable!] 
| `imclients` | list[imClient!] 

 * @summary Search for Contact(s)
 */
			const searchContacts = <TData = AxiosResponse<ContactsContactList>>(
				params?: SearchContactsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/contacts', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Create NEW Contact
			 */
			const createContact = <TData = AxiosResponse<WebitelcontactsContact>>(
				contactsInputContact: NonReadonly<ContactsInputContact>,
				params?: CreateContactParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/contacts', contactsInputContact, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Remove Contact source
			 */
			const deleteContact = <TData = AxiosResponse<WebitelcontactsContact>>(
				etag: string,
				params?: DeleteContactParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/contacts/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Locate Contact source
			 */
			const locateContact = <TData = AxiosResponse<WebitelcontactsContact>>(
				etag: string,
				params?: LocateContactParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary NEW Update of the Contact source
			 */
			const updateContact = <TData = AxiosResponse<WebitelcontactsContact>>(
				etag: string,
				updateContactBody: NonReadonly<UpdateContactBody>,
				params?: UpdateContactParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(`/contacts/${etag}`, updateContactBody, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				searchContacts,
				createContact,
				deleteContact,
				locateContact,
				updateContact,
			};
		};
export type SearchContactsResult = AxiosResponse<ContactsContactList>;
export type CreateContactResult = AxiosResponse<WebitelcontactsContact>;
export type DeleteContactResult = AxiosResponse<WebitelcontactsContact>;
export type LocateContactResult = AxiosResponse<WebitelcontactsContact>;
export type UpdateContactResult = AxiosResponse<WebitelcontactsContact>;

// --- footer end
