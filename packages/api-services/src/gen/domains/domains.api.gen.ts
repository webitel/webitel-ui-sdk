/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	ApiCreateDomainRequest,
	ApiCreateDomainResponse,
	ApiDeleteDomainResponse,
	ApiDomainsUpdateDomainBody,
	ApiReadDomainResponse,
	ApiSearchDomainsResponse,
	ApiUpdateDomainResponse,
	DomainsDeleteDomain2Params,
	DomainsDeleteDomainParams,
	DomainsReadDomain2Params,
	DomainsReadDomainParams,
	DomainsSearchDomainsParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getDomains =
		// --- title end
		() => {
			// --- header end
			const domainsDeleteDomain = <
				TData = AxiosResponse<ApiDeleteDomainResponse>,
			>(
				params?: DomainsDeleteDomainParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete('/domain', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const domainsReadDomain = <TData = AxiosResponse<ApiReadDomainResponse>>(
				params?: DomainsReadDomainParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/domain', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const domainsSearchDomains = <
				TData = AxiosResponse<ApiSearchDomainsResponse>,
			>(
				params?: DomainsSearchDomainsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/domains', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const domainsCreateDomain = <
				TData = AxiosResponse<ApiCreateDomainResponse>,
			>(
				apiCreateDomainRequest: ApiCreateDomainRequest,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/domains', apiCreateDomainRequest, options);
			};
			const domainsDeleteDomain2 = <
				TData = AxiosResponse<ApiDeleteDomainResponse>,
			>(
				dc: string,
				params?: DomainsDeleteDomain2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/domains/${dc}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const domainsReadDomain2 = <TData = AxiosResponse<ApiReadDomainResponse>>(
				dc: string,
				params?: DomainsReadDomain2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/domains/${dc}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			const domainsUpdateDomain2 = <
				TData = AxiosResponse<ApiUpdateDomainResponse>,
			>(
				apiDomainsUpdateDomainBody: ApiDomainsUpdateDomainBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					'/domains/domain.dc}',
					apiDomainsUpdateDomainBody,
					options,
				);
			};
			const domainsUpdateDomain = <
				TData = AxiosResponse<ApiUpdateDomainResponse>,
			>(
				apiDomainsUpdateDomainBody: ApiDomainsUpdateDomainBody,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					'/domains/domain.dc}',
					apiDomainsUpdateDomainBody,
					options,
				);
			};

			// --- footer start
			return {
				domainsDeleteDomain,
				domainsReadDomain,
				domainsSearchDomains,
				domainsCreateDomain,
				domainsDeleteDomain2,
				domainsReadDomain2,
				domainsUpdateDomain2,
				domainsUpdateDomain,
			};
		};
export type DomainsDeleteDomainResult = AxiosResponse<ApiDeleteDomainResponse>;
export type DomainsReadDomainResult = AxiosResponse<ApiReadDomainResponse>;
export type DomainsSearchDomainsResult =
	AxiosResponse<ApiSearchDomainsResponse>;
export type DomainsCreateDomainResult = AxiosResponse<ApiCreateDomainResponse>;
export type DomainsDeleteDomain2Result = AxiosResponse<ApiDeleteDomainResponse>;
export type DomainsReadDomain2Result = AxiosResponse<ApiReadDomainResponse>;
export type DomainsUpdateDomain2Result = AxiosResponse<ApiUpdateDomainResponse>;
export type DomainsUpdateDomainResult = AxiosResponse<ApiUpdateDomainResponse>;

// --- footer end
