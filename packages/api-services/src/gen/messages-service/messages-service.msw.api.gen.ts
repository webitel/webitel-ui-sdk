/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type { WebitelChatBroadcastMessageResponse } from '.././_models';

export const getBroadcastMessageResponseMock = (
	overrideResponse: Partial<WebitelChatBroadcastMessageResponse> = {},
): WebitelChatBroadcastMessageResponse => ({
	failure: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			error: faker.helpers.arrayElement([
				{
					code: faker.helpers.arrayElement([
						faker.number.int({
							min: undefined,
							max: undefined,
							multipleOf: undefined,
						}),
						undefined,
					]),
					details: faker.helpers.arrayElement([
						Array.from(
							{ length: faker.number.int({ min: 1, max: 10 }) },
							(_, i) => i + 1,
						).map(() => ({
							'@type': faker.helpers.arrayElement([
								faker.string.alpha({ length: { min: 10, max: 20 } }),
								undefined,
							]),
						})),
						undefined,
					]),
					message: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			peerId: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		})),
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getBroadcastMessageMockHandler = (
	overrideResponse?:
		| WebitelChatBroadcastMessageResponse
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) =>
				| Promise<WebitelChatBroadcastMessageResponse>
				| WebitelChatBroadcastMessageResponse),
) => {
	return http.post('*/chat/broadcast', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getBroadcastMessageResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getMessagesServiceMock = () => [getBroadcastMessageMockHandler()];
