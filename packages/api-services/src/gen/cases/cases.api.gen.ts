/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	CasesCase,
	CasesCaseList,
	CasesInputCreateCase,
	CreateCaseParams,
	DeleteCaseParams,
	LocateCaseParams,
	SearchCases2Params,
	SearchCasesParams,
	UpdateCase2Body,
	UpdateCase2Params,
	UpdateCaseBody,
	UpdateCaseParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getCases =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary RPC method for searching cases.
			 */
			const searchCases = <TData = AxiosResponse<CasesCaseList>>(
				params?: SearchCasesParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get('/cases', {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary RPC method for creating a new case.
			 */
			const createCase = <TData = AxiosResponse<CasesCase>>(
				casesInputCreateCase: CasesInputCreateCase,
				params?: CreateCaseParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post('/cases', casesInputCreateCase, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary RPC method for deleting an existing case by its etag.
			 */
			const deleteCase = <TData = AxiosResponse<CasesCase>>(
				etag: string,
				params?: DeleteCaseParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/cases/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary RPC method to retrieve a specific case by its etag identifier.
			 */
			const locateCase = <TData = AxiosResponse<CasesCase>>(
				etag: string,
				params?: LocateCaseParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/cases/${etag}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary RPC method for updating an existing case.
			 */
			const updateCase2 = <TData = AxiosResponse<CasesCase>>(
				updateCase2Body: UpdateCase2Body,
				params?: UpdateCase2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch('/cases/input.etag}', updateCase2Body, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary RPC method for updating an existing case.
			 */
			const updateCase = <TData = AxiosResponse<CasesCase>>(
				updateCaseBody: UpdateCaseBody,
				params?: UpdateCaseParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put('/cases/input.etag}', updateCaseBody, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary RPC method for searching cases.
			 */
			const searchCases2 = <TData = AxiosResponse<CasesCaseList>>(
				contactId: string,
				params?: SearchCases2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/contacts/${contactId}/cases`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				searchCases,
				createCase,
				deleteCase,
				locateCase,
				updateCase2,
				updateCase,
				searchCases2,
			};
		};
export type SearchCasesResult = AxiosResponse<CasesCaseList>;
export type CreateCaseResult = AxiosResponse<CasesCase>;
export type DeleteCaseResult = AxiosResponse<CasesCase>;
export type LocateCaseResult = AxiosResponse<CasesCase>;
export type UpdateCase2Result = AxiosResponse<CasesCase>;
export type UpdateCaseResult = AxiosResponse<CasesCase>;
export type SearchCases2Result = AxiosResponse<CasesCaseList>;

// --- footer end
