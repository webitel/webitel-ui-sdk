/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import {
	EngineTriggerEventType,
	EngineTriggerJobState,
	EngineTriggerObjectType,
	EngineTriggerType,
} from '.././_models';
import type {
	EngineListTrigger,
	EngineListTriggerJob,
	EngineTrigger,
	EngineTriggerJob,
} from '.././_models';

export const getSearchTriggerResponseMock = (
	overrideResponse: Partial<EngineListTrigger> = {},
): EngineListTrigger => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			description: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			enabled: faker.helpers.arrayElement([
				faker.datatype.boolean(),
				undefined,
			]),
			event: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineTriggerEventType)),
				undefined,
			]),
			expression: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			object: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineTriggerObjectType)),
				undefined,
			]),
			schema: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			timeout: faker.helpers.arrayElement([
				faker.number.int({
					min: undefined,
					max: undefined,
					multipleOf: undefined,
				}),
				undefined,
			]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
			type: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineTriggerType)),
				undefined,
			]),
			variables: faker.helpers.arrayElement([
				{
					[faker.string.alphanumeric(5)]: faker.string.alpha({
						length: { min: 10, max: 20 },
					}),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateTriggerResponseMock = (
	overrideResponse: Partial<EngineTrigger> = {},
): EngineTrigger => ({
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	event: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerEventType)),
		undefined,
	]),
	expression: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	object: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerObjectType)),
		undefined,
	]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	timeout: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerType)),
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteTriggerResponseMock = (
	overrideResponse: Partial<EngineTrigger> = {},
): EngineTrigger => ({
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	event: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerEventType)),
		undefined,
	]),
	expression: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	object: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerObjectType)),
		undefined,
	]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	timeout: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerType)),
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadTriggerResponseMock = (
	overrideResponse: Partial<EngineTrigger> = {},
): EngineTrigger => ({
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	event: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerEventType)),
		undefined,
	]),
	expression: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	object: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerObjectType)),
		undefined,
	]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	timeout: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerType)),
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchTriggerResponseMock = (
	overrideResponse: Partial<EngineTrigger> = {},
): EngineTrigger => ({
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	event: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerEventType)),
		undefined,
	]),
	expression: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	object: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerObjectType)),
		undefined,
	]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	timeout: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerType)),
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateTriggerResponseMock = (
	overrideResponse: Partial<EngineTrigger> = {},
): EngineTrigger => ({
	description: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	event: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerEventType)),
		undefined,
	]),
	expression: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	object: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerObjectType)),
		undefined,
	]),
	schema: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	timeout: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
		undefined,
	]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	type: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerType)),
		undefined,
	]),
	variables: faker.helpers.arrayElement([
		{
			[faker.string.alphanumeric(5)]: faker.string.alpha({
				length: { min: 10, max: 20 },
			}),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchTriggerJobResponseMock = (
	overrideResponse: Partial<EngineListTriggerJob> = {},
): EngineListTriggerJob => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			createdAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			error: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			startedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			state: faker.helpers.arrayElement([
				faker.helpers.arrayElement(Object.values(EngineTriggerJobState)),
				undefined,
			]),
			stoppedAt: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			trigger: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
					name: faker.helpers.arrayElement([
						faker.string.alpha({ length: { min: 10, max: 20 } }),
						undefined,
					]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateTriggerJobResponseMock = (
	overrideResponse: Partial<EngineTriggerJob> = {},
): EngineTriggerJob => ({
	createdAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	error: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	id: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	startedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	state: faker.helpers.arrayElement([
		faker.helpers.arrayElement(Object.values(EngineTriggerJobState)),
		undefined,
	]),
	stoppedAt: faker.helpers.arrayElement([
		faker.string.alpha({ length: { min: 10, max: 20 } }),
		undefined,
	]),
	trigger: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
			name: faker.helpers.arrayElement([
				faker.string.alpha({ length: { min: 10, max: 20 } }),
				undefined,
			]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchTriggerMockHandler = (
	overrideResponse?:
		| EngineListTrigger
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListTrigger> | EngineListTrigger),
) => {
	return http.get('*/trigger', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateTriggerMockHandler = (
	overrideResponse?:
		| EngineTrigger
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineTrigger> | EngineTrigger),
) => {
	return http.post('*/trigger', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteTriggerMockHandler = (
	overrideResponse?:
		| EngineTrigger
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineTrigger> | EngineTrigger),
) => {
	return http.delete('*/trigger/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadTriggerMockHandler = (
	overrideResponse?:
		| EngineTrigger
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineTrigger> | EngineTrigger),
) => {
	return http.get('*/trigger/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchTriggerMockHandler = (
	overrideResponse?:
		| EngineTrigger
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineTrigger> | EngineTrigger),
) => {
	return http.patch('*/trigger/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateTriggerMockHandler = (
	overrideResponse?:
		| EngineTrigger
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineTrigger> | EngineTrigger),
) => {
	return http.put('*/trigger/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateTriggerResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getSearchTriggerJobMockHandler = (
	overrideResponse?:
		| EngineListTriggerJob
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListTriggerJob> | EngineListTriggerJob),
) => {
	return http.get('*/trigger/:triggerId/job', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchTriggerJobResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateTriggerJobMockHandler = (
	overrideResponse?:
		| EngineTriggerJob
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineTriggerJob> | EngineTriggerJob),
) => {
	return http.post('*/trigger/:triggerId/job', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateTriggerJobResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getTriggerServiceMock = () => [
	getSearchTriggerMockHandler(),
	getCreateTriggerMockHandler(),
	getDeleteTriggerMockHandler(),
	getReadTriggerMockHandler(),
	getPatchTriggerMockHandler(),
	getUpdateTriggerMockHandler(),
	getSearchTriggerJobMockHandler(),
	getCreateTriggerJobMockHandler(),
];
