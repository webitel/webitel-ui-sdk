/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod';

/**
 * @summary List of Trigger
 */
export const searchTriggerQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	id: zod.array(zod.number()).optional(),
	schemaId: zod.array(zod.number()).optional(),
});

export const searchTriggerResponseItemsItemEventDefault = 'empty_trigger_event';
export const searchTriggerResponseItemsItemObjectDefault =
	'empty_trigger_object';
export const searchTriggerResponseItemsItemTypeDefault = 'default_trigger_type';

export const searchTriggerResponse = zod.object({
	items: zod
		.array(
			zod.object({
				description: zod.string().optional(),
				enabled: zod.boolean().optional(),
				event: zod
					.enum([
						'empty_trigger_event',
						'create',
						'update',
						'remove',
						'resolution_time',
					])
					.default(searchTriggerResponseItemsItemEventDefault),
				expression: zod.string().optional(),
				id: zod.number().optional(),
				name: zod.string().optional(),
				object: zod
					.enum(['empty_trigger_object', 'cases', 'case_files'])
					.default(searchTriggerResponseItemsItemObjectDefault),
				schema: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				timeout: zod.number().optional(),
				timezone: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				type: zod
					.enum(['default_trigger_type', 'cron', 'event'])
					.default(searchTriggerResponseItemsItemTypeDefault),
				variables: zod.record(zod.string(), zod.string()).optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

/**
 * @summary Create Trigger
 */
export const createTriggerBodyEventDefault = 'empty_trigger_event';
export const createTriggerBodyObjectDefault = 'empty_trigger_object';
export const createTriggerBodyTypeDefault = 'default_trigger_type';

export const createTriggerBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(createTriggerBodyEventDefault),
	expression: zod.string().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(createTriggerBodyObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(createTriggerBodyTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const createTriggerResponseEventDefault = 'empty_trigger_event';
export const createTriggerResponseObjectDefault = 'empty_trigger_object';
export const createTriggerResponseTypeDefault = 'default_trigger_type';

export const createTriggerResponse = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(createTriggerResponseEventDefault),
	expression: zod.string().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(createTriggerResponseObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(createTriggerResponseTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Remove Trigger
 */
export const deleteTriggerParams = zod.object({
	id: zod.number(),
});

export const deleteTriggerResponseEventDefault = 'empty_trigger_event';
export const deleteTriggerResponseObjectDefault = 'empty_trigger_object';
export const deleteTriggerResponseTypeDefault = 'default_trigger_type';

export const deleteTriggerResponse = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(deleteTriggerResponseEventDefault),
	expression: zod.string().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(deleteTriggerResponseObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(deleteTriggerResponseTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Trigger item
 */
export const readTriggerParams = zod.object({
	id: zod.number(),
});

export const readTriggerResponseEventDefault = 'empty_trigger_event';
export const readTriggerResponseObjectDefault = 'empty_trigger_object';
export const readTriggerResponseTypeDefault = 'default_trigger_type';

export const readTriggerResponse = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(readTriggerResponseEventDefault),
	expression: zod.string().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(readTriggerResponseObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(readTriggerResponseTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchTriggerParams = zod.object({
	id: zod.number(),
});

export const patchTriggerBodyEventDefault = 'empty_trigger_event';
export const patchTriggerBodyObjectDefault = 'empty_trigger_object';
export const patchTriggerBodyTypeDefault = 'default_trigger_type';

export const patchTriggerBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(patchTriggerBodyEventDefault),
	expression: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(patchTriggerBodyObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(patchTriggerBodyTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const patchTriggerResponseEventDefault = 'empty_trigger_event';
export const patchTriggerResponseObjectDefault = 'empty_trigger_object';
export const patchTriggerResponseTypeDefault = 'default_trigger_type';

export const patchTriggerResponse = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(patchTriggerResponseEventDefault),
	expression: zod.string().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(patchTriggerResponseObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(patchTriggerResponseTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

/**
 * @summary Update Trigger
 */
export const updateTriggerParams = zod.object({
	id: zod.number(),
});

export const updateTriggerBodyEventDefault = 'empty_trigger_event';
export const updateTriggerBodyObjectDefault = 'empty_trigger_object';
export const updateTriggerBodyTypeDefault = 'default_trigger_type';

export const updateTriggerBody = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(updateTriggerBodyEventDefault),
	expression: zod.string().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(updateTriggerBodyObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(updateTriggerBodyTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const updateTriggerResponseEventDefault = 'empty_trigger_event';
export const updateTriggerResponseObjectDefault = 'empty_trigger_object';
export const updateTriggerResponseTypeDefault = 'default_trigger_type';

export const updateTriggerResponse = zod.object({
	description: zod.string().optional(),
	enabled: zod.boolean().optional(),
	event: zod
		.enum([
			'empty_trigger_event',
			'create',
			'update',
			'remove',
			'resolution_time',
		])
		.default(updateTriggerResponseEventDefault),
	expression: zod.string().optional(),
	id: zod.number().optional(),
	name: zod.string().optional(),
	object: zod
		.enum(['empty_trigger_object', 'cases', 'case_files'])
		.default(updateTriggerResponseObjectDefault),
	schema: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	timeout: zod.number().optional(),
	timezone: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	type: zod
		.enum(['default_trigger_type', 'cron', 'event'])
		.default(updateTriggerResponseTypeDefault),
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const searchTriggerJobParams = zod.object({
	trigger_id: zod.number(),
});

export const searchTriggerJobQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
	createdAtFrom: zod.string().optional(),
	createdAtTo: zod.string().optional(),
	startedAtFrom: zod.string().optional(),
	startedAtTo: zod.string().optional(),
	durationFrom: zod.string().optional(),
	durationTo: zod.string().optional(),
	state: zod.array(zod.enum(['idle', 'active', 'done', 'error'])).optional(),
});

export const searchTriggerJobResponseItemsItemStateDefault = 'idle';

export const searchTriggerJobResponse = zod.object({
	items: zod
		.array(
			zod.object({
				createdAt: zod.string().optional(),
				error: zod.string().optional(),
				id: zod.string().optional(),
				startedAt: zod.string().optional(),
				state: zod
					.enum(['idle', 'active', 'done', 'error'])
					.default(searchTriggerJobResponseItemsItemStateDefault),
				stoppedAt: zod.string().optional(),
				trigger: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
});

export const createTriggerJobParams = zod.object({
	trigger_id: zod.number(),
});

export const createTriggerJobBody = zod.object({
	variables: zod.record(zod.string(), zod.string()).optional(),
});

export const createTriggerJobResponseStateDefault = 'idle';

export const createTriggerJobResponse = zod.object({
	createdAt: zod.string().optional(),
	error: zod.string().optional(),
	id: zod.string().optional(),
	startedAt: zod.string().optional(),
	state: zod
		.enum(['idle', 'active', 'done', 'error'])
		.default(createTriggerJobResponseStateDefault),
	stoppedAt: zod.string().optional(),
	trigger: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});
