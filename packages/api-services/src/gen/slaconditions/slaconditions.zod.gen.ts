/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Create a new SLACondition
 */
export const createSLAConditionParams = zod.object({
	sla_id: zod.string(),
});

export const createSLAConditionQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const createSLAConditionBody = zod.object({
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
});

export const createSLAConditionResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
	slaId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Delete an SLACondition
 */
export const deleteSLAConditionParams = zod.object({
	sla_id: zod.string(),
	id: zod.string(),
});

export const deleteSLAConditionResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
	slaId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Locate an SLACondition by ID
 */
export const locateSLAConditionParams = zod.object({
	sla_id: zod.string().describe('Unique identifier of the SLACondition'),
	id: zod.string().describe('Unique identifier of the SLACondition'),
});

export const locateSLAConditionQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const locateSLAConditionResponse = zod.object({
	slaCondition: zod
		.object({
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			id: zod.string().optional(),
			name: zod.string().optional(),
			priorities: zod
				.array(
					zod.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					}),
				)
				.optional(),
			reactionTime: zod.string().optional(),
			resolutionTime: zod.string().optional(),
			slaId: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing SLACondition
 */
export const updateSLACondition2Params = zod.object({
	sla_id: zod.string(),
	id: zod.string(),
});

export const updateSLACondition2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateSLACondition2Body = zod.object({
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
});

export const updateSLACondition2Response = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
	slaId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Update an existing SLACondition
 */
export const updateSLAConditionParams = zod.object({
	sla_id: zod.string(),
	id: zod.string(),
});

export const updateSLAConditionQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const updateSLAConditionBody = zod.object({
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
});

export const updateSLAConditionResponse = zod.object({
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	priorities: zod
		.array(
			zod.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			}),
		)
		.optional(),
	reactionTime: zod.string().optional(),
	resolutionTime: zod.string().optional(),
	slaId: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

/**
 * @summary Retrieve a list of SLAConditions or search SLACondition conditions
 */
export const listSLAConditionsParams = zod.object({
	sla_id: zod.string().describe('Filter by SLA Id'),
});

export const listSLAConditionsQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	sort: zod
		.string()
		.optional()
		.describe('Sort the result according to fields.'),
	id: zod.array(zod.string()).optional().describe('Filter by unique IDs.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names',
		),
	slaConditionId: zod
		.string()
		.optional()
		.describe('Filter by SLACondition Id.'),
	priorityId: zod.string().optional().describe('filter by priority id'),
});

export const listSLAConditionsResponse = zod.object({
	items: zod
		.array(
			zod.object({
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				priorities: zod
					.array(
						zod.object({
							id: zod.string().optional(),
							name: zod.string().optional(),
						}),
					)
					.optional(),
				reactionTime: zod.string().optional(),
				resolutionTime: zod.string().optional(),
				slaId: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});
