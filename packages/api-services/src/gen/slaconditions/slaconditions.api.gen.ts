/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import axios from '@aliasedDeps/api-services/axios';

import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
	CasesInputSLACondition,
	CasesLocateSLAConditionResponse,
	CasesSLACondition,
	CasesSLAConditionList,
	CreateSLAConditionParams,
	ListSLAConditionsParams,
	LocateSLAConditionParams,
	UpdateSLACondition2Params,
	UpdateSLAConditionParams,
} from '.././_models';

// --- header start
//

export const // --- title start
	getSlaconditions =
		// --- title end
		() => {
			// --- header end
			/**
			 * @summary Create a new SLACondition
			 */
			const createSLACondition = <TData = AxiosResponse<CasesSLACondition>>(
				slaId: string,
				casesInputSLACondition: CasesInputSLACondition,
				params?: CreateSLAConditionParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.post(
					`/slas/${slaId}/sla_condition`,
					casesInputSLACondition,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Delete an SLACondition
			 */
			const deleteSLACondition = <TData = AxiosResponse<CasesSLACondition>>(
				slaId: string,
				id: string,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.delete(`/slas/${slaId}/sla_condition/${id}`, options);
			};
			/**
			 * @summary Locate an SLACondition by ID
			 */
			const locateSLACondition = <
				TData = AxiosResponse<CasesLocateSLAConditionResponse>,
			>(
				slaId: string,
				id: string,
				params?: LocateSLAConditionParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/slas/${slaId}/sla_condition/${id}`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};
			/**
			 * @summary Update an existing SLACondition
			 */
			const updateSLACondition2 = <TData = AxiosResponse<CasesSLACondition>>(
				slaId: string,
				id: string,
				casesInputSLACondition: CasesInputSLACondition,
				params?: UpdateSLACondition2Params,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.patch(
					`/slas/${slaId}/sla_condition/${id}`,
					casesInputSLACondition,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Update an existing SLACondition
			 */
			const updateSLACondition = <TData = AxiosResponse<CasesSLACondition>>(
				slaId: string,
				id: string,
				casesInputSLACondition: CasesInputSLACondition,
				params?: UpdateSLAConditionParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.put(
					`/slas/${slaId}/sla_condition/${id}`,
					casesInputSLACondition,
					{
						...options,
						params: { ...params, ...options?.params },
					},
				);
			};
			/**
			 * @summary Retrieve a list of SLAConditions or search SLACondition conditions
			 */
			const listSLAConditions = <TData = AxiosResponse<CasesSLAConditionList>>(
				slaId: string,
				params?: ListSLAConditionsParams,
				options?: AxiosRequestConfig,
			): Promise<TData> => {
				return axios.get(`/slas/${slaId}/sla_conditions`, {
					...options,
					params: { ...params, ...options?.params },
				});
			};

			// --- footer start
			return {
				createSLACondition,
				deleteSLACondition,
				locateSLACondition,
				updateSLACondition2,
				updateSLACondition,
				listSLAConditions,
			};
		};
export type CreateSLAConditionResult = AxiosResponse<CasesSLACondition>;
export type DeleteSLAConditionResult = AxiosResponse<CasesSLACondition>;
export type LocateSLAConditionResult =
	AxiosResponse<CasesLocateSLAConditionResponse>;
export type UpdateSLACondition2Result = AxiosResponse<CasesSLACondition>;
export type UpdateSLAConditionResult = AxiosResponse<CasesSLACondition>;
export type ListSLAConditionsResult = AxiosResponse<CasesSLAConditionList>;

// --- footer end
