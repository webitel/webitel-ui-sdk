/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type { EngineListRegion, EngineRegion } from '.././_models';

export const getSearchRegionResponseMock = (
	overrideResponse: Partial<EngineListRegion> = {},
): EngineListRegion => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			description: faker.helpers.arrayElement([
				faker.string.alpha(20),
				undefined,
			]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			timezone: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	...overrideResponse,
});

export const getCreateRegionResponseMock = (
	overrideResponse: Partial<EngineRegion> = {},
): EngineRegion => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteRegionResponseMock = (
	overrideResponse: Partial<EngineRegion> = {},
): EngineRegion => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getReadRegionResponseMock = (
	overrideResponse: Partial<EngineRegion> = {},
): EngineRegion => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getPatchRegionResponseMock = (
	overrideResponse: Partial<EngineRegion> = {},
): EngineRegion => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateRegionResponseMock = (
	overrideResponse: Partial<EngineRegion> = {},
): EngineRegion => ({
	description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	timezone: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	...overrideResponse,
});

export const getSearchRegionMockHandler = (
	overrideResponse?:
		| EngineListRegion
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineListRegion> | EngineListRegion),
) => {
	return http.get('*/regions', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getSearchRegionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateRegionMockHandler = (
	overrideResponse?:
		| EngineRegion
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<EngineRegion> | EngineRegion),
) => {
	return http.post('*/regions', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateRegionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteRegionMockHandler = (
	overrideResponse?:
		| EngineRegion
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<EngineRegion> | EngineRegion),
) => {
	return http.delete('*/regions/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteRegionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getReadRegionMockHandler = (
	overrideResponse?:
		| EngineRegion
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<EngineRegion> | EngineRegion),
) => {
	return http.get('*/regions/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getReadRegionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getPatchRegionMockHandler = (
	overrideResponse?:
		| EngineRegion
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<EngineRegion> | EngineRegion),
) => {
	return http.patch('*/regions/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getPatchRegionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateRegionMockHandler = (
	overrideResponse?:
		| EngineRegion
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<EngineRegion> | EngineRegion),
) => {
	return http.put('*/regions/:id', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateRegionResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getRegionServiceMock = () => [
	getSearchRegionMockHandler(),
	getCreateRegionMockHandler(),
	getDeleteRegionMockHandler(),
	getReadRegionMockHandler(),
	getPatchRegionMockHandler(),
	getUpdateRegionMockHandler(),
];
