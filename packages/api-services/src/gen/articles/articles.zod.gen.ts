/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary List of the Space's Article(s).
 */
export const listArticlesParams = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
});

export const listArticlesQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters',
		),
	articleId: zod.string().optional().describe('Record(s) with unique ID only.'),
	state: zod.boolean().optional().describe('Active Article only.'),
	tags: zod
		.array(zod.string())
		.optional()
		.describe('Tags associated with the article.'),
});

export const listArticlesResponse = zod
	.object({
		data: zod
			.array(
				zod.object({
					tags: zod
						.array(zod.string())
						.optional()
						.describe('Tags associated with the article.'),
					createdAt: zod
						.string()
						.optional()
						.describe('The user who created this Field.'),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					etag: zod
						.string()
						.optional()
						.describe(
							'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
						),
					hasChildren: zod
						.boolean()
						.optional()
						.describe('Indicates that the article has children.'),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the association. Never changes.'),
					parentArticle: zod
						.string()
						.optional()
						.describe('The parent article ID.'),
					pinned: zod
						.boolean()
						.optional()
						.describe(
							'Indicates that the article is pinned on the top of list.',
						),
					spaceId: zod
						.string()
						.optional()
						.describe('Space ID associated with.'),
					state: zod
						.boolean()
						.optional()
						.describe('Indicates the state of the article.'),
					text: zod
						.string()
						.optional()
						.describe('The text content of the article.'),
					title: zod.string().optional().describe('The title of the article.'),
					updatedAt: zod
						.string()
						.optional()
						.describe(
							'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
						),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					ver: zod
						.number()
						.optional()
						.describe(
							'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
						),
				}),
			)
			.optional()
			.describe('Article dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe(
		'Article dataset.\nNOTE: Edge represents connection between two nodes.\nSo this spaceArticles.data are always subordinate to some space.id.',
	);

export const createArticleParams = zod.object({
	space_id: zod.string().describe('Link space ID.'),
});

export const createArticleQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const createArticleBody = zod
	.object({
		tags: zod
			.array(zod.string())
			.optional()
			.describe('Tags associated with the article.'),
		etag: zod
			.string()
			.describe('Unique ID of the latest version of an existing resource.'),
		parentArticle: zod.string().optional().describe('The parent article ID.'),
		pinned: zod
			.boolean()
			.optional()
			.describe('Indicates that the article is pinned on the top of list.'),
		spaceId: zod
			.string()
			.optional()
			.describe(
				'[VALUE]: --------------------------------------\nSpace ID associated with.',
			),
		state: zod
			.boolean()
			.optional()
			.describe('Indicates if article is active and actual.'),
		text: zod.string().optional().describe('The text content of the article.'),
		title: zod.string().optional().describe('The title of the article.'),
	})
	.describe("An input of the Space's Articles.");

export const createArticleResponse = zod
	.object({
		data: zod
			.array(
				zod.object({
					tags: zod
						.array(zod.string())
						.optional()
						.describe('Tags associated with the article.'),
					createdAt: zod
						.string()
						.optional()
						.describe('The user who created this Field.'),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					etag: zod
						.string()
						.optional()
						.describe(
							'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
						),
					hasChildren: zod
						.boolean()
						.optional()
						.describe('Indicates that the article has children.'),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the association. Never changes.'),
					parentArticle: zod
						.string()
						.optional()
						.describe('The parent article ID.'),
					pinned: zod
						.boolean()
						.optional()
						.describe(
							'Indicates that the article is pinned on the top of list.',
						),
					spaceId: zod
						.string()
						.optional()
						.describe('Space ID associated with.'),
					state: zod
						.boolean()
						.optional()
						.describe('Indicates the state of the article.'),
					text: zod
						.string()
						.optional()
						.describe('The text content of the article.'),
					title: zod.string().optional().describe('The title of the article.'),
					updatedAt: zod
						.string()
						.optional()
						.describe(
							'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
						),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					ver: zod
						.number()
						.optional()
						.describe(
							'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
						),
				}),
			)
			.optional()
			.describe('Article dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe(
		'Article dataset.\nNOTE: Edge represents connection between two nodes.\nSo this spaceArticles.data are always subordinate to some space.id.',
	);

export const articlesAttachmentListParams = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
	article_id: zod.string().describe('Record(s) with unique ID only.'),
});

export const articlesAttachmentListQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
});

export const articlesAttachmentListResponse = zod.object({
	data: zod
		.array(
			zod.object({
				id: zod
					.string()
					.optional()
					.describe('The unique ID of the association. Never changes.'),
				size: zod.number().optional().describe('The size of the attachment.'),
				title: zod.string().optional().describe('The title of the article.'),
				uploadedBy: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
			}),
		)
		.optional()
		.describe('Attachment dataset page.'),
	next: zod.boolean().optional(),
	page: zod
		.number()
		.optional()
		.describe('The page number of the partial result.'),
});

/**
 * @summary List of the Space's Article(s).
 */
export const listArticles2Params = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
	article_id: zod.string().describe('Record(s) with unique ID only.'),
});

export const listArticles2QueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
	q: zod
		.string()
		.optional()
		.describe(
			'Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters',
		),
	state: zod.boolean().optional().describe('Active Article only.'),
	tags: zod
		.array(zod.string())
		.optional()
		.describe('Tags associated with the article.'),
});

export const listArticles2Response = zod
	.object({
		data: zod
			.array(
				zod.object({
					tags: zod
						.array(zod.string())
						.optional()
						.describe('Tags associated with the article.'),
					createdAt: zod
						.string()
						.optional()
						.describe('The user who created this Field.'),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					etag: zod
						.string()
						.optional()
						.describe(
							'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
						),
					hasChildren: zod
						.boolean()
						.optional()
						.describe('Indicates that the article has children.'),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the association. Never changes.'),
					parentArticle: zod
						.string()
						.optional()
						.describe('The parent article ID.'),
					pinned: zod
						.boolean()
						.optional()
						.describe(
							'Indicates that the article is pinned on the top of list.',
						),
					spaceId: zod
						.string()
						.optional()
						.describe('Space ID associated with.'),
					state: zod
						.boolean()
						.optional()
						.describe('Indicates the state of the article.'),
					text: zod
						.string()
						.optional()
						.describe('The text content of the article.'),
					title: zod.string().optional().describe('The title of the article.'),
					updatedAt: zod
						.string()
						.optional()
						.describe(
							'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
						),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					ver: zod
						.number()
						.optional()
						.describe(
							'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
						),
				}),
			)
			.optional()
			.describe('Article dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe(
		'Article dataset.\nNOTE: Edge represents connection between two nodes.\nSo this spaceArticles.data are always subordinate to some space.id.',
	);

export const articleVersionsListParams = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
	article_id: zod.string().describe('Record(s) with unique ID only.'),
});

export const articleVersionsListQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('Page number of result dataset records. offset = (page*size)'),
	size: zod
		.number()
		.optional()
		.describe('Size count of records on result page. limit = (size++)'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('Sort the result according to fields.'),
});

export const articleVersionsListResponse = zod.object({
	data: zod
		.array(
			zod.object({
				tags: zod
					.array(zod.string())
					.optional()
					.describe('Tags associated with the article.'),
				id: zod
					.string()
					.optional()
					.describe('The unique ID of the association. Never changes.'),
				parentArticle: zod
					.string()
					.optional()
					.describe('The parent article ID.'),
				spaceId: zod.string().optional().describe('Space ID associated with.'),
				text: zod
					.string()
					.optional()
					.describe('The text content of the article.'),
				title: zod.string().optional().describe('The title of the article.'),
				updatedAt: zod
					.string()
					.optional()
					.describe('Timestamp(milli) of the last Field update.'),
				updatedBy: zod
					.object({
						id: zod.string().optional().describe('Reference Object unique ID.'),
						name: zod
							.string()
							.optional()
							.describe('Reference Object display name.'),
						type: zod
							.string()
							.optional()
							.describe('Reference Object well-known type.'),
					})
					.optional()
					.describe(
						'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
					),
				ver: zod
					.number()
					.optional()
					.describe('Version of the latest update. Numeric sequence.'),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod
		.number()
		.optional()
		.describe('The page number of the partial result.'),
});

export const locateArticleVersionParams = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
	article_id: zod.string().describe('Record(s) with unique ID only.'),
	version_id: zod.string().describe('The unique ID of version record'),
});

export const locateArticleVersionResponse = zod.object({
	tags: zod
		.array(zod.string())
		.optional()
		.describe('Tags associated with the article.'),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the association. Never changes.'),
	parentArticle: zod.string().optional().describe('The parent article ID.'),
	spaceId: zod.string().optional().describe('Space ID associated with.'),
	text: zod.string().optional().describe('The text content of the article.'),
	title: zod.string().optional().describe('The title of the article.'),
	updatedAt: zod
		.string()
		.optional()
		.describe('Timestamp(milli) of the last Field update.'),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	ver: zod
		.number()
		.optional()
		.describe('Version of the latest update. Numeric sequence.'),
});

/**
 * @summary Remove the space's Article association.
 */
export const deleteArticleParams = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
	etag: zod.string().describe('Unique ID to remove.'),
});

export const deleteArticleQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved as a result.'),
});

export const deleteArticleResponse = zod.object({
	tags: zod
		.array(zod.string())
		.optional()
		.describe('Tags associated with the article.'),
	createdAt: zod
		.string()
		.optional()
		.describe('The user who created this Field.'),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	etag: zod
		.string()
		.optional()
		.describe(
			'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
		),
	hasChildren: zod
		.boolean()
		.optional()
		.describe('Indicates that the article has children.'),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the association. Never changes.'),
	parentArticle: zod.string().optional().describe('The parent article ID.'),
	pinned: zod
		.boolean()
		.optional()
		.describe('Indicates that the article is pinned on the top of list.'),
	spaceId: zod.string().optional().describe('Space ID associated with.'),
	state: zod
		.boolean()
		.optional()
		.describe('Indicates the state of the article.'),
	text: zod.string().optional().describe('The text content of the article.'),
	title: zod.string().optional().describe('The title of the article.'),
	updatedAt: zod
		.string()
		.optional()
		.describe(
			'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
		),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	ver: zod
		.number()
		.optional()
		.describe(
			'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
		),
});

/**
 * @summary Locate the space's Article association.
 */
export const locateArticleParams = zod.object({
	space_id: zod.string().describe('Space ID associated with.'),
	etag: zod
		.string()
		.describe(
			'Unique Article link IDentifier.\nAccept: `etag` (obsolete+) or `id`.',
		),
});

export const locateArticleQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result.'),
});

export const locateArticleResponse = zod.object({
	tags: zod
		.array(zod.string())
		.optional()
		.describe('Tags associated with the article.'),
	createdAt: zod
		.string()
		.optional()
		.describe('The user who created this Field.'),
	createdBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	etag: zod
		.string()
		.optional()
		.describe(
			'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
		),
	hasChildren: zod
		.boolean()
		.optional()
		.describe('Indicates that the article has children.'),
	id: zod
		.string()
		.optional()
		.describe('The unique ID of the association. Never changes.'),
	parentArticle: zod.string().optional().describe('The parent article ID.'),
	pinned: zod
		.boolean()
		.optional()
		.describe('Indicates that the article is pinned on the top of list.'),
	spaceId: zod.string().optional().describe('Space ID associated with.'),
	state: zod
		.boolean()
		.optional()
		.describe('Indicates the state of the article.'),
	text: zod.string().optional().describe('The text content of the article.'),
	title: zod.string().optional().describe('The title of the article.'),
	updatedAt: zod
		.string()
		.optional()
		.describe(
			'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
		),
	updatedBy: zod
		.object({
			id: zod.string().optional().describe('Reference Object unique ID.'),
			name: zod.string().optional().describe('Reference Object display name.'),
			type: zod
				.string()
				.optional()
				.describe('Reference Object well-known type.'),
		})
		.optional()
		.describe(
			'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
		),
	ver: zod
		.number()
		.optional()
		.describe(
			'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
		),
});

/**
 * @summary Update the space's Article details.
 */
export const updateArticleParams = zod.object({
	space_id: zod.string().describe('Link space ID.'),
	etag: zod
		.string()
		.describe('Unique ID of the latest version of an existing resource.'),
});

export const updateArticleQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to be retrieved into result of changes.'),
});

export const updateArticleBody = zod.object({
	tags: zod
		.array(zod.string())
		.optional()
		.describe('Tags associated with the article.'),
	parentArticle: zod.string().optional().describe('The parent article ID.'),
	pinned: zod
		.boolean()
		.optional()
		.describe('Indicates that the article is pinned on the top of list.'),
	spaceId: zod
		.string()
		.optional()
		.describe(
			'[VALUE]: --------------------------------------\nSpace ID associated with.',
		),
	state: zod
		.boolean()
		.optional()
		.describe('Indicates if article is active and actual.'),
	text: zod.string().optional().describe('The text content of the article.'),
	title: zod.string().optional().describe('The title of the article.'),
});

export const updateArticleResponse = zod
	.object({
		data: zod
			.array(
				zod.object({
					tags: zod
						.array(zod.string())
						.optional()
						.describe('Tags associated with the article.'),
					createdAt: zod
						.string()
						.optional()
						.describe('The user who created this Field.'),
					createdBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					etag: zod
						.string()
						.optional()
						.describe(
							'Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s).',
						),
					hasChildren: zod
						.boolean()
						.optional()
						.describe('Indicates that the article has children.'),
					id: zod
						.string()
						.optional()
						.describe('The unique ID of the association. Never changes.'),
					parentArticle: zod
						.string()
						.optional()
						.describe('The parent article ID.'),
					pinned: zod
						.boolean()
						.optional()
						.describe(
							'Indicates that the article is pinned on the top of list.',
						),
					spaceId: zod
						.string()
						.optional()
						.describe('Space ID associated with.'),
					state: zod
						.boolean()
						.optional()
						.describe('Indicates the state of the article.'),
					text: zod
						.string()
						.optional()
						.describe('The text content of the article.'),
					title: zod.string().optional().describe('The title of the article.'),
					updatedAt: zod
						.string()
						.optional()
						.describe(
							'Timestamp(milli) of the last Field update.\nTake part in Etag generation.',
						),
					updatedBy: zod
						.object({
							id: zod
								.string()
								.optional()
								.describe('Reference Object unique ID.'),
							name: zod
								.string()
								.optional()
								.describe('Reference Object display name.'),
							type: zod
								.string()
								.optional()
								.describe('Reference Object well-known type.'),
						})
						.optional()
						.describe(
							'Lookup reference information.\nSimplified search filter to uniquely identify related object.',
						),
					ver: zod
						.number()
						.optional()
						.describe(
							'READONLY. Operational attributes\nVersion of the latest update. Numeric sequence.',
						),
				}),
			)
			.optional()
			.describe('Article dataset page.'),
		next: zod.boolean().optional(),
		page: zod
			.number()
			.optional()
			.describe('The page number of the partial result.'),
	})
	.describe(
		'Article dataset.\nNOTE: Edge represents connection between two nodes.\nSo this spaceArticles.data are always subordinate to some space.id.',
	);
