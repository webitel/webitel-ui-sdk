/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

export const oAuth2FederationDeleteOAuthServiceBody = zod.object({
	id: zod.array(zod.string()).optional(),
	permanent: zod.boolean().optional(),
});

export const oAuth2FederationDeleteOAuthServiceResponse = zod.object({});

export const oAuth2FederationSearchOAuthServiceQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	id: zod
		.array(zod.string())
		.optional()
		.describe(
			'----- Search Basic Filters ---------------------------\n\nselection: by unique identifier',
		),
	q: zod.string().optional().describe('term-of-search: lookup[name]'),
	name: zod
		.string()
		.optional()
		.describe("case-ignore substring match: ILIKE '*' - any; '?' - one"),
	access: zod
		.string()
		.optional()
		.describe(
			'[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!',
		),
	enabled: zod
		.boolean()
		.optional()
		.describe('----- OAuthService-Specific Filters ----------------'),
});

export const oAuth2FederationSearchOAuthServiceResponse = zod.object({
	items: zod
		.array(
			zod.object({
				authUrl: zod.string().optional(),
				claims: zod
					.array(
						zod.object({
							type: zod.string().optional(),
							value: zod.string().optional(),
						}),
					)
					.optional()
					.describe('google.protobuf.Struct claims = 7;'),
				clientId: zod.string().optional(),
				clientSecret: zod.string().optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				discoveryUrl: zod.string().optional(),
				domain: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				enabled: zod.boolean().optional(),
				id: zod.string().optional(),
				logo: zod.string().optional(),
				metadata: zod.object({}).optional(),
				name: zod.string().optional(),
				scopes: zod.array(zod.string()).optional(),
				tokenUrl: zod.string().optional(),
				type: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				userinfoUrl: zod.string().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.number().optional(),
});

export const oAuth2FederationCreateOAuthServiceBody = zod.object({
	authUrl: zod.string().optional(),
	claims: zod
		.array(
			zod.object({
				type: zod.string().optional(),
				value: zod.string().optional(),
			}),
		)
		.optional()
		.describe('google.protobuf.Struct claims = 7;'),
	clientId: zod.string().optional(),
	clientSecret: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	discoveryUrl: zod.string().optional(),
	domain: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	logo: zod.string().optional(),
	metadata: zod.object({}).optional(),
	name: zod.string().optional(),
	scopes: zod.array(zod.string()).optional(),
	tokenUrl: zod.string().optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	userinfoUrl: zod.string().optional(),
});

export const oAuth2FederationCreateOAuthServiceResponse = zod.object({
	authUrl: zod.string().optional(),
	claims: zod
		.array(
			zod.object({
				type: zod.string().optional(),
				value: zod.string().optional(),
			}),
		)
		.optional()
		.describe('google.protobuf.Struct claims = 7;'),
	clientId: zod.string().optional(),
	clientSecret: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	discoveryUrl: zod.string().optional(),
	domain: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	logo: zod.string().optional(),
	metadata: zod.object({}).optional(),
	name: zod.string().optional(),
	scopes: zod.array(zod.string()).optional(),
	tokenUrl: zod.string().optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	userinfoUrl: zod.string().optional(),
});

export const oAuth2FederationUpdateOAuthService2Params = zod.object({
	'changes.id': zod.string(),
});

export const oAuth2FederationUpdateOAuthService2Body = zod.object({
	changes: zod
		.object({
			authUrl: zod.string().optional(),
			claims: zod
				.array(
					zod.object({
						type: zod.string().optional(),
						value: zod.string().optional(),
					}),
				)
				.optional()
				.describe('google.protobuf.Struct claims = 7;'),
			clientId: zod.string().optional(),
			clientSecret: zod.string().optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			discoveryUrl: zod.string().optional(),
			domain: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			enabled: zod.boolean().optional(),
			logo: zod.string().optional(),
			metadata: zod.object({}).optional(),
			name: zod.string().optional(),
			scopes: zod.array(zod.string()).optional(),
			tokenUrl: zod.string().optional(),
			type: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			userinfoUrl: zod.string().optional(),
		})
		.optional()
		.describe('Configuration changes.'),
	fields: zod.array(zod.string()).optional(),
});

export const oAuth2FederationUpdateOAuthService2Response = zod.object({
	authUrl: zod.string().optional(),
	claims: zod
		.array(
			zod.object({
				type: zod.string().optional(),
				value: zod.string().optional(),
			}),
		)
		.optional()
		.describe('google.protobuf.Struct claims = 7;'),
	clientId: zod.string().optional(),
	clientSecret: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	discoveryUrl: zod.string().optional(),
	domain: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	logo: zod.string().optional(),
	metadata: zod.object({}).optional(),
	name: zod.string().optional(),
	scopes: zod.array(zod.string()).optional(),
	tokenUrl: zod.string().optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	userinfoUrl: zod.string().optional(),
});

export const oAuth2FederationUpdateOAuthServiceParams = zod.object({
	'changes.id': zod.string(),
});

export const oAuth2FederationUpdateOAuthServiceBody = zod.object({
	changes: zod
		.object({
			authUrl: zod.string().optional(),
			claims: zod
				.array(
					zod.object({
						type: zod.string().optional(),
						value: zod.string().optional(),
					}),
				)
				.optional()
				.describe('google.protobuf.Struct claims = 7;'),
			clientId: zod.string().optional(),
			clientSecret: zod.string().optional(),
			createdAt: zod.string().optional(),
			createdBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			discoveryUrl: zod.string().optional(),
			domain: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			enabled: zod.boolean().optional(),
			logo: zod.string().optional(),
			metadata: zod.object({}).optional(),
			name: zod.string().optional(),
			scopes: zod.array(zod.string()).optional(),
			tokenUrl: zod.string().optional(),
			type: zod.string().optional(),
			updatedAt: zod.string().optional(),
			updatedBy: zod
				.object({
					id: zod.string().optional(),
					name: zod.string().optional(),
				})
				.optional(),
			userinfoUrl: zod.string().optional(),
		})
		.optional()
		.describe('Configuration changes.'),
	fields: zod.array(zod.string()).optional(),
});

export const oAuth2FederationUpdateOAuthServiceResponse = zod.object({
	authUrl: zod.string().optional(),
	claims: zod
		.array(
			zod.object({
				type: zod.string().optional(),
				value: zod.string().optional(),
			}),
		)
		.optional()
		.describe('google.protobuf.Struct claims = 7;'),
	clientId: zod.string().optional(),
	clientSecret: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	discoveryUrl: zod.string().optional(),
	domain: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	logo: zod.string().optional(),
	metadata: zod.object({}).optional(),
	name: zod.string().optional(),
	scopes: zod.array(zod.string()).optional(),
	tokenUrl: zod.string().optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	userinfoUrl: zod.string().optional(),
});

export const oAuth2FederationDeleteOAuthService2Params = zod.object({
	id: zod.array(zod.string()).min(1),
});

export const oAuth2FederationDeleteOAuthService2Body = zod.object({
	permanent: zod.boolean().optional(),
});

export const oAuth2FederationDeleteOAuthService2Response = zod.object({});

export const oAuth2FederationLocateOAuthServiceParams = zod.object({
	id: zod
		.array(zod.string())
		.min(1)
		.describe(
			'----- Search Basic Filters ---------------------------\n\nselection: by unique identifier',
		),
});

export const oAuth2FederationLocateOAuthServiceQueryParams = zod.object({
	page: zod
		.number()
		.optional()
		.describe('----- Select Options -------------------------\n\ndefault: 1'),
	size: zod.number().optional().describe('default: 16'),
	fields: zod.array(zod.string()).optional().describe('attributes list'),
	sort: zod
		.array(zod.string())
		.optional()
		.describe('e.g.: "updated_at" - ASC; "!updated_at" - DESC;'),
	q: zod.string().optional().describe('term-of-search: lookup[name]'),
	name: zod
		.string()
		.optional()
		.describe("case-ignore substring match: ILIKE '*' - any; '?' - one"),
	access: zod
		.string()
		.optional()
		.describe(
			'[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!',
		),
	enabled: zod
		.boolean()
		.optional()
		.describe('----- OAuthService-Specific Filters ----------------'),
});

export const oAuth2FederationLocateOAuthServiceResponse = zod.object({
	authUrl: zod.string().optional(),
	claims: zod
		.array(
			zod.object({
				type: zod.string().optional(),
				value: zod.string().optional(),
			}),
		)
		.optional()
		.describe('google.protobuf.Struct claims = 7;'),
	clientId: zod.string().optional(),
	clientSecret: zod.string().optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	discoveryUrl: zod.string().optional(),
	domain: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	enabled: zod.boolean().optional(),
	id: zod.string().optional(),
	logo: zod.string().optional(),
	metadata: zod.object({}).optional(),
	name: zod.string().optional(),
	scopes: zod.array(zod.string()).optional(),
	tokenUrl: zod.string().optional(),
	type: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	userinfoUrl: zod.string().optional(),
});
