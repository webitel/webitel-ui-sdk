/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Webitel API
 * OpenAPI spec version: 24.04.0
 */
import { z as zod } from 'zod/v4';

/**
 * @summary Update an existing related case
 */
export const updateRelatedCase2Params = zod.object({
	'input.primary_case.id': zod.string(),
	etag: zod.string().describe('Identifier of the related case to update.'),
});

export const updateRelatedCase2QueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to include in the response.'),
});

export const updateRelatedCase2BodyRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const updateRelatedCase2Body = zod.object({
	primaryCase: zod
		.object({
			name: zod.string().optional(),
		})
		.optional()
		.describe('Primary case details.'),
	relatedCase: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	relationType: zod
		.enum([
			'RELATION_TYPE_UNSPECIFIED',
			'DUPLICATES',
			'IS_DUPLICATED_BY',
			'BLOCKS',
			'IS_BLOCKED_BY',
			'CAUSES',
			'IS_CAUSED_BY',
			'IS_CHILD_OF',
			'IS_PARENT_OF',
			'RELATES_TO',
		])
		.default(updateRelatedCase2BodyRelationTypeDefault)
		.describe('Enum for relation types between cases.'),
	userId: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateRelatedCase2ResponseRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const updateRelatedCase2Response = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp (in milliseconds) of when the relation was created.',
			),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		etag: zod.string().optional().describe('Etag for the related case entity.'),
		id: zod
			.string()
			.optional()
			.describe('Unique identifier for the related case.'),
		primaryCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relatedCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relationType: zod
			.enum([
				'RELATION_TYPE_UNSPECIFIED',
				'DUPLICATES',
				'IS_DUPLICATED_BY',
				'BLOCKS',
				'IS_BLOCKED_BY',
				'CAUSES',
				'IS_CAUSED_BY',
				'IS_CHILD_OF',
				'IS_PARENT_OF',
				'RELATES_TO',
			])
			.default(updateRelatedCase2ResponseRelationTypeDefault)
			.describe('Enum for relation types between cases.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe(
				'Version number of the related case, used for concurrency control.',
			),
	})
	.describe('Represents a related case with its relationship details.');

/**
 * @summary Update an existing related case
 */
export const updateRelatedCaseParams = zod.object({
	'input.primary_case.id': zod.string(),
	etag: zod.string().describe('Identifier of the related case to update.'),
});

export const updateRelatedCaseQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to include in the response.'),
});

export const updateRelatedCaseBodyRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const updateRelatedCaseBody = zod.object({
	primaryCase: zod
		.object({
			name: zod.string().optional(),
		})
		.optional()
		.describe('Primary case details.'),
	relatedCase: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	relationType: zod
		.enum([
			'RELATION_TYPE_UNSPECIFIED',
			'DUPLICATES',
			'IS_DUPLICATED_BY',
			'BLOCKS',
			'IS_BLOCKED_BY',
			'CAUSES',
			'IS_CAUSED_BY',
			'IS_CHILD_OF',
			'IS_PARENT_OF',
			'RELATES_TO',
		])
		.default(updateRelatedCaseBodyRelationTypeDefault)
		.describe('Enum for relation types between cases.'),
	userId: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
});

export const updateRelatedCaseResponseRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const updateRelatedCaseResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp (in milliseconds) of when the relation was created.',
			),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		etag: zod.string().optional().describe('Etag for the related case entity.'),
		id: zod
			.string()
			.optional()
			.describe('Unique identifier for the related case.'),
		primaryCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relatedCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relationType: zod
			.enum([
				'RELATION_TYPE_UNSPECIFIED',
				'DUPLICATES',
				'IS_DUPLICATED_BY',
				'BLOCKS',
				'IS_BLOCKED_BY',
				'CAUSES',
				'IS_CAUSED_BY',
				'IS_CHILD_OF',
				'IS_PARENT_OF',
				'RELATES_TO',
			])
			.default(updateRelatedCaseResponseRelationTypeDefault)
			.describe('Enum for relation types between cases.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe(
				'Version number of the related case, used for concurrency control.',
			),
	})
	.describe('Represents a related case with its relationship details.');

/**
 * @summary List all related cases for a specific case
 */
export const listRelatedCasesParams = zod.object({
	primary_case_etag: zod
		.string()
		.describe('Primary Case ID for which related cases are requested.'),
});

export const listRelatedCasesQueryParams = zod.object({
	page: zod.number().optional().describe('Page number for pagination.'),
	size: zod.number().optional().describe('Number of related cases per page.'),
	q: zod.string().optional().describe('Query string for search.'),
	sort: zod.string().optional().describe('Sorting order.'),
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to return for each related case.'),
	ids: zod.array(zod.string()).optional().describe('Filter by ids'),
});

export const listRelatedCasesResponseDataItemRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const listRelatedCasesResponse = zod
	.object({
		data: zod
			.array(
				zod
					.object({
						createdAt: zod
							.string()
							.optional()
							.describe(
								'Timestamp (in milliseconds) of when the relation was created.',
							),
						createdBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						etag: zod
							.string()
							.optional()
							.describe('Etag for the related case entity.'),
						id: zod
							.string()
							.optional()
							.describe('Unique identifier for the related case.'),
						primaryCase: zod
							.object({
								color: zod.string().optional(),
								etag: zod.string().optional(),
								id: zod.string().optional(),
								name: zod.string().optional(),
								subject: zod.string().optional(),
								ver: zod.number().optional(),
							})
							.optional()
							.describe(
								'RelatedCaseLookup is created specifically to include the subject field.',
							),
						relatedCase: zod
							.object({
								color: zod.string().optional(),
								etag: zod.string().optional(),
								id: zod.string().optional(),
								name: zod.string().optional(),
								subject: zod.string().optional(),
								ver: zod.number().optional(),
							})
							.optional()
							.describe(
								'RelatedCaseLookup is created specifically to include the subject field.',
							),
						relationType: zod
							.enum([
								'RELATION_TYPE_UNSPECIFIED',
								'DUPLICATES',
								'IS_DUPLICATED_BY',
								'BLOCKS',
								'IS_BLOCKED_BY',
								'CAUSES',
								'IS_CAUSED_BY',
								'IS_CHILD_OF',
								'IS_PARENT_OF',
								'RELATES_TO',
							])
							.default(listRelatedCasesResponseDataItemRelationTypeDefault)
							.describe('Enum for relation types between cases.'),
						updatedAt: zod
							.string()
							.optional()
							.describe('Timestamp (in milliseconds) of the last update.'),
						updatedBy: zod
							.object({
								id: zod.string().optional(),
								name: zod.string().optional(),
							})
							.optional(),
						ver: zod
							.number()
							.optional()
							.describe(
								'Version number of the related case, used for concurrency control.',
							),
					})
					.describe('Represents a related case with its relationship details.'),
			)
			.optional()
			.describe('List of related cases on the current page.'),
		next: zod
			.boolean()
			.optional()
			.describe('Flag to indicate if more pages are available.'),
		page: zod.string().optional().describe('Current page number.'),
	})
	.describe('Paginated list of related cases.');

/**
 * @summary Create a new related case
 */
export const createRelatedCaseParams = zod.object({
	primary_case_etag: zod.string().describe('Primary case details.'),
});

export const createRelatedCaseQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to include in the response.'),
});

export const createRelatedCaseBodyRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const createRelatedCaseBody = zod
	.object({
		relatedCase: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		relationType: zod
			.enum([
				'RELATION_TYPE_UNSPECIFIED',
				'DUPLICATES',
				'IS_DUPLICATED_BY',
				'BLOCKS',
				'IS_BLOCKED_BY',
				'CAUSES',
				'IS_CAUSED_BY',
				'IS_CHILD_OF',
				'IS_PARENT_OF',
				'RELATES_TO',
			])
			.default(createRelatedCaseBodyRelationTypeDefault)
			.describe('Enum for relation types between cases.'),
		userId: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
	})
	.describe('Input for creating a related case.');

export const createRelatedCaseResponseRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const createRelatedCaseResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp (in milliseconds) of when the relation was created.',
			),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		etag: zod.string().optional().describe('Etag for the related case entity.'),
		id: zod
			.string()
			.optional()
			.describe('Unique identifier for the related case.'),
		primaryCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relatedCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relationType: zod
			.enum([
				'RELATION_TYPE_UNSPECIFIED',
				'DUPLICATES',
				'IS_DUPLICATED_BY',
				'BLOCKS',
				'IS_BLOCKED_BY',
				'CAUSES',
				'IS_CAUSED_BY',
				'IS_CHILD_OF',
				'IS_PARENT_OF',
				'RELATES_TO',
			])
			.default(createRelatedCaseResponseRelationTypeDefault)
			.describe('Enum for relation types between cases.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe(
				'Version number of the related case, used for concurrency control.',
			),
	})
	.describe('Represents a related case with its relationship details.');

/**
 * @summary Delete a specific related case
 */
export const deleteRelatedCaseParams = zod.object({
	primary_case_etag: zod.string().describe('Etag or ID of the primary case'),
	etag: zod.string().describe('Identifier of the related case to delete.'),
});

export const deleteRelatedCaseResponseRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const deleteRelatedCaseResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp (in milliseconds) of when the relation was created.',
			),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		etag: zod.string().optional().describe('Etag for the related case entity.'),
		id: zod
			.string()
			.optional()
			.describe('Unique identifier for the related case.'),
		primaryCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relatedCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relationType: zod
			.enum([
				'RELATION_TYPE_UNSPECIFIED',
				'DUPLICATES',
				'IS_DUPLICATED_BY',
				'BLOCKS',
				'IS_BLOCKED_BY',
				'CAUSES',
				'IS_CAUSED_BY',
				'IS_CHILD_OF',
				'IS_PARENT_OF',
				'RELATES_TO',
			])
			.default(deleteRelatedCaseResponseRelationTypeDefault)
			.describe('Enum for relation types between cases.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe(
				'Version number of the related case, used for concurrency control.',
			),
	})
	.describe('Represents a related case with its relationship details.');

/**
 * @summary Retrieve a specific related case by ID
 */
export const locateRelatedCaseParams = zod.object({
	primary_case_etag: zod.string().describe('Primary case identifier.'),
	etag: zod.string().describe('Identifier of the related case.'),
});

export const locateRelatedCaseQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('Fields to return in the response.'),
});

export const locateRelatedCaseResponseRelationTypeDefault =
	'RELATION_TYPE_UNSPECIFIED';

export const locateRelatedCaseResponse = zod
	.object({
		createdAt: zod
			.string()
			.optional()
			.describe(
				'Timestamp (in milliseconds) of when the relation was created.',
			),
		createdBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		etag: zod.string().optional().describe('Etag for the related case entity.'),
		id: zod
			.string()
			.optional()
			.describe('Unique identifier for the related case.'),
		primaryCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relatedCase: zod
			.object({
				color: zod.string().optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				subject: zod.string().optional(),
				ver: zod.number().optional(),
			})
			.optional()
			.describe(
				'RelatedCaseLookup is created specifically to include the subject field.',
			),
		relationType: zod
			.enum([
				'RELATION_TYPE_UNSPECIFIED',
				'DUPLICATES',
				'IS_DUPLICATED_BY',
				'BLOCKS',
				'IS_BLOCKED_BY',
				'CAUSES',
				'IS_CAUSED_BY',
				'IS_CHILD_OF',
				'IS_PARENT_OF',
				'RELATES_TO',
			])
			.default(locateRelatedCaseResponseRelationTypeDefault)
			.describe('Enum for relation types between cases.'),
		updatedAt: zod
			.string()
			.optional()
			.describe('Timestamp (in milliseconds) of the last update.'),
		updatedBy: zod
			.object({
				id: zod.string().optional(),
				name: zod.string().optional(),
			})
			.optional(),
		ver: zod
			.number()
			.optional()
			.describe(
				'Version number of the related case, used for concurrency control.',
			),
	})
	.describe('Represents a related case with its relationship details.');
