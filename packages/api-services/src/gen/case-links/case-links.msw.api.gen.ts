/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type { CasesCaseLink, CasesCaseLinkList } from '.././_models';

export const getListLinksResponseMock = (
	overrideResponse: Partial<CasesCaseLinkList> = {},
): CasesCaseLinkList => ({
	items: faker.helpers.arrayElement([
		Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => ({
			author: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			createdAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			createdBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			updatedAt: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			updatedBy: faker.helpers.arrayElement([
				{
					id: faker.helpers.arrayElement([
						faker.number.int({ min: undefined, max: undefined }),
						undefined,
					]),
					name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
				},
				undefined,
			]),
			url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
			ver: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
		})),
		undefined,
	]),
	next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
	page: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getCreateLinkResponseMock = (
	overrideResponse: Partial<CasesCaseLink> = {},
): CasesCaseLink => ({
	author: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getDeleteLinkResponseMock = (
	overrideResponse: Partial<CasesCaseLink> = {},
): CasesCaseLink => ({
	author: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getLocateLinkResponseMock = (
	overrideResponse: Partial<CasesCaseLink> = {},
): CasesCaseLink => ({
	author: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateLink2ResponseMock = (
	overrideResponse: Partial<CasesCaseLink> = {},
): CasesCaseLink => ({
	author: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getUpdateLinkResponseMock = (
	overrideResponse: Partial<CasesCaseLink> = {},
): CasesCaseLink => ({
	author: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	createdAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	createdBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	etag: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	id: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	updatedAt: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	updatedBy: faker.helpers.arrayElement([
		{
			id: faker.helpers.arrayElement([
				faker.number.int({ min: undefined, max: undefined }),
				undefined,
			]),
			name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
		},
		undefined,
	]),
	url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
	ver: faker.helpers.arrayElement([
		faker.number.int({ min: undefined, max: undefined }),
		undefined,
	]),
	...overrideResponse,
});

export const getListLinksMockHandler = (
	overrideResponse?:
		| CasesCaseLinkList
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<CasesCaseLinkList> | CasesCaseLinkList),
) => {
	return http.get('*/cases/:caseEtag/links', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getListLinksResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getCreateLinkMockHandler = (
	overrideResponse?:
		| CasesCaseLink
		| ((
				info: Parameters<Parameters<typeof http.post>[1]>[0],
		  ) => Promise<CasesCaseLink> | CasesCaseLink),
) => {
	return http.post('*/cases/:caseEtag/links', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getCreateLinkResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getDeleteLinkMockHandler = (
	overrideResponse?:
		| CasesCaseLink
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<CasesCaseLink> | CasesCaseLink),
) => {
	return http.delete('*/cases/:caseEtag/links/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getDeleteLinkResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getLocateLinkMockHandler = (
	overrideResponse?:
		| CasesCaseLink
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<CasesCaseLink> | CasesCaseLink),
) => {
	return http.get('*/cases/:caseEtag/links/:etag', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getLocateLinkResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateLink2MockHandler = (
	overrideResponse?:
		| CasesCaseLink
		| ((
				info: Parameters<Parameters<typeof http.patch>[1]>[0],
		  ) => Promise<CasesCaseLink> | CasesCaseLink),
) => {
	return http.patch('*/cases/:caseEtag/links/input.etag}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateLink2ResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};

export const getUpdateLinkMockHandler = (
	overrideResponse?:
		| CasesCaseLink
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<CasesCaseLink> | CasesCaseLink),
) => {
	return http.put('*/cases/:caseEtag/links/input.etag}', async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === 'function'
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateLinkResponseMock(),
			),
			{ status: 200, headers: { 'Content-Type': 'application/json' } },
		);
	});
};
export const getCaseLinksMock = () => [
	getListLinksMockHandler(),
	getCreateLinkMockHandler(),
	getDeleteLinkMockHandler(),
	getLocateLinkMockHandler(),
	getUpdateLink2MockHandler(),
	getUpdateLinkMockHandler(),
];
