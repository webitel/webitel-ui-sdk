/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * service.proto
 * OpenAPI spec version: version not set
 */
import { z as zod } from 'zod';

/**
 * @summary With Case
 */
export const listLinksParams = zod.object({
	case_etag: zod.string(),
});

export const listLinksQueryParams = zod.object({
	page: zod.number().optional(),
	size: zod.number().optional(),
	q: zod.string().optional(),
	ids: zod.array(zod.string()).optional(),
	sort: zod.string().optional(),
	fields: zod.array(zod.string()).optional(),
});

export const listLinksResponse = zod.object({
	items: zod
		.array(
			zod.object({
				author: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				createdAt: zod.string().optional(),
				createdBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				etag: zod.string().optional(),
				id: zod.string().optional(),
				name: zod.string().optional(),
				updatedAt: zod.string().optional(),
				updatedBy: zod
					.object({
						id: zod.string().optional(),
						name: zod.string().optional(),
					})
					.optional(),
				url: zod.string().optional(),
				ver: zod.number().optional(),
			}),
		)
		.optional(),
	next: zod.boolean().optional(),
	page: zod.string().optional(),
});

export const createLinkParams = zod.object({
	case_etag: zod.string().describe('new comment link'),
});

export const createLinkQueryParams = zod.object({
	fields: zod
		.array(zod.string())
		.optional()
		.describe('result fields needed on the front-end for each comment'),
	inputEtag: zod.string().optional(),
	inputUrl: zod.string().optional(),
	inputName: zod.string().optional(),
});

export const createLinkResponse = zod.object({
	author: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	etag: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	url: zod.string().optional(),
	ver: zod.number().optional(),
});

export const deleteLinkParams = zod.object({
	case_etag: zod.string(),
	etag: zod.string(),
});

export const deleteLinkResponse = zod.object({
	author: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	etag: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	url: zod.string().optional(),
	ver: zod.number().optional(),
});

export const locateLinkParams = zod.object({
	case_etag: zod.string(),
	etag: zod.string().describe('(id allowed)'),
});

export const locateLinkQueryParams = zod.object({
	fields: zod.array(zod.string()).optional(),
});

export const locateLinkResponse = zod.object({
	author: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	etag: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	url: zod.string().optional(),
	ver: zod.number().optional(),
});

export const updateLink2Params = zod.object({
	case_etag: zod.string(),
	'input.etag': zod.string(),
});

export const updateLink2QueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('on return'),
});

export const updateLink2Body = zod.object({
	name: zod.string().optional(),
	url: zod.string().optional(),
});

export const updateLink2Response = zod.object({
	author: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	etag: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	url: zod.string().optional(),
	ver: zod.number().optional(),
});

export const updateLinkParams = zod.object({
	case_etag: zod.string(),
	'input.etag': zod.string(),
});

export const updateLinkQueryParams = zod.object({
	fields: zod.array(zod.string()).optional().describe('on return'),
});

export const updateLinkBody = zod.object({
	name: zod.string().optional(),
	url: zod.string().optional(),
});

export const updateLinkResponse = zod.object({
	author: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	createdAt: zod.string().optional(),
	createdBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	etag: zod.string().optional(),
	id: zod.string().optional(),
	name: zod.string().optional(),
	updatedAt: zod.string().optional(),
	updatedBy: zod
		.object({
			id: zod.string().optional(),
			name: zod.string().optional(),
		})
		.optional(),
	url: zod.string().optional(),
	ver: zod.number().optional(),
});
