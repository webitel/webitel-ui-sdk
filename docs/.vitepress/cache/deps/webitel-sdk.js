import {
  __commonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/url/node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
      function error(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.4.1",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x) {
      return x.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function(value) {
          setParts.push(inspect(value, obj));
        });
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          // eslint-disable-line no-param-reassign
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== "undefined") {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== "undefined") {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
          if (has.call(target, i)) {
            var targetItem = target[i];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format42) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format42 === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format42, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format42) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format42);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format42))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format42,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format42 = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format42 = opts.format;
      }
      var formatter = formats.formatters[format42];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format: format42,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse42 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse42,
      stringify
    };
  }
});

// node_modules/url/url.js
var require_url = __commonJS({
  "node_modules/url/url.js"(exports) {
    "use strict";
    var punycode = require_punycode();
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/;
    var delims = [
      "<",
      ">",
      '"',
      "`",
      " ",
      "\r",
      "\n",
      "	"
    ];
    var unwise = [
      "{",
      "}",
      "|",
      "\\",
      "^",
      "`"
    ].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = [
      "%",
      "/",
      "?",
      ";",
      "#"
    ].concat(autoEscape);
    var hostEndingChars = [
      "/",
      "?",
      "#"
    ];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      javascript: true,
      "javascript:": true
    };
    var hostlessProtocol = {
      javascript: true,
      "javascript:": true
    };
    var slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    var querystring = require_lib();
    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && typeof url === "object" && url instanceof Url) {
        return url;
      }
      var u = new Url();
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      if (typeof url !== "string") {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }
      var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, "/");
      url = uSplit.join(splitter);
      var rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = "";
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = "/" + notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== "/") {
            rest = "/" + rest;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1) {
            continue;
          }
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }
      var hash = rest.indexOf("#");
      if (hash !== -1) {
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        this.search = "";
        this.query = {};
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "/";
      }
      if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (typeof obj === "string") {
        obj = urlParse(obj);
      }
      if (!(obj instanceof Url)) {
        return Url.prototype.format.call(obj);
      }
      return obj.format();
    }
    Url.prototype.format = function() {
      var auth = this.auth || "";
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
      }
      var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) {
          host += ":" + this.port;
        }
      }
      if (this.query && typeof this.query === "object" && Object.keys(this.query).length) {
        query = querystring.stringify(this.query, {
          arrayFormat: "repeat",
          addQueryPrefix: false
        });
      }
      var search = this.search || query && "?" + query || "";
      if (protocol && protocol.substr(-1) !== ":") {
        protocol += ":";
      }
      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") {
          pathname = "/" + pathname;
        }
      } else if (!host) {
        host = "";
      }
      if (hash && hash.charAt(0) !== "#") {
        hash = "#" + hash;
      }
      if (search && search.charAt(0) !== "?") {
        search = "?" + search;
      }
      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace("#", "%23");
      return protocol + host + pathname + search + hash;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source) {
        return relative;
      }
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function(relative) {
      if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol") {
            result[rkey] = relative[rkey];
          }
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.pathname = "/";
          result.path = result.pathname;
        }
        result.href = result.format();
        return result;
      }
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift())) {
          }
          if (!relative.host) {
            relative.host = "";
          }
          if (!relative.hostname) {
            relative.hostname = "";
          }
          if (relPath[0] !== "") {
            relPath.unshift("");
          }
          if (relPath.length < 2) {
            relPath.unshift("");
          }
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "") {
            srcPath[0] = result.host;
          } else {
            srcPath.unshift(result.host);
          }
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "") {
              relPath[0] = relative.host;
            } else {
              relPath.unshift(relative.host);
            }
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath) {
          srcPath = [];
        }
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (relative.search != null) {
        if (psychotic) {
          result.host = srcPath.shift();
          result.hostname = result.host;
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (result.pathname !== null || result.search !== null) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.hostname = authInHost.shift();
          result.host = result.hostname;
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (srcPath.length > 0) {
        result.pathname = srcPath.join("/");
      } else {
        result.pathname = null;
        result.path = null;
      }
      if (result.pathname !== null || result.search !== null) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/axios/lib/core/AxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
      // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module.exports = AxiosError;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module) {
    "use strict";
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/axios/lib/helpers/toFormData.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module.exports = toFormData;
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/axios/lib/cancel/CanceledError.js"(exports, module) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils2();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module.exports = CanceledError;
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/axios/lib/helpers/parseProtocol.js"(exports, module) {
    "use strict";
    module.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/axios/lib/helpers/null.js"(exports, module) {
    module.exports = null;
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION2 = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version2, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION2 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version2 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version2 + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios2(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios2.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios2.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios2.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios2.prototype[method] = generateHTTPMethod();
      Axios2.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module.exports = Axios2;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var bind = require_bind();
    var Axios2 = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios2(defaultConfig);
      var instance = bind(Axios2.prototype.request, context);
      utils.extend(instance, Axios2.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios2;
    axios.CanceledError = require_CanceledError();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.toFormData = require_toFormData();
    axios.AxiosError = require_AxiosError();
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/ee-ts/lib/ee.js
var require_ee = __commonJS({
  "node_modules/ee-ts/lib/ee.js"(exports) {
    "use strict";
    var __generator2 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.$listeners = Symbol("EventEmitter.listeners");
    exports.$addListener = Symbol("EventEmitter.addListener");
    var EventEmitter6 = (
      /** @class */
      function() {
        function EventEmitter7() {
          this[exports.$listeners] = {};
        }
        EventEmitter7.count = function(ee, key) {
          var count = 0;
          var list = ee[exports.$listeners][key];
          if (list) {
            var cb = list.first;
            while (++count) {
              if (cb.next) {
                cb = cb.next;
              } else
                break;
            }
          }
          return count;
        };
        EventEmitter7.has = function(ee, key) {
          if (key == "*") {
            for (key in ee[exports.$listeners])
              return true;
            return false;
          }
          return ee[exports.$listeners][key] !== void 0;
        };
        EventEmitter7.keys = function(ee) {
          return Object.keys(ee[exports.$listeners]);
        };
        EventEmitter7.unhandle = function(ee, key, impl, disposables) {
          var listener = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (!ee[exports.$listeners][key].first.next)
              return impl.apply(void 0, args);
          };
          return ee.on(key, listener, disposables);
        };
        EventEmitter7.prototype.on = function(arg, fn, disposables) {
          if (typeof fn == "function") {
            return this[exports.$addListener](arg, fn, disposables);
          }
          return this[exports.$addListener](arg, void 0, fn);
        };
        EventEmitter7.prototype.one = function(arg, fn, disposables) {
          if (typeof fn == "function") {
            return this[exports.$addListener](arg, fn, disposables, true);
          }
          return this[exports.$addListener](arg, void 0, fn, true);
        };
        EventEmitter7.prototype.off = function(arg, fn) {
          if (arg == "*") {
            var cache = this[exports.$listeners];
            this[exports.$listeners] = {};
            if (this._onEventUnhandled) {
              for (var key in cache) {
                this._onEventUnhandled(key);
              }
            }
            return this;
          }
          if (typeof fn == "function") {
            var list = this[exports.$listeners][arg];
            if (list && unlink(list, function(l) {
              return l.fn == fn;
            })) {
              return this;
            }
          }
          delete this[exports.$listeners][arg];
          if (this._onEventUnhandled) {
            this._onEventUnhandled(arg);
          }
          return this;
        };
        EventEmitter7.prototype.emit = function(key) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          var result;
          var gen = this.listeners(key);
          while (true) {
            var _a = gen.next(), listener = _a.value, done = _a.done;
            if (done) {
              return result;
            } else {
              var generated = listener.apply(void 0, args);
              if (generated !== void 0) {
                result = generated;
              }
            }
          }
        };
        EventEmitter7.prototype.listeners = function(key) {
          var list, prev, curr;
          return __generator2(this, function(_a) {
            switch (_a.label) {
              case 0:
                list = this[exports.$listeners][key];
                if (!list)
                  return [
                    2
                    /*return*/
                  ];
                prev = null;
                curr = list.first;
                _a.label = 1;
              case 1:
                if (false)
                  return [3, 3];
                return [
                  4,
                  curr.fn
                  // One-time listener
                ];
              case 2:
                _a.sent();
                if (curr.once) {
                  if (prev) {
                    prev.next = curr.next;
                  } else if (curr.next) {
                    list.first = curr = curr.next;
                    return [3, 1];
                  } else {
                    delete this[exports.$listeners][key];
                    if (this._onEventUnhandled) {
                      this._onEventUnhandled(key);
                    }
                    return [
                      2
                      /*return*/
                    ];
                  }
                } else {
                  prev = curr;
                }
                if (curr.next) {
                  curr = curr.next;
                  return [3, 1];
                }
                list.last = curr;
                return [
                  2
                  /*return*/
                ];
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        };
        EventEmitter7.prototype[exports.$addListener] = function(arg, fn, disposables, once) {
          var _this = this;
          if (once === void 0) {
            once = false;
          }
          if (typeof arg == "object") {
            var key_1;
            var _loop_1 = function() {
              if (typeof arg[key_1] == "function") {
                var fn_1 = arg[key_1];
                var list2 = addListener(this_1[exports.$listeners], key_1, {
                  fn: fn_1,
                  once,
                  next: null
                });
                if (disposables) {
                  disposables.push({
                    dispose: function() {
                      return _this.off(key_1, fn_1);
                    }
                  });
                }
                if (fn_1 == list2.first.fn && this_1._onEventHandled) {
                  this_1._onEventHandled(key_1);
                }
              }
            };
            var this_1 = this;
            for (key_1 in arg) {
              _loop_1();
            }
            return this;
          }
          if (typeof fn == "function") {
            var key_2 = arg;
            var list = addListener(this[exports.$listeners], key_2, {
              fn,
              once,
              next: null
            });
            if (disposables) {
              disposables.push({
                dispose: function() {
                  return _this.off(key_2, fn);
                }
              });
            }
            if (fn == list.first.fn && this._onEventHandled) {
              this._onEventHandled(arg);
            }
          }
          return fn;
        };
        EventEmitter7.ev = exports.$listeners;
        return EventEmitter7;
      }()
    );
    exports.EventEmitter = EventEmitter6;
    function addListener(cache, key, cb) {
      var list = cache[key];
      if (list) {
        list.last.next = cb;
        list.last = cb;
      } else {
        cache[key] = list = { first: cb, last: cb };
      }
      return list;
    }
    function unlink(list, filter) {
      var prev = null;
      var curr = list.first;
      while (true) {
        if (filter(curr)) {
          if (prev) {
            prev.next = curr.next;
            if (curr.next) {
              curr = curr.next;
            } else
              break;
          } else if (curr.next) {
            list.first = curr = curr.next;
          } else {
            return null;
          }
        } else {
          prev = curr;
          if (curr.next) {
            curr = curr.next;
          } else
            break;
        }
      }
      list.last = prev;
      return list;
    }
  }
});

// node_modules/jssip/package.json
var require_package = __commonJS({
  "node_modules/jssip/package.json"(exports, module) {
    module.exports = {
      name: "jssip",
      title: "JsSIP",
      description: "the Javascript SIP library",
      version: "3.3.6",
      homepage: "https://jssip.net",
      author: "José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)",
      contributors: [
        "Iñaki Baz Castillo <ibc@aliax.net> (https://github.com/ibc)"
      ],
      main: "lib-es5/JsSIP.js",
      keywords: [
        "sip",
        "websocket",
        "webrtc",
        "node",
        "browser",
        "library"
      ],
      license: "MIT",
      repository: {
        type: "git",
        url: "https://github.com/versatica/JsSIP.git"
      },
      bugs: {
        url: "https://github.com/versatica/JsSIP/issues"
      },
      dependencies: {
        debug: "^4.1.1",
        events: "^3.0.0",
        "sdp-transform": "^2.7.0"
      },
      devDependencies: {
        "@babel/core": "^7.4.3",
        "@babel/preset-env": "^7.4.3",
        "ansi-colors": "^3.2.4",
        browserify: "^16.2.3",
        eslint: "^5.16.0",
        "fancy-log": "^1.3.3",
        gulp: "^4.0.0",
        "gulp-babel": "^8.0.0",
        "gulp-eslint": "^5.0.0",
        "gulp-expect-file": "^1.0.1",
        "gulp-header": "^2.0.7",
        "gulp-nodeunit-runner": "^0.2.2",
        "gulp-plumber": "^1.2.1",
        "gulp-rename": "^1.4.0",
        "gulp-uglify-es": "^1.0.4",
        pegjs: "^0.7.0",
        "vinyl-buffer": "^1.0.1",
        "vinyl-source-stream": "^2.0.0"
      },
      scripts: {
        lint: "gulp lint",
        test: "gulp test",
        prepublishOnly: "gulp babel"
      }
    };
  }
});

// node_modules/jssip/lib-es5/Constants.js
var require_Constants = __commonJS({
  "node_modules/jssip/lib-es5/Constants.js"(exports, module) {
    "use strict";
    var pkg = require_package();
    module.exports = {
      USER_AGENT: "".concat(pkg.title, " ").concat(pkg.version),
      // SIP scheme.
      SIP: "sip",
      SIPS: "sips",
      // End and Failure causes.
      causes: {
        // Generic error causes.
        CONNECTION_ERROR: "Connection Error",
        REQUEST_TIMEOUT: "Request Timeout",
        SIP_FAILURE_CODE: "SIP Failure Code",
        INTERNAL_ERROR: "Internal Error",
        // SIP error causes.
        BUSY: "Busy",
        REJECTED: "Rejected",
        REDIRECTED: "Redirected",
        UNAVAILABLE: "Unavailable",
        NOT_FOUND: "Not Found",
        ADDRESS_INCOMPLETE: "Address Incomplete",
        INCOMPATIBLE_SDP: "Incompatible SDP",
        MISSING_SDP: "Missing SDP",
        AUTHENTICATION_ERROR: "Authentication Error",
        // Session error causes.
        BYE: "Terminated",
        WEBRTC_ERROR: "WebRTC Error",
        CANCELED: "Canceled",
        NO_ANSWER: "No Answer",
        EXPIRES: "Expires",
        NO_ACK: "No ACK",
        DIALOG_ERROR: "Dialog Error",
        USER_DENIED_MEDIA_ACCESS: "User Denied Media Access",
        BAD_MEDIA_DESCRIPTION: "Bad Media Description",
        RTP_TIMEOUT: "RTP Timeout"
      },
      SIP_ERROR_CAUSES: {
        REDIRECTED: [300, 301, 302, 305, 380],
        BUSY: [486, 600],
        REJECTED: [403, 603],
        NOT_FOUND: [404, 604],
        UNAVAILABLE: [480, 410, 408, 430],
        ADDRESS_INCOMPLETE: [484, 424],
        INCOMPATIBLE_SDP: [488, 606],
        AUTHENTICATION_ERROR: [401, 407]
      },
      // SIP Methods.
      ACK: "ACK",
      BYE: "BYE",
      CANCEL: "CANCEL",
      INFO: "INFO",
      INVITE: "INVITE",
      MESSAGE: "MESSAGE",
      NOTIFY: "NOTIFY",
      OPTIONS: "OPTIONS",
      REGISTER: "REGISTER",
      REFER: "REFER",
      UPDATE: "UPDATE",
      SUBSCRIBE: "SUBSCRIBE",
      /* SIP Response Reasons
       * DOC: https://www.iana.org/assignments/sip-parameters
       * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7
       */
      REASON_PHRASE: {
        100: "Trying",
        180: "Ringing",
        181: "Call Is Being Forwarded",
        182: "Queued",
        183: "Session Progress",
        199: "Early Dialog Terminated",
        // draft-ietf-sipcore-199
        200: "OK",
        202: "Accepted",
        // RFC 3265
        204: "No Notification",
        // RFC 5839
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Moved Temporarily",
        305: "Use Proxy",
        380: "Alternative Service",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Timeout",
        410: "Gone",
        412: "Conditional Request Failed",
        // RFC 3903
        413: "Request Entity Too Large",
        414: "Request-URI Too Long",
        415: "Unsupported Media Type",
        416: "Unsupported URI Scheme",
        417: "Unknown Resource-Priority",
        // RFC 4412
        420: "Bad Extension",
        421: "Extension Required",
        422: "Session Interval Too Small",
        // RFC 4028
        423: "Interval Too Brief",
        424: "Bad Location Information",
        // RFC 6442
        428: "Use Identity Header",
        // RFC 4474
        429: "Provide Referrer Identity",
        // RFC 3892
        430: "Flow Failed",
        // RFC 5626
        433: "Anonymity Disallowed",
        // RFC 5079
        436: "Bad Identity-Info",
        // RFC 4474
        437: "Unsupported Certificate",
        // RFC 4744
        438: "Invalid Identity Header",
        // RFC 4744
        439: "First Hop Lacks Outbound Support",
        // RFC 5626
        440: "Max-Breadth Exceeded",
        // RFC 5393
        469: "Bad Info Package",
        // draft-ietf-sipcore-info-events
        470: "Consent Needed",
        // RFC 5360
        478: "Unresolvable Destination",
        // Custom code copied from Kamailio.
        480: "Temporarily Unavailable",
        481: "Call/Transaction Does Not Exist",
        482: "Loop Detected",
        483: "Too Many Hops",
        484: "Address Incomplete",
        485: "Ambiguous",
        486: "Busy Here",
        487: "Request Terminated",
        488: "Not Acceptable Here",
        489: "Bad Event",
        // RFC 3265
        491: "Request Pending",
        493: "Undecipherable",
        494: "Security Agreement Required",
        // RFC 3329
        500: "JsSIP Internal Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Server Time-out",
        505: "Version Not Supported",
        513: "Message Too Large",
        580: "Precondition Failure",
        // RFC 3312
        600: "Busy Everywhere",
        603: "Decline",
        604: "Does Not Exist Anywhere",
        606: "Not Acceptable"
      },
      ALLOWED_METHODS: "INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO",
      ACCEPTED_BODY_TYPES: "application/sdp, application/dtmf-relay",
      MAX_FORWARDS: 69,
      SESSION_EXPIRES: 90,
      MIN_SESSION_EXPIRES: 60
    };
  }
});

// node_modules/jssip/lib-es5/Exceptions.js
var require_Exceptions = __commonJS({
  "node_modules/jssip/lib-es5/Exceptions.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var ConfigurationError = function(_Error) {
      _inherits(ConfigurationError2, _Error);
      function ConfigurationError2(parameter, value) {
        var _this;
        _classCallCheck(this, ConfigurationError2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfigurationError2).call(this));
        _this.code = 1;
        _this.name = "CONFIGURATION_ERROR";
        _this.parameter = parameter;
        _this.value = value;
        _this.message = !_this.value ? "Missing parameter: ".concat(_this.parameter) : "Invalid value ".concat(JSON.stringify(_this.value), ' for parameter "').concat(_this.parameter, '"');
        return _this;
      }
      return ConfigurationError2;
    }(_wrapNativeSuper(Error));
    var InvalidStateError = function(_Error2) {
      _inherits(InvalidStateError2, _Error2);
      function InvalidStateError2(status) {
        var _this2;
        _classCallCheck(this, InvalidStateError2);
        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(InvalidStateError2).call(this));
        _this2.code = 2;
        _this2.name = "INVALID_STATE_ERROR";
        _this2.status = status;
        _this2.message = "Invalid status: ".concat(status);
        return _this2;
      }
      return InvalidStateError2;
    }(_wrapNativeSuper(Error));
    var NotSupportedError = function(_Error3) {
      _inherits(NotSupportedError2, _Error3);
      function NotSupportedError2(message) {
        var _this3;
        _classCallCheck(this, NotSupportedError2);
        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(NotSupportedError2).call(this));
        _this3.code = 3;
        _this3.name = "NOT_SUPPORTED_ERROR";
        _this3.message = message;
        return _this3;
      }
      return NotSupportedError2;
    }(_wrapNativeSuper(Error));
    var NotReadyError = function(_Error4) {
      _inherits(NotReadyError2, _Error4);
      function NotReadyError2(message) {
        var _this4;
        _classCallCheck(this, NotReadyError2);
        _this4 = _possibleConstructorReturn(this, _getPrototypeOf(NotReadyError2).call(this));
        _this4.code = 4;
        _this4.name = "NOT_READY_ERROR";
        _this4.message = message;
        return _this4;
      }
      return NotReadyError2;
    }(_wrapNativeSuper(Error));
    module.exports = {
      ConfigurationError,
      InvalidStateError,
      NotSupportedError,
      NotReadyError
    };
  }
});

// node_modules/jssip/lib-es5/NameAddrHeader.js
var require_NameAddrHeader = __commonJS({
  "node_modules/jssip/lib-es5/NameAddrHeader.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var URI = require_URI();
    var Grammar = require_Grammar();
    module.exports = function() {
      _createClass(NameAddrHeader, null, [{
        key: "parse",
        /**
         * Parse the given string and returns a NameAddrHeader instance or undefined if
         * it is an invalid NameAddrHeader.
         */
        value: function parse42(name_addr_header) {
          name_addr_header = Grammar.parse(name_addr_header, "Name_Addr_Header");
          if (name_addr_header !== -1) {
            return name_addr_header;
          } else {
            return void 0;
          }
        }
      }]);
      function NameAddrHeader(uri, display_name, parameters) {
        _classCallCheck(this, NameAddrHeader);
        if (!uri || !(uri instanceof URI)) {
          throw new TypeError('missing or invalid "uri" parameter');
        }
        this._uri = uri;
        this._parameters = {};
        this.display_name = display_name;
        for (var param in parameters) {
          if (Object.prototype.hasOwnProperty.call(parameters, param)) {
            this.setParam(param, parameters[param]);
          }
        }
      }
      _createClass(NameAddrHeader, [{
        key: "setParam",
        value: function setParam(key, value) {
          if (key) {
            this._parameters[key.toLowerCase()] = typeof value === "undefined" || value === null ? null : value.toString();
          }
        }
      }, {
        key: "getParam",
        value: function getParam(key) {
          if (key) {
            return this._parameters[key.toLowerCase()];
          }
        }
      }, {
        key: "hasParam",
        value: function hasParam(key) {
          if (key) {
            return this._parameters.hasOwnProperty(key.toLowerCase()) && true || false;
          }
        }
      }, {
        key: "deleteParam",
        value: function deleteParam(parameter) {
          parameter = parameter.toLowerCase();
          if (this._parameters.hasOwnProperty(parameter)) {
            var value = this._parameters[parameter];
            delete this._parameters[parameter];
            return value;
          }
        }
      }, {
        key: "clearParams",
        value: function clearParams() {
          this._parameters = {};
        }
      }, {
        key: "clone",
        value: function clone() {
          return new NameAddrHeader(this._uri.clone(), this._display_name, JSON.parse(JSON.stringify(this._parameters)));
        }
      }, {
        key: "_quote",
        value: function _quote(str) {
          return str.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
        }
      }, {
        key: "toString",
        value: function toString() {
          var body = this._display_name ? '"'.concat(this._quote(this._display_name), '" ') : "";
          body += "<".concat(this._uri.toString(), ">");
          for (var parameter in this._parameters) {
            if (Object.prototype.hasOwnProperty.call(this._parameters, parameter)) {
              body += ";".concat(parameter);
              if (this._parameters[parameter] !== null) {
                body += "=".concat(this._parameters[parameter]);
              }
            }
          }
          return body;
        }
      }, {
        key: "uri",
        get: function get() {
          return this._uri;
        }
      }, {
        key: "display_name",
        get: function get() {
          return this._display_name;
        },
        set: function set(value) {
          this._display_name = value === 0 ? "0" : value;
        }
      }]);
      return NameAddrHeader;
    }();
  }
});

// node_modules/jssip/lib-es5/Grammar.js
var require_Grammar = __commonJS({
  "node_modules/jssip/lib-es5/Grammar.js"(exports, module) {
    "use strict";
    module.exports = function() {
      function quote(s) {
        return '"' + s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape) + '"';
      }
      var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function parse42(input, startRule) {
          var parseFunctions = {
            "CRLF": parse_CRLF,
            "DIGIT": parse_DIGIT,
            "ALPHA": parse_ALPHA,
            "HEXDIG": parse_HEXDIG,
            "WSP": parse_WSP,
            "OCTET": parse_OCTET,
            "DQUOTE": parse_DQUOTE,
            "SP": parse_SP,
            "HTAB": parse_HTAB,
            "alphanum": parse_alphanum,
            "reserved": parse_reserved,
            "unreserved": parse_unreserved,
            "mark": parse_mark,
            "escaped": parse_escaped,
            "LWS": parse_LWS,
            "SWS": parse_SWS,
            "HCOLON": parse_HCOLON,
            "TEXT_UTF8_TRIM": parse_TEXT_UTF8_TRIM,
            "TEXT_UTF8char": parse_TEXT_UTF8char,
            "UTF8_NONASCII": parse_UTF8_NONASCII,
            "UTF8_CONT": parse_UTF8_CONT,
            "LHEX": parse_LHEX,
            "token": parse_token,
            "token_nodot": parse_token_nodot,
            "separators": parse_separators,
            "word": parse_word,
            "STAR": parse_STAR,
            "SLASH": parse_SLASH,
            "EQUAL": parse_EQUAL,
            "LPAREN": parse_LPAREN,
            "RPAREN": parse_RPAREN,
            "RAQUOT": parse_RAQUOT,
            "LAQUOT": parse_LAQUOT,
            "COMMA": parse_COMMA,
            "SEMI": parse_SEMI,
            "COLON": parse_COLON,
            "LDQUOT": parse_LDQUOT,
            "RDQUOT": parse_RDQUOT,
            "comment": parse_comment,
            "ctext": parse_ctext,
            "quoted_string": parse_quoted_string,
            "quoted_string_clean": parse_quoted_string_clean,
            "qdtext": parse_qdtext,
            "quoted_pair": parse_quoted_pair,
            "SIP_URI_noparams": parse_SIP_URI_noparams,
            "SIP_URI": parse_SIP_URI,
            "uri_scheme": parse_uri_scheme,
            "uri_scheme_sips": parse_uri_scheme_sips,
            "uri_scheme_sip": parse_uri_scheme_sip,
            "userinfo": parse_userinfo,
            "user": parse_user,
            "user_unreserved": parse_user_unreserved,
            "password": parse_password,
            "hostport": parse_hostport,
            "host": parse_host,
            "hostname": parse_hostname,
            "domainlabel": parse_domainlabel,
            "toplabel": parse_toplabel,
            "IPv6reference": parse_IPv6reference,
            "IPv6address": parse_IPv6address,
            "h16": parse_h16,
            "ls32": parse_ls32,
            "IPv4address": parse_IPv4address,
            "dec_octet": parse_dec_octet,
            "port": parse_port,
            "uri_parameters": parse_uri_parameters,
            "uri_parameter": parse_uri_parameter,
            "transport_param": parse_transport_param,
            "user_param": parse_user_param,
            "method_param": parse_method_param,
            "ttl_param": parse_ttl_param,
            "maddr_param": parse_maddr_param,
            "lr_param": parse_lr_param,
            "other_param": parse_other_param,
            "pname": parse_pname,
            "pvalue": parse_pvalue,
            "paramchar": parse_paramchar,
            "param_unreserved": parse_param_unreserved,
            "headers": parse_headers,
            "header": parse_header,
            "hname": parse_hname,
            "hvalue": parse_hvalue,
            "hnv_unreserved": parse_hnv_unreserved,
            "Request_Response": parse_Request_Response,
            "Request_Line": parse_Request_Line,
            "Request_URI": parse_Request_URI,
            "absoluteURI": parse_absoluteURI,
            "hier_part": parse_hier_part,
            "net_path": parse_net_path,
            "abs_path": parse_abs_path,
            "opaque_part": parse_opaque_part,
            "uric": parse_uric,
            "uric_no_slash": parse_uric_no_slash,
            "path_segments": parse_path_segments,
            "segment": parse_segment,
            "param": parse_param,
            "pchar": parse_pchar,
            "scheme": parse_scheme,
            "authority": parse_authority,
            "srvr": parse_srvr,
            "reg_name": parse_reg_name,
            "query": parse_query,
            "SIP_Version": parse_SIP_Version,
            "INVITEm": parse_INVITEm,
            "ACKm": parse_ACKm,
            "OPTIONSm": parse_OPTIONSm,
            "BYEm": parse_BYEm,
            "CANCELm": parse_CANCELm,
            "REGISTERm": parse_REGISTERm,
            "SUBSCRIBEm": parse_SUBSCRIBEm,
            "NOTIFYm": parse_NOTIFYm,
            "REFERm": parse_REFERm,
            "Method": parse_Method,
            "Status_Line": parse_Status_Line,
            "Status_Code": parse_Status_Code,
            "extension_code": parse_extension_code,
            "Reason_Phrase": parse_Reason_Phrase,
            "Allow_Events": parse_Allow_Events,
            "Call_ID": parse_Call_ID,
            "Contact": parse_Contact,
            "contact_param": parse_contact_param,
            "name_addr": parse_name_addr,
            "display_name": parse_display_name,
            "contact_params": parse_contact_params,
            "c_p_q": parse_c_p_q,
            "c_p_expires": parse_c_p_expires,
            "delta_seconds": parse_delta_seconds,
            "qvalue": parse_qvalue,
            "generic_param": parse_generic_param,
            "gen_value": parse_gen_value,
            "Content_Disposition": parse_Content_Disposition,
            "disp_type": parse_disp_type,
            "disp_param": parse_disp_param,
            "handling_param": parse_handling_param,
            "Content_Encoding": parse_Content_Encoding,
            "Content_Length": parse_Content_Length,
            "Content_Type": parse_Content_Type,
            "media_type": parse_media_type,
            "m_type": parse_m_type,
            "discrete_type": parse_discrete_type,
            "composite_type": parse_composite_type,
            "extension_token": parse_extension_token,
            "x_token": parse_x_token,
            "m_subtype": parse_m_subtype,
            "m_parameter": parse_m_parameter,
            "m_value": parse_m_value,
            "CSeq": parse_CSeq,
            "CSeq_value": parse_CSeq_value,
            "Expires": parse_Expires,
            "Event": parse_Event,
            "event_type": parse_event_type,
            "From": parse_From,
            "from_param": parse_from_param,
            "tag_param": parse_tag_param,
            "Max_Forwards": parse_Max_Forwards,
            "Min_Expires": parse_Min_Expires,
            "Name_Addr_Header": parse_Name_Addr_Header,
            "Proxy_Authenticate": parse_Proxy_Authenticate,
            "challenge": parse_challenge,
            "other_challenge": parse_other_challenge,
            "auth_param": parse_auth_param,
            "digest_cln": parse_digest_cln,
            "realm": parse_realm,
            "realm_value": parse_realm_value,
            "domain": parse_domain,
            "URI": parse_URI,
            "nonce": parse_nonce,
            "nonce_value": parse_nonce_value,
            "opaque": parse_opaque,
            "stale": parse_stale,
            "algorithm": parse_algorithm,
            "qop_options": parse_qop_options,
            "qop_value": parse_qop_value,
            "Proxy_Require": parse_Proxy_Require,
            "Record_Route": parse_Record_Route,
            "rec_route": parse_rec_route,
            "Reason": parse_Reason,
            "reason_param": parse_reason_param,
            "reason_cause": parse_reason_cause,
            "Require": parse_Require,
            "Route": parse_Route,
            "route_param": parse_route_param,
            "Subscription_State": parse_Subscription_State,
            "substate_value": parse_substate_value,
            "subexp_params": parse_subexp_params,
            "event_reason_value": parse_event_reason_value,
            "Subject": parse_Subject,
            "Supported": parse_Supported,
            "To": parse_To,
            "to_param": parse_to_param,
            "Via": parse_Via,
            "via_param": parse_via_param,
            "via_params": parse_via_params,
            "via_ttl": parse_via_ttl,
            "via_maddr": parse_via_maddr,
            "via_received": parse_via_received,
            "via_branch": parse_via_branch,
            "response_port": parse_response_port,
            "sent_protocol": parse_sent_protocol,
            "protocol_name": parse_protocol_name,
            "transport": parse_transport,
            "sent_by": parse_sent_by,
            "via_host": parse_via_host,
            "via_port": parse_via_port,
            "ttl": parse_ttl,
            "WWW_Authenticate": parse_WWW_Authenticate,
            "Session_Expires": parse_Session_Expires,
            "s_e_expires": parse_s_e_expires,
            "s_e_params": parse_s_e_params,
            "s_e_refresher": parse_s_e_refresher,
            "extension_header": parse_extension_header,
            "header_value": parse_header_value,
            "message_body": parse_message_body,
            "uuid_URI": parse_uuid_URI,
            "uuid": parse_uuid,
            "hex4": parse_hex4,
            "hex8": parse_hex8,
            "hex12": parse_hex12,
            "Refer_To": parse_Refer_To,
            "Replaces": parse_Replaces,
            "call_id": parse_call_id,
            "replaces_param": parse_replaces_param,
            "to_tag": parse_to_tag,
            "from_tag": parse_from_tag,
            "early_flag": parse_early_flag
          };
          if (startRule !== void 0) {
            if (parseFunctions[startRule] === void 0) {
              throw new Error("Invalid rule name: " + quote(startRule) + ".");
            }
          } else {
            startRule = "CRLF";
          }
          var pos = 0;
          var reportFailures = 0;
          var rightmostFailuresPos = 0;
          var rightmostFailuresExpected = [];
          function padLeft(input2, padding, length) {
            var result3 = input2;
            var padLength = length - input2.length;
            for (var i = 0; i < padLength; i++) {
              result3 = padding + result3;
            }
            return result3;
          }
          function escape2(ch) {
            var charCode = ch.charCodeAt(0);
            var escapeChar;
            var length;
            if (charCode <= 255) {
              escapeChar = "x";
              length = 2;
            } else {
              escapeChar = "u";
              length = 4;
            }
            return "\\" + escapeChar + padLeft(charCode.toString(16).toUpperCase(), "0", length);
          }
          function matchFailed(failure) {
            if (pos < rightmostFailuresPos) {
              return;
            }
            if (pos > rightmostFailuresPos) {
              rightmostFailuresPos = pos;
              rightmostFailuresExpected = [];
            }
            rightmostFailuresExpected.push(failure);
          }
          function parse_CRLF() {
            var result0;
            if (input.substr(pos, 2) === "\r\n") {
              result0 = "\r\n";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"\\r\\n"');
              }
            }
            return result0;
          }
          function parse_DIGIT() {
            var result0;
            if (/^[0-9]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            return result0;
          }
          function parse_ALPHA() {
            var result0;
            if (/^[a-zA-Z]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z]");
              }
            }
            return result0;
          }
          function parse_HEXDIG() {
            var result0;
            if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-fA-F]");
              }
            }
            return result0;
          }
          function parse_WSP() {
            var result0;
            result0 = parse_SP();
            if (result0 === null) {
              result0 = parse_HTAB();
            }
            return result0;
          }
          function parse_OCTET() {
            var result0;
            if (/^[\0-\xFF]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\0-\\xFF]");
              }
            }
            return result0;
          }
          function parse_DQUOTE() {
            var result0;
            if (/^["]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('["]');
              }
            }
            return result0;
          }
          function parse_SP() {
            var result0;
            if (input.charCodeAt(pos) === 32) {
              result0 = " ";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('" "');
              }
            }
            return result0;
          }
          function parse_HTAB() {
            var result0;
            if (input.charCodeAt(pos) === 9) {
              result0 = "	";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"\\t"');
              }
            }
            return result0;
          }
          function parse_alphanum() {
            var result0;
            if (/^[a-zA-Z0-9]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9]");
              }
            }
            return result0;
          }
          function parse_reserved() {
            var result0;
            if (input.charCodeAt(pos) === 59) {
              result0 = ";";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('";"');
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 47) {
                result0 = "/";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"/"');
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 63) {
                  result0 = "?";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"?"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 58) {
                    result0 = ":";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('":"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 64) {
                      result0 = "@";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"@"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 38) {
                        result0 = "&";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"&"');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 61) {
                          result0 = "=";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"="');
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result0 = "+";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('"+"');
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 36) {
                              result0 = "$";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed('"$"');
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 44) {
                                result0 = ",";
                                pos++;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed('","');
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_unreserved() {
            var result0;
            result0 = parse_alphanum();
            if (result0 === null) {
              result0 = parse_mark();
            }
            return result0;
          }
          function parse_mark() {
            var result0;
            if (input.charCodeAt(pos) === 45) {
              result0 = "-";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"-"');
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 95) {
                result0 = "_";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"_"');
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result0 = ".";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"."');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result0 = "!";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"!"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 126) {
                      result0 = "~";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"~"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result0 = "*";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"*"');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 39) {
                          result0 = "'";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed(`"'"`);
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 40) {
                            result0 = "(";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('"("');
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 41) {
                              result0 = ")";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed('")"');
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_escaped() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 37) {
              result0 = "%";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"%"');
              }
            }
            if (result0 !== null) {
              result1 = parse_HEXDIG();
              if (result1 !== null) {
                result22 = parse_HEXDIG();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, escaped) {
                return escaped.join("");
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_LWS() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            pos2 = pos;
            result0 = [];
            result1 = parse_WSP();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_WSP();
            }
            if (result0 !== null) {
              result1 = parse_CRLF();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result22 = parse_WSP();
              if (result22 !== null) {
                result1 = [];
                while (result22 !== null) {
                  result1.push(result22);
                  result22 = parse_WSP();
                }
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return " ";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_SWS() {
            var result0;
            result0 = parse_LWS();
            result0 = result0 !== null ? result0 : "";
            return result0;
          }
          function parse_HCOLON() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            result1 = parse_SP();
            if (result1 === null) {
              result1 = parse_HTAB();
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_SP();
              if (result1 === null) {
                result1 = parse_HTAB();
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return ":";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_TEXT_UTF8_TRIM() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result1 = parse_TEXT_UTF8char();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_TEXT_UTF8char();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = [];
              result3 = parse_LWS();
              while (result3 !== null) {
                result22.push(result3);
                result3 = parse_LWS();
              }
              if (result22 !== null) {
                result3 = parse_TEXT_UTF8char();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = [];
                result3 = parse_LWS();
                while (result3 !== null) {
                  result22.push(result3);
                  result3 = parse_LWS();
                }
                if (result22 !== null) {
                  result3 = parse_TEXT_UTF8char();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_TEXT_UTF8char() {
            var result0;
            if (/^[!-~]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[!-~]");
              }
            }
            if (result0 === null) {
              result0 = parse_UTF8_NONASCII();
            }
            return result0;
          }
          function parse_UTF8_NONASCII() {
            var result0;
            if (/^[\x80-\uFFFF]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\x80-\\uFFFF]");
              }
            }
            return result0;
          }
          function parse_UTF8_CONT() {
            var result0;
            if (/^[\x80-\xBF]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\x80-\\xBF]");
              }
            }
            return result0;
          }
          function parse_LHEX() {
            var result0;
            result0 = parse_DIGIT();
            if (result0 === null) {
              if (/^[a-f]/.test(input.charAt(pos))) {
                result0 = input.charAt(pos);
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-f]");
                }
              }
            }
            return result0;
          }
          function parse_token() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_alphanum();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"-"');
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result1 = ".";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"."');
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result1 = "!";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"!"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 37) {
                      result1 = "%";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"%"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"*"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 95) {
                          result1 = "_";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"_"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"+"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 96) {
                              result1 = "`";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"`"');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 39) {
                                result1 = "'";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed(`"'"`);
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 126) {
                                  result1 = "~";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('"~"');
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_alphanum();
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result1 = "-";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"-"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 46) {
                      result1 = ".";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"."');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 33) {
                        result1 = "!";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"!"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 37) {
                          result1 = "%";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"%"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 42) {
                            result1 = "*";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"*"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 95) {
                              result1 = "_";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"_"');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"+"');
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 96) {
                                  result1 = "`";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('"`"');
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 39) {
                                    result1 = "'";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed(`"'"`);
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 126) {
                                      result1 = "~";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed('"~"');
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_token_nodot() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_alphanum();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"-"');
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 33) {
                  result1 = "!";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"!"');
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 37) {
                    result1 = "%";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"%"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 42) {
                      result1 = "*";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"*"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 95) {
                        result1 = "_";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"_"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 43) {
                          result1 = "+";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"+"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 96) {
                            result1 = "`";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"`"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 39) {
                              result1 = "'";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed(`"'"`);
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 126) {
                                result1 = "~";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"~"');
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_alphanum();
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result1 = "-";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"-"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 33) {
                      result1 = "!";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"!"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 37) {
                        result1 = "%";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"%"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 42) {
                          result1 = "*";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"*"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 95) {
                            result1 = "_";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"_"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 43) {
                              result1 = "+";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"+"');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 96) {
                                result1 = "`";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"`"');
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 39) {
                                  result1 = "'";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed(`"'"`);
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 126) {
                                    result1 = "~";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('"~"');
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_separators() {
            var result0;
            if (input.charCodeAt(pos) === 40) {
              result0 = "(";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"("');
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 41) {
                result0 = ")";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('")"');
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 60) {
                  result0 = "<";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"<"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 62) {
                    result0 = ">";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('">"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 64) {
                      result0 = "@";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"@"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 44) {
                        result0 = ",";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('","');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 59) {
                          result0 = ";";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('";"');
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 58) {
                            result0 = ":";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('":"');
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 92) {
                              result0 = "\\";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed('"\\\\"');
                              }
                            }
                            if (result0 === null) {
                              result0 = parse_DQUOTE();
                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 47) {
                                  result0 = "/";
                                  pos++;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('"/"');
                                  }
                                }
                                if (result0 === null) {
                                  if (input.charCodeAt(pos) === 91) {
                                    result0 = "[";
                                    pos++;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('"["');
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos) === 93) {
                                      result0 = "]";
                                      pos++;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed('"]"');
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos) === 63) {
                                        result0 = "?";
                                        pos++;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('"?"');
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.charCodeAt(pos) === 61) {
                                          result0 = "=";
                                          pos++;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed('"="');
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.charCodeAt(pos) === 123) {
                                            result0 = "{";
                                            pos++;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('"{"');
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.charCodeAt(pos) === 125) {
                                              result0 = "}";
                                              pos++;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed('"}"');
                                              }
                                            }
                                            if (result0 === null) {
                                              result0 = parse_SP();
                                              if (result0 === null) {
                                                result0 = parse_HTAB();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_word() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_alphanum();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"-"');
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result1 = ".";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"."');
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result1 = "!";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"!"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 37) {
                      result1 = "%";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"%"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"*"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 95) {
                          result1 = "_";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"_"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"+"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 96) {
                              result1 = "`";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"`"');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 39) {
                                result1 = "'";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed(`"'"`);
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 126) {
                                  result1 = "~";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('"~"');
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 40) {
                                    result1 = "(";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('"("');
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 41) {
                                      result1 = ")";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed('")"');
                                      }
                                    }
                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 60) {
                                        result1 = "<";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('"<"');
                                        }
                                      }
                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 62) {
                                          result1 = ">";
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed('">"');
                                          }
                                        }
                                        if (result1 === null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result1 = ":";
                                            pos++;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 92) {
                                              result1 = "\\";
                                              pos++;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed('"\\\\"');
                                              }
                                            }
                                            if (result1 === null) {
                                              result1 = parse_DQUOTE();
                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 47) {
                                                  result1 = "/";
                                                  pos++;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed('"/"');
                                                  }
                                                }
                                                if (result1 === null) {
                                                  if (input.charCodeAt(pos) === 91) {
                                                    result1 = "[";
                                                    pos++;
                                                  } else {
                                                    result1 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed('"["');
                                                    }
                                                  }
                                                  if (result1 === null) {
                                                    if (input.charCodeAt(pos) === 93) {
                                                      result1 = "]";
                                                      pos++;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed('"]"');
                                                      }
                                                    }
                                                    if (result1 === null) {
                                                      if (input.charCodeAt(pos) === 63) {
                                                        result1 = "?";
                                                        pos++;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed('"?"');
                                                        }
                                                      }
                                                      if (result1 === null) {
                                                        if (input.charCodeAt(pos) === 123) {
                                                          result1 = "{";
                                                          pos++;
                                                        } else {
                                                          result1 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed('"{"');
                                                          }
                                                        }
                                                        if (result1 === null) {
                                                          if (input.charCodeAt(pos) === 125) {
                                                            result1 = "}";
                                                            pos++;
                                                          } else {
                                                            result1 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed('"}"');
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_alphanum();
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result1 = "-";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"-"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 46) {
                      result1 = ".";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"."');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 33) {
                        result1 = "!";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"!"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 37) {
                          result1 = "%";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"%"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 42) {
                            result1 = "*";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"*"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 95) {
                              result1 = "_";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"_"');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"+"');
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 96) {
                                  result1 = "`";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('"`"');
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 39) {
                                    result1 = "'";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed(`"'"`);
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 126) {
                                      result1 = "~";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed('"~"');
                                      }
                                    }
                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 40) {
                                        result1 = "(";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('"("');
                                        }
                                      }
                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 41) {
                                          result1 = ")";
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed('")"');
                                          }
                                        }
                                        if (result1 === null) {
                                          if (input.charCodeAt(pos) === 60) {
                                            result1 = "<";
                                            pos++;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('"<"');
                                            }
                                          }
                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 62) {
                                              result1 = ">";
                                              pos++;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed('">"');
                                              }
                                            }
                                            if (result1 === null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result1 = ":";
                                                pos++;
                                              } else {
                                                result1 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 92) {
                                                  result1 = "\\";
                                                  pos++;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed('"\\\\"');
                                                  }
                                                }
                                                if (result1 === null) {
                                                  result1 = parse_DQUOTE();
                                                  if (result1 === null) {
                                                    if (input.charCodeAt(pos) === 47) {
                                                      result1 = "/";
                                                      pos++;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed('"/"');
                                                      }
                                                    }
                                                    if (result1 === null) {
                                                      if (input.charCodeAt(pos) === 91) {
                                                        result1 = "[";
                                                        pos++;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed('"["');
                                                        }
                                                      }
                                                      if (result1 === null) {
                                                        if (input.charCodeAt(pos) === 93) {
                                                          result1 = "]";
                                                          pos++;
                                                        } else {
                                                          result1 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed('"]"');
                                                          }
                                                        }
                                                        if (result1 === null) {
                                                          if (input.charCodeAt(pos) === 63) {
                                                            result1 = "?";
                                                            pos++;
                                                          } else {
                                                            result1 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed('"?"');
                                                            }
                                                          }
                                                          if (result1 === null) {
                                                            if (input.charCodeAt(pos) === 123) {
                                                              result1 = "{";
                                                              pos++;
                                                            } else {
                                                              result1 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed('"{"');
                                                              }
                                                            }
                                                            if (result1 === null) {
                                                              if (input.charCodeAt(pos) === 125) {
                                                                result1 = "}";
                                                                pos++;
                                                              } else {
                                                                result1 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed('"}"');
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_STAR() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 42) {
                result1 = "*";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"*"');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return "*";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_SLASH() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 47) {
                result1 = "/";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"/"');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return "/";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_EQUAL() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"="');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return "=";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_LPAREN() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 40) {
                result1 = "(";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"("');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return "(";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_RPAREN() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result1 = ")";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('")"');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return ")";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_RAQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 62) {
              result0 = ">";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('">"');
              }
            }
            if (result0 !== null) {
              result1 = parse_SWS();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return ">";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_LAQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 60) {
                result1 = "<";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"<"');
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return "<";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_COMMA() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 44) {
                result1 = ",";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('","');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return ",";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_SEMI() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 59) {
                result1 = ";";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('";"');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return ";";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_COLON() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_SWS();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return ":";
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_LDQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              result1 = parse_DQUOTE();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return '"';
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_RDQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DQUOTE();
            if (result0 !== null) {
              result1 = parse_SWS();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return '"';
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_comment() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_LPAREN();
            if (result0 !== null) {
              result1 = [];
              result22 = parse_ctext();
              if (result22 === null) {
                result22 = parse_quoted_pair();
                if (result22 === null) {
                  result22 = parse_comment();
                }
              }
              while (result22 !== null) {
                result1.push(result22);
                result22 = parse_ctext();
                if (result22 === null) {
                  result22 = parse_quoted_pair();
                  if (result22 === null) {
                    result22 = parse_comment();
                  }
                }
              }
              if (result1 !== null) {
                result22 = parse_RPAREN();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_ctext() {
            var result0;
            if (/^[!-']/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[!-']");
              }
            }
            if (result0 === null) {
              if (/^[*-[]/.test(input.charAt(pos))) {
                result0 = input.charAt(pos);
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[*-[]");
                }
              }
              if (result0 === null) {
                if (/^[\]-~]/.test(input.charAt(pos))) {
                  result0 = input.charAt(pos);
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\]-~]");
                  }
                }
                if (result0 === null) {
                  result0 = parse_UTF8_NONASCII();
                  if (result0 === null) {
                    result0 = parse_LWS();
                  }
                }
              }
            }
            return result0;
          }
          function parse_quoted_string() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              result1 = parse_DQUOTE();
              if (result1 !== null) {
                result22 = [];
                result3 = parse_qdtext();
                if (result3 === null) {
                  result3 = parse_quoted_pair();
                }
                while (result3 !== null) {
                  result22.push(result3);
                  result3 = parse_qdtext();
                  if (result3 === null) {
                    result3 = parse_quoted_pair();
                  }
                }
                if (result22 !== null) {
                  result3 = parse_DQUOTE();
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_quoted_string_clean() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();
            if (result0 !== null) {
              result1 = parse_DQUOTE();
              if (result1 !== null) {
                result22 = [];
                result3 = parse_qdtext();
                if (result3 === null) {
                  result3 = parse_quoted_pair();
                }
                while (result3 !== null) {
                  result22.push(result3);
                  result3 = parse_qdtext();
                  if (result3 === null) {
                    result3 = parse_quoted_pair();
                  }
                }
                if (result22 !== null) {
                  result3 = parse_DQUOTE();
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var trimmed = input.substring(pos, offset2).trim();
                return trimmed.substring(1, trimmed.length - 1).replace(/\\([\x00-\x09\x0b-\x0c\x0e-\x7f])/g, "$1");
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_qdtext() {
            var result0;
            result0 = parse_LWS();
            if (result0 === null) {
              if (input.charCodeAt(pos) === 33) {
                result0 = "!";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"!"');
                }
              }
              if (result0 === null) {
                if (/^[#-[]/.test(input.charAt(pos))) {
                  result0 = input.charAt(pos);
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("[#-[]");
                  }
                }
                if (result0 === null) {
                  if (/^[\]-~]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\]-~]");
                    }
                  }
                  if (result0 === null) {
                    result0 = parse_UTF8_NONASCII();
                  }
                }
              }
            }
            return result0;
          }
          function parse_quoted_pair() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"\\\\"');
              }
            }
            if (result0 !== null) {
              if (/^[\0-\t]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\0-\\t]");
                }
              }
              if (result1 === null) {
                if (/^[\x0B-\f]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\x0B-\\f]");
                  }
                }
                if (result1 === null) {
                  if (/^[\x0E-]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\x0E-]");
                    }
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_SIP_URI_noparams() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_uri_scheme();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_userinfo();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result3 = parse_hostport();
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                try {
                  data.uri = new URI(data.scheme, data.user, data.host, data.port);
                  delete data.scheme;
                  delete data.user;
                  delete data.host;
                  delete data.host_type;
                  delete data.port;
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_SIP_URI() {
            var result0, result1, result22, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_uri_scheme();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_userinfo();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result3 = parse_hostport();
                  if (result3 !== null) {
                    result4 = parse_uri_parameters();
                    if (result4 !== null) {
                      result5 = parse_headers();
                      result5 = result5 !== null ? result5 : "";
                      if (result5 !== null) {
                        result0 = [result0, result1, result22, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var header;
                try {
                  data.uri = new URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);
                  delete data.scheme;
                  delete data.user;
                  delete data.host;
                  delete data.host_type;
                  delete data.port;
                  delete data.uri_params;
                  if (startRule === "SIP_URI") {
                    data = data.uri;
                  }
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_uri_scheme() {
            var result0;
            result0 = parse_uri_scheme_sips();
            if (result0 === null) {
              result0 = parse_uri_scheme_sip();
            }
            return result0;
          }
          function parse_uri_scheme_sips() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 4).toLowerCase() === "sips") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"sips"');
              }
            }
            if (result0 !== null) {
              result0 = function(offset2, scheme) {
                data.scheme = scheme.toLowerCase();
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_uri_scheme_sip() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"sip"');
              }
            }
            if (result0 !== null) {
              result0 = function(offset2, scheme) {
                data.scheme = scheme.toLowerCase();
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_userinfo() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_user();
            if (result0 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_password();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 64) {
                  result22 = "@";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"@"');
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.user = decodeURIComponent(input.substring(pos - 1, offset2));
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_user() {
            var result0, result1;
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
              if (result1 === null) {
                result1 = parse_user_unreserved();
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_unreserved();
                if (result1 === null) {
                  result1 = parse_escaped();
                  if (result1 === null) {
                    result1 = parse_user_unreserved();
                  }
                }
              }
            } else {
              result0 = null;
            }
            return result0;
          }
          function parse_user_unreserved() {
            var result0;
            if (input.charCodeAt(pos) === 38) {
              result0 = "&";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"&"');
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 61) {
                result0 = "=";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"="');
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 43) {
                  result0 = "+";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"+"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 36) {
                    result0 = "$";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"$"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 44) {
                      result0 = ",";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('","');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 59) {
                        result0 = ";";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('";"');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 63) {
                          result0 = "?";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"?"');
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 47) {
                            result0 = "/";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('"/"');
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_password() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result0 = [];
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
              if (result1 === null) {
                if (input.charCodeAt(pos) === 38) {
                  result1 = "&";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"&"');
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 61) {
                    result1 = "=";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"="');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 43) {
                      result1 = "+";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"+"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 36) {
                        result1 = "$";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"$"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 44) {
                          result1 = ",";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('","');
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_unreserved();
              if (result1 === null) {
                result1 = parse_escaped();
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 38) {
                    result1 = "&";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"&"');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 61) {
                      result1 = "=";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"="');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result1 = "+";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('"+"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result1 = "$";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"$"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 44) {
                            result1 = ",";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('","');
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.password = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_hostport() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_host();
            if (result0 !== null) {
              pos1 = pos;
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_port();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_host() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_hostname();
            if (result0 === null) {
              result0 = parse_IPv4address();
              if (result0 === null) {
                result0 = parse_IPv6reference();
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.host = input.substring(pos, offset2).toLowerCase();
                return data.host;
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_hostname() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            pos2 = pos;
            result1 = parse_domainlabel();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result22 = ".";
                pos++;
              } else {
                result22 = null;
                if (reportFailures === 0) {
                  matchFailed('"."');
                }
              }
              if (result22 !== null) {
                result1 = [result1, result22];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            while (result1 !== null) {
              result0.push(result1);
              pos2 = pos;
              result1 = parse_domainlabel();
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 46) {
                  result22 = ".";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"."');
                  }
                }
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            }
            if (result0 !== null) {
              result1 = parse_toplabel();
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 46) {
                  result22 = ".";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"."');
                  }
                }
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.host_type = "domain";
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_domainlabel() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_alphanum();
            if (result0 !== null) {
              result1 = [];
              result22 = parse_alphanum();
              if (result22 === null) {
                if (input.charCodeAt(pos) === 45) {
                  result22 = "-";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"-"');
                  }
                }
                if (result22 === null) {
                  if (input.charCodeAt(pos) === 95) {
                    result22 = "_";
                    pos++;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"_"');
                    }
                  }
                }
              }
              while (result22 !== null) {
                result1.push(result22);
                result22 = parse_alphanum();
                if (result22 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result22 = "-";
                    pos++;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"-"');
                    }
                  }
                  if (result22 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result22 = "_";
                      pos++;
                    } else {
                      result22 = null;
                      if (reportFailures === 0) {
                        matchFailed('"_"');
                      }
                    }
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_toplabel() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_ALPHA();
            if (result0 !== null) {
              result1 = [];
              result22 = parse_alphanum();
              if (result22 === null) {
                if (input.charCodeAt(pos) === 45) {
                  result22 = "-";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"-"');
                  }
                }
                if (result22 === null) {
                  if (input.charCodeAt(pos) === 95) {
                    result22 = "_";
                    pos++;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"_"');
                    }
                  }
                }
              }
              while (result22 !== null) {
                result1.push(result22);
                result22 = parse_alphanum();
                if (result22 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result22 = "-";
                    pos++;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"-"');
                    }
                  }
                  if (result22 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result22 = "_";
                      pos++;
                    } else {
                      result22 = null;
                      if (reportFailures === 0) {
                        matchFailed('"_"');
                      }
                    }
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_IPv6reference() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"["');
              }
            }
            if (result0 !== null) {
              result1 = parse_IPv6address();
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 93) {
                  result22 = "]";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"]"');
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.host_type = "IPv6";
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_IPv6address() {
            var result0, result1, result22, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_h16();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_h16();
                if (result22 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result3 = ":";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed('":"');
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_h16();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result5 = ":";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed('":"');
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse_h16();
                        if (result6 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result7 = ":";
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed('":"');
                            }
                          }
                          if (result7 !== null) {
                            result8 = parse_h16();
                            if (result8 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result9 = ":";
                                pos++;
                              } else {
                                result9 = null;
                                if (reportFailures === 0) {
                                  matchFailed('":"');
                                }
                              }
                              if (result9 !== null) {
                                result10 = parse_h16();
                                if (result10 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result11 = ":";
                                    pos++;
                                  } else {
                                    result11 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('":"');
                                    }
                                  }
                                  if (result11 !== null) {
                                    result12 = parse_ls32();
                                    if (result12 !== null) {
                                      result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 === null) {
              pos1 = pos;
              if (input.substr(pos, 2) === "::") {
                result0 = "::";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"::"');
                }
              }
              if (result0 !== null) {
                result1 = parse_h16();
                if (result1 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result22 = ":";
                    pos++;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('":"');
                    }
                  }
                  if (result22 !== null) {
                    result3 = parse_h16();
                    if (result3 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result4 = ":";
                        pos++;
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed('":"');
                        }
                      }
                      if (result4 !== null) {
                        result5 = parse_h16();
                        if (result5 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result6 = ":";
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed('":"');
                            }
                          }
                          if (result6 !== null) {
                            result7 = parse_h16();
                            if (result7 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result8 = ":";
                                pos++;
                              } else {
                                result8 = null;
                                if (reportFailures === 0) {
                                  matchFailed('":"');
                                }
                              }
                              if (result8 !== null) {
                                result9 = parse_h16();
                                if (result9 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result10 = ":";
                                    pos++;
                                  } else {
                                    result10 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('":"');
                                    }
                                  }
                                  if (result10 !== null) {
                                    result11 = parse_ls32();
                                    if (result11 !== null) {
                                      result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 === null) {
                pos1 = pos;
                if (input.substr(pos, 2) === "::") {
                  result0 = "::";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"::"');
                  }
                }
                if (result0 !== null) {
                  result1 = parse_h16();
                  if (result1 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      result22 = ":";
                      pos++;
                    } else {
                      result22 = null;
                      if (reportFailures === 0) {
                        matchFailed('":"');
                      }
                    }
                    if (result22 !== null) {
                      result3 = parse_h16();
                      if (result3 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result4 = ":";
                          pos++;
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed('":"');
                          }
                        }
                        if (result4 !== null) {
                          result5 = parse_h16();
                          if (result5 !== null) {
                            if (input.charCodeAt(pos) === 58) {
                              result6 = ":";
                              pos++;
                            } else {
                              result6 = null;
                              if (reportFailures === 0) {
                                matchFailed('":"');
                              }
                            }
                            if (result6 !== null) {
                              result7 = parse_h16();
                              if (result7 !== null) {
                                if (input.charCodeAt(pos) === 58) {
                                  result8 = ":";
                                  pos++;
                                } else {
                                  result8 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('":"');
                                  }
                                }
                                if (result8 !== null) {
                                  result9 = parse_ls32();
                                  if (result9 !== null) {
                                    result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8, result9];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 === null) {
                  pos1 = pos;
                  if (input.substr(pos, 2) === "::") {
                    result0 = "::";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"::"');
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_h16();
                    if (result1 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result22 = ":";
                        pos++;
                      } else {
                        result22 = null;
                        if (reportFailures === 0) {
                          matchFailed('":"');
                        }
                      }
                      if (result22 !== null) {
                        result3 = parse_h16();
                        if (result3 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result4 = ":";
                            pos++;
                          } else {
                            result4 = null;
                            if (reportFailures === 0) {
                              matchFailed('":"');
                            }
                          }
                          if (result4 !== null) {
                            result5 = parse_h16();
                            if (result5 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result6 = ":";
                                pos++;
                              } else {
                                result6 = null;
                                if (reportFailures === 0) {
                                  matchFailed('":"');
                                }
                              }
                              if (result6 !== null) {
                                result7 = parse_ls32();
                                if (result7 !== null) {
                                  result0 = [result0, result1, result22, result3, result4, result5, result6, result7];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 === null) {
                    pos1 = pos;
                    if (input.substr(pos, 2) === "::") {
                      result0 = "::";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"::"');
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_h16();
                      if (result1 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result22 = ":";
                          pos++;
                        } else {
                          result22 = null;
                          if (reportFailures === 0) {
                            matchFailed('":"');
                          }
                        }
                        if (result22 !== null) {
                          result3 = parse_h16();
                          if (result3 !== null) {
                            if (input.charCodeAt(pos) === 58) {
                              result4 = ":";
                              pos++;
                            } else {
                              result4 = null;
                              if (reportFailures === 0) {
                                matchFailed('":"');
                              }
                            }
                            if (result4 !== null) {
                              result5 = parse_ls32();
                              if (result5 !== null) {
                                result0 = [result0, result1, result22, result3, result4, result5];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 === null) {
                      pos1 = pos;
                      if (input.substr(pos, 2) === "::") {
                        result0 = "::";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"::"');
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse_h16();
                        if (result1 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result22 = ":";
                            pos++;
                          } else {
                            result22 = null;
                            if (reportFailures === 0) {
                              matchFailed('":"');
                            }
                          }
                          if (result22 !== null) {
                            result3 = parse_ls32();
                            if (result3 !== null) {
                              result0 = [result0, result1, result22, result3];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 === null) {
                        pos1 = pos;
                        if (input.substr(pos, 2) === "::") {
                          result0 = "::";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"::"');
                          }
                        }
                        if (result0 !== null) {
                          result1 = parse_ls32();
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 === null) {
                          pos1 = pos;
                          if (input.substr(pos, 2) === "::") {
                            result0 = "::";
                            pos += 2;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('"::"');
                            }
                          }
                          if (result0 !== null) {
                            result1 = parse_h16();
                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 === null) {
                            pos1 = pos;
                            result0 = parse_h16();
                            if (result0 !== null) {
                              if (input.substr(pos, 2) === "::") {
                                result1 = "::";
                                pos += 2;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"::"');
                                }
                              }
                              if (result1 !== null) {
                                result22 = parse_h16();
                                if (result22 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result3 = ":";
                                    pos++;
                                  } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('":"');
                                    }
                                  }
                                  if (result3 !== null) {
                                    result4 = parse_h16();
                                    if (result4 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result5 = ":";
                                        pos++;
                                      } else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('":"');
                                        }
                                      }
                                      if (result5 !== null) {
                                        result6 = parse_h16();
                                        if (result6 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result7 = ":";
                                            pos++;
                                          } else {
                                            result7 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result7 !== null) {
                                            result8 = parse_h16();
                                            if (result8 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result9 = ":";
                                                pos++;
                                              } else {
                                                result9 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result9 !== null) {
                                                result10 = parse_ls32();
                                                if (result10 !== null) {
                                                  result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8, result9, result10];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 === null) {
                              pos1 = pos;
                              result0 = parse_h16();
                              if (result0 !== null) {
                                pos2 = pos;
                                if (input.charCodeAt(pos) === 58) {
                                  result1 = ":";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('":"');
                                  }
                                }
                                if (result1 !== null) {
                                  result22 = parse_h16();
                                  if (result22 !== null) {
                                    result1 = [result1, result22];
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                                result1 = result1 !== null ? result1 : "";
                                if (result1 !== null) {
                                  if (input.substr(pos, 2) === "::") {
                                    result22 = "::";
                                    pos += 2;
                                  } else {
                                    result22 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('"::"');
                                    }
                                  }
                                  if (result22 !== null) {
                                    result3 = parse_h16();
                                    if (result3 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result4 = ":";
                                        pos++;
                                      } else {
                                        result4 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('":"');
                                        }
                                      }
                                      if (result4 !== null) {
                                        result5 = parse_h16();
                                        if (result5 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result6 = ":";
                                            pos++;
                                          } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result6 !== null) {
                                            result7 = parse_h16();
                                            if (result7 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result8 = ":";
                                                pos++;
                                              } else {
                                                result8 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result8 !== null) {
                                                result9 = parse_ls32();
                                                if (result9 !== null) {
                                                  result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8, result9];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 === null) {
                                pos1 = pos;
                                result0 = parse_h16();
                                if (result0 !== null) {
                                  pos2 = pos;
                                  if (input.charCodeAt(pos) === 58) {
                                    result1 = ":";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('":"');
                                    }
                                  }
                                  if (result1 !== null) {
                                    result22 = parse_h16();
                                    if (result22 !== null) {
                                      result1 = [result1, result22];
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                  result1 = result1 !== null ? result1 : "";
                                  if (result1 !== null) {
                                    pos2 = pos;
                                    if (input.charCodeAt(pos) === 58) {
                                      result22 = ":";
                                      pos++;
                                    } else {
                                      result22 = null;
                                      if (reportFailures === 0) {
                                        matchFailed('":"');
                                      }
                                    }
                                    if (result22 !== null) {
                                      result3 = parse_h16();
                                      if (result3 !== null) {
                                        result22 = [result22, result3];
                                      } else {
                                        result22 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result22 = null;
                                      pos = pos2;
                                    }
                                    result22 = result22 !== null ? result22 : "";
                                    if (result22 !== null) {
                                      if (input.substr(pos, 2) === "::") {
                                        result3 = "::";
                                        pos += 2;
                                      } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('"::"');
                                        }
                                      }
                                      if (result3 !== null) {
                                        result4 = parse_h16();
                                        if (result4 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result5 = ":";
                                            pos++;
                                          } else {
                                            result5 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result5 !== null) {
                                            result6 = parse_h16();
                                            if (result6 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result7 = ":";
                                                pos++;
                                              } else {
                                                result7 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result7 !== null) {
                                                result8 = parse_ls32();
                                                if (result8 !== null) {
                                                  result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 === null) {
                                  pos1 = pos;
                                  result0 = parse_h16();
                                  if (result0 !== null) {
                                    pos2 = pos;
                                    if (input.charCodeAt(pos) === 58) {
                                      result1 = ":";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed('":"');
                                      }
                                    }
                                    if (result1 !== null) {
                                      result22 = parse_h16();
                                      if (result22 !== null) {
                                        result1 = [result1, result22];
                                      } else {
                                        result1 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }
                                    result1 = result1 !== null ? result1 : "";
                                    if (result1 !== null) {
                                      pos2 = pos;
                                      if (input.charCodeAt(pos) === 58) {
                                        result22 = ":";
                                        pos++;
                                      } else {
                                        result22 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('":"');
                                        }
                                      }
                                      if (result22 !== null) {
                                        result3 = parse_h16();
                                        if (result3 !== null) {
                                          result22 = [result22, result3];
                                        } else {
                                          result22 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result22 = null;
                                        pos = pos2;
                                      }
                                      result22 = result22 !== null ? result22 : "";
                                      if (result22 !== null) {
                                        pos2 = pos;
                                        if (input.charCodeAt(pos) === 58) {
                                          result3 = ":";
                                          pos++;
                                        } else {
                                          result3 = null;
                                          if (reportFailures === 0) {
                                            matchFailed('":"');
                                          }
                                        }
                                        if (result3 !== null) {
                                          result4 = parse_h16();
                                          if (result4 !== null) {
                                            result3 = [result3, result4];
                                          } else {
                                            result3 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result3 = null;
                                          pos = pos2;
                                        }
                                        result3 = result3 !== null ? result3 : "";
                                        if (result3 !== null) {
                                          if (input.substr(pos, 2) === "::") {
                                            result4 = "::";
                                            pos += 2;
                                          } else {
                                            result4 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('"::"');
                                            }
                                          }
                                          if (result4 !== null) {
                                            result5 = parse_h16();
                                            if (result5 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result6 = ":";
                                                pos++;
                                              } else {
                                                result6 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result6 !== null) {
                                                result7 = parse_ls32();
                                                if (result7 !== null) {
                                                  result0 = [result0, result1, result22, result3, result4, result5, result6, result7];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 === null) {
                                    pos1 = pos;
                                    result0 = parse_h16();
                                    if (result0 !== null) {
                                      pos2 = pos;
                                      if (input.charCodeAt(pos) === 58) {
                                        result1 = ":";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed('":"');
                                        }
                                      }
                                      if (result1 !== null) {
                                        result22 = parse_h16();
                                        if (result22 !== null) {
                                          result1 = [result1, result22];
                                        } else {
                                          result1 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result1 = null;
                                        pos = pos2;
                                      }
                                      result1 = result1 !== null ? result1 : "";
                                      if (result1 !== null) {
                                        pos2 = pos;
                                        if (input.charCodeAt(pos) === 58) {
                                          result22 = ":";
                                          pos++;
                                        } else {
                                          result22 = null;
                                          if (reportFailures === 0) {
                                            matchFailed('":"');
                                          }
                                        }
                                        if (result22 !== null) {
                                          result3 = parse_h16();
                                          if (result3 !== null) {
                                            result22 = [result22, result3];
                                          } else {
                                            result22 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result22 = null;
                                          pos = pos2;
                                        }
                                        result22 = result22 !== null ? result22 : "";
                                        if (result22 !== null) {
                                          pos2 = pos;
                                          if (input.charCodeAt(pos) === 58) {
                                            result3 = ":";
                                            pos++;
                                          } else {
                                            result3 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result3 !== null) {
                                            result4 = parse_h16();
                                            if (result4 !== null) {
                                              result3 = [result3, result4];
                                            } else {
                                              result3 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result3 = null;
                                            pos = pos2;
                                          }
                                          result3 = result3 !== null ? result3 : "";
                                          if (result3 !== null) {
                                            pos2 = pos;
                                            if (input.charCodeAt(pos) === 58) {
                                              result4 = ":";
                                              pos++;
                                            } else {
                                              result4 = null;
                                              if (reportFailures === 0) {
                                                matchFailed('":"');
                                              }
                                            }
                                            if (result4 !== null) {
                                              result5 = parse_h16();
                                              if (result5 !== null) {
                                                result4 = [result4, result5];
                                              } else {
                                                result4 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result4 = null;
                                              pos = pos2;
                                            }
                                            result4 = result4 !== null ? result4 : "";
                                            if (result4 !== null) {
                                              if (input.substr(pos, 2) === "::") {
                                                result5 = "::";
                                                pos += 2;
                                              } else {
                                                result5 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('"::"');
                                                }
                                              }
                                              if (result5 !== null) {
                                                result6 = parse_ls32();
                                                if (result6 !== null) {
                                                  result0 = [result0, result1, result22, result3, result4, result5, result6];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                    if (result0 === null) {
                                      pos1 = pos;
                                      result0 = parse_h16();
                                      if (result0 !== null) {
                                        pos2 = pos;
                                        if (input.charCodeAt(pos) === 58) {
                                          result1 = ":";
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed('":"');
                                          }
                                        }
                                        if (result1 !== null) {
                                          result22 = parse_h16();
                                          if (result22 !== null) {
                                            result1 = [result1, result22];
                                          } else {
                                            result1 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result1 = null;
                                          pos = pos2;
                                        }
                                        result1 = result1 !== null ? result1 : "";
                                        if (result1 !== null) {
                                          pos2 = pos;
                                          if (input.charCodeAt(pos) === 58) {
                                            result22 = ":";
                                            pos++;
                                          } else {
                                            result22 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result22 !== null) {
                                            result3 = parse_h16();
                                            if (result3 !== null) {
                                              result22 = [result22, result3];
                                            } else {
                                              result22 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result22 = null;
                                            pos = pos2;
                                          }
                                          result22 = result22 !== null ? result22 : "";
                                          if (result22 !== null) {
                                            pos2 = pos;
                                            if (input.charCodeAt(pos) === 58) {
                                              result3 = ":";
                                              pos++;
                                            } else {
                                              result3 = null;
                                              if (reportFailures === 0) {
                                                matchFailed('":"');
                                              }
                                            }
                                            if (result3 !== null) {
                                              result4 = parse_h16();
                                              if (result4 !== null) {
                                                result3 = [result3, result4];
                                              } else {
                                                result3 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result3 = null;
                                              pos = pos2;
                                            }
                                            result3 = result3 !== null ? result3 : "";
                                            if (result3 !== null) {
                                              pos2 = pos;
                                              if (input.charCodeAt(pos) === 58) {
                                                result4 = ":";
                                                pos++;
                                              } else {
                                                result4 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result4 !== null) {
                                                result5 = parse_h16();
                                                if (result5 !== null) {
                                                  result4 = [result4, result5];
                                                } else {
                                                  result4 = null;
                                                  pos = pos2;
                                                }
                                              } else {
                                                result4 = null;
                                                pos = pos2;
                                              }
                                              result4 = result4 !== null ? result4 : "";
                                              if (result4 !== null) {
                                                pos2 = pos;
                                                if (input.charCodeAt(pos) === 58) {
                                                  result5 = ":";
                                                  pos++;
                                                } else {
                                                  result5 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed('":"');
                                                  }
                                                }
                                                if (result5 !== null) {
                                                  result6 = parse_h16();
                                                  if (result6 !== null) {
                                                    result5 = [result5, result6];
                                                  } else {
                                                    result5 = null;
                                                    pos = pos2;
                                                  }
                                                } else {
                                                  result5 = null;
                                                  pos = pos2;
                                                }
                                                result5 = result5 !== null ? result5 : "";
                                                if (result5 !== null) {
                                                  if (input.substr(pos, 2) === "::") {
                                                    result6 = "::";
                                                    pos += 2;
                                                  } else {
                                                    result6 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed('"::"');
                                                    }
                                                  }
                                                  if (result6 !== null) {
                                                    result7 = parse_h16();
                                                    if (result7 !== null) {
                                                      result0 = [result0, result1, result22, result3, result4, result5, result6, result7];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                      if (result0 === null) {
                                        pos1 = pos;
                                        result0 = parse_h16();
                                        if (result0 !== null) {
                                          pos2 = pos;
                                          if (input.charCodeAt(pos) === 58) {
                                            result1 = ":";
                                            pos++;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed('":"');
                                            }
                                          }
                                          if (result1 !== null) {
                                            result22 = parse_h16();
                                            if (result22 !== null) {
                                              result1 = [result1, result22];
                                            } else {
                                              result1 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result1 = null;
                                            pos = pos2;
                                          }
                                          result1 = result1 !== null ? result1 : "";
                                          if (result1 !== null) {
                                            pos2 = pos;
                                            if (input.charCodeAt(pos) === 58) {
                                              result22 = ":";
                                              pos++;
                                            } else {
                                              result22 = null;
                                              if (reportFailures === 0) {
                                                matchFailed('":"');
                                              }
                                            }
                                            if (result22 !== null) {
                                              result3 = parse_h16();
                                              if (result3 !== null) {
                                                result22 = [result22, result3];
                                              } else {
                                                result22 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result22 = null;
                                              pos = pos2;
                                            }
                                            result22 = result22 !== null ? result22 : "";
                                            if (result22 !== null) {
                                              pos2 = pos;
                                              if (input.charCodeAt(pos) === 58) {
                                                result3 = ":";
                                                pos++;
                                              } else {
                                                result3 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed('":"');
                                                }
                                              }
                                              if (result3 !== null) {
                                                result4 = parse_h16();
                                                if (result4 !== null) {
                                                  result3 = [result3, result4];
                                                } else {
                                                  result3 = null;
                                                  pos = pos2;
                                                }
                                              } else {
                                                result3 = null;
                                                pos = pos2;
                                              }
                                              result3 = result3 !== null ? result3 : "";
                                              if (result3 !== null) {
                                                pos2 = pos;
                                                if (input.charCodeAt(pos) === 58) {
                                                  result4 = ":";
                                                  pos++;
                                                } else {
                                                  result4 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed('":"');
                                                  }
                                                }
                                                if (result4 !== null) {
                                                  result5 = parse_h16();
                                                  if (result5 !== null) {
                                                    result4 = [result4, result5];
                                                  } else {
                                                    result4 = null;
                                                    pos = pos2;
                                                  }
                                                } else {
                                                  result4 = null;
                                                  pos = pos2;
                                                }
                                                result4 = result4 !== null ? result4 : "";
                                                if (result4 !== null) {
                                                  pos2 = pos;
                                                  if (input.charCodeAt(pos) === 58) {
                                                    result5 = ":";
                                                    pos++;
                                                  } else {
                                                    result5 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed('":"');
                                                    }
                                                  }
                                                  if (result5 !== null) {
                                                    result6 = parse_h16();
                                                    if (result6 !== null) {
                                                      result5 = [result5, result6];
                                                    } else {
                                                      result5 = null;
                                                      pos = pos2;
                                                    }
                                                  } else {
                                                    result5 = null;
                                                    pos = pos2;
                                                  }
                                                  result5 = result5 !== null ? result5 : "";
                                                  if (result5 !== null) {
                                                    pos2 = pos;
                                                    if (input.charCodeAt(pos) === 58) {
                                                      result6 = ":";
                                                      pos++;
                                                    } else {
                                                      result6 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed('":"');
                                                      }
                                                    }
                                                    if (result6 !== null) {
                                                      result7 = parse_h16();
                                                      if (result7 !== null) {
                                                        result6 = [result6, result7];
                                                      } else {
                                                        result6 = null;
                                                        pos = pos2;
                                                      }
                                                    } else {
                                                      result6 = null;
                                                      pos = pos2;
                                                    }
                                                    result6 = result6 !== null ? result6 : "";
                                                    if (result6 !== null) {
                                                      if (input.substr(pos, 2) === "::") {
                                                        result7 = "::";
                                                        pos += 2;
                                                      } else {
                                                        result7 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed('"::"');
                                                        }
                                                      }
                                                      if (result7 !== null) {
                                                        result0 = [result0, result1, result22, result3, result4, result5, result6, result7];
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.host_type = "IPv6";
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_h16() {
            var result0, result1, result22, result3;
            var pos0;
            pos0 = pos;
            result0 = parse_HEXDIG();
            if (result0 !== null) {
              result1 = parse_HEXDIG();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result22 = parse_HEXDIG();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result3 = parse_HEXDIG();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_ls32() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_h16();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_h16();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              result0 = parse_IPv4address();
            }
            return result0;
          }
          function parse_IPv4address() {
            var result0, result1, result22, result3, result4, result5, result6;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_dec_octet();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result1 = ".";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"."');
                }
              }
              if (result1 !== null) {
                result22 = parse_dec_octet();
                if (result22 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result3 = ".";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed('"."');
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_dec_octet();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 46) {
                        result5 = ".";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed('"."');
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse_dec_octet();
                        if (result6 !== null) {
                          result0 = [result0, result1, result22, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.host_type = "IPv4";
                return input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_dec_octet() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 2) === "25") {
              result0 = "25";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"25"');
              }
            }
            if (result0 !== null) {
              if (/^[0-5]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-5]");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (input.charCodeAt(pos) === 50) {
                result0 = "2";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"2"');
                }
              }
              if (result0 !== null) {
                if (/^[0-4]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-4]");
                  }
                }
                if (result1 !== null) {
                  result22 = parse_DIGIT();
                  if (result22 !== null) {
                    result0 = [result0, result1, result22];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                if (input.charCodeAt(pos) === 49) {
                  result0 = "1";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"1"');
                  }
                }
                if (result0 !== null) {
                  result1 = parse_DIGIT();
                  if (result1 !== null) {
                    result22 = parse_DIGIT();
                    if (result22 !== null) {
                      result0 = [result0, result1, result22];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  if (/^[1-9]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[1-9]");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_DIGIT();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                  if (result0 === null) {
                    result0 = parse_DIGIT();
                  }
                }
              }
            }
            return result0;
          }
          function parse_port() {
            var result0, result1, result22, result3, result4;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DIGIT();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_DIGIT();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result22 = parse_DIGIT();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result3 = parse_DIGIT();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = parse_DIGIT();
                    result4 = result4 !== null ? result4 : "";
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, port) {
                port = parseInt(port.join(""));
                data.port = port;
                return port;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_uri_parameters() {
            var result0, result1, result22;
            var pos0;
            result0 = [];
            pos0 = pos;
            if (input.charCodeAt(pos) === 59) {
              result1 = ";";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed('";"');
              }
            }
            if (result1 !== null) {
              result22 = parse_uri_parameter();
              if (result22 !== null) {
                result1 = [result1, result22];
              } else {
                result1 = null;
                pos = pos0;
              }
            } else {
              result1 = null;
              pos = pos0;
            }
            while (result1 !== null) {
              result0.push(result1);
              pos0 = pos;
              if (input.charCodeAt(pos) === 59) {
                result1 = ";";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('";"');
                }
              }
              if (result1 !== null) {
                result22 = parse_uri_parameter();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos0;
                }
              } else {
                result1 = null;
                pos = pos0;
              }
            }
            return result0;
          }
          function parse_uri_parameter() {
            var result0;
            result0 = parse_transport_param();
            if (result0 === null) {
              result0 = parse_user_param();
              if (result0 === null) {
                result0 = parse_method_param();
                if (result0 === null) {
                  result0 = parse_ttl_param();
                  if (result0 === null) {
                    result0 = parse_maddr_param();
                    if (result0 === null) {
                      result0 = parse_lr_param();
                      if (result0 === null) {
                        result0 = parse_other_param();
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_transport_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 10).toLowerCase() === "transport=") {
              result0 = input.substr(pos, 10);
              pos += 10;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"transport="');
              }
            }
            if (result0 !== null) {
              if (input.substr(pos, 3).toLowerCase() === "udp") {
                result1 = input.substr(pos, 3);
                pos += 3;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"udp"');
                }
              }
              if (result1 === null) {
                if (input.substr(pos, 3).toLowerCase() === "tcp") {
                  result1 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"tcp"');
                  }
                }
                if (result1 === null) {
                  if (input.substr(pos, 4).toLowerCase() === "sctp") {
                    result1 = input.substr(pos, 4);
                    pos += 4;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('"sctp"');
                    }
                  }
                  if (result1 === null) {
                    if (input.substr(pos, 3).toLowerCase() === "tls") {
                      result1 = input.substr(pos, 3);
                      pos += 3;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"tls"');
                      }
                    }
                    if (result1 === null) {
                      result1 = parse_token();
                    }
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, transport) {
                if (!data.uri_params)
                  data.uri_params = {};
                data.uri_params["transport"] = transport.toLowerCase();
              }(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_user_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 5).toLowerCase() === "user=") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"user="');
              }
            }
            if (result0 !== null) {
              if (input.substr(pos, 5).toLowerCase() === "phone") {
                result1 = input.substr(pos, 5);
                pos += 5;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"phone"');
                }
              }
              if (result1 === null) {
                if (input.substr(pos, 2).toLowerCase() === "ip") {
                  result1 = input.substr(pos, 2);
                  pos += 2;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"ip"');
                  }
                }
                if (result1 === null) {
                  result1 = parse_token();
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, user) {
                if (!data.uri_params)
                  data.uri_params = {};
                data.uri_params["user"] = user.toLowerCase();
              }(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_method_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 7).toLowerCase() === "method=") {
              result0 = input.substr(pos, 7);
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"method="');
              }
            }
            if (result0 !== null) {
              result1 = parse_Method();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, method) {
                if (!data.uri_params)
                  data.uri_params = {};
                data.uri_params["method"] = method;
              }(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_ttl_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 4).toLowerCase() === "ttl=") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"ttl="');
              }
            }
            if (result0 !== null) {
              result1 = parse_ttl();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, ttl) {
                if (!data.params)
                  data.params = {};
                data.params["ttl"] = ttl;
              }(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_maddr_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 6).toLowerCase() === "maddr=") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"maddr="');
              }
            }
            if (result0 !== null) {
              result1 = parse_host();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, maddr) {
                if (!data.uri_params)
                  data.uri_params = {};
                data.uri_params["maddr"] = maddr;
              }(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_lr_param() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 2).toLowerCase() === "lr") {
              result0 = input.substr(pos, 2);
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"lr"');
              }
            }
            if (result0 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"="');
                }
              }
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                if (!data.uri_params)
                  data.uri_params = {};
                data.uri_params["lr"] = void 0;
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_other_param() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_pname();
            if (result0 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"="');
                }
              }
              if (result1 !== null) {
                result22 = parse_pvalue();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, param, value) {
                if (!data.uri_params)
                  data.uri_params = {};
                if (typeof value === "undefined") {
                  value = void 0;
                } else {
                  value = value[1];
                }
                data.uri_params[param.toLowerCase()] = value;
              }(pos0, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_pname() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_paramchar();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_paramchar();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2, pname) {
                return pname.join("");
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_pvalue() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_paramchar();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_paramchar();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2, pvalue) {
                return pvalue.join("");
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_paramchar() {
            var result0;
            result0 = parse_param_unreserved();
            if (result0 === null) {
              result0 = parse_unreserved();
              if (result0 === null) {
                result0 = parse_escaped();
              }
            }
            return result0;
          }
          function parse_param_unreserved() {
            var result0;
            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"["');
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 93) {
                result0 = "]";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"]"');
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 47) {
                  result0 = "/";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"/"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 58) {
                    result0 = ":";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('":"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 38) {
                      result0 = "&";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"&"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"+"');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result0 = "$";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"$"');
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_headers() {
            var result0, result1, result22, result3, result4;
            var pos0, pos1;
            pos0 = pos;
            if (input.charCodeAt(pos) === 63) {
              result0 = "?";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"?"');
              }
            }
            if (result0 !== null) {
              result1 = parse_header();
              if (result1 !== null) {
                result22 = [];
                pos1 = pos;
                if (input.charCodeAt(pos) === 38) {
                  result3 = "&";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed('"&"');
                  }
                }
                if (result3 !== null) {
                  result4 = parse_header();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }
                while (result3 !== null) {
                  result22.push(result3);
                  pos1 = pos;
                  if (input.charCodeAt(pos) === 38) {
                    result3 = "&";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed('"&"');
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_header();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos1;
                    }
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_header() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_hname();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"="');
                }
              }
              if (result1 !== null) {
                result22 = parse_hvalue();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, hname, hvalue) {
                hname = hname.join("").toLowerCase();
                hvalue = hvalue.join("");
                if (!data.uri_headers)
                  data.uri_headers = {};
                if (!data.uri_headers[hname]) {
                  data.uri_headers[hname] = [hvalue];
                } else {
                  data.uri_headers[hname].push(hvalue);
                }
              }(pos0, result0[0], result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_hname() {
            var result0, result1;
            result1 = parse_hnv_unreserved();
            if (result1 === null) {
              result1 = parse_unreserved();
              if (result1 === null) {
                result1 = parse_escaped();
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_hnv_unreserved();
                if (result1 === null) {
                  result1 = parse_unreserved();
                  if (result1 === null) {
                    result1 = parse_escaped();
                  }
                }
              }
            } else {
              result0 = null;
            }
            return result0;
          }
          function parse_hvalue() {
            var result0, result1;
            result0 = [];
            result1 = parse_hnv_unreserved();
            if (result1 === null) {
              result1 = parse_unreserved();
              if (result1 === null) {
                result1 = parse_escaped();
              }
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_hnv_unreserved();
              if (result1 === null) {
                result1 = parse_unreserved();
                if (result1 === null) {
                  result1 = parse_escaped();
                }
              }
            }
            return result0;
          }
          function parse_hnv_unreserved() {
            var result0;
            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"["');
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 93) {
                result0 = "]";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"]"');
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 47) {
                  result0 = "/";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"/"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 63) {
                    result0 = "?";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"?"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 58) {
                      result0 = ":";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('":"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"+"');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result0 = "$";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"$"');
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_Request_Response() {
            var result0;
            result0 = parse_Status_Line();
            if (result0 === null) {
              result0 = parse_Request_Line();
            }
            return result0;
          }
          function parse_Request_Line() {
            var result0, result1, result22, result3, result4;
            var pos0;
            pos0 = pos;
            result0 = parse_Method();
            if (result0 !== null) {
              result1 = parse_SP();
              if (result1 !== null) {
                result22 = parse_Request_URI();
                if (result22 !== null) {
                  result3 = parse_SP();
                  if (result3 !== null) {
                    result4 = parse_SIP_Version();
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Request_URI() {
            var result0;
            result0 = parse_SIP_URI();
            if (result0 === null) {
              result0 = parse_absoluteURI();
            }
            return result0;
          }
          function parse_absoluteURI() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_scheme();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('":"');
                }
              }
              if (result1 !== null) {
                result22 = parse_hier_part();
                if (result22 === null) {
                  result22 = parse_opaque_part();
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_hier_part() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_net_path();
            if (result0 === null) {
              result0 = parse_abs_path();
            }
            if (result0 !== null) {
              pos1 = pos;
              if (input.charCodeAt(pos) === 63) {
                result1 = "?";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"?"');
                }
              }
              if (result1 !== null) {
                result22 = parse_query();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_net_path() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 2) === "//") {
              result0 = "//";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"//"');
              }
            }
            if (result0 !== null) {
              result1 = parse_authority();
              if (result1 !== null) {
                result22 = parse_abs_path();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_abs_path() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            if (input.charCodeAt(pos) === 47) {
              result0 = "/";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"/"');
              }
            }
            if (result0 !== null) {
              result1 = parse_path_segments();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_opaque_part() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_uric_no_slash();
            if (result0 !== null) {
              result1 = [];
              result22 = parse_uric();
              while (result22 !== null) {
                result1.push(result22);
                result22 = parse_uric();
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_uric() {
            var result0;
            result0 = parse_reserved();
            if (result0 === null) {
              result0 = parse_unreserved();
              if (result0 === null) {
                result0 = parse_escaped();
              }
            }
            return result0;
          }
          function parse_uric_no_slash() {
            var result0;
            result0 = parse_unreserved();
            if (result0 === null) {
              result0 = parse_escaped();
              if (result0 === null) {
                if (input.charCodeAt(pos) === 59) {
                  result0 = ";";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('";"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 63) {
                    result0 = "?";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"?"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 58) {
                      result0 = ":";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('":"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 64) {
                        result0 = "@";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"@"');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 38) {
                          result0 = "&";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"&"');
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 61) {
                            result0 = "=";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('"="');
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 43) {
                              result0 = "+";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed('"+"');
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 36) {
                                result0 = "$";
                                pos++;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"$"');
                                }
                              }
                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 44) {
                                  result0 = ",";
                                  pos++;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('","');
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_path_segments() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_segment();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              if (input.charCodeAt(pos) === 47) {
                result22 = "/";
                pos++;
              } else {
                result22 = null;
                if (reportFailures === 0) {
                  matchFailed('"/"');
                }
              }
              if (result22 !== null) {
                result3 = parse_segment();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                if (input.charCodeAt(pos) === 47) {
                  result22 = "/";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"/"');
                  }
                }
                if (result22 !== null) {
                  result3 = parse_segment();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_segment() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = [];
            result1 = parse_pchar();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_pchar();
            }
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              if (input.charCodeAt(pos) === 59) {
                result22 = ";";
                pos++;
              } else {
                result22 = null;
                if (reportFailures === 0) {
                  matchFailed('";"');
                }
              }
              if (result22 !== null) {
                result3 = parse_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                if (input.charCodeAt(pos) === 59) {
                  result22 = ";";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('";"');
                  }
                }
                if (result22 !== null) {
                  result3 = parse_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_param() {
            var result0, result1;
            result0 = [];
            result1 = parse_pchar();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_pchar();
            }
            return result0;
          }
          function parse_pchar() {
            var result0;
            result0 = parse_unreserved();
            if (result0 === null) {
              result0 = parse_escaped();
              if (result0 === null) {
                if (input.charCodeAt(pos) === 58) {
                  result0 = ":";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('":"');
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 64) {
                    result0 = "@";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"@"');
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 38) {
                      result0 = "&";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"&"');
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 61) {
                        result0 = "=";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"="');
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 43) {
                          result0 = "+";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"+"');
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 36) {
                            result0 = "$";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed('"$"');
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 44) {
                              result0 = ",";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed('","');
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_scheme() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_ALPHA();
            if (result0 !== null) {
              result1 = [];
              result22 = parse_ALPHA();
              if (result22 === null) {
                result22 = parse_DIGIT();
                if (result22 === null) {
                  if (input.charCodeAt(pos) === 43) {
                    result22 = "+";
                    pos++;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"+"');
                    }
                  }
                  if (result22 === null) {
                    if (input.charCodeAt(pos) === 45) {
                      result22 = "-";
                      pos++;
                    } else {
                      result22 = null;
                      if (reportFailures === 0) {
                        matchFailed('"-"');
                      }
                    }
                    if (result22 === null) {
                      if (input.charCodeAt(pos) === 46) {
                        result22 = ".";
                        pos++;
                      } else {
                        result22 = null;
                        if (reportFailures === 0) {
                          matchFailed('"."');
                        }
                      }
                    }
                  }
                }
              }
              while (result22 !== null) {
                result1.push(result22);
                result22 = parse_ALPHA();
                if (result22 === null) {
                  result22 = parse_DIGIT();
                  if (result22 === null) {
                    if (input.charCodeAt(pos) === 43) {
                      result22 = "+";
                      pos++;
                    } else {
                      result22 = null;
                      if (reportFailures === 0) {
                        matchFailed('"+"');
                      }
                    }
                    if (result22 === null) {
                      if (input.charCodeAt(pos) === 45) {
                        result22 = "-";
                        pos++;
                      } else {
                        result22 = null;
                        if (reportFailures === 0) {
                          matchFailed('"-"');
                        }
                      }
                      if (result22 === null) {
                        if (input.charCodeAt(pos) === 46) {
                          result22 = ".";
                          pos++;
                        } else {
                          result22 = null;
                          if (reportFailures === 0) {
                            matchFailed('"."');
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.scheme = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_authority() {
            var result0;
            result0 = parse_srvr();
            if (result0 === null) {
              result0 = parse_reg_name();
            }
            return result0;
          }
          function parse_srvr() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_userinfo();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 64) {
                result1 = "@";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"@"');
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_hostport();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            result0 = result0 !== null ? result0 : "";
            return result0;
          }
          function parse_reg_name() {
            var result0, result1;
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
              if (result1 === null) {
                if (input.charCodeAt(pos) === 36) {
                  result1 = "$";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed('"$"');
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 44) {
                    result1 = ",";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed('","');
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 59) {
                      result1 = ";";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('";"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 58) {
                        result1 = ":";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('":"');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 64) {
                          result1 = "@";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('"@"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 38) {
                            result1 = "&";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('"&"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 61) {
                              result1 = "=";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"="');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"+"');
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_unreserved();
                if (result1 === null) {
                  result1 = parse_escaped();
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 36) {
                      result1 = "$";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed('"$"');
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 44) {
                        result1 = ",";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed('","');
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 59) {
                          result1 = ";";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed('";"');
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 58) {
                            result1 = ":";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed('":"');
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 64) {
                              result1 = "@";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed('"@"');
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 38) {
                                result1 = "&";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed('"&"');
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 61) {
                                  result1 = "=";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed('"="');
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 43) {
                                    result1 = "+";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed('"+"');
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }
            return result0;
          }
          function parse_query() {
            var result0, result1;
            result0 = [];
            result1 = parse_uric();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_uric();
            }
            return result0;
          }
          function parse_SIP_Version() {
            var result0, result1, result22, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"SIP"');
              }
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 47) {
                result1 = "/";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"/"');
                }
              }
              if (result1 !== null) {
                result3 = parse_DIGIT();
                if (result3 !== null) {
                  result22 = [];
                  while (result3 !== null) {
                    result22.push(result3);
                    result3 = parse_DIGIT();
                  }
                } else {
                  result22 = null;
                }
                if (result22 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result3 = ".";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed('"."');
                    }
                  }
                  if (result3 !== null) {
                    result5 = parse_DIGIT();
                    if (result5 !== null) {
                      result4 = [];
                      while (result5 !== null) {
                        result4.push(result5);
                        result5 = parse_DIGIT();
                      }
                    } else {
                      result4 = null;
                    }
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.sip_version = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_INVITEm() {
            var result0;
            if (input.substr(pos, 6) === "INVITE") {
              result0 = "INVITE";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"INVITE"');
              }
            }
            return result0;
          }
          function parse_ACKm() {
            var result0;
            if (input.substr(pos, 3) === "ACK") {
              result0 = "ACK";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"ACK"');
              }
            }
            return result0;
          }
          function parse_OPTIONSm() {
            var result0;
            if (input.substr(pos, 7) === "OPTIONS") {
              result0 = "OPTIONS";
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"OPTIONS"');
              }
            }
            return result0;
          }
          function parse_BYEm() {
            var result0;
            if (input.substr(pos, 3) === "BYE") {
              result0 = "BYE";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"BYE"');
              }
            }
            return result0;
          }
          function parse_CANCELm() {
            var result0;
            if (input.substr(pos, 6) === "CANCEL") {
              result0 = "CANCEL";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"CANCEL"');
              }
            }
            return result0;
          }
          function parse_REGISTERm() {
            var result0;
            if (input.substr(pos, 8) === "REGISTER") {
              result0 = "REGISTER";
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"REGISTER"');
              }
            }
            return result0;
          }
          function parse_SUBSCRIBEm() {
            var result0;
            if (input.substr(pos, 9) === "SUBSCRIBE") {
              result0 = "SUBSCRIBE";
              pos += 9;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"SUBSCRIBE"');
              }
            }
            return result0;
          }
          function parse_NOTIFYm() {
            var result0;
            if (input.substr(pos, 6) === "NOTIFY") {
              result0 = "NOTIFY";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"NOTIFY"');
              }
            }
            return result0;
          }
          function parse_REFERm() {
            var result0;
            if (input.substr(pos, 5) === "REFER") {
              result0 = "REFER";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"REFER"');
              }
            }
            return result0;
          }
          function parse_Method() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_INVITEm();
            if (result0 === null) {
              result0 = parse_ACKm();
              if (result0 === null) {
                result0 = parse_OPTIONSm();
                if (result0 === null) {
                  result0 = parse_BYEm();
                  if (result0 === null) {
                    result0 = parse_CANCELm();
                    if (result0 === null) {
                      result0 = parse_REGISTERm();
                      if (result0 === null) {
                        result0 = parse_SUBSCRIBEm();
                        if (result0 === null) {
                          result0 = parse_NOTIFYm();
                          if (result0 === null) {
                            result0 = parse_REFERm();
                            if (result0 === null) {
                              result0 = parse_token();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.method = input.substring(pos, offset2);
                return data.method;
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Status_Line() {
            var result0, result1, result22, result3, result4;
            var pos0;
            pos0 = pos;
            result0 = parse_SIP_Version();
            if (result0 !== null) {
              result1 = parse_SP();
              if (result1 !== null) {
                result22 = parse_Status_Code();
                if (result22 !== null) {
                  result3 = parse_SP();
                  if (result3 !== null) {
                    result4 = parse_Reason_Phrase();
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Status_Code() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_extension_code();
            if (result0 !== null) {
              result0 = function(offset2, status_code) {
                data.status_code = parseInt(status_code.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_extension_code() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_DIGIT();
            if (result0 !== null) {
              result1 = parse_DIGIT();
              if (result1 !== null) {
                result22 = parse_DIGIT();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Reason_Phrase() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result0 = [];
            result1 = parse_reserved();
            if (result1 === null) {
              result1 = parse_unreserved();
              if (result1 === null) {
                result1 = parse_escaped();
                if (result1 === null) {
                  result1 = parse_UTF8_NONASCII();
                  if (result1 === null) {
                    result1 = parse_UTF8_CONT();
                    if (result1 === null) {
                      result1 = parse_SP();
                      if (result1 === null) {
                        result1 = parse_HTAB();
                      }
                    }
                  }
                }
              }
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_reserved();
              if (result1 === null) {
                result1 = parse_unreserved();
                if (result1 === null) {
                  result1 = parse_escaped();
                  if (result1 === null) {
                    result1 = parse_UTF8_NONASCII();
                    if (result1 === null) {
                      result1 = parse_UTF8_CONT();
                      if (result1 === null) {
                        result1 = parse_SP();
                        if (result1 === null) {
                          result1 = parse_HTAB();
                        }
                      }
                    }
                  }
                }
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.reason_phrase = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Allow_Events() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_event_type();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_event_type();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_event_type();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Call_ID() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_word();
            if (result0 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 64) {
                result1 = "@";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"@"');
                }
              }
              if (result1 !== null) {
                result22 = parse_word();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Contact() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            result0 = parse_STAR();
            if (result0 === null) {
              pos1 = pos;
              result0 = parse_contact_param();
              if (result0 !== null) {
                result1 = [];
                pos2 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_contact_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
                while (result22 !== null) {
                  result1.push(result22);
                  pos2 = pos;
                  result22 = parse_COMMA();
                  if (result22 !== null) {
                    result3 = parse_contact_param();
                    if (result3 !== null) {
                      result22 = [result22, result3];
                    } else {
                      result22 = null;
                      pos = pos2;
                    }
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var idx, length;
                length = data.multi_header.length;
                for (idx = 0; idx < length; idx++) {
                  if (data.multi_header[idx].parsed === null) {
                    data = null;
                    break;
                  }
                }
                if (data !== null) {
                  data = data.multi_header;
                } else {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_contact_param() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();
            if (result0 === null) {
              result0 = parse_name_addr();
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_contact_params();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_contact_params();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var header;
                if (!data.multi_header)
                  data.multi_header = [];
                try {
                  header = new NameAddrHeader(data.uri, data.display_name, data.params);
                  delete data.uri;
                  delete data.display_name;
                  delete data.params;
                } catch (e) {
                  header = null;
                }
                data.multi_header.push({
                  "possition": pos,
                  "offset": offset2,
                  "parsed": header
                });
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_name_addr() {
            var result0, result1, result22, result3;
            var pos0;
            pos0 = pos;
            result0 = parse_display_name();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_LAQUOT();
              if (result1 !== null) {
                result22 = parse_SIP_URI();
                if (result22 !== null) {
                  result3 = parse_RAQUOT();
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_display_name() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_LWS();
              if (result22 !== null) {
                result3 = parse_token();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_LWS();
                if (result22 !== null) {
                  result3 = parse_token();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 === null) {
              result0 = parse_quoted_string_clean();
            }
            if (result0 !== null) {
              result0 = function(offset2, display_name) {
                if (typeof display_name === "string") {
                  data.display_name = display_name;
                } else {
                  data.display_name = display_name[1].reduce(function(acc, cur) {
                    return acc + cur[0] + cur[1];
                  }, display_name[0]);
                }
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_contact_params() {
            var result0;
            result0 = parse_c_p_q();
            if (result0 === null) {
              result0 = parse_c_p_expires();
              if (result0 === null) {
                result0 = parse_generic_param();
              }
            }
            return result0;
          }
          function parse_c_p_q() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 1).toLowerCase() === "q") {
              result0 = input.substr(pos, 1);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"q"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_qvalue();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, q) {
                if (!data.params)
                  data.params = {};
                data.params["q"] = q;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_c_p_expires() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 7).toLowerCase() === "expires") {
              result0 = input.substr(pos, 7);
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"expires"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_delta_seconds();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, expires) {
                if (!data.params)
                  data.params = {};
                data.params["expires"] = expires;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_delta_seconds() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2, delta_seconds) {
                return parseInt(delta_seconds.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_qvalue() {
            var result0, result1, result22, result3, result4;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 48) {
              result0 = "0";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"0"');
              }
            }
            if (result0 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 46) {
                result1 = ".";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"."');
                }
              }
              if (result1 !== null) {
                result22 = parse_DIGIT();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result3 = parse_DIGIT();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = parse_DIGIT();
                    result4 = result4 !== null ? result4 : "";
                    if (result4 !== null) {
                      result1 = [result1, result22, result3, result4];
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                return parseFloat(input.substring(pos, offset2));
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_generic_param() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              pos2 = pos;
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_gen_value();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, param, value) {
                if (!data.params)
                  data.params = {};
                if (typeof value === "undefined") {
                  value = void 0;
                } else {
                  value = value[1];
                }
                data.params[param.toLowerCase()] = value;
              }(pos0, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_gen_value() {
            var result0;
            result0 = parse_token();
            if (result0 === null) {
              result0 = parse_host();
              if (result0 === null) {
                result0 = parse_quoted_string();
              }
            }
            return result0;
          }
          function parse_Content_Disposition() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_disp_type();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_disp_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_disp_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_disp_type() {
            var result0;
            if (input.substr(pos, 6).toLowerCase() === "render") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"render"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 7).toLowerCase() === "session") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"session"');
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 4).toLowerCase() === "icon") {
                  result0 = input.substr(pos, 4);
                  pos += 4;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"icon"');
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 5).toLowerCase() === "alert") {
                    result0 = input.substr(pos, 5);
                    pos += 5;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"alert"');
                    }
                  }
                  if (result0 === null) {
                    result0 = parse_token();
                  }
                }
              }
            }
            return result0;
          }
          function parse_disp_param() {
            var result0;
            result0 = parse_handling_param();
            if (result0 === null) {
              result0 = parse_generic_param();
            }
            return result0;
          }
          function parse_handling_param() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 8).toLowerCase() === "handling") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"handling"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                if (input.substr(pos, 8).toLowerCase() === "optional") {
                  result22 = input.substr(pos, 8);
                  pos += 8;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"optional"');
                  }
                }
                if (result22 === null) {
                  if (input.substr(pos, 8).toLowerCase() === "required") {
                    result22 = input.substr(pos, 8);
                    pos += 8;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"required"');
                    }
                  }
                  if (result22 === null) {
                    result22 = parse_token();
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Content_Encoding() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_token();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_token();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Content_Length() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2, length) {
                data = parseInt(length.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Content_Type() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_media_type();
            if (result0 !== null) {
              result0 = function(offset2) {
                data = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_media_type() {
            var result0, result1, result22, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_m_type();
            if (result0 !== null) {
              result1 = parse_SLASH();
              if (result1 !== null) {
                result22 = parse_m_subtype();
                if (result22 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_SEMI();
                  if (result4 !== null) {
                    result5 = parse_m_parameter();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_SEMI();
                    if (result4 !== null) {
                      result5 = parse_m_parameter();
                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_m_type() {
            var result0;
            result0 = parse_discrete_type();
            if (result0 === null) {
              result0 = parse_composite_type();
            }
            return result0;
          }
          function parse_discrete_type() {
            var result0;
            if (input.substr(pos, 4).toLowerCase() === "text") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"text"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 5).toLowerCase() === "image") {
                result0 = input.substr(pos, 5);
                pos += 5;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"image"');
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 5).toLowerCase() === "audio") {
                  result0 = input.substr(pos, 5);
                  pos += 5;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"audio"');
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 5).toLowerCase() === "video") {
                    result0 = input.substr(pos, 5);
                    pos += 5;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"video"');
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 11).toLowerCase() === "application") {
                      result0 = input.substr(pos, 11);
                      pos += 11;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"application"');
                      }
                    }
                    if (result0 === null) {
                      result0 = parse_extension_token();
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_composite_type() {
            var result0;
            if (input.substr(pos, 7).toLowerCase() === "message") {
              result0 = input.substr(pos, 7);
              pos += 7;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"message"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 9).toLowerCase() === "multipart") {
                result0 = input.substr(pos, 9);
                pos += 9;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"multipart"');
                }
              }
              if (result0 === null) {
                result0 = parse_extension_token();
              }
            }
            return result0;
          }
          function parse_extension_token() {
            var result0;
            result0 = parse_token();
            if (result0 === null) {
              result0 = parse_x_token();
            }
            return result0;
          }
          function parse_x_token() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 2).toLowerCase() === "x-") {
              result0 = input.substr(pos, 2);
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"x-"');
              }
            }
            if (result0 !== null) {
              result1 = parse_token();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_m_subtype() {
            var result0;
            result0 = parse_extension_token();
            if (result0 === null) {
              result0 = parse_token();
            }
            return result0;
          }
          function parse_m_parameter() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_m_value();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_m_value() {
            var result0;
            result0 = parse_token();
            if (result0 === null) {
              result0 = parse_quoted_string();
            }
            return result0;
          }
          function parse_CSeq() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_CSeq_value();
            if (result0 !== null) {
              result1 = parse_LWS();
              if (result1 !== null) {
                result22 = parse_Method();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_CSeq_value() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2, cseq_value) {
                data.value = parseInt(cseq_value.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Expires() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_delta_seconds();
            if (result0 !== null) {
              result0 = function(offset2, expires) {
                data = expires;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Event() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_event_type();
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_generic_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_generic_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, event_type) {
                data.event = event_type.join("").toLowerCase();
              }(pos0, result0[0]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_event_type() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token_nodot();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              if (input.charCodeAt(pos) === 46) {
                result22 = ".";
                pos++;
              } else {
                result22 = null;
                if (reportFailures === 0) {
                  matchFailed('"."');
                }
              }
              if (result22 !== null) {
                result3 = parse_token_nodot();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                if (input.charCodeAt(pos) === 46) {
                  result22 = ".";
                  pos++;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"."');
                  }
                }
                if (result22 !== null) {
                  result3 = parse_token_nodot();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_From() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();
            if (result0 === null) {
              result0 = parse_name_addr();
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_from_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_from_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var tag = data.tag;
                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);
                  if (tag) {
                    data.setParam("tag", tag);
                  }
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_from_param() {
            var result0;
            result0 = parse_tag_param();
            if (result0 === null) {
              result0 = parse_generic_param();
            }
            return result0;
          }
          function parse_tag_param() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 3).toLowerCase() === "tag") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"tag"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, tag) {
                data.tag = tag;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Max_Forwards() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = function(offset2, forwards) {
                data = parseInt(forwards.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Min_Expires() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_delta_seconds();
            if (result0 !== null) {
              result0 = function(offset2, min_expires) {
                data = min_expires;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Name_Addr_Header() {
            var result0, result1, result22, result3, result4, result5, result6;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            result1 = parse_display_name();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_display_name();
            }
            if (result0 !== null) {
              result1 = parse_LAQUOT();
              if (result1 !== null) {
                result22 = parse_SIP_URI();
                if (result22 !== null) {
                  result3 = parse_RAQUOT();
                  if (result3 !== null) {
                    result4 = [];
                    pos2 = pos;
                    result5 = parse_SEMI();
                    if (result5 !== null) {
                      result6 = parse_generic_param();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                    while (result5 !== null) {
                      result4.push(result5);
                      pos2 = pos;
                      result5 = parse_SEMI();
                      if (result5 !== null) {
                        result6 = parse_generic_param();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    }
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Proxy_Authenticate() {
            var result0;
            result0 = parse_challenge();
            return result0;
          }
          function parse_challenge() {
            var result0, result1, result22, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            if (input.substr(pos, 6).toLowerCase() === "digest") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"Digest"');
              }
            }
            if (result0 !== null) {
              result1 = parse_LWS();
              if (result1 !== null) {
                result22 = parse_digest_cln();
                if (result22 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_COMMA();
                  if (result4 !== null) {
                    result5 = parse_digest_cln();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_COMMA();
                    if (result4 !== null) {
                      result5 = parse_digest_cln();
                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              result0 = parse_other_challenge();
            }
            return result0;
          }
          function parse_other_challenge() {
            var result0, result1, result22, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = parse_LWS();
              if (result1 !== null) {
                result22 = parse_auth_param();
                if (result22 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_COMMA();
                  if (result4 !== null) {
                    result5 = parse_auth_param();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_COMMA();
                    if (result4 !== null) {
                      result5 = parse_auth_param();
                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_auth_param() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 === null) {
                  result22 = parse_quoted_string();
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_digest_cln() {
            var result0;
            result0 = parse_realm();
            if (result0 === null) {
              result0 = parse_domain();
              if (result0 === null) {
                result0 = parse_nonce();
                if (result0 === null) {
                  result0 = parse_opaque();
                  if (result0 === null) {
                    result0 = parse_stale();
                    if (result0 === null) {
                      result0 = parse_algorithm();
                      if (result0 === null) {
                        result0 = parse_qop_options();
                        if (result0 === null) {
                          result0 = parse_auth_param();
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_realm() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 5).toLowerCase() === "realm") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"realm"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_realm_value();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_realm_value() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_quoted_string_clean();
            if (result0 !== null) {
              result0 = function(offset2, realm) {
                data.realm = realm;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_domain() {
            var result0, result1, result22, result3, result4, result5, result6;
            var pos0, pos1;
            pos0 = pos;
            if (input.substr(pos, 6).toLowerCase() === "domain") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"domain"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_LDQUOT();
                if (result22 !== null) {
                  result3 = parse_URI();
                  if (result3 !== null) {
                    result4 = [];
                    pos1 = pos;
                    result6 = parse_SP();
                    if (result6 !== null) {
                      result5 = [];
                      while (result6 !== null) {
                        result5.push(result6);
                        result6 = parse_SP();
                      }
                    } else {
                      result5 = null;
                    }
                    if (result5 !== null) {
                      result6 = parse_URI();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos1;
                      }
                    } else {
                      result5 = null;
                      pos = pos1;
                    }
                    while (result5 !== null) {
                      result4.push(result5);
                      pos1 = pos;
                      result6 = parse_SP();
                      if (result6 !== null) {
                        result5 = [];
                        while (result6 !== null) {
                          result5.push(result6);
                          result6 = parse_SP();
                        }
                      } else {
                        result5 = null;
                      }
                      if (result5 !== null) {
                        result6 = parse_URI();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos1;
                        }
                      } else {
                        result5 = null;
                        pos = pos1;
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse_RDQUOT();
                      if (result5 !== null) {
                        result0 = [result0, result1, result22, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_URI() {
            var result0;
            result0 = parse_absoluteURI();
            if (result0 === null) {
              result0 = parse_abs_path();
            }
            return result0;
          }
          function parse_nonce() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 5).toLowerCase() === "nonce") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"nonce"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_nonce_value();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_nonce_value() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_quoted_string_clean();
            if (result0 !== null) {
              result0 = function(offset2, nonce) {
                data.nonce = nonce;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_opaque() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 6).toLowerCase() === "opaque") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"opaque"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_quoted_string_clean();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, opaque) {
                data.opaque = opaque;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_stale() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            if (input.substr(pos, 5).toLowerCase() === "stale") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"stale"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                pos1 = pos;
                if (input.substr(pos, 4).toLowerCase() === "true") {
                  result22 = input.substr(pos, 4);
                  pos += 4;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"true"');
                  }
                }
                if (result22 !== null) {
                  result22 = function(offset2) {
                    data.stale = true;
                  }(pos1);
                }
                if (result22 === null) {
                  pos = pos1;
                }
                if (result22 === null) {
                  pos1 = pos;
                  if (input.substr(pos, 5).toLowerCase() === "false") {
                    result22 = input.substr(pos, 5);
                    pos += 5;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"false"');
                    }
                  }
                  if (result22 !== null) {
                    result22 = function(offset2) {
                      data.stale = false;
                    }(pos1);
                  }
                  if (result22 === null) {
                    pos = pos1;
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_algorithm() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 9).toLowerCase() === "algorithm") {
              result0 = input.substr(pos, 9);
              pos += 9;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"algorithm"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                if (input.substr(pos, 3).toLowerCase() === "md5") {
                  result22 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"MD5"');
                  }
                }
                if (result22 === null) {
                  if (input.substr(pos, 8).toLowerCase() === "md5-sess") {
                    result22 = input.substr(pos, 8);
                    pos += 8;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"MD5-sess"');
                    }
                  }
                  if (result22 === null) {
                    result22 = parse_token();
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, algorithm) {
                data.algorithm = algorithm.toUpperCase();
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_qop_options() {
            var result0, result1, result22, result3, result4, result5, result6;
            var pos0, pos1, pos2;
            pos0 = pos;
            if (input.substr(pos, 3).toLowerCase() === "qop") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"qop"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_LDQUOT();
                if (result22 !== null) {
                  pos1 = pos;
                  result3 = parse_qop_value();
                  if (result3 !== null) {
                    result4 = [];
                    pos2 = pos;
                    if (input.charCodeAt(pos) === 44) {
                      result5 = ",";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed('","');
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse_qop_value();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                    while (result5 !== null) {
                      result4.push(result5);
                      pos2 = pos;
                      if (input.charCodeAt(pos) === 44) {
                        result5 = ",";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed('","');
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse_qop_value();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    }
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos1;
                    }
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                  if (result3 !== null) {
                    result4 = parse_RDQUOT();
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_qop_value() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 8).toLowerCase() === "auth-int") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"auth-int"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 4).toLowerCase() === "auth") {
                result0 = input.substr(pos, 4);
                pos += 4;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"auth"');
                }
              }
              if (result0 === null) {
                result0 = parse_token();
              }
            }
            if (result0 !== null) {
              result0 = function(offset2, qop_value) {
                data.qop || (data.qop = []);
                data.qop.push(qop_value.toLowerCase());
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Proxy_Require() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_token();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_token();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Record_Route() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_rec_route();
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_rec_route();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_rec_route();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var idx, length;
                length = data.multi_header.length;
                for (idx = 0; idx < length; idx++) {
                  if (data.multi_header[idx].parsed === null) {
                    data = null;
                    break;
                  }
                }
                if (data !== null) {
                  data = data.multi_header;
                } else {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_rec_route() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_name_addr();
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_generic_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_generic_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var header;
                if (!data.multi_header)
                  data.multi_header = [];
                try {
                  header = new NameAddrHeader(data.uri, data.display_name, data.params);
                  delete data.uri;
                  delete data.display_name;
                  delete data.params;
                } catch (e) {
                  header = null;
                }
                data.multi_header.push({
                  "possition": pos,
                  "offset": offset2,
                  "parsed": header
                });
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Reason() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"SIP"');
              }
            }
            if (result0 === null) {
              result0 = parse_token();
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_reason_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_reason_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, protocol) {
                data.protocol = protocol.toLowerCase();
                if (!data.params)
                  data.params = {};
                if (data.params.text && data.params.text[0] === '"') {
                  var text = data.params.text;
                  data.text = text.substring(1, text.length - 1);
                  delete data.params.text;
                }
              }(pos0, result0[0]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_reason_param() {
            var result0;
            result0 = parse_reason_cause();
            if (result0 === null) {
              result0 = parse_generic_param();
            }
            return result0;
          }
          function parse_reason_cause() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 5).toLowerCase() === "cause") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"cause"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result3 = parse_DIGIT();
                if (result3 !== null) {
                  result22 = [];
                  while (result3 !== null) {
                    result22.push(result3);
                    result3 = parse_DIGIT();
                  }
                } else {
                  result22 = null;
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, cause) {
                data.cause = parseInt(cause.join(""));
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Require() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_token();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_token();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Route() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_route_param();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_route_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_route_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_route_param() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_name_addr();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_generic_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_generic_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Subscription_State() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_substate_value();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_subexp_params();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_subexp_params();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_substate_value() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 6).toLowerCase() === "active") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"active"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 7).toLowerCase() === "pending") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"pending"');
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 10).toLowerCase() === "terminated") {
                  result0 = input.substr(pos, 10);
                  pos += 10;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"terminated"');
                  }
                }
                if (result0 === null) {
                  result0 = parse_token();
                }
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.state = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_subexp_params() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 6).toLowerCase() === "reason") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"reason"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_event_reason_value();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, reason) {
                if (typeof reason !== "undefined")
                  data.reason = reason;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 7).toLowerCase() === "expires") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"expires"');
                }
              }
              if (result0 !== null) {
                result1 = parse_EQUAL();
                if (result1 !== null) {
                  result22 = parse_delta_seconds();
                  if (result22 !== null) {
                    result0 = [result0, result1, result22];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = function(offset2, expires) {
                  if (typeof expires !== "undefined")
                    data.expires = expires;
                }(pos0, result0[2]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 11).toLowerCase() === "retry_after") {
                  result0 = input.substr(pos, 11);
                  pos += 11;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"retry_after"');
                  }
                }
                if (result0 !== null) {
                  result1 = parse_EQUAL();
                  if (result1 !== null) {
                    result22 = parse_delta_seconds();
                    if (result22 !== null) {
                      result0 = [result0, result1, result22];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = function(offset2, retry_after) {
                    if (typeof retry_after !== "undefined")
                      data.retry_after = retry_after;
                  }(pos0, result0[2]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  result0 = parse_generic_param();
                }
              }
            }
            return result0;
          }
          function parse_event_reason_value() {
            var result0;
            if (input.substr(pos, 11).toLowerCase() === "deactivated") {
              result0 = input.substr(pos, 11);
              pos += 11;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"deactivated"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 9).toLowerCase() === "probation") {
                result0 = input.substr(pos, 9);
                pos += 9;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"probation"');
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 8).toLowerCase() === "rejected") {
                  result0 = input.substr(pos, 8);
                  pos += 8;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"rejected"');
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 7).toLowerCase() === "timeout") {
                    result0 = input.substr(pos, 7);
                    pos += 7;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"timeout"');
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 6).toLowerCase() === "giveup") {
                      result0 = input.substr(pos, 6);
                      pos += 6;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed('"giveup"');
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 10).toLowerCase() === "noresource") {
                        result0 = input.substr(pos, 10);
                        pos += 10;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed('"noresource"');
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 9).toLowerCase() === "invariant") {
                          result0 = input.substr(pos, 9);
                          pos += 9;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed('"invariant"');
                          }
                        }
                        if (result0 === null) {
                          result0 = parse_token();
                        }
                      }
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_Subject() {
            var result0;
            result0 = parse_TEXT_UTF8_TRIM();
            result0 = result0 !== null ? result0 : "";
            return result0;
          }
          function parse_Supported() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_token();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_token();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            result0 = result0 !== null ? result0 : "";
            return result0;
          }
          function parse_To() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();
            if (result0 === null) {
              result0 = parse_name_addr();
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_to_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_to_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                var tag = data.tag;
                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);
                  if (tag) {
                    data.setParam("tag", tag);
                  }
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_to_param() {
            var result0;
            result0 = parse_tag_param();
            if (result0 === null) {
              result0 = parse_generic_param();
            }
            return result0;
          }
          function parse_Via() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_via_param();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_COMMA();
              if (result22 !== null) {
                result3 = parse_via_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_COMMA();
                if (result22 !== null) {
                  result3 = parse_via_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_via_param() {
            var result0, result1, result22, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_sent_protocol();
            if (result0 !== null) {
              result1 = parse_LWS();
              if (result1 !== null) {
                result22 = parse_sent_by();
                if (result22 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_SEMI();
                  if (result4 !== null) {
                    result5 = parse_via_params();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_SEMI();
                    if (result4 !== null) {
                      result5 = parse_via_params();
                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_via_params() {
            var result0;
            result0 = parse_via_ttl();
            if (result0 === null) {
              result0 = parse_via_maddr();
              if (result0 === null) {
                result0 = parse_via_received();
                if (result0 === null) {
                  result0 = parse_via_branch();
                  if (result0 === null) {
                    result0 = parse_response_port();
                    if (result0 === null) {
                      result0 = parse_generic_param();
                    }
                  }
                }
              }
            }
            return result0;
          }
          function parse_via_ttl() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 3).toLowerCase() === "ttl") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"ttl"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_ttl();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, via_ttl_value) {
                data.ttl = via_ttl_value;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_via_maddr() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 5).toLowerCase() === "maddr") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"maddr"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_host();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, via_maddr) {
                data.maddr = via_maddr;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_via_received() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 8).toLowerCase() === "received") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"received"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_IPv4address();
                if (result22 === null) {
                  result22 = parse_IPv6address();
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, via_received) {
                data.received = via_received;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_via_branch() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 6).toLowerCase() === "branch") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"branch"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, via_branch) {
                data.branch = via_branch;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_response_port() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 5).toLowerCase() === "rport") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"rport"');
              }
            }
            if (result0 !== null) {
              pos2 = pos;
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = [];
                result3 = parse_DIGIT();
                while (result3 !== null) {
                  result22.push(result3);
                  result3 = parse_DIGIT();
                }
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                if (typeof response_port !== "undefined")
                  data.rport = response_port.join("");
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_sent_protocol() {
            var result0, result1, result22, result3, result4;
            var pos0;
            pos0 = pos;
            result0 = parse_protocol_name();
            if (result0 !== null) {
              result1 = parse_SLASH();
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 !== null) {
                  result3 = parse_SLASH();
                  if (result3 !== null) {
                    result4 = parse_transport();
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_protocol_name() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"SIP"');
              }
            }
            if (result0 === null) {
              result0 = parse_token();
            }
            if (result0 !== null) {
              result0 = function(offset2, via_protocol) {
                data.protocol = via_protocol;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_transport() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 3).toLowerCase() === "udp") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"UDP"');
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 3).toLowerCase() === "tcp") {
                result0 = input.substr(pos, 3);
                pos += 3;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed('"TCP"');
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 3).toLowerCase() === "tls") {
                  result0 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed('"TLS"');
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 4).toLowerCase() === "sctp") {
                    result0 = input.substr(pos, 4);
                    pos += 4;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed('"SCTP"');
                    }
                  }
                  if (result0 === null) {
                    result0 = parse_token();
                  }
                }
              }
            }
            if (result0 !== null) {
              result0 = function(offset2, via_transport) {
                data.transport = via_transport;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_sent_by() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_via_host();
            if (result0 !== null) {
              pos1 = pos;
              result1 = parse_COLON();
              if (result1 !== null) {
                result22 = parse_via_port();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_via_host() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_IPv4address();
            if (result0 === null) {
              result0 = parse_IPv6reference();
              if (result0 === null) {
                result0 = parse_hostname();
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.host = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_via_port() {
            var result0, result1, result22, result3, result4;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DIGIT();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_DIGIT();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result22 = parse_DIGIT();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result3 = parse_DIGIT();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result4 = parse_DIGIT();
                    result4 = result4 !== null ? result4 : "";
                    if (result4 !== null) {
                      result0 = [result0, result1, result22, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, via_sent_by_port) {
                data.port = parseInt(via_sent_by_port.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_ttl() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DIGIT();
            if (result0 !== null) {
              result1 = parse_DIGIT();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result22 = parse_DIGIT();
                result22 = result22 !== null ? result22 : "";
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, ttl) {
                return parseInt(ttl.join(""));
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_WWW_Authenticate() {
            var result0;
            result0 = parse_challenge();
            return result0;
          }
          function parse_Session_Expires() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_s_e_expires();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_s_e_params();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_s_e_params();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_s_e_expires() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_delta_seconds();
            if (result0 !== null) {
              result0 = function(offset2, expires) {
                data.expires = expires;
              }(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_s_e_params() {
            var result0;
            result0 = parse_s_e_refresher();
            if (result0 === null) {
              result0 = parse_generic_param();
            }
            return result0;
          }
          function parse_s_e_refresher() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 9).toLowerCase() === "refresher") {
              result0 = input.substr(pos, 9);
              pos += 9;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"refresher"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                if (input.substr(pos, 3).toLowerCase() === "uac") {
                  result22 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result22 = null;
                  if (reportFailures === 0) {
                    matchFailed('"uac"');
                  }
                }
                if (result22 === null) {
                  if (input.substr(pos, 3).toLowerCase() === "uas") {
                    result22 = input.substr(pos, 3);
                    pos += 3;
                  } else {
                    result22 = null;
                    if (reportFailures === 0) {
                      matchFailed('"uas"');
                    }
                  }
                }
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, s_e_refresher_value) {
                data.refresher = s_e_refresher_value.toLowerCase();
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_extension_header() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_token();
            if (result0 !== null) {
              result1 = parse_HCOLON();
              if (result1 !== null) {
                result22 = parse_header_value();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_header_value() {
            var result0, result1;
            result0 = [];
            result1 = parse_TEXT_UTF8char();
            if (result1 === null) {
              result1 = parse_UTF8_CONT();
              if (result1 === null) {
                result1 = parse_LWS();
              }
            }
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_TEXT_UTF8char();
              if (result1 === null) {
                result1 = parse_UTF8_CONT();
                if (result1 === null) {
                  result1 = parse_LWS();
                }
              }
            }
            return result0;
          }
          function parse_message_body() {
            var result0, result1;
            result0 = [];
            result1 = parse_OCTET();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_OCTET();
            }
            return result0;
          }
          function parse_uuid_URI() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 5) === "uuid:") {
              result0 = "uuid:";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"uuid:"');
              }
            }
            if (result0 !== null) {
              result1 = parse_uuid();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_uuid() {
            var result0, result1, result22, result3, result4, result5, result6, result7, result8;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_hex8();
            if (result0 !== null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"-"');
                }
              }
              if (result1 !== null) {
                result22 = parse_hex4();
                if (result22 !== null) {
                  if (input.charCodeAt(pos) === 45) {
                    result3 = "-";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed('"-"');
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_hex4();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 45) {
                        result5 = "-";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed('"-"');
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse_hex4();
                        if (result6 !== null) {
                          if (input.charCodeAt(pos) === 45) {
                            result7 = "-";
                            pos++;
                          } else {
                            result7 = null;
                            if (reportFailures === 0) {
                              matchFailed('"-"');
                            }
                          }
                          if (result7 !== null) {
                            result8 = parse_hex12();
                            if (result8 !== null) {
                              result0 = [result0, result1, result22, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, uuid) {
                data = input.substring(pos + 5, offset2);
              }(pos0, result0[0]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_hex4() {
            var result0, result1, result22, result3;
            var pos0;
            pos0 = pos;
            result0 = parse_HEXDIG();
            if (result0 !== null) {
              result1 = parse_HEXDIG();
              if (result1 !== null) {
                result22 = parse_HEXDIG();
                if (result22 !== null) {
                  result3 = parse_HEXDIG();
                  if (result3 !== null) {
                    result0 = [result0, result1, result22, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_hex8() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result0 = parse_hex4();
            if (result0 !== null) {
              result1 = parse_hex4();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_hex12() {
            var result0, result1, result22;
            var pos0;
            pos0 = pos;
            result0 = parse_hex4();
            if (result0 !== null) {
              result1 = parse_hex4();
              if (result1 !== null) {
                result22 = parse_hex4();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_Refer_To() {
            var result0, result1, result22, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();
            if (result0 === null) {
              result0 = parse_name_addr();
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_generic_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos2;
                }
              } else {
                result22 = null;
                pos = pos2;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos2 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_generic_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos2;
                  }
                } else {
                  result22 = null;
                  pos = pos2;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_Replaces() {
            var result0, result1, result22, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_call_id();
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result22 = parse_SEMI();
              if (result22 !== null) {
                result3 = parse_replaces_param();
                if (result3 !== null) {
                  result22 = [result22, result3];
                } else {
                  result22 = null;
                  pos = pos1;
                }
              } else {
                result22 = null;
                pos = pos1;
              }
              while (result22 !== null) {
                result1.push(result22);
                pos1 = pos;
                result22 = parse_SEMI();
                if (result22 !== null) {
                  result3 = parse_replaces_param();
                  if (result3 !== null) {
                    result22 = [result22, result3];
                  } else {
                    result22 = null;
                    pos = pos1;
                  }
                } else {
                  result22 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            return result0;
          }
          function parse_call_id() {
            var result0, result1, result22;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_word();
            if (result0 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 64) {
                result1 = "@";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed('"@"');
                }
              }
              if (result1 !== null) {
                result22 = parse_word();
                if (result22 !== null) {
                  result1 = [result1, result22];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.call_id = input.substring(pos, offset2);
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_replaces_param() {
            var result0;
            result0 = parse_to_tag();
            if (result0 === null) {
              result0 = parse_from_tag();
              if (result0 === null) {
                result0 = parse_early_flag();
                if (result0 === null) {
                  result0 = parse_generic_param();
                }
              }
            }
            return result0;
          }
          function parse_to_tag() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 6) === "to-tag") {
              result0 = "to-tag";
              pos += 6;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"to-tag"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, to_tag) {
                data.to_tag = to_tag;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_from_tag() {
            var result0, result1, result22;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 8) === "from-tag") {
              result0 = "from-tag";
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"from-tag"');
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result22 = parse_token();
                if (result22 !== null) {
                  result0 = [result0, result1, result22];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = function(offset2, from_tag) {
                data.from_tag = from_tag;
              }(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function parse_early_flag() {
            var result0;
            var pos0;
            pos0 = pos;
            if (input.substr(pos, 10) === "early-only") {
              result0 = "early-only";
              pos += 10;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed('"early-only"');
              }
            }
            if (result0 !== null) {
              result0 = function(offset2) {
                data.early_only = true;
              }(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            return result0;
          }
          function cleanupExpected(expected) {
            expected.sort();
            var lastExpected = null;
            var cleanExpected = [];
            for (var i = 0; i < expected.length; i++) {
              if (expected[i] !== lastExpected) {
                cleanExpected.push(expected[i]);
                lastExpected = expected[i];
              }
            }
            return cleanExpected;
          }
          function computeErrorPosition() {
            var line = 1;
            var column = 1;
            var seenCR = false;
            for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
              var ch = input.charAt(i);
              if (ch === "\n") {
                if (!seenCR) {
                  line++;
                }
                column = 1;
                seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                line++;
                column = 1;
                seenCR = true;
              } else {
                column++;
                seenCR = false;
              }
            }
            return {
              line,
              column
            };
          }
          var URI = require_URI();
          var NameAddrHeader = require_NameAddrHeader();
          var data = {};
          var result2 = parseFunctions[startRule]();
          if (result2 === null || pos !== input.length) {
            var offset = Math.max(pos, rightmostFailuresPos);
            var found = offset < input.length ? input.charAt(offset) : null;
            var errorPosition = computeErrorPosition();
            new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);
            return -1;
          }
          return data;
        },
        /* Returns the parser source code. */
        toSource: function toSource() {
          return this._source;
        }
      };
      result.SyntaxError = function(expected, found, offset, line, column) {
        function buildMessage(expected2, found2) {
          var expectedHumanized, foundHumanized;
          switch (expected2.length) {
            case 0:
              expectedHumanized = "end of input";
              break;
            case 1:
              expectedHumanized = expected2[0];
              break;
            default:
              expectedHumanized = expected2.slice(0, expected2.length - 1).join(", ") + " or " + expected2[expected2.length - 1];
          }
          foundHumanized = found2 ? quote(found2) : "end of input";
          return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }
        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
      };
      result.SyntaxError.prototype = Error.prototype;
      return result;
    }();
  }
});

// node_modules/jssip/lib-es5/URI.js
var require_URI = __commonJS({
  "node_modules/jssip/lib-es5/URI.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var JsSIP_C = require_Constants();
    var Utils = require_Utils();
    var Grammar = require_Grammar();
    module.exports = function() {
      _createClass(URI, null, [{
        key: "parse",
        /**
          * Parse the given string and returns a JsSIP.URI instance or undefined if
          * it is an invalid URI.
          */
        value: function parse42(uri) {
          uri = Grammar.parse(uri, "SIP_URI");
          if (uri !== -1) {
            return uri;
          } else {
            return void 0;
          }
        }
      }]);
      function URI(scheme, user, host, port) {
        var parameters = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
        var headers = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
        _classCallCheck(this, URI);
        if (!host) {
          throw new TypeError('missing or invalid "host" parameter');
        }
        this._parameters = {};
        this._headers = {};
        this._scheme = scheme || JsSIP_C.SIP;
        this._user = user;
        this._host = host;
        this._port = port;
        for (var param in parameters) {
          if (Object.prototype.hasOwnProperty.call(parameters, param)) {
            this.setParam(param, parameters[param]);
          }
        }
        for (var header in headers) {
          if (Object.prototype.hasOwnProperty.call(headers, header)) {
            this.setHeader(header, headers[header]);
          }
        }
      }
      _createClass(URI, [{
        key: "setParam",
        value: function setParam(key, value) {
          if (key) {
            this._parameters[key.toLowerCase()] = typeof value === "undefined" || value === null ? null : value.toString();
          }
        }
      }, {
        key: "getParam",
        value: function getParam(key) {
          if (key) {
            return this._parameters[key.toLowerCase()];
          }
        }
      }, {
        key: "hasParam",
        value: function hasParam(key) {
          if (key) {
            return this._parameters.hasOwnProperty(key.toLowerCase()) && true || false;
          }
        }
      }, {
        key: "deleteParam",
        value: function deleteParam(parameter) {
          parameter = parameter.toLowerCase();
          if (this._parameters.hasOwnProperty(parameter)) {
            var value = this._parameters[parameter];
            delete this._parameters[parameter];
            return value;
          }
        }
      }, {
        key: "clearParams",
        value: function clearParams() {
          this._parameters = {};
        }
      }, {
        key: "setHeader",
        value: function setHeader(name, value) {
          this._headers[Utils.headerize(name)] = Array.isArray(value) ? value : [value];
        }
      }, {
        key: "getHeader",
        value: function getHeader(name) {
          if (name) {
            return this._headers[Utils.headerize(name)];
          }
        }
      }, {
        key: "hasHeader",
        value: function hasHeader(name) {
          if (name) {
            return this._headers.hasOwnProperty(Utils.headerize(name)) && true || false;
          }
        }
      }, {
        key: "deleteHeader",
        value: function deleteHeader(header) {
          header = Utils.headerize(header);
          if (this._headers.hasOwnProperty(header)) {
            var value = this._headers[header];
            delete this._headers[header];
            return value;
          }
        }
      }, {
        key: "clearHeaders",
        value: function clearHeaders() {
          this._headers = {};
        }
      }, {
        key: "clone",
        value: function clone() {
          return new URI(this._scheme, this._user, this._host, this._port, JSON.parse(JSON.stringify(this._parameters)), JSON.parse(JSON.stringify(this._headers)));
        }
      }, {
        key: "toString",
        value: function toString() {
          var headers = [];
          var uri = "".concat(this._scheme, ":");
          if (this._user) {
            uri += "".concat(Utils.escapeUser(this._user), "@");
          }
          uri += this._host;
          if (this._port || this._port === 0) {
            uri += ":".concat(this._port);
          }
          for (var parameter in this._parameters) {
            if (Object.prototype.hasOwnProperty.call(this._parameters, parameter)) {
              uri += ";".concat(parameter);
              if (this._parameters[parameter] !== null) {
                uri += "=".concat(this._parameters[parameter]);
              }
            }
          }
          for (var header in this._headers) {
            if (Object.prototype.hasOwnProperty.call(this._headers, header)) {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = this._headers[header][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var item = _step.value;
                  headers.push("".concat(header, "=").concat(item));
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          }
          if (headers.length > 0) {
            uri += "?".concat(headers.join("&"));
          }
          return uri;
        }
      }, {
        key: "toAor",
        value: function toAor(show_port) {
          var aor = "".concat(this._scheme, ":");
          if (this._user) {
            aor += "".concat(Utils.escapeUser(this._user), "@");
          }
          aor += this._host;
          if (show_port && (this._port || this._port === 0)) {
            aor += ":".concat(this._port);
          }
          return aor;
        }
      }, {
        key: "scheme",
        get: function get() {
          return this._scheme;
        },
        set: function set(value) {
          this._scheme = value.toLowerCase();
        }
      }, {
        key: "user",
        get: function get() {
          return this._user;
        },
        set: function set(value) {
          this._user = value;
        }
      }, {
        key: "host",
        get: function get() {
          return this._host;
        },
        set: function set(value) {
          this._host = value.toLowerCase();
        }
      }, {
        key: "port",
        get: function get() {
          return this._port;
        },
        set: function set(value) {
          this._port = value === 0 ? value : parseInt(value, 10) || null;
        }
      }]);
      return URI;
    }();
  }
});

// node_modules/jssip/lib-es5/Utils.js
var require_Utils = __commonJS({
  "node_modules/jssip/lib-es5/Utils.js"(exports) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var JsSIP_C = require_Constants();
    var URI = require_URI();
    var Grammar = require_Grammar();
    exports.str_utf8_length = function(string) {
      return unescape(encodeURIComponent(string)).length;
    };
    var isFunction = exports.isFunction = function(fn) {
      if (fn !== void 0) {
        return Object.prototype.toString.call(fn) === "[object Function]" ? true : false;
      } else {
        return false;
      }
    };
    exports.isString = function(str) {
      if (str !== void 0) {
        return Object.prototype.toString.call(str) === "[object String]" ? true : false;
      } else {
        return false;
      }
    };
    exports.isDecimal = function(num) {
      return !isNaN(num) && parseFloat(num) === parseInt(num, 10);
    };
    exports.isEmpty = function(value) {
      return value === null || value === "" || value === void 0 || Array.isArray(value) && value.length === 0 || typeof value === "number" && isNaN(value);
    };
    exports.hasMethods = function(obj) {
      for (var _len = arguments.length, methodNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        methodNames[_key - 1] = arguments[_key];
      }
      for (var _i = 0, _methodNames = methodNames; _i < _methodNames.length; _i++) {
        var methodName = _methodNames[_i];
        if (isFunction(obj[methodName])) {
          return false;
        }
      }
      return true;
    };
    var createRandomToken = exports.createRandomToken = function(size) {
      var base = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 32;
      var i, r, token = "";
      for (i = 0; i < size; i++) {
        r = Math.random() * base | 0;
        token += r.toString(base);
      }
      return token;
    };
    exports.newTag = function() {
      return createRandomToken(10);
    };
    exports.newUUID = function() {
      var UUID = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
      return UUID;
    };
    exports.hostType = function(host) {
      if (!host) {
        return;
      } else {
        host = Grammar.parse(host, "host");
        if (host !== -1) {
          return host.host_type;
        }
      }
    };
    var escapeUser = exports.escapeUser = function(user) {
      return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ":").replace(/%2B/ig, "+").replace(/%3F/ig, "?").replace(/%2F/ig, "/");
    };
    exports.normalizeTarget = function(target, domain) {
      if (!target) {
        return;
      } else if (target instanceof URI) {
        return target;
      } else if (typeof target === "string") {
        var target_array = target.split("@");
        var target_user;
        var target_domain;
        switch (target_array.length) {
          case 1:
            if (!domain) {
              return;
            }
            target_user = target;
            target_domain = domain;
            break;
          case 2:
            target_user = target_array[0];
            target_domain = target_array[1];
            break;
          default:
            target_user = target_array.slice(0, target_array.length - 1).join("@");
            target_domain = target_array[target_array.length - 1];
        }
        target_user = target_user.replace(/^(sips?|tel):/i, "");
        if (/^[-.()]*\+?[0-9\-.()]+$/.test(target_user)) {
          target_user = target_user.replace(/[-.()]/g, "");
        }
        target = "".concat(JsSIP_C.SIP, ":").concat(escapeUser(target_user), "@").concat(target_domain);
        var uri;
        if (uri = URI.parse(target)) {
          return uri;
        } else {
          return;
        }
      } else {
        return;
      }
    };
    exports.headerize = function(string) {
      var exceptions = {
        "Call-Id": "Call-ID",
        "Cseq": "CSeq",
        "Www-Authenticate": "WWW-Authenticate"
      };
      var name = string.toLowerCase().replace(/_/g, "-").split("-");
      var hname = "";
      var parts = name.length;
      var part;
      for (part = 0; part < parts; part++) {
        if (part !== 0) {
          hname += "-";
        }
        hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);
      }
      if (exceptions[hname]) {
        hname = exceptions[hname];
      }
      return hname;
    };
    exports.sipErrorCause = function(status_code) {
      for (var cause in JsSIP_C.SIP_ERROR_CAUSES) {
        if (JsSIP_C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {
          return JsSIP_C.causes[cause];
        }
      }
      return JsSIP_C.causes.SIP_FAILURE_CODE;
    };
    exports.getRandomTestNetIP = function() {
      function getOctet(from, to) {
        return Math.floor(Math.random() * (to - from + 1) + from);
      }
      return "192.0.2.".concat(getOctet(1, 254));
    };
    exports.calculateMD5 = function(string) {
      function rotateLeft(lValue, iShiftBits) {
        return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
      }
      function addUnsigned(lX, lY) {
        var lX8 = lX & 2147483648;
        var lY8 = lY & 2147483648;
        var lX4 = lX & 1073741824;
        var lY4 = lY & 1073741824;
        var lResult = (lX & 1073741823) + (lY & 1073741823);
        if (lX4 & lY4) {
          return lResult ^ 2147483648 ^ lX8 ^ lY8;
        }
        if (lX4 | lY4) {
          if (lResult & 1073741824) {
            return lResult ^ 3221225472 ^ lX8 ^ lY8;
          } else {
            return lResult ^ 1073741824 ^ lX8 ^ lY8;
          }
        } else {
          return lResult ^ lX8 ^ lY8;
        }
      }
      function doF(x2, y, z) {
        return x2 & y | ~x2 & z;
      }
      function doG(x2, y, z) {
        return x2 & z | y & ~z;
      }
      function doH(x2, y, z) {
        return x2 ^ y ^ z;
      }
      function doI(x2, y, z) {
        return y ^ (x2 | ~z);
      }
      function doFF(a2, b2, c2, d2, x2, s, ac) {
        a2 = addUnsigned(a2, addUnsigned(addUnsigned(doF(b2, c2, d2), x2), ac));
        return addUnsigned(rotateLeft(a2, s), b2);
      }
      function doGG(a2, b2, c2, d2, x2, s, ac) {
        a2 = addUnsigned(a2, addUnsigned(addUnsigned(doG(b2, c2, d2), x2), ac));
        return addUnsigned(rotateLeft(a2, s), b2);
      }
      function doHH(a2, b2, c2, d2, x2, s, ac) {
        a2 = addUnsigned(a2, addUnsigned(addUnsigned(doH(b2, c2, d2), x2), ac));
        return addUnsigned(rotateLeft(a2, s), b2);
      }
      function doII(a2, b2, c2, d2, x2, s, ac) {
        a2 = addUnsigned(a2, addUnsigned(addUnsigned(doI(b2, c2, d2), x2), ac));
        return addUnsigned(rotateLeft(a2, s), b2);
      }
      function convertToWordArray(str) {
        var lWordCount;
        var lMessageLength = str.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = new Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
          lWordCount = (lByteCount - lByteCount % 4) / 4;
          lBytePosition = lByteCount % 4 * 8;
          lWordArray[lWordCount] = lWordArray[lWordCount] | str.charCodeAt(lByteCount) << lBytePosition;
          lByteCount++;
        }
        lWordCount = (lByteCount - lByteCount % 4) / 4;
        lBytePosition = lByteCount % 4 * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | 128 << lBytePosition;
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
      }
      function wordToHex(lValue) {
        var wordToHexValue = "", wordToHexValue_temp = "", lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
          lByte = lValue >>> lCount * 8 & 255;
          wordToHexValue_temp = "0".concat(lByte.toString(16));
          wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);
        }
        return wordToHexValue;
      }
      function utf8Encode(str) {
        str = str.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < str.length; n++) {
          var _c = str.charCodeAt(n);
          if (_c < 128) {
            utftext += String.fromCharCode(_c);
          } else if (_c > 127 && _c < 2048) {
            utftext += String.fromCharCode(_c >> 6 | 192);
            utftext += String.fromCharCode(_c & 63 | 128);
          } else {
            utftext += String.fromCharCode(_c >> 12 | 224);
            utftext += String.fromCharCode(_c >> 6 & 63 | 128);
            utftext += String.fromCharCode(_c & 63 | 128);
          }
        }
        return utftext;
      }
      var x = [];
      var k, AA, BB, CC, DD, a, b, c, d;
      var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
      var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
      var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
      var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
      string = utf8Encode(string);
      x = convertToWordArray(string);
      a = 1732584193;
      b = 4023233417;
      c = 2562383102;
      d = 271733878;
      for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = doFF(a, b, c, d, x[k + 0], S11, 3614090360);
        d = doFF(d, a, b, c, x[k + 1], S12, 3905402710);
        c = doFF(c, d, a, b, x[k + 2], S13, 606105819);
        b = doFF(b, c, d, a, x[k + 3], S14, 3250441966);
        a = doFF(a, b, c, d, x[k + 4], S11, 4118548399);
        d = doFF(d, a, b, c, x[k + 5], S12, 1200080426);
        c = doFF(c, d, a, b, x[k + 6], S13, 2821735955);
        b = doFF(b, c, d, a, x[k + 7], S14, 4249261313);
        a = doFF(a, b, c, d, x[k + 8], S11, 1770035416);
        d = doFF(d, a, b, c, x[k + 9], S12, 2336552879);
        c = doFF(c, d, a, b, x[k + 10], S13, 4294925233);
        b = doFF(b, c, d, a, x[k + 11], S14, 2304563134);
        a = doFF(a, b, c, d, x[k + 12], S11, 1804603682);
        d = doFF(d, a, b, c, x[k + 13], S12, 4254626195);
        c = doFF(c, d, a, b, x[k + 14], S13, 2792965006);
        b = doFF(b, c, d, a, x[k + 15], S14, 1236535329);
        a = doGG(a, b, c, d, x[k + 1], S21, 4129170786);
        d = doGG(d, a, b, c, x[k + 6], S22, 3225465664);
        c = doGG(c, d, a, b, x[k + 11], S23, 643717713);
        b = doGG(b, c, d, a, x[k + 0], S24, 3921069994);
        a = doGG(a, b, c, d, x[k + 5], S21, 3593408605);
        d = doGG(d, a, b, c, x[k + 10], S22, 38016083);
        c = doGG(c, d, a, b, x[k + 15], S23, 3634488961);
        b = doGG(b, c, d, a, x[k + 4], S24, 3889429448);
        a = doGG(a, b, c, d, x[k + 9], S21, 568446438);
        d = doGG(d, a, b, c, x[k + 14], S22, 3275163606);
        c = doGG(c, d, a, b, x[k + 3], S23, 4107603335);
        b = doGG(b, c, d, a, x[k + 8], S24, 1163531501);
        a = doGG(a, b, c, d, x[k + 13], S21, 2850285829);
        d = doGG(d, a, b, c, x[k + 2], S22, 4243563512);
        c = doGG(c, d, a, b, x[k + 7], S23, 1735328473);
        b = doGG(b, c, d, a, x[k + 12], S24, 2368359562);
        a = doHH(a, b, c, d, x[k + 5], S31, 4294588738);
        d = doHH(d, a, b, c, x[k + 8], S32, 2272392833);
        c = doHH(c, d, a, b, x[k + 11], S33, 1839030562);
        b = doHH(b, c, d, a, x[k + 14], S34, 4259657740);
        a = doHH(a, b, c, d, x[k + 1], S31, 2763975236);
        d = doHH(d, a, b, c, x[k + 4], S32, 1272893353);
        c = doHH(c, d, a, b, x[k + 7], S33, 4139469664);
        b = doHH(b, c, d, a, x[k + 10], S34, 3200236656);
        a = doHH(a, b, c, d, x[k + 13], S31, 681279174);
        d = doHH(d, a, b, c, x[k + 0], S32, 3936430074);
        c = doHH(c, d, a, b, x[k + 3], S33, 3572445317);
        b = doHH(b, c, d, a, x[k + 6], S34, 76029189);
        a = doHH(a, b, c, d, x[k + 9], S31, 3654602809);
        d = doHH(d, a, b, c, x[k + 12], S32, 3873151461);
        c = doHH(c, d, a, b, x[k + 15], S33, 530742520);
        b = doHH(b, c, d, a, x[k + 2], S34, 3299628645);
        a = doII(a, b, c, d, x[k + 0], S41, 4096336452);
        d = doII(d, a, b, c, x[k + 7], S42, 1126891415);
        c = doII(c, d, a, b, x[k + 14], S43, 2878612391);
        b = doII(b, c, d, a, x[k + 5], S44, 4237533241);
        a = doII(a, b, c, d, x[k + 12], S41, 1700485571);
        d = doII(d, a, b, c, x[k + 3], S42, 2399980690);
        c = doII(c, d, a, b, x[k + 10], S43, 4293915773);
        b = doII(b, c, d, a, x[k + 1], S44, 2240044497);
        a = doII(a, b, c, d, x[k + 8], S41, 1873313359);
        d = doII(d, a, b, c, x[k + 15], S42, 4264355552);
        c = doII(c, d, a, b, x[k + 6], S43, 2734768916);
        b = doII(b, c, d, a, x[k + 13], S44, 1309151649);
        a = doII(a, b, c, d, x[k + 4], S41, 4149444226);
        d = doII(d, a, b, c, x[k + 11], S42, 3174756917);
        c = doII(c, d, a, b, x[k + 2], S43, 718787259);
        b = doII(b, c, d, a, x[k + 9], S44, 3951481745);
        a = addUnsigned(a, AA);
        b = addUnsigned(b, BB);
        c = addUnsigned(c, CC);
        d = addUnsigned(d, DD);
      }
      var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);
      return temp.toLowerCase();
    };
    exports.closeMediaStream = function(stream) {
      if (!stream) {
        return;
      }
      try {
        var tracks;
        if (stream.getTracks) {
          tracks = stream.getTracks();
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = tracks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var track = _step.value;
              track.stop();
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else {
          tracks = stream.getAudioTracks();
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = tracks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _track = _step2.value;
              _track.stop();
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          tracks = stream.getVideoTracks();
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = tracks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _track2 = _step3.value;
              _track2.stop();
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (error) {
        if (typeof stream.stop === "function" || _typeof(stream.stop) === "object") {
          stream.stop();
        }
      }
    };
    exports.cloneArray = function(array) {
      return array && array.slice() || [];
    };
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter6() {
      EventEmitter6.init.call(this);
    }
    module.exports = EventEmitter6;
    module.exports.once = once;
    EventEmitter6.EventEmitter = EventEmitter6;
    EventEmitter6.prototype._events = void 0;
    EventEmitter6.prototype._eventsCount = 0;
    EventEmitter6.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter6, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter6.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter6.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter6.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter6.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter6.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter6.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter6.prototype.on = EventEmitter6.prototype.addListener;
    EventEmitter6.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter6.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter6.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter6.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter6.prototype.off = EventEmitter6.prototype.removeListener;
    EventEmitter6.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter6.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter6.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter6.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter6.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter6.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/sdp-transform/lib/grammar.js
var require_grammar = __commonJS({
  "node_modules/sdp-transform/lib/grammar.js"(exports, module) {
    var grammar = module.exports = {
      v: [{
        name: "version",
        reg: /^(\d*)$/
      }],
      o: [{
        // o=- 20518 0 IN IP4 203.0.113.1
        // NB: sessionId will be a String in most cases because it is huge
        name: "origin",
        reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
        names: ["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"],
        format: "%s %s %d %s IP%d %s"
      }],
      // default parsing of these only (though some of these feel outdated)
      s: [{ name: "name" }],
      i: [{ name: "description" }],
      u: [{ name: "uri" }],
      e: [{ name: "email" }],
      p: [{ name: "phone" }],
      z: [{ name: "timezones" }],
      // TODO: this one can actually be parsed properly...
      r: [{ name: "repeats" }],
      // TODO: this one can also be parsed properly
      // k: [{}], // outdated thing ignored
      t: [{
        // t=0 0
        name: "timing",
        reg: /^(\d*) (\d*)/,
        names: ["start", "stop"],
        format: "%d %d"
      }],
      c: [{
        // c=IN IP4 10.47.197.26
        name: "connection",
        reg: /^IN IP(\d) (\S*)/,
        names: ["version", "ip"],
        format: "IN IP%d %s"
      }],
      b: [{
        // b=AS:4000
        push: "bandwidth",
        reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
        names: ["type", "limit"],
        format: "%s:%s"
      }],
      m: [{
        // m=video 51744 RTP/AVP 126 97 98 34 31
        // NB: special - pushes to session
        // TODO: rtp/fmtp should be filtered by the payloads found here?
        reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
        names: ["type", "port", "protocol", "payloads"],
        format: "%s %d %s %s"
      }],
      a: [
        {
          // a=rtpmap:110 opus/48000/2
          push: "rtp",
          reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
          names: ["payload", "codec", "rate", "encoding"],
          format: function(o) {
            return o.encoding ? "rtpmap:%d %s/%s/%s" : o.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
          }
        },
        {
          // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
          // a=fmtp:111 minptime=10; useinbandfec=1
          push: "fmtp",
          reg: /^fmtp:(\d*) ([\S| ]*)/,
          names: ["payload", "config"],
          format: "fmtp:%d %s"
        },
        {
          // a=control:streamid=0
          name: "control",
          reg: /^control:(.*)/,
          format: "control:%s"
        },
        {
          // a=rtcp:65179 IN IP4 193.84.77.194
          name: "rtcp",
          reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
          names: ["port", "netType", "ipVer", "address"],
          format: function(o) {
            return o.address != null ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
          }
        },
        {
          // a=rtcp-fb:98 trr-int 100
          push: "rtcpFbTrrInt",
          reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
          names: ["payload", "value"],
          format: "rtcp-fb:%s trr-int %d"
        },
        {
          // a=rtcp-fb:98 nack rpsi
          push: "rtcpFb",
          reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
          names: ["payload", "type", "subtype"],
          format: function(o) {
            return o.subtype != null ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
          }
        },
        {
          // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
          // a=extmap:1/recvonly URI-gps-string
          // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
          push: "ext",
          reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
          names: ["value", "direction", "encrypt-uri", "uri", "config"],
          format: function(o) {
            return "extmap:%d" + (o.direction ? "/%s" : "%v") + (o["encrypt-uri"] ? " %s" : "%v") + " %s" + (o.config ? " %s" : "");
          }
        },
        {
          // a=extmap-allow-mixed
          name: "extmapAllowMixed",
          reg: /^(extmap-allow-mixed)/
        },
        {
          // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
          push: "crypto",
          reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
          names: ["id", "suite", "config", "sessionConfig"],
          format: function(o) {
            return o.sessionConfig != null ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
          }
        },
        {
          // a=setup:actpass
          name: "setup",
          reg: /^setup:(\w*)/,
          format: "setup:%s"
        },
        {
          // a=connection:new
          name: "connectionType",
          reg: /^connection:(new|existing)/,
          format: "connection:%s"
        },
        {
          // a=mid:1
          name: "mid",
          reg: /^mid:([^\s]*)/,
          format: "mid:%s"
        },
        {
          // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
          name: "msid",
          reg: /^msid:(.*)/,
          format: "msid:%s"
        },
        {
          // a=ptime:20
          name: "ptime",
          reg: /^ptime:(\d*(?:\.\d*)*)/,
          format: "ptime:%d"
        },
        {
          // a=maxptime:60
          name: "maxptime",
          reg: /^maxptime:(\d*(?:\.\d*)*)/,
          format: "maxptime:%d"
        },
        {
          // a=sendrecv
          name: "direction",
          reg: /^(sendrecv|recvonly|sendonly|inactive)/
        },
        {
          // a=ice-lite
          name: "icelite",
          reg: /^(ice-lite)/
        },
        {
          // a=ice-ufrag:F7gI
          name: "iceUfrag",
          reg: /^ice-ufrag:(\S*)/,
          format: "ice-ufrag:%s"
        },
        {
          // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
          name: "icePwd",
          reg: /^ice-pwd:(\S*)/,
          format: "ice-pwd:%s"
        },
        {
          // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
          name: "fingerprint",
          reg: /^fingerprint:(\S*) (\S*)/,
          names: ["type", "hash"],
          format: "fingerprint:%s %s"
        },
        {
          // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
          // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
          // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
          // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
          // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
          push: "candidates",
          reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
          names: ["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"],
          format: function(o) {
            var str = "candidate:%s %d %s %d %s %d typ %s";
            str += o.raddr != null ? " raddr %s rport %d" : "%v%v";
            str += o.tcptype != null ? " tcptype %s" : "%v";
            if (o.generation != null) {
              str += " generation %d";
            }
            str += o["network-id"] != null ? " network-id %d" : "%v";
            str += o["network-cost"] != null ? " network-cost %d" : "%v";
            return str;
          }
        },
        {
          // a=end-of-candidates (keep after the candidates line for readability)
          name: "endOfCandidates",
          reg: /^(end-of-candidates)/
        },
        {
          // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
          name: "remoteCandidates",
          reg: /^remote-candidates:(.*)/,
          format: "remote-candidates:%s"
        },
        {
          // a=ice-options:google-ice
          name: "iceOptions",
          reg: /^ice-options:(\S*)/,
          format: "ice-options:%s"
        },
        {
          // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
          push: "ssrcs",
          reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
          names: ["id", "attribute", "value"],
          format: function(o) {
            var str = "ssrc:%d";
            if (o.attribute != null) {
              str += " %s";
              if (o.value != null) {
                str += ":%s";
              }
            }
            return str;
          }
        },
        {
          // a=ssrc-group:FEC 1 2
          // a=ssrc-group:FEC-FR 3004364195 1080772241
          push: "ssrcGroups",
          // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
          reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
          names: ["semantics", "ssrcs"],
          format: "ssrc-group:%s %s"
        },
        {
          // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
          name: "msidSemantic",
          reg: /^msid-semantic:\s?(\w*) (\S*)/,
          names: ["semantic", "token"],
          format: "msid-semantic: %s %s"
          // space after ':' is not accidental
        },
        {
          // a=group:BUNDLE audio video
          push: "groups",
          reg: /^group:(\w*) (.*)/,
          names: ["type", "mids"],
          format: "group:%s %s"
        },
        {
          // a=rtcp-mux
          name: "rtcpMux",
          reg: /^(rtcp-mux)/
        },
        {
          // a=rtcp-rsize
          name: "rtcpRsize",
          reg: /^(rtcp-rsize)/
        },
        {
          // a=sctpmap:5000 webrtc-datachannel 1024
          name: "sctpmap",
          reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
          names: ["sctpmapNumber", "app", "maxMessageSize"],
          format: function(o) {
            return o.maxMessageSize != null ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
          }
        },
        {
          // a=x-google-flag:conference
          name: "xGoogleFlag",
          reg: /^x-google-flag:([^\s]*)/,
          format: "x-google-flag:%s"
        },
        {
          // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
          push: "rids",
          reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
          names: ["id", "direction", "params"],
          format: function(o) {
            return o.params ? "rid:%s %s %s" : "rid:%s %s";
          }
        },
        {
          // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
          // a=imageattr:* send [x=800,y=640] recv *
          // a=imageattr:100 recv [x=320,y=240]
          push: "imageattrs",
          reg: new RegExp(
            // a=imageattr:97
            "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
          ),
          names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
          format: function(o) {
            return "imageattr:%s %s %s" + (o.dir2 ? " %s %s" : "");
          }
        },
        {
          // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
          // a=simulcast:recv 1;4,5 send 6;7
          name: "simulcast",
          reg: new RegExp(
            // a=simulcast:
            "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
          ),
          names: ["dir1", "list1", "dir2", "list2"],
          format: function(o) {
            return "simulcast:%s %s" + (o.dir2 ? " %s %s" : "");
          }
        },
        {
          // old simulcast draft 03 (implemented by Firefox)
          //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
          // a=simulcast: recv pt=97;98 send pt=97
          // a=simulcast: send rid=5;6;7 paused=6,7
          name: "simulcast_03",
          reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
          names: ["value"],
          format: "simulcast: %s"
        },
        {
          // a=framerate:25
          // a=framerate:29.97
          name: "framerate",
          reg: /^framerate:(\d+(?:$|\.\d+))/,
          format: "framerate:%s"
        },
        {
          // RFC4570
          // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
          name: "sourceFilter",
          reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
          names: ["filterMode", "netType", "addressTypes", "destAddress", "srcList"],
          format: "source-filter: %s %s %s %s %s"
        },
        {
          // a=bundle-only
          name: "bundleOnly",
          reg: /^(bundle-only)/
        },
        {
          // a=label:1
          name: "label",
          reg: /^label:(.+)/,
          format: "label:%s"
        },
        {
          // RFC version 26 for SCTP over DTLS
          // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
          name: "sctpPort",
          reg: /^sctp-port:(\d+)$/,
          format: "sctp-port:%s"
        },
        {
          // RFC version 26 for SCTP over DTLS
          // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
          name: "maxMessageSize",
          reg: /^max-message-size:(\d+)$/,
          format: "max-message-size:%s"
        },
        {
          // RFC7273
          // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
          push: "tsRefClocks",
          reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
          names: ["clksrc", "clksrcExt"],
          format: function(o) {
            return "ts-refclk:%s" + (o.clksrcExt != null ? "=%s" : "");
          }
        },
        {
          // RFC7273
          // a=mediaclk:direct=963214424
          name: "mediaClk",
          reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
          names: ["id", "mediaClockName", "mediaClockValue", "rateNumerator", "rateDenominator"],
          format: function(o) {
            var str = "mediaclk:";
            str += o.id != null ? "id=%s %s" : "%v%s";
            str += o.mediaClockValue != null ? "=%s" : "";
            str += o.rateNumerator != null ? " rate=%s" : "";
            str += o.rateDenominator != null ? "/%s" : "";
            return str;
          }
        },
        {
          // a=keywds:keywords
          name: "keywords",
          reg: /^keywds:(.+)$/,
          format: "keywds:%s"
        },
        {
          // a=content:main
          name: "content",
          reg: /^content:(.+)/,
          format: "content:%s"
        },
        // BFCP https://tools.ietf.org/html/rfc4583
        {
          // a=floorctrl:c-s
          name: "bfcpFloorCtrl",
          reg: /^floorctrl:(c-only|s-only|c-s)/,
          format: "floorctrl:%s"
        },
        {
          // a=confid:1
          name: "bfcpConfId",
          reg: /^confid:(\d+)/,
          format: "confid:%s"
        },
        {
          // a=userid:1
          name: "bfcpUserId",
          reg: /^userid:(\d+)/,
          format: "userid:%s"
        },
        {
          // a=floorid:1
          name: "bfcpFloorId",
          reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
          names: ["id", "mStream"],
          format: "floorid:%s mstrm:%s"
        },
        {
          // any a= that we don't understand is kept verbatim on media.invalid
          push: "invalid",
          names: ["value"]
        }
      ]
    };
    Object.keys(grammar).forEach(function(key) {
      var objs = grammar[key];
      objs.forEach(function(obj) {
        if (!obj.reg) {
          obj.reg = /(.*)/;
        }
        if (!obj.format) {
          obj.format = "%s";
        }
      });
    });
  }
});

// node_modules/sdp-transform/lib/parser.js
var require_parser = __commonJS({
  "node_modules/sdp-transform/lib/parser.js"(exports) {
    var toIntIfInt = function(v) {
      return String(Number(v)) === v ? Number(v) : v;
    };
    var attachProperties = function(match, location, names, rawName) {
      if (rawName && !names) {
        location[rawName] = toIntIfInt(match[1]);
      } else {
        for (var i = 0; i < names.length; i += 1) {
          if (match[i + 1] != null) {
            location[names[i]] = toIntIfInt(match[i + 1]);
          }
        }
      }
    };
    var parseReg = function(obj, location, content) {
      var needsBlank = obj.name && obj.names;
      if (obj.push && !location[obj.push]) {
        location[obj.push] = [];
      } else if (needsBlank && !location[obj.name]) {
        location[obj.name] = {};
      }
      var keyLocation = obj.push ? {} : (
        // blank object that will be pushed
        needsBlank ? location[obj.name] : location
      );
      attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);
      if (obj.push) {
        location[obj.push].push(keyLocation);
      }
    };
    var grammar = require_grammar();
    var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
    exports.parse = function(sdp) {
      var session = {}, media = [], location = session;
      sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function(l) {
        var type = l[0];
        var content = l.slice(2);
        if (type === "m") {
          media.push({ rtp: [], fmtp: [] });
          location = media[media.length - 1];
        }
        for (var j = 0; j < (grammar[type] || []).length; j += 1) {
          var obj = grammar[type][j];
          if (obj.reg.test(content)) {
            return parseReg(obj, location, content);
          }
        }
      });
      session.media = media;
      return session;
    };
    var paramReducer = function(acc, expr) {
      var s = expr.split(/=(.+)/, 2);
      if (s.length === 2) {
        acc[s[0]] = toIntIfInt(s[1]);
      } else if (s.length === 1 && expr.length > 1) {
        acc[s[0]] = void 0;
      }
      return acc;
    };
    exports.parseParams = function(str) {
      return str.split(/;\s?/).reduce(paramReducer, {});
    };
    exports.parseFmtpConfig = exports.parseParams;
    exports.parsePayloads = function(str) {
      return str.toString().split(" ").map(Number);
    };
    exports.parseRemoteCandidates = function(str) {
      var candidates = [];
      var parts = str.split(" ").map(toIntIfInt);
      for (var i = 0; i < parts.length; i += 3) {
        candidates.push({
          component: parts[i],
          ip: parts[i + 1],
          port: parts[i + 2]
        });
      }
      return candidates;
    };
    exports.parseImageAttributes = function(str) {
      return str.split(" ").map(function(item) {
        return item.substring(1, item.length - 1).split(",").reduce(paramReducer, {});
      });
    };
    exports.parseSimulcastStreamList = function(str) {
      return str.split(";").map(function(stream) {
        return stream.split(",").map(function(format42) {
          var scid, paused = false;
          if (format42[0] !== "~") {
            scid = toIntIfInt(format42);
          } else {
            scid = toIntIfInt(format42.substring(1, format42.length));
            paused = true;
          }
          return {
            scid,
            paused
          };
        });
      });
    };
  }
});

// node_modules/sdp-transform/lib/writer.js
var require_writer = __commonJS({
  "node_modules/sdp-transform/lib/writer.js"(exports, module) {
    var grammar = require_grammar();
    var formatRegExp = /%[sdv%]/g;
    var format42 = function(formatStr) {
      var i = 1;
      var args = arguments;
      var len = args.length;
      return formatStr.replace(formatRegExp, function(x) {
        if (i >= len) {
          return x;
        }
        var arg = args[i];
        i += 1;
        switch (x) {
          case "%%":
            return "%";
          case "%s":
            return String(arg);
          case "%d":
            return Number(arg);
          case "%v":
            return "";
        }
      });
    };
    var makeLine = function(type, obj, location) {
      var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;
      var args = [type + "=" + str];
      if (obj.names) {
        for (var i = 0; i < obj.names.length; i += 1) {
          var n = obj.names[i];
          if (obj.name) {
            args.push(location[obj.name][n]);
          } else {
            args.push(location[obj.names[i]]);
          }
        }
      } else {
        args.push(location[obj.name]);
      }
      return format42.apply(null, args);
    };
    var defaultOuterOrder = [
      "v",
      "o",
      "s",
      "i",
      "u",
      "e",
      "p",
      "c",
      "b",
      "t",
      "r",
      "z",
      "a"
    ];
    var defaultInnerOrder = ["i", "c", "b", "a"];
    module.exports = function(session, opts) {
      opts = opts || {};
      if (session.version == null) {
        session.version = 0;
      }
      if (session.name == null) {
        session.name = " ";
      }
      session.media.forEach(function(mLine) {
        if (mLine.payloads == null) {
          mLine.payloads = "";
        }
      });
      var outerOrder = opts.outerOrder || defaultOuterOrder;
      var innerOrder = opts.innerOrder || defaultInnerOrder;
      var sdp = [];
      outerOrder.forEach(function(type) {
        grammar[type].forEach(function(obj) {
          if (obj.name in session && session[obj.name] != null) {
            sdp.push(makeLine(type, obj, session));
          } else if (obj.push in session && session[obj.push] != null) {
            session[obj.push].forEach(function(el) {
              sdp.push(makeLine(type, obj, el));
            });
          }
        });
      });
      session.media.forEach(function(mLine) {
        sdp.push(makeLine("m", grammar.m[0], mLine));
        innerOrder.forEach(function(type) {
          grammar[type].forEach(function(obj) {
            if (obj.name in mLine && mLine[obj.name] != null) {
              sdp.push(makeLine(type, obj, mLine));
            } else if (obj.push in mLine && mLine[obj.push] != null) {
              mLine[obj.push].forEach(function(el) {
                sdp.push(makeLine(type, obj, el));
              });
            }
          });
        });
      });
      return sdp.join("\r\n") + "\r\n";
    };
  }
});

// node_modules/sdp-transform/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/sdp-transform/lib/index.js"(exports) {
    var parser = require_parser();
    var writer = require_writer();
    exports.write = writer;
    exports.parse = parser.parse;
    exports.parseParams = parser.parseParams;
    exports.parseFmtpConfig = parser.parseFmtpConfig;
    exports.parsePayloads = parser.parsePayloads;
    exports.parseRemoteCandidates = parser.parseRemoteCandidates;
    exports.parseImageAttributes = parser.parseImageAttributes;
    exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse42(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse42(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format42) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format42];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug.useColors();
        debug2.color = createDebug.selectColor(namespace);
        debug2.extend = extend;
        debug2.destroy = createDebug.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug2);
        }
        return debug2;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/jssip/lib-es5/SIPMessage.js
var require_SIPMessage = __commonJS({
  "node_modules/jssip/lib-es5/SIPMessage.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var sdp_transform = require_lib2();
    var JsSIP_C = require_Constants();
    var Utils = require_Utils();
    var NameAddrHeader = require_NameAddrHeader();
    var Grammar = require_Grammar();
    var debug2 = require_browser()("JsSIP:SIPMessage");
    var OutgoingRequest = function() {
      function OutgoingRequest2(method, ruri, ua, params, extraHeaders, body) {
        _classCallCheck(this, OutgoingRequest2);
        if (!method || !ruri || !ua) {
          return null;
        }
        params = params || {};
        this.ua = ua;
        this.headers = {};
        this.method = method;
        this.ruri = ruri;
        this.body = body;
        this.extraHeaders = Utils.cloneArray(extraHeaders);
        if (params.route_set) {
          this.setHeader("route", params.route_set);
        } else if (ua.configuration.use_preloaded_route) {
          this.setHeader("route", "<".concat(ua.transport.sip_uri, ";lr>"));
        }
        this.setHeader("via", "");
        this.setHeader("max-forwards", JsSIP_C.MAX_FORWARDS);
        var to_uri = params.to_uri || ruri;
        var to_params = params.to_tag ? {
          tag: params.to_tag
        } : null;
        var to_display_name = typeof params.to_display_name !== "undefined" ? params.to_display_name : null;
        this.to = new NameAddrHeader(to_uri, to_display_name, to_params);
        this.setHeader("to", this.to.toString());
        var from_uri = params.from_uri || ua.configuration.uri;
        var from_params = {
          tag: params.from_tag || Utils.newTag()
        };
        var display_name;
        if (typeof params.from_display_name !== "undefined") {
          display_name = params.from_display_name;
        } else if (ua.configuration.display_name) {
          display_name = ua.configuration.display_name;
        } else {
          display_name = null;
        }
        this.from = new NameAddrHeader(from_uri, display_name, from_params);
        this.setHeader("from", this.from.toString());
        var call_id = params.call_id || ua.configuration.jssip_id + Utils.createRandomToken(15);
        this.call_id = call_id;
        this.setHeader("call-id", call_id);
        var cseq = params.cseq || Math.floor(Math.random() * 1e4);
        this.cseq = cseq;
        this.setHeader("cseq", "".concat(cseq, " ").concat(method));
      }
      _createClass(OutgoingRequest2, [{
        key: "setHeader",
        value: function setHeader(name, value) {
          var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), "i");
          for (var idx = 0; idx < this.extraHeaders.length; idx++) {
            if (regexp.test(this.extraHeaders[idx])) {
              this.extraHeaders.splice(idx, 1);
            }
          }
          this.headers[Utils.headerize(name)] = Array.isArray(value) ? value : [value];
        }
        /**
         * Get the value of the given header name at the given position.
         * -param {String} name header name
         * -returns {String|undefined} Returns the specified header, null if header doesn't exist.
         */
      }, {
        key: "getHeader",
        value: function getHeader(name) {
          var headers = this.headers[Utils.headerize(name)];
          if (headers) {
            if (headers[0]) {
              return headers[0];
            }
          } else {
            var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), "i");
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = void 0;
            try {
              for (var _iterator = this.extraHeaders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var header = _step.value;
                if (regexp.test(header)) {
                  return header.substring(header.indexOf(":") + 1).trim();
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
          return;
        }
        /**
         * Get the header/s of the given name.
         * -param {String} name header name
         * -returns {Array} Array with all the headers of the specified name.
         */
      }, {
        key: "getHeaders",
        value: function getHeaders(name) {
          var headers = this.headers[Utils.headerize(name)];
          var result = [];
          if (headers) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = headers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var header = _step2.value;
                result.push(header);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            return result;
          } else {
            var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), "i");
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = void 0;
            try {
              for (var _iterator3 = this.extraHeaders[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _header = _step3.value;
                if (regexp.test(_header)) {
                  result.push(_header.substring(_header.indexOf(":") + 1).trim());
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
            return result;
          }
        }
        /**
         * Verify the existence of the given header.
         * -param {String} name header name
         * -returns {boolean} true if header with given name exists, false otherwise
         */
      }, {
        key: "hasHeader",
        value: function hasHeader(name) {
          if (this.headers[Utils.headerize(name)]) {
            return true;
          } else {
            var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), "i");
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = void 0;
            try {
              for (var _iterator4 = this.extraHeaders[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var header = _step4.value;
                if (regexp.test(header)) {
                  return true;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }
          return false;
        }
        /**
         * Parse the current body as a SDP and store the resulting object
         * into this.sdp.
         * -param {Boolean} force: Parse even if this.sdp already exists.
         *
         * Returns this.sdp.
         */
      }, {
        key: "parseSDP",
        value: function parseSDP(force) {
          if (!force && this.sdp) {
            return this.sdp;
          } else {
            this.sdp = sdp_transform.parse(this.body || "");
            return this.sdp;
          }
        }
      }, {
        key: "toString",
        value: function toString() {
          var msg = "".concat(this.method, " ").concat(this.ruri, " SIP/2.0\r\n");
          for (var headerName in this.headers) {
            if (Object.prototype.hasOwnProperty.call(this.headers, headerName)) {
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = void 0;
              try {
                for (var _iterator5 = this.headers[headerName][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var headerValue = _step5.value;
                  msg += "".concat(headerName, ": ").concat(headerValue, "\r\n");
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }
            }
          }
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = void 0;
          try {
            for (var _iterator6 = this.extraHeaders[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var header = _step6.value;
              msg += "".concat(header.trim(), "\r\n");
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
          var supported = [];
          switch (this.method) {
            case JsSIP_C.REGISTER:
              supported.push("path", "gruu");
              break;
            case JsSIP_C.INVITE:
              if (this.ua.configuration.session_timers) {
                supported.push("timer");
              }
              if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {
                supported.push("gruu");
              }
              supported.push("ice", "replaces");
              break;
            case JsSIP_C.UPDATE:
              if (this.ua.configuration.session_timers) {
                supported.push("timer");
              }
              supported.push("ice");
              break;
          }
          supported.push("outbound");
          var userAgent = this.ua.configuration.user_agent || JsSIP_C.USER_AGENT;
          msg += "Allow: ".concat(JsSIP_C.ALLOWED_METHODS, "\r\n");
          msg += "Supported: ".concat(supported, "\r\n");
          msg += "User-Agent: ".concat(userAgent, "\r\n");
          if (this.body) {
            var length = Utils.str_utf8_length(this.body);
            msg += "Content-Length: ".concat(length, "\r\n\r\n");
            msg += this.body;
          } else {
            msg += "Content-Length: 0\r\n\r\n";
          }
          return msg;
        }
      }, {
        key: "clone",
        value: function clone() {
          var request = new OutgoingRequest2(this.method, this.ruri, this.ua);
          Object.keys(this.headers).forEach(function(name) {
            request.headers[name] = this.headers[name].slice();
          }, this);
          request.body = this.body;
          request.extraHeaders = Utils.cloneArray(this.extraHeaders);
          request.to = this.to;
          request.from = this.from;
          request.call_id = this.call_id;
          request.cseq = this.cseq;
          return request;
        }
      }]);
      return OutgoingRequest2;
    }();
    var InitialOutgoingInviteRequest = function(_OutgoingRequest) {
      _inherits(InitialOutgoingInviteRequest2, _OutgoingRequest);
      function InitialOutgoingInviteRequest2(ruri, ua, params, extraHeaders, body) {
        var _this;
        _classCallCheck(this, InitialOutgoingInviteRequest2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(InitialOutgoingInviteRequest2).call(this, JsSIP_C.INVITE, ruri, ua, params, extraHeaders, body));
        _this.transaction = null;
        return _this;
      }
      _createClass(InitialOutgoingInviteRequest2, [{
        key: "cancel",
        value: function cancel(reason) {
          this.transaction.cancel(reason);
        }
      }, {
        key: "clone",
        value: function clone() {
          var request = new InitialOutgoingInviteRequest2(this.ruri, this.ua);
          Object.keys(this.headers).forEach(function(name) {
            request.headers[name] = this.headers[name].slice();
          }, this);
          request.body = this.body;
          request.extraHeaders = Utils.cloneArray(this.extraHeaders);
          request.to = this.to;
          request.from = this.from;
          request.call_id = this.call_id;
          request.cseq = this.cseq;
          request.transaction = this.transaction;
          return request;
        }
      }]);
      return InitialOutgoingInviteRequest2;
    }(OutgoingRequest);
    var IncomingMessage = function() {
      function IncomingMessage2() {
        _classCallCheck(this, IncomingMessage2);
        this.data = null;
        this.headers = null;
        this.method = null;
        this.via = null;
        this.via_branch = null;
        this.call_id = null;
        this.cseq = null;
        this.from = null;
        this.from_tag = null;
        this.to = null;
        this.to_tag = null;
        this.body = null;
        this.sdp = null;
      }
      _createClass(IncomingMessage2, [{
        key: "addHeader",
        value: function addHeader(name, value) {
          var header = {
            raw: value
          };
          name = Utils.headerize(name);
          if (this.headers[name]) {
            this.headers[name].push(header);
          } else {
            this.headers[name] = [header];
          }
        }
        /**
         * Get the value of the given header name at the given position.
         */
      }, {
        key: "getHeader",
        value: function getHeader(name) {
          var header = this.headers[Utils.headerize(name)];
          if (header) {
            if (header[0]) {
              return header[0].raw;
            }
          } else {
            return;
          }
        }
        /**
         * Get the header/s of the given name.
         */
      }, {
        key: "getHeaders",
        value: function getHeaders(name) {
          var headers = this.headers[Utils.headerize(name)];
          var result = [];
          if (!headers) {
            return [];
          }
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = void 0;
          try {
            for (var _iterator7 = headers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var header = _step7.value;
              result.push(header.raw);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
          return result;
        }
        /**
         * Verify the existence of the given header.
         */
      }, {
        key: "hasHeader",
        value: function hasHeader(name) {
          return this.headers[Utils.headerize(name)] ? true : false;
        }
        /**
        * Parse the given header on the given index.
        * -param {String} name header name
        * -param {Number} [idx=0] header index
        * -returns {Object|undefined} Parsed header object, undefined if the header
        *  is not present or in case of a parsing error.
        */
      }, {
        key: "parseHeader",
        value: function parseHeader(name) {
          var idx = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
          name = Utils.headerize(name);
          if (!this.headers[name]) {
            debug2('header "'.concat(name, '" not present'));
            return;
          } else if (idx >= this.headers[name].length) {
            debug2('not so many "'.concat(name, '" headers present'));
            return;
          }
          var header = this.headers[name][idx];
          var value = header.raw;
          if (header.parsed) {
            return header.parsed;
          }
          var parsed = Grammar.parse(value, name.replace(/-/g, "_"));
          if (parsed === -1) {
            this.headers[name].splice(idx, 1);
            debug2('error parsing "'.concat(name, '" header field with value "').concat(value, '"'));
            return;
          } else {
            header.parsed = parsed;
            return parsed;
          }
        }
        /**
         * Message Header attribute selector. Alias of parseHeader.
         * -param {String} name header name
         * -param {Number} [idx=0] header index
         * -returns {Object|undefined} Parsed header object, undefined if the header
         *  is not present or in case of a parsing error.
         *
         * -example
         * message.s('via',3).port
         */
      }, {
        key: "s",
        value: function s(name, idx) {
          return this.parseHeader(name, idx);
        }
        /**
        * Replace the value of the given header by the value.
        * -param {String} name header name
        * -param {String} value header value
        */
      }, {
        key: "setHeader",
        value: function setHeader(name, value) {
          var header = {
            raw: value
          };
          this.headers[Utils.headerize(name)] = [header];
        }
        /**
         * Parse the current body as a SDP and store the resulting object
         * into this.sdp.
         * -param {Boolean} force: Parse even if this.sdp already exists.
         *
         * Returns this.sdp.
         */
      }, {
        key: "parseSDP",
        value: function parseSDP(force) {
          if (!force && this.sdp) {
            return this.sdp;
          } else {
            this.sdp = sdp_transform.parse(this.body || "");
            return this.sdp;
          }
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.data;
        }
      }]);
      return IncomingMessage2;
    }();
    var IncomingRequest = function(_IncomingMessage) {
      _inherits(IncomingRequest2, _IncomingMessage);
      function IncomingRequest2(ua) {
        var _this2;
        _classCallCheck(this, IncomingRequest2);
        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(IncomingRequest2).call(this));
        _this2.ua = ua;
        _this2.headers = {};
        _this2.ruri = null;
        _this2.transport = null;
        _this2.server_transaction = null;
        return _this2;
      }
      _createClass(IncomingRequest2, [{
        key: "reply",
        value: function reply(code, reason, extraHeaders, body, onSuccess, onFailure) {
          var supported = [];
          var to = this.getHeader("To");
          code = code || null;
          reason = reason || null;
          if (!code || code < 100 || code > 699) {
            throw new TypeError("Invalid status_code: ".concat(code));
          } else if (reason && typeof reason !== "string" && !(reason instanceof String)) {
            throw new TypeError("Invalid reason_phrase: ".concat(reason));
          }
          reason = reason || JsSIP_C.REASON_PHRASE[code] || "";
          extraHeaders = Utils.cloneArray(extraHeaders);
          var response = "SIP/2.0 ".concat(code, " ").concat(reason, "\r\n");
          if (this.method === JsSIP_C.INVITE && code > 100 && code <= 200) {
            var headers = this.getHeaders("record-route");
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = void 0;
            try {
              for (var _iterator8 = headers[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                var header = _step8.value;
                response += "Record-Route: ".concat(header, "\r\n");
              }
            } catch (err) {
              _didIteratorError8 = true;
              _iteratorError8 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                  _iterator8["return"]();
                }
              } finally {
                if (_didIteratorError8) {
                  throw _iteratorError8;
                }
              }
            }
          }
          var vias = this.getHeaders("via");
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = void 0;
          try {
            for (var _iterator9 = vias[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var via = _step9.value;
              response += "Via: ".concat(via, "\r\n");
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }
          if (!this.to_tag && code > 100) {
            to += ";tag=".concat(Utils.newTag());
          } else if (this.to_tag && !this.s("to").hasParam("tag")) {
            to += ";tag=".concat(this.to_tag);
          }
          response += "To: ".concat(to, "\r\n");
          response += "From: ".concat(this.getHeader("From"), "\r\n");
          response += "Call-ID: ".concat(this.call_id, "\r\n");
          response += "CSeq: ".concat(this.cseq, " ").concat(this.method, "\r\n");
          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = void 0;
          try {
            for (var _iterator10 = extraHeaders[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var _header2 = _step10.value;
              response += "".concat(_header2.trim(), "\r\n");
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }
          switch (this.method) {
            case JsSIP_C.INVITE:
              if (this.ua.configuration.session_timers) {
                supported.push("timer");
              }
              if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {
                supported.push("gruu");
              }
              supported.push("ice", "replaces");
              break;
            case JsSIP_C.UPDATE:
              if (this.ua.configuration.session_timers) {
                supported.push("timer");
              }
              if (body) {
                supported.push("ice");
              }
              supported.push("replaces");
          }
          supported.push("outbound");
          if (this.method === JsSIP_C.OPTIONS) {
            response += "Allow: ".concat(JsSIP_C.ALLOWED_METHODS, "\r\n");
            response += "Accept: ".concat(JsSIP_C.ACCEPTED_BODY_TYPES, "\r\n");
          } else if (code === 405) {
            response += "Allow: ".concat(JsSIP_C.ALLOWED_METHODS, "\r\n");
          } else if (code === 415) {
            response += "Accept: ".concat(JsSIP_C.ACCEPTED_BODY_TYPES, "\r\n");
          }
          response += "Supported: ".concat(supported, "\r\n");
          if (body) {
            var length = Utils.str_utf8_length(body);
            response += "Content-Type: application/sdp\r\n";
            response += "Content-Length: ".concat(length, "\r\n\r\n");
            response += body;
          } else {
            response += "Content-Length: ".concat(0, "\r\n\r\n");
          }
          this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);
        }
        /**
        * Stateless reply.
        * -param {Number} code status code
        * -param {String} reason reason phrase
        */
      }, {
        key: "reply_sl",
        value: function reply_sl() {
          var code = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          var reason = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
          var vias = this.getHeaders("via");
          if (!code || code < 100 || code > 699) {
            throw new TypeError("Invalid status_code: ".concat(code));
          } else if (reason && typeof reason !== "string" && !(reason instanceof String)) {
            throw new TypeError("Invalid reason_phrase: ".concat(reason));
          }
          reason = reason || JsSIP_C.REASON_PHRASE[code] || "";
          var response = "SIP/2.0 ".concat(code, " ").concat(reason, "\r\n");
          var _iteratorNormalCompletion11 = true;
          var _didIteratorError11 = false;
          var _iteratorError11 = void 0;
          try {
            for (var _iterator11 = vias[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
              var via = _step11.value;
              response += "Via: ".concat(via, "\r\n");
            }
          } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                _iterator11["return"]();
              }
            } finally {
              if (_didIteratorError11) {
                throw _iteratorError11;
              }
            }
          }
          var to = this.getHeader("To");
          if (!this.to_tag && code > 100) {
            to += ";tag=".concat(Utils.newTag());
          } else if (this.to_tag && !this.s("to").hasParam("tag")) {
            to += ";tag=".concat(this.to_tag);
          }
          response += "To: ".concat(to, "\r\n");
          response += "From: ".concat(this.getHeader("From"), "\r\n");
          response += "Call-ID: ".concat(this.call_id, "\r\n");
          response += "CSeq: ".concat(this.cseq, " ").concat(this.method, "\r\n");
          response += "Content-Length: ".concat(0, "\r\n\r\n");
          this.transport.send(response);
        }
      }]);
      return IncomingRequest2;
    }(IncomingMessage);
    var IncomingResponse = function(_IncomingMessage2) {
      _inherits(IncomingResponse2, _IncomingMessage2);
      function IncomingResponse2() {
        var _this3;
        _classCallCheck(this, IncomingResponse2);
        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(IncomingResponse2).call(this));
        _this3.headers = {};
        _this3.status_code = null;
        _this3.reason_phrase = null;
        return _this3;
      }
      return IncomingResponse2;
    }(IncomingMessage);
    module.exports = {
      OutgoingRequest,
      InitialOutgoingInviteRequest,
      IncomingRequest,
      IncomingResponse
    };
  }
});

// node_modules/jssip/lib-es5/DigestAuthentication.js
var require_DigestAuthentication = __commonJS({
  "node_modules/jssip/lib-es5/DigestAuthentication.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Utils = require_Utils();
    var debug2 = require_browser()("JsSIP:DigestAuthentication");
    var debugerror = require_browser()("JsSIP:ERROR:DigestAuthentication");
    debugerror.log = console.warn.bind(console);
    module.exports = function() {
      function DigestAuthentication(credentials) {
        _classCallCheck(this, DigestAuthentication);
        this._credentials = credentials;
        this._cnonce = null;
        this._nc = 0;
        this._ncHex = "00000000";
        this._algorithm = null;
        this._realm = null;
        this._nonce = null;
        this._opaque = null;
        this._stale = null;
        this._qop = null;
        this._method = null;
        this._uri = null;
        this._ha1 = null;
        this._response = null;
      }
      _createClass(DigestAuthentication, [{
        key: "get",
        value: function get(parameter) {
          switch (parameter) {
            case "realm":
              return this._realm;
            case "ha1":
              return this._ha1;
            default:
              debugerror('get() | cannot get "%s" parameter', parameter);
              return void 0;
          }
        }
        /**
        * Performs Digest authentication given a SIP request and the challenge
        * received in a response to that request.
        * Returns true if auth was successfully generated, false otherwise.
        */
      }, {
        key: "authenticate",
        value: function authenticate(_ref, challenge) {
          var method = _ref.method, ruri = _ref.ruri, body = _ref.body;
          var cnonce = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          this._algorithm = challenge.algorithm;
          this._realm = challenge.realm;
          this._nonce = challenge.nonce;
          this._opaque = challenge.opaque;
          this._stale = challenge.stale;
          if (this._algorithm) {
            if (this._algorithm !== "MD5") {
              debugerror('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted');
              return false;
            }
          } else {
            this._algorithm = "MD5";
          }
          if (!this._nonce) {
            debugerror("authenticate() | challenge without Digest nonce, authentication aborted");
            return false;
          }
          if (!this._realm) {
            debugerror("authenticate() | challenge without Digest realm, authentication aborted");
            return false;
          }
          if (!this._credentials.password) {
            if (!this._credentials.ha1) {
              debugerror("authenticate() | no plain SIP password nor ha1 provided, authentication aborted");
              return false;
            }
            if (this._credentials.realm !== this._realm) {
              debugerror('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]', this._credentials.realm, this._realm);
              return false;
            }
          }
          if (challenge.qop) {
            if (challenge.qop.indexOf("auth-int") > -1) {
              this._qop = "auth-int";
            } else if (challenge.qop.indexOf("auth") > -1) {
              this._qop = "auth";
            } else {
              debugerror('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted');
              return false;
            }
          } else {
            this._qop = null;
          }
          this._method = method;
          this._uri = ruri;
          this._cnonce = cnonce || Utils.createRandomToken(12);
          this._nc += 1;
          var hex = Number(this._nc).toString(16);
          this._ncHex = "00000000".substr(0, 8 - hex.length) + hex;
          if (this._nc === 4294967296) {
            this._nc = 1;
            this._ncHex = "00000001";
          }
          if (this._credentials.password) {
            this._ha1 = Utils.calculateMD5("".concat(this._credentials.username, ":").concat(this._realm, ":").concat(this._credentials.password));
          } else {
            this._ha1 = this._credentials.ha1;
          }
          var a2;
          var ha2;
          if (this._qop === "auth") {
            a2 = "".concat(this._method, ":").concat(this._uri);
            ha2 = Utils.calculateMD5(a2);
            debug2('authenticate() | using qop=auth [a2:"%s"]', a2);
            this._response = Utils.calculateMD5("".concat(this._ha1, ":").concat(this._nonce, ":").concat(this._ncHex, ":").concat(this._cnonce, ":auth:").concat(ha2));
          } else if (this._qop === "auth-int") {
            a2 = "".concat(this._method, ":").concat(this._uri, ":").concat(Utils.calculateMD5(body ? body : ""));
            ha2 = Utils.calculateMD5(a2);
            debug2('authenticate() | using qop=auth-int [a2:"%s"]', a2);
            this._response = Utils.calculateMD5("".concat(this._ha1, ":").concat(this._nonce, ":").concat(this._ncHex, ":").concat(this._cnonce, ":auth-int:").concat(ha2));
          } else if (this._qop === null) {
            a2 = "".concat(this._method, ":").concat(this._uri);
            ha2 = Utils.calculateMD5(a2);
            debug2('authenticate() | using qop=null [a2:"%s"]', a2);
            this._response = Utils.calculateMD5("".concat(this._ha1, ":").concat(this._nonce, ":").concat(ha2));
          }
          debug2("authenticate() | response generated");
          return true;
        }
        /**
        * Return the Proxy-Authorization or WWW-Authorization header value.
        */
      }, {
        key: "toString",
        value: function toString() {
          var auth_params = [];
          if (!this._response) {
            throw new Error("response field does not exist, cannot generate Authorization header");
          }
          auth_params.push("algorithm=".concat(this._algorithm));
          auth_params.push('username="'.concat(this._credentials.username, '"'));
          auth_params.push('realm="'.concat(this._realm, '"'));
          auth_params.push('nonce="'.concat(this._nonce, '"'));
          auth_params.push('uri="'.concat(this._uri, '"'));
          auth_params.push('response="'.concat(this._response, '"'));
          if (this._opaque) {
            auth_params.push('opaque="'.concat(this._opaque, '"'));
          }
          if (this._qop) {
            auth_params.push("qop=".concat(this._qop));
            auth_params.push('cnonce="'.concat(this._cnonce, '"'));
            auth_params.push("nc=".concat(this._ncHex));
          }
          return "Digest ".concat(auth_params.join(", "));
        }
      }]);
      return DigestAuthentication;
    }();
  }
});

// node_modules/jssip/lib-es5/Timers.js
var require_Timers = __commonJS({
  "node_modules/jssip/lib-es5/Timers.js"(exports, module) {
    "use strict";
    var T1 = 500;
    var T2 = 4e3;
    var T4 = 5e3;
    module.exports = {
      T1,
      T2,
      T4,
      TIMER_B: 64 * T1,
      TIMER_D: 0 * T1,
      TIMER_F: 64 * T1,
      TIMER_H: 64 * T1,
      TIMER_I: 0 * T1,
      TIMER_J: 0 * T1,
      TIMER_K: 0 * T4,
      TIMER_L: 64 * T1,
      TIMER_M: 64 * T1,
      PROVISIONAL_RESPONSE_INTERVAL: 6e4
      // See RFC 3261 Section 13.3.1.1
    };
  }
});

// node_modules/jssip/lib-es5/Transactions.js
var require_Transactions = __commonJS({
  "node_modules/jssip/lib-es5/Transactions.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var JsSIP_C = require_Constants();
    var SIPMessage = require_SIPMessage();
    var Timers = require_Timers();
    var debugnict = require_browser()("JsSIP:NonInviteClientTransaction");
    var debugict = require_browser()("JsSIP:InviteClientTransaction");
    var debugact = require_browser()("JsSIP:AckClientTransaction");
    var debugnist = require_browser()("JsSIP:NonInviteServerTransaction");
    var debugist = require_browser()("JsSIP:InviteServerTransaction");
    var C = {
      // Transaction states.
      STATUS_TRYING: 1,
      STATUS_PROCEEDING: 2,
      STATUS_CALLING: 3,
      STATUS_ACCEPTED: 4,
      STATUS_COMPLETED: 5,
      STATUS_TERMINATED: 6,
      STATUS_CONFIRMED: 7,
      // Transaction types.
      NON_INVITE_CLIENT: "nict",
      NON_INVITE_SERVER: "nist",
      INVITE_CLIENT: "ict",
      INVITE_SERVER: "ist"
    };
    var NonInviteClientTransaction = function(_EventEmitter) {
      _inherits(NonInviteClientTransaction2, _EventEmitter);
      function NonInviteClientTransaction2(ua, transport, request, eventHandlers) {
        var _this;
        _classCallCheck(this, NonInviteClientTransaction2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(NonInviteClientTransaction2).call(this));
        _this.type = C.NON_INVITE_CLIENT;
        _this.id = "z9hG4bK".concat(Math.floor(Math.random() * 1e7));
        _this.ua = ua;
        _this.transport = transport;
        _this.request = request;
        _this.eventHandlers = eventHandlers;
        var via = "SIP/2.0/".concat(transport.via_transport);
        via += " ".concat(ua.configuration.via_host, ";branch=").concat(_this.id);
        _this.request.setHeader("via", via);
        _this.ua.newTransaction(_assertThisInitialized(_this));
        return _this;
      }
      _createClass(NonInviteClientTransaction2, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit("stateChanged");
        }
      }, {
        key: "send",
        value: function send() {
          var _this2 = this;
          this.stateChanged(C.STATUS_TRYING);
          this.F = setTimeout(function() {
            _this2.timer_F();
          }, Timers.TIMER_F);
          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          debugnict("transport error occurred, deleting transaction ".concat(this.id));
          clearTimeout(this.F);
          clearTimeout(this.K);
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
          this.eventHandlers.onTransportError();
        }
      }, {
        key: "timer_F",
        value: function timer_F() {
          debugnict("Timer F expired for transaction ".concat(this.id));
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
          this.eventHandlers.onRequestTimeout();
        }
      }, {
        key: "timer_K",
        value: function timer_K() {
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "receiveResponse",
        value: function receiveResponse(response) {
          var _this3 = this;
          var status_code = response.status_code;
          if (status_code < 200) {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_PROCEEDING);
                this.eventHandlers.onReceiveResponse(response);
                break;
            }
          } else {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                clearTimeout(this.F);
                if (status_code === 408) {
                  this.eventHandlers.onRequestTimeout();
                } else {
                  this.eventHandlers.onReceiveResponse(response);
                }
                this.K = setTimeout(function() {
                  _this3.timer_K();
                }, Timers.TIMER_K);
                break;
              case C.STATUS_COMPLETED:
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);
      return NonInviteClientTransaction2;
    }(EventEmitter6);
    var InviteClientTransaction = function(_EventEmitter2) {
      _inherits(InviteClientTransaction2, _EventEmitter2);
      function InviteClientTransaction2(ua, transport, request, eventHandlers) {
        var _this4;
        _classCallCheck(this, InviteClientTransaction2);
        _this4 = _possibleConstructorReturn(this, _getPrototypeOf(InviteClientTransaction2).call(this));
        _this4.type = C.INVITE_CLIENT;
        _this4.id = "z9hG4bK".concat(Math.floor(Math.random() * 1e7));
        _this4.ua = ua;
        _this4.transport = transport;
        _this4.request = request;
        _this4.eventHandlers = eventHandlers;
        request.transaction = _assertThisInitialized(_this4);
        var via = "SIP/2.0/".concat(transport.via_transport);
        via += " ".concat(ua.configuration.via_host, ";branch=").concat(_this4.id);
        _this4.request.setHeader("via", via);
        _this4.ua.newTransaction(_assertThisInitialized(_this4));
        return _this4;
      }
      _createClass(InviteClientTransaction2, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit("stateChanged");
        }
      }, {
        key: "send",
        value: function send() {
          var _this5 = this;
          this.stateChanged(C.STATUS_CALLING);
          this.B = setTimeout(function() {
            _this5.timer_B();
          }, Timers.TIMER_B);
          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          clearTimeout(this.B);
          clearTimeout(this.D);
          clearTimeout(this.M);
          if (this.state !== C.STATUS_ACCEPTED) {
            debugict("transport error occurred, deleting transaction ".concat(this.id));
            this.eventHandlers.onTransportError();
          }
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
        // RFC 6026 7.2.
      }, {
        key: "timer_M",
        value: function timer_M() {
          debugict("Timer M expired for transaction ".concat(this.id));
          if (this.state === C.STATUS_ACCEPTED) {
            clearTimeout(this.B);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
        // RFC 3261 17.1.1.
      }, {
        key: "timer_B",
        value: function timer_B() {
          debugict("Timer B expired for transaction ".concat(this.id));
          if (this.state === C.STATUS_CALLING) {
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
            this.eventHandlers.onRequestTimeout();
          }
        }
      }, {
        key: "timer_D",
        value: function timer_D() {
          debugict("Timer D expired for transaction ".concat(this.id));
          clearTimeout(this.B);
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "sendACK",
        value: function sendACK(response) {
          var _this6 = this;
          var ack = new SIPMessage.OutgoingRequest(JsSIP_C.ACK, this.request.ruri, this.ua, {
            "route_set": this.request.getHeaders("route"),
            "call_id": this.request.getHeader("call-id"),
            "cseq": this.request.cseq
          });
          ack.setHeader("from", this.request.getHeader("from"));
          ack.setHeader("via", this.request.getHeader("via"));
          ack.setHeader("to", response.getHeader("to"));
          this.D = setTimeout(function() {
            _this6.timer_D();
          }, Timers.TIMER_D);
          this.transport.send(ack);
        }
      }, {
        key: "cancel",
        value: function cancel(reason) {
          if (this.state !== C.STATUS_PROCEEDING) {
            return;
          }
          var cancel2 = new SIPMessage.OutgoingRequest(JsSIP_C.CANCEL, this.request.ruri, this.ua, {
            "route_set": this.request.getHeaders("route"),
            "call_id": this.request.getHeader("call-id"),
            "cseq": this.request.cseq
          });
          cancel2.setHeader("from", this.request.getHeader("from"));
          cancel2.setHeader("via", this.request.getHeader("via"));
          cancel2.setHeader("to", this.request.getHeader("to"));
          if (reason) {
            cancel2.setHeader("reason", reason);
          }
          this.transport.send(cancel2);
        }
      }, {
        key: "receiveResponse",
        value: function receiveResponse(response) {
          var _this7 = this;
          var status_code = response.status_code;
          if (status_code >= 100 && status_code <= 199) {
            switch (this.state) {
              case C.STATUS_CALLING:
                this.stateChanged(C.STATUS_PROCEEDING);
                this.eventHandlers.onReceiveResponse(response);
                break;
              case C.STATUS_PROCEEDING:
                this.eventHandlers.onReceiveResponse(response);
                break;
            }
          } else if (status_code >= 200 && status_code <= 299) {
            switch (this.state) {
              case C.STATUS_CALLING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_ACCEPTED);
                this.M = setTimeout(function() {
                  _this7.timer_M();
                }, Timers.TIMER_M);
                this.eventHandlers.onReceiveResponse(response);
                break;
              case C.STATUS_ACCEPTED:
                this.eventHandlers.onReceiveResponse(response);
                break;
            }
          } else if (status_code >= 300 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_CALLING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                this.sendACK(response);
                this.eventHandlers.onReceiveResponse(response);
                break;
              case C.STATUS_COMPLETED:
                this.sendACK(response);
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);
      return InviteClientTransaction2;
    }(EventEmitter6);
    var AckClientTransaction = function(_EventEmitter3) {
      _inherits(AckClientTransaction2, _EventEmitter3);
      function AckClientTransaction2(ua, transport, request, eventHandlers) {
        var _this8;
        _classCallCheck(this, AckClientTransaction2);
        _this8 = _possibleConstructorReturn(this, _getPrototypeOf(AckClientTransaction2).call(this));
        _this8.id = "z9hG4bK".concat(Math.floor(Math.random() * 1e7));
        _this8.transport = transport;
        _this8.request = request;
        _this8.eventHandlers = eventHandlers;
        var via = "SIP/2.0/".concat(transport.via_transport);
        via += " ".concat(ua.configuration.via_host, ";branch=").concat(_this8.id);
        _this8.request.setHeader("via", via);
        return _this8;
      }
      _createClass(AckClientTransaction2, [{
        key: "send",
        value: function send() {
          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          debugact("transport error occurred for transaction ".concat(this.id));
          this.eventHandlers.onTransportError();
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);
      return AckClientTransaction2;
    }(EventEmitter6);
    var NonInviteServerTransaction = function(_EventEmitter4) {
      _inherits(NonInviteServerTransaction2, _EventEmitter4);
      function NonInviteServerTransaction2(ua, transport, request) {
        var _this9;
        _classCallCheck(this, NonInviteServerTransaction2);
        _this9 = _possibleConstructorReturn(this, _getPrototypeOf(NonInviteServerTransaction2).call(this));
        _this9.type = C.NON_INVITE_SERVER;
        _this9.id = request.via_branch;
        _this9.ua = ua;
        _this9.transport = transport;
        _this9.request = request;
        _this9.last_response = "";
        request.server_transaction = _assertThisInitialized(_this9);
        _this9.state = C.STATUS_TRYING;
        ua.newTransaction(_assertThisInitialized(_this9));
        return _this9;
      }
      _createClass(NonInviteServerTransaction2, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit("stateChanged");
        }
      }, {
        key: "timer_J",
        value: function timer_J() {
          debugnist("Timer J expired for transaction ".concat(this.id));
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          if (!this.transportError) {
            this.transportError = true;
            debugnist("transport error occurred, deleting transaction ".concat(this.id));
            clearTimeout(this.J);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
      }, {
        key: "receiveResponse",
        value: function receiveResponse(status_code, response, onSuccess, onFailure) {
          var _this10 = this;
          if (status_code === 100) {
            switch (this.state) {
              case C.STATUS_TRYING:
                this.stateChanged(C.STATUS_PROCEEDING);
                if (!this.transport.send(response)) {
                  this.onTransportError();
                }
                break;
              case C.STATUS_PROCEEDING:
                this.last_response = response;
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  if (onFailure) {
                    onFailure();
                  }
                } else if (onSuccess) {
                  onSuccess();
                }
                break;
            }
          } else if (status_code >= 200 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                this.last_response = response;
                this.J = setTimeout(function() {
                  _this10.timer_J();
                }, Timers.TIMER_J);
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  if (onFailure) {
                    onFailure();
                  }
                } else if (onSuccess) {
                  onSuccess();
                }
                break;
              case C.STATUS_COMPLETED:
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);
      return NonInviteServerTransaction2;
    }(EventEmitter6);
    var InviteServerTransaction = function(_EventEmitter5) {
      _inherits(InviteServerTransaction2, _EventEmitter5);
      function InviteServerTransaction2(ua, transport, request) {
        var _this11;
        _classCallCheck(this, InviteServerTransaction2);
        _this11 = _possibleConstructorReturn(this, _getPrototypeOf(InviteServerTransaction2).call(this));
        _this11.type = C.INVITE_SERVER;
        _this11.id = request.via_branch;
        _this11.ua = ua;
        _this11.transport = transport;
        _this11.request = request;
        _this11.last_response = "";
        request.server_transaction = _assertThisInitialized(_this11);
        _this11.state = C.STATUS_PROCEEDING;
        ua.newTransaction(_assertThisInitialized(_this11));
        _this11.resendProvisionalTimer = null;
        request.reply(100);
        return _this11;
      }
      _createClass(InviteServerTransaction2, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit("stateChanged");
        }
      }, {
        key: "timer_H",
        value: function timer_H() {
          debugist("Timer H expired for transaction ".concat(this.id));
          if (this.state === C.STATUS_COMPLETED) {
            debugist("ACK not received, dialog will be terminated");
          }
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "timer_I",
        value: function timer_I() {
          this.stateChanged(C.STATUS_TERMINATED);
        }
        // RFC 6026 7.1.
      }, {
        key: "timer_L",
        value: function timer_L() {
          debugist("Timer L expired for transaction ".concat(this.id));
          if (this.state === C.STATUS_ACCEPTED) {
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          if (!this.transportError) {
            this.transportError = true;
            debugist("transport error occurred, deleting transaction ".concat(this.id));
            if (this.resendProvisionalTimer !== null) {
              clearInterval(this.resendProvisionalTimer);
              this.resendProvisionalTimer = null;
            }
            clearTimeout(this.L);
            clearTimeout(this.H);
            clearTimeout(this.I);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
      }, {
        key: "resend_provisional",
        value: function resend_provisional() {
          if (!this.transport.send(this.last_response)) {
            this.onTransportError();
          }
        }
        // INVITE Server Transaction RFC 3261 17.2.1.
      }, {
        key: "receiveResponse",
        value: function receiveResponse(status_code, response, onSuccess, onFailure) {
          var _this12 = this;
          if (status_code >= 100 && status_code <= 199) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                if (!this.transport.send(response)) {
                  this.onTransportError();
                }
                this.last_response = response;
                break;
            }
          }
          if (status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {
            if (this.resendProvisionalTimer === null) {
              this.resendProvisionalTimer = setInterval(function() {
                _this12.resend_provisional();
              }, Timers.PROVISIONAL_RESPONSE_INTERVAL);
            }
          } else if (status_code >= 200 && status_code <= 299) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_ACCEPTED);
                this.last_response = response;
                this.L = setTimeout(function() {
                  _this12.timer_L();
                }, Timers.TIMER_L);
                if (this.resendProvisionalTimer !== null) {
                  clearInterval(this.resendProvisionalTimer);
                  this.resendProvisionalTimer = null;
                }
              case C.STATUS_ACCEPTED:
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  if (onFailure) {
                    onFailure();
                  }
                } else if (onSuccess) {
                  onSuccess();
                }
                break;
            }
          } else if (status_code >= 300 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                if (this.resendProvisionalTimer !== null) {
                  clearInterval(this.resendProvisionalTimer);
                  this.resendProvisionalTimer = null;
                }
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  if (onFailure) {
                    onFailure();
                  }
                } else {
                  this.stateChanged(C.STATUS_COMPLETED);
                  this.H = setTimeout(function() {
                    _this12.timer_H();
                  }, Timers.TIMER_H);
                  if (onSuccess) {
                    onSuccess();
                  }
                }
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);
      return InviteServerTransaction2;
    }(EventEmitter6);
    function checkTransaction(_ref, request) {
      var _transactions = _ref._transactions;
      var tr;
      switch (request.method) {
        case JsSIP_C.INVITE:
          tr = _transactions.ist[request.via_branch];
          if (tr) {
            switch (tr.state) {
              case C.STATUS_PROCEEDING:
                tr.transport.send(tr.last_response);
                break;
              case C.STATUS_ACCEPTED:
                break;
            }
            return true;
          }
          break;
        case JsSIP_C.ACK:
          tr = _transactions.ist[request.via_branch];
          if (tr) {
            if (tr.state === C.STATUS_ACCEPTED) {
              return false;
            } else if (tr.state === C.STATUS_COMPLETED) {
              tr.state = C.STATUS_CONFIRMED;
              tr.I = setTimeout(function() {
                tr.timer_I();
              }, Timers.TIMER_I);
              return true;
            }
          } else {
            return false;
          }
          break;
        case JsSIP_C.CANCEL:
          tr = _transactions.ist[request.via_branch];
          if (tr) {
            request.reply_sl(200);
            if (tr.state === C.STATUS_PROCEEDING) {
              return false;
            } else {
              return true;
            }
          } else {
            request.reply_sl(481);
            return true;
          }
        default:
          tr = _transactions.nist[request.via_branch];
          if (tr) {
            switch (tr.state) {
              case C.STATUS_TRYING:
                break;
              case C.STATUS_PROCEEDING:
              case C.STATUS_COMPLETED:
                tr.transport.send(tr.last_response);
                break;
            }
            return true;
          }
          break;
      }
    }
    module.exports = {
      C,
      NonInviteClientTransaction,
      InviteClientTransaction,
      AckClientTransaction,
      NonInviteServerTransaction,
      InviteServerTransaction,
      checkTransaction
    };
  }
});

// node_modules/jssip/lib-es5/RequestSender.js
var require_RequestSender = __commonJS({
  "node_modules/jssip/lib-es5/RequestSender.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var JsSIP_C = require_Constants();
    var DigestAuthentication = require_DigestAuthentication();
    var Transactions = require_Transactions();
    var debug2 = require_browser()("JsSIP:RequestSender");
    var EventHandlers = {
      onRequestTimeout: function onRequestTimeout() {
      },
      onTransportError: function onTransportError() {
      },
      onReceiveResponse: function onReceiveResponse() {
      },
      onAuthenticated: function onAuthenticated() {
      }
    };
    module.exports = function() {
      function RequestSender(ua, request, eventHandlers) {
        _classCallCheck(this, RequestSender);
        this._ua = ua;
        this._eventHandlers = eventHandlers;
        this._method = request.method;
        this._request = request;
        this._auth = null;
        this._challenged = false;
        this._staled = false;
        for (var handler in EventHandlers) {
          if (Object.prototype.hasOwnProperty.call(EventHandlers, handler)) {
            if (!this._eventHandlers[handler]) {
              this._eventHandlers[handler] = EventHandlers[handler];
            }
          }
        }
        if (ua.status === ua.C.STATUS_USER_CLOSED && (this._method !== JsSIP_C.BYE || this._method !== JsSIP_C.ACK)) {
          this._eventHandlers.onTransportError();
        }
      }
      _createClass(RequestSender, [{
        key: "send",
        value: function send() {
          var _this = this;
          var eventHandlers = {
            onRequestTimeout: function onRequestTimeout() {
              _this._eventHandlers.onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this._eventHandlers.onTransportError();
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this._receiveResponse(response);
            }
          };
          switch (this._method) {
            case "INVITE":
              this.clientTransaction = new Transactions.InviteClientTransaction(this._ua, this._ua.transport, this._request, eventHandlers);
              break;
            case "ACK":
              this.clientTransaction = new Transactions.AckClientTransaction(this._ua, this._ua.transport, this._request, eventHandlers);
              break;
            default:
              this.clientTransaction = new Transactions.NonInviteClientTransaction(this._ua, this._ua.transport, this._request, eventHandlers);
          }
          this.clientTransaction.send();
        }
        /**
        * Called from client transaction when receiving a correct response to the request.
        * Authenticate request if needed or pass the response back to the applicant.
        */
      }, {
        key: "_receiveResponse",
        value: function _receiveResponse(response) {
          var challenge;
          var authorization_header_name;
          var status_code = response.status_code;
          if ((status_code === 401 || status_code === 407) && (this._ua.configuration.password !== null || this._ua.configuration.ha1 !== null)) {
            if (response.status_code === 401) {
              challenge = response.parseHeader("www-authenticate");
              authorization_header_name = "authorization";
            } else {
              challenge = response.parseHeader("proxy-authenticate");
              authorization_header_name = "proxy-authorization";
            }
            if (!challenge) {
              debug2("".concat(response.status_code, " with wrong or missing challenge, cannot authenticate"));
              this._eventHandlers.onReceiveResponse(response);
              return;
            }
            if (!this._challenged || !this._staled && challenge.stale === true) {
              if (!this._auth) {
                this._auth = new DigestAuthentication({
                  username: this._ua.configuration.authorization_user,
                  password: this._ua.configuration.password,
                  realm: this._ua.configuration.realm,
                  ha1: this._ua.configuration.ha1
                });
              }
              if (!this._auth.authenticate(this._request, challenge)) {
                this._eventHandlers.onReceiveResponse(response);
                return;
              }
              this._challenged = true;
              this._ua.set("realm", this._auth.get("realm"));
              this._ua.set("ha1", this._auth.get("ha1"));
              if (challenge.stale) {
                this._staled = true;
              }
              this._request = this._request.clone();
              this._request.cseq += 1;
              this._request.setHeader("cseq", "".concat(this._request.cseq, " ").concat(this._method));
              this._request.setHeader(authorization_header_name, this._auth.toString());
              this._eventHandlers.onAuthenticated(this._request);
              this.send();
            } else {
              this._eventHandlers.onReceiveResponse(response);
            }
          } else {
            this._eventHandlers.onReceiveResponse(response);
          }
        }
      }]);
      return RequestSender;
    }();
  }
});

// node_modules/jssip/lib-es5/Registrator.js
var require_Registrator = __commonJS({
  "node_modules/jssip/lib-es5/Registrator.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Utils = require_Utils();
    var JsSIP_C = require_Constants();
    var SIPMessage = require_SIPMessage();
    var RequestSender = require_RequestSender();
    var debug2 = require_browser()("JsSIP:Registrator");
    var MIN_REGISTER_EXPIRES = 10;
    module.exports = function() {
      function Registrator(ua, transport) {
        _classCallCheck(this, Registrator);
        var reg_id = 1;
        this._ua = ua;
        this._transport = transport;
        this._registrar = ua.configuration.registrar_server;
        this._expires = ua.configuration.register_expires;
        this._call_id = Utils.createRandomToken(22);
        this._cseq = 0;
        this._to_uri = ua.configuration.uri;
        this._registrationTimer = null;
        this._registering = false;
        this._registered = false;
        this._contact = this._ua.contact.toString();
        this._contact += ";+sip.ice";
        this._extraHeaders = [];
        this._extraContactParams = "";
        if (reg_id) {
          this._contact += ";reg-id=".concat(reg_id);
          this._contact += ';+sip.instance="<urn:uuid:'.concat(this._ua.configuration.instance_id, '>"');
        }
      }
      _createClass(Registrator, [{
        key: "setExtraHeaders",
        value: function setExtraHeaders(extraHeaders) {
          if (!Array.isArray(extraHeaders)) {
            extraHeaders = [];
          }
          this._extraHeaders = extraHeaders.slice();
        }
      }, {
        key: "setExtraContactParams",
        value: function setExtraContactParams(extraContactParams) {
          if (!(extraContactParams instanceof Object)) {
            extraContactParams = {};
          }
          this._extraContactParams = "";
          for (var param_key in extraContactParams) {
            if (Object.prototype.hasOwnProperty.call(extraContactParams, param_key)) {
              var param_value = extraContactParams[param_key];
              this._extraContactParams += ";".concat(param_key);
              if (param_value) {
                this._extraContactParams += "=".concat(param_value);
              }
            }
          }
        }
      }, {
        key: "register",
        value: function register() {
          var _this = this;
          if (this._registering) {
            debug2("Register request in progress...");
            return;
          }
          var extraHeaders = this._extraHeaders.slice();
          extraHeaders.push("Contact: ".concat(this._contact, ";expires=").concat(this._expires).concat(this._extraContactParams));
          extraHeaders.push("Expires: ".concat(this._expires));
          var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {
            "to_uri": this._to_uri,
            "call_id": this._call_id,
            "cseq": this._cseq += 1
          }, extraHeaders);
          var request_sender = new RequestSender(this._ua, request, {
            onRequestTimeout: function onRequestTimeout() {
              _this._registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);
            },
            onTransportError: function onTransportError() {
              _this._registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);
            },
            // Increase the CSeq on authentication.
            onAuthenticated: function onAuthenticated() {
              _this._cseq += 1;
            },
            onReceiveResponse: function onReceiveResponse(response) {
              if (response.cseq !== _this._cseq) {
                return;
              }
              if (_this._registrationTimer !== null) {
                clearTimeout(_this._registrationTimer);
                _this._registrationTimer = null;
              }
              switch (true) {
                case /^1[0-9]{2}$/.test(response.status_code): {
                  break;
                }
                case /^2[0-9]{2}$/.test(response.status_code): {
                  _this._registering = false;
                  if (!response.hasHeader("Contact")) {
                    debug2("no Contact header in response to REGISTER, response ignored");
                    break;
                  }
                  var contacts = response.headers["Contact"].reduce(function(a, b) {
                    return a.concat(b.parsed);
                  }, []);
                  var contact = contacts.find(function(element) {
                    return element.uri.user === _this._ua.contact.uri.user;
                  });
                  if (!contact) {
                    debug2("no Contact header pointing to us, response ignored");
                    break;
                  }
                  var expires = contact.getParam("expires");
                  if (!expires && response.hasHeader("expires")) {
                    expires = response.getHeader("expires");
                  }
                  if (!expires) {
                    expires = _this._expires;
                  }
                  expires = Number(expires);
                  if (expires < MIN_REGISTER_EXPIRES)
                    expires = MIN_REGISTER_EXPIRES;
                  _this._registrationTimer = setTimeout(function() {
                    _this._registrationTimer = null;
                    if (_this._ua.listeners("registrationExpiring").length === 0) {
                      _this.register();
                    } else {
                      _this._ua.emit("registrationExpiring");
                    }
                  }, expires * 1e3 - 5e3);
                  if (contact.hasParam("temp-gruu")) {
                    _this._ua.contact.temp_gruu = contact.getParam("temp-gruu").replace(/"/g, "");
                  }
                  if (contact.hasParam("pub-gruu")) {
                    _this._ua.contact.pub_gruu = contact.getParam("pub-gruu").replace(/"/g, "");
                  }
                  if (!_this._registered) {
                    _this._registered = true;
                    _this._ua.registered({
                      response
                    });
                  }
                  break;
                }
                case /^423$/.test(response.status_code): {
                  if (response.hasHeader("min-expires")) {
                    _this._expires = Number(response.getHeader("min-expires"));
                    if (_this._expires < MIN_REGISTER_EXPIRES)
                      _this._expires = MIN_REGISTER_EXPIRES;
                    _this.register();
                  } else {
                    debug2("423 response received for REGISTER without Min-Expires");
                    _this._registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);
                  }
                  break;
                }
                default: {
                  var cause = Utils.sipErrorCause(response.status_code);
                  _this._registrationFailure(response, cause);
                }
              }
            }
          });
          this._registering = true;
          request_sender.send();
        }
      }, {
        key: "unregister",
        value: function unregister() {
          var _this2 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (!this._registered) {
            debug2("already unregistered");
            return;
          }
          this._registered = false;
          if (this._registrationTimer !== null) {
            clearTimeout(this._registrationTimer);
            this._registrationTimer = null;
          }
          var extraHeaders = this._extraHeaders.slice();
          if (options.all) {
            extraHeaders.push("Contact: *".concat(this._extraContactParams));
          } else {
            extraHeaders.push("Contact: ".concat(this._contact, ";expires=0").concat(this._extraContactParams));
          }
          extraHeaders.push("Expires: 0");
          var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {
            "to_uri": this._to_uri,
            "call_id": this._call_id,
            "cseq": this._cseq += 1
          }, extraHeaders);
          var request_sender = new RequestSender(this._ua, request, {
            onRequestTimeout: function onRequestTimeout() {
              _this2._unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);
            },
            onTransportError: function onTransportError() {
              _this2._unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);
            },
            // Increase the CSeq on authentication.
            onAuthenticated: function onAuthenticated() {
              _this2._cseq += 1;
            },
            onReceiveResponse: function onReceiveResponse(response) {
              switch (true) {
                case /^1[0-9]{2}$/.test(response.status_code):
                  break;
                case /^2[0-9]{2}$/.test(response.status_code):
                  _this2._unregistered(response);
                  break;
                default: {
                  var cause = Utils.sipErrorCause(response.status_code);
                  _this2._unregistered(response, cause);
                }
              }
            }
          });
          request_sender.send();
        }
      }, {
        key: "close",
        value: function close() {
          if (this._registered) {
            this.unregister();
          }
        }
      }, {
        key: "onTransportClosed",
        value: function onTransportClosed() {
          this._registering = false;
          if (this._registrationTimer !== null) {
            clearTimeout(this._registrationTimer);
            this._registrationTimer = null;
          }
          if (this._registered) {
            this._registered = false;
            this._ua.unregistered({});
          }
        }
      }, {
        key: "_registrationFailure",
        value: function _registrationFailure(response, cause) {
          this._registering = false;
          this._ua.registrationFailed({
            response: response || null,
            cause
          });
          if (this._registered) {
            this._registered = false;
            this._ua.unregistered({
              response: response || null,
              cause
            });
          }
        }
      }, {
        key: "_unregistered",
        value: function _unregistered(response, cause) {
          this._registering = false;
          this._registered = false;
          this._ua.unregistered({
            response: response || null,
            cause: cause || null
          });
        }
      }, {
        key: "registered",
        get: function get() {
          return this._registered;
        }
      }]);
      return Registrator;
    }();
  }
});

// node_modules/jssip/lib-es5/Dialog/RequestSender.js
var require_RequestSender2 = __commonJS({
  "node_modules/jssip/lib-es5/Dialog/RequestSender.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var JsSIP_C = require_Constants();
    var Transactions = require_Transactions();
    var RTCSession = require_RTCSession();
    var RequestSender = require_RequestSender();
    var EventHandlers = {
      onRequestTimeout: function onRequestTimeout() {
      },
      onTransportError: function onTransportError() {
      },
      onSuccessResponse: function onSuccessResponse() {
      },
      onErrorResponse: function onErrorResponse() {
      },
      onAuthenticated: function onAuthenticated() {
      },
      onDialogError: function onDialogError() {
      }
    };
    module.exports = function() {
      function DialogRequestSender(dialog, request, eventHandlers) {
        _classCallCheck(this, DialogRequestSender);
        this._dialog = dialog;
        this._ua = dialog._ua;
        this._request = request;
        this._eventHandlers = eventHandlers;
        this._reattempt = false;
        this._reattemptTimer = null;
        for (var handler in EventHandlers) {
          if (Object.prototype.hasOwnProperty.call(EventHandlers, handler)) {
            if (!this._eventHandlers[handler]) {
              this._eventHandlers[handler] = EventHandlers[handler];
            }
          }
        }
      }
      _createClass(DialogRequestSender, [{
        key: "send",
        value: function send() {
          var _this = this;
          var request_sender = new RequestSender(this._ua, this._request, {
            onRequestTimeout: function onRequestTimeout() {
              _this._eventHandlers.onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this._eventHandlers.onTransportError();
            },
            onAuthenticated: function onAuthenticated(request) {
              _this._eventHandlers.onAuthenticated(request);
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this._receiveResponse(response);
            }
          });
          request_sender.send();
          if ((this._request.method === JsSIP_C.INVITE || this._request.method === JsSIP_C.UPDATE && this._request.body) && request_sender.clientTransaction.state !== Transactions.C.STATUS_TERMINATED) {
            this._dialog.uac_pending_reply = true;
            var stateChanged = function stateChanged2() {
              if (request_sender.clientTransaction.state === Transactions.C.STATUS_ACCEPTED || request_sender.clientTransaction.state === Transactions.C.STATUS_COMPLETED || request_sender.clientTransaction.state === Transactions.C.STATUS_TERMINATED) {
                request_sender.clientTransaction.removeListener("stateChanged", stateChanged2);
                _this._dialog.uac_pending_reply = false;
              }
            };
            request_sender.clientTransaction.on("stateChanged", stateChanged);
          }
        }
      }, {
        key: "_receiveResponse",
        value: function _receiveResponse(response) {
          var _this2 = this;
          if (response.status_code === 408 || response.status_code === 481) {
            this._eventHandlers.onDialogError(response);
          } else if (response.method === JsSIP_C.INVITE && response.status_code === 491) {
            if (this._reattempt) {
              if (response.status_code >= 200 && response.status_code < 300) {
                this._eventHandlers.onSuccessResponse(response);
              } else if (response.status_code >= 300) {
                this._eventHandlers.onErrorResponse(response);
              }
            } else {
              this._request.cseq.value = this._dialog.local_seqnum += 1;
              this._reattemptTimer = setTimeout(function() {
                if (_this2._dialog.owner.status !== RTCSession.C.STATUS_TERMINATED) {
                  _this2._reattempt = true;
                  _this2._request_sender.send();
                }
              }, 1e3);
            }
          } else if (response.status_code >= 200 && response.status_code < 300) {
            this._eventHandlers.onSuccessResponse(response);
          } else if (response.status_code >= 300) {
            this._eventHandlers.onErrorResponse(response);
          }
        }
      }, {
        key: "request",
        get: function get() {
          return this._request;
        }
      }]);
      return DialogRequestSender;
    }();
  }
});

// node_modules/jssip/lib-es5/Dialog.js
var require_Dialog = __commonJS({
  "node_modules/jssip/lib-es5/Dialog.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var SIPMessage = require_SIPMessage();
    var JsSIP_C = require_Constants();
    var Transactions = require_Transactions();
    var Dialog_RequestSender = require_RequestSender2();
    var Utils = require_Utils();
    var debug2 = require_browser()("JsSIP:Dialog");
    var C = {
      // Dialog states.
      STATUS_EARLY: 1,
      STATUS_CONFIRMED: 2
    };
    module.exports = function() {
      _createClass(Dialog, null, [{
        key: "C",
        // Expose C object.
        get: function get() {
          return C;
        }
      }]);
      function Dialog(owner, message, type) {
        var state = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : C.STATUS_CONFIRMED;
        _classCallCheck(this, Dialog);
        this._owner = owner;
        this._ua = owner._ua;
        this._uac_pending_reply = false;
        this._uas_pending_reply = false;
        if (!message.hasHeader("contact")) {
          return {
            error: "unable to create a Dialog without Contact header field"
          };
        }
        if (message instanceof SIPMessage.IncomingResponse) {
          state = message.status_code < 200 ? C.STATUS_EARLY : C.STATUS_CONFIRMED;
        }
        var contact = message.parseHeader("contact");
        if (type === "UAS") {
          this._id = {
            call_id: message.call_id,
            local_tag: message.to_tag,
            remote_tag: message.from_tag,
            toString: function toString() {
              return this.call_id + this.local_tag + this.remote_tag;
            }
          };
          this._state = state;
          this._remote_seqnum = message.cseq;
          this._local_uri = message.parseHeader("to").uri;
          this._remote_uri = message.parseHeader("from").uri;
          this._remote_target = contact.uri;
          this._route_set = message.getHeaders("record-route");
          this._ack_seqnum = this._remote_seqnum;
        } else if (type === "UAC") {
          this._id = {
            call_id: message.call_id,
            local_tag: message.from_tag,
            remote_tag: message.to_tag,
            toString: function toString() {
              return this.call_id + this.local_tag + this.remote_tag;
            }
          };
          this._state = state;
          this._local_seqnum = message.cseq;
          this._local_uri = message.parseHeader("from").uri;
          this._remote_uri = message.parseHeader("to").uri;
          this._remote_target = contact.uri;
          this._route_set = message.getHeaders("record-route").reverse();
          this._ack_seqnum = null;
        }
        this._ua.newDialog(this);
        debug2("new ".concat(type, " dialog created with status ").concat(this._state === C.STATUS_EARLY ? "EARLY" : "CONFIRMED"));
      }
      _createClass(Dialog, [{
        key: "update",
        value: function update(message, type) {
          this._state = C.STATUS_CONFIRMED;
          debug2("dialog ".concat(this._id.toString(), "  changed to CONFIRMED state"));
          if (type === "UAC") {
            this._route_set = message.getHeaders("record-route").reverse();
          }
        }
      }, {
        key: "terminate",
        value: function terminate() {
          debug2("dialog ".concat(this._id.toString(), " deleted"));
          this._ua.destroyDialog(this);
        }
      }, {
        key: "sendRequest",
        value: function sendRequest(method) {
          var _this = this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = options.eventHandlers || {};
          var body = options.body || null;
          var request = this._createRequest(method, extraHeaders, body);
          eventHandlers.onAuthenticated = function() {
            _this._local_seqnum += 1;
          };
          var request_sender = new Dialog_RequestSender(this, request, eventHandlers);
          request_sender.send();
          return request;
        }
      }, {
        key: "receiveRequest",
        value: function receiveRequest(request) {
          if (!this._checkInDialogRequest(request)) {
            return;
          }
          if (request.method === JsSIP_C.ACK && this._ack_seqnum !== null) {
            this._ack_seqnum = null;
          } else if (request.method === JsSIP_C.INVITE) {
            this._ack_seqnum = request.cseq;
          }
          this._owner.receiveRequest(request);
        }
        // RFC 3261 12.2.1.1.
      }, {
        key: "_createRequest",
        value: function _createRequest(method, extraHeaders, body) {
          extraHeaders = Utils.cloneArray(extraHeaders);
          if (!this._local_seqnum) {
            this._local_seqnum = Math.floor(Math.random() * 1e4);
          }
          var cseq = method === JsSIP_C.CANCEL || method === JsSIP_C.ACK ? this._local_seqnum : this._local_seqnum += 1;
          var request = new SIPMessage.OutgoingRequest(method, this._remote_target, this._ua, {
            "cseq": cseq,
            "call_id": this._id.call_id,
            "from_uri": this._local_uri,
            "from_tag": this._id.local_tag,
            "to_uri": this._remote_uri,
            "to_tag": this._id.remote_tag,
            "route_set": this._route_set
          }, extraHeaders, body);
          return request;
        }
        // RFC 3261 12.2.2.
      }, {
        key: "_checkInDialogRequest",
        value: function _checkInDialogRequest(request) {
          var _this2 = this;
          if (!this._remote_seqnum) {
            this._remote_seqnum = request.cseq;
          } else if (request.cseq < this._remote_seqnum) {
            if (request.method === JsSIP_C.ACK) {
              if (this._ack_seqnum === null || request.cseq !== this._ack_seqnum) {
                return false;
              }
            } else {
              request.reply(500);
              return false;
            }
          } else if (request.cseq > this._remote_seqnum) {
            this._remote_seqnum = request.cseq;
          }
          if (request.method === JsSIP_C.INVITE || request.method === JsSIP_C.UPDATE && request.body) {
            if (this._uac_pending_reply === true) {
              request.reply(491);
            } else if (this._uas_pending_reply === true) {
              var retryAfter = (Math.random() * 10 | 0) + 1;
              request.reply(500, null, ["Retry-After:".concat(retryAfter)]);
              return false;
            } else {
              this._uas_pending_reply = true;
              var stateChanged = function stateChanged2() {
                if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED || request.server_transaction.state === Transactions.C.STATUS_COMPLETED || request.server_transaction.state === Transactions.C.STATUS_TERMINATED) {
                  request.server_transaction.removeListener("stateChanged", stateChanged2);
                  _this2._uas_pending_reply = false;
                }
              };
              request.server_transaction.on("stateChanged", stateChanged);
            }
            if (request.hasHeader("contact")) {
              request.server_transaction.on("stateChanged", function() {
                if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED) {
                  _this2._remote_target = request.parseHeader("contact").uri;
                }
              });
            }
          } else if (request.method === JsSIP_C.NOTIFY) {
            if (request.hasHeader("contact")) {
              request.server_transaction.on("stateChanged", function() {
                if (request.server_transaction.state === Transactions.C.STATUS_COMPLETED) {
                  _this2._remote_target = request.parseHeader("contact").uri;
                }
              });
            }
          }
          return true;
        }
      }, {
        key: "id",
        get: function get() {
          return this._id;
        }
      }, {
        key: "local_seqnum",
        get: function get() {
          return this._local_seqnum;
        },
        set: function set(num) {
          this._local_seqnum = num;
        }
      }, {
        key: "owner",
        get: function get() {
          return this._owner;
        }
      }, {
        key: "uac_pending_reply",
        get: function get() {
          return this._uac_pending_reply;
        },
        set: function set(pending) {
          this._uac_pending_reply = pending;
        }
      }, {
        key: "uas_pending_reply",
        get: function get() {
          return this._uas_pending_reply;
        }
      }]);
      return Dialog;
    }();
  }
});

// node_modules/jssip/lib-es5/RTCSession/DTMF.js
var require_DTMF = __commonJS({
  "node_modules/jssip/lib-es5/RTCSession/DTMF.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var JsSIP_C = require_Constants();
    var Exceptions = require_Exceptions();
    var Utils = require_Utils();
    var debug2 = require_browser()("JsSIP:RTCSession:DTMF");
    var debugerror = require_browser()("JsSIP:ERROR:RTCSession:DTMF");
    debugerror.log = console.warn.bind(console);
    var C = {
      MIN_DURATION: 70,
      MAX_DURATION: 6e3,
      DEFAULT_DURATION: 100,
      MIN_INTER_TONE_GAP: 50,
      DEFAULT_INTER_TONE_GAP: 500
    };
    module.exports = function(_EventEmitter) {
      _inherits(DTMF, _EventEmitter);
      function DTMF(session) {
        var _this;
        _classCallCheck(this, DTMF);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(DTMF).call(this));
        _this._session = session;
        _this._direction = null;
        _this._tone = null;
        _this._duration = null;
        _this._request = null;
        return _this;
      }
      _createClass(DTMF, [{
        key: "send",
        value: function send(tone) {
          var _this2 = this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          if (tone === void 0) {
            throw new TypeError("Not enough arguments");
          }
          this._direction = "outgoing";
          if (this._session.status !== this._session.C.STATUS_CONFIRMED && this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._session.status);
          }
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          this.eventHandlers = options.eventHandlers || {};
          if (typeof tone === "string") {
            tone = tone.toUpperCase();
          } else if (typeof tone === "number") {
            tone = tone.toString();
          } else {
            throw new TypeError("Invalid tone: ".concat(tone));
          }
          if (!tone.match(/^[0-9A-DR#*]$/)) {
            throw new TypeError("Invalid tone: ".concat(tone));
          } else {
            this._tone = tone;
          }
          this._duration = options.duration;
          extraHeaders.push("Content-Type: application/dtmf-relay");
          var body = "Signal=".concat(this._tone, "\r\n");
          body += "Duration=".concat(this._duration);
          this._session.newDTMF({
            originator: "local",
            dtmf: this,
            request: this._request
          });
          this._session.sendRequest(JsSIP_C.INFO, {
            extraHeaders,
            eventHandlers: {
              onSuccessResponse: function onSuccessResponse(response) {
                _this2.emit("succeeded", {
                  originator: "remote",
                  response
                });
              },
              onErrorResponse: function onErrorResponse(response) {
                if (_this2.eventHandlers.onFailed) {
                  _this2.eventHandlers.onFailed();
                }
                _this2.emit("failed", {
                  originator: "remote",
                  response
                });
              },
              onRequestTimeout: function onRequestTimeout() {
                _this2._session.onRequestTimeout();
              },
              onTransportError: function onTransportError() {
                _this2._session.onTransportError();
              },
              onDialogError: function onDialogError() {
                _this2._session.onDialogError();
              }
            },
            body
          });
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request) {
          var reg_tone = /^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/;
          var reg_duration = /^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;
          this._direction = "incoming";
          this._request = request;
          request.reply(200);
          if (request.body) {
            var body = request.body.split("\n");
            if (body.length >= 1) {
              if (reg_tone.test(body[0])) {
                this._tone = body[0].replace(reg_tone, "$2");
              }
            }
            if (body.length >= 2) {
              if (reg_duration.test(body[1])) {
                this._duration = parseInt(body[1].replace(reg_duration, "$2"), 10);
              }
            }
          }
          if (!this._duration) {
            this._duration = C.DEFAULT_DURATION;
          }
          if (!this._tone) {
            debug2("invalid INFO DTMF received, discarded");
          } else {
            this._session.newDTMF({
              originator: "remote",
              dtmf: this,
              request
            });
          }
        }
      }, {
        key: "tone",
        get: function get() {
          return this._tone;
        }
      }, {
        key: "duration",
        get: function get() {
          return this._duration;
        }
      }]);
      return DTMF;
    }(EventEmitter6);
    module.exports.C = C;
  }
});

// node_modules/jssip/lib-es5/RTCSession/Info.js
var require_Info = __commonJS({
  "node_modules/jssip/lib-es5/RTCSession/Info.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var debugerror = require_browser()("JsSIP:ERROR:RTCSession:Info");
    debugerror.log = console.warn.bind(console);
    var JsSIP_C = require_Constants();
    var Exceptions = require_Exceptions();
    var Utils = require_Utils();
    module.exports = function(_EventEmitter) {
      _inherits(Info, _EventEmitter);
      function Info(session) {
        var _this;
        _classCallCheck(this, Info);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(Info).call(this));
        _this._session = session;
        _this._direction = null;
        _this._contentType = null;
        _this._body = null;
        return _this;
      }
      _createClass(Info, [{
        key: "send",
        value: function send(contentType, body) {
          var _this2 = this;
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          this._direction = "outgoing";
          if (contentType === void 0) {
            throw new TypeError("Not enough arguments");
          }
          if (this._session.status !== this._session.C.STATUS_CONFIRMED && this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._session.status);
          }
          this._contentType = contentType;
          this._body = body;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          extraHeaders.push("Content-Type: ".concat(contentType));
          this._session.newInfo({
            originator: "local",
            info: this,
            request: this.request
          });
          this._session.sendRequest(JsSIP_C.INFO, {
            extraHeaders,
            eventHandlers: {
              onSuccessResponse: function onSuccessResponse(response) {
                _this2.emit("succeeded", {
                  originator: "remote",
                  response
                });
              },
              onErrorResponse: function onErrorResponse(response) {
                _this2.emit("failed", {
                  originator: "remote",
                  response
                });
              },
              onTransportError: function onTransportError() {
                _this2._session.onTransportError();
              },
              onRequestTimeout: function onRequestTimeout() {
                _this2._session.onRequestTimeout();
              },
              onDialogError: function onDialogError() {
                _this2._session.onDialogError();
              }
            },
            body
          });
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request) {
          this._direction = "incoming";
          this.request = request;
          request.reply(200);
          this._contentType = request.getHeader("content-type");
          this._body = request.body;
          this._session.newInfo({
            originator: "remote",
            info: this,
            request
          });
        }
      }, {
        key: "contentType",
        get: function get() {
          return this._contentType;
        }
      }, {
        key: "body",
        get: function get() {
          return this._body;
        }
      }]);
      return Info;
    }(EventEmitter6);
  }
});

// node_modules/jssip/lib-es5/RTCSession/ReferNotifier.js
var require_ReferNotifier = __commonJS({
  "node_modules/jssip/lib-es5/RTCSession/ReferNotifier.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var JsSIP_C = require_Constants();
    var debug2 = require_browser()("JsSIP:RTCSession:ReferNotifier");
    var C = {
      event_type: "refer",
      body_type: "message/sipfrag;version=2.0",
      expires: 300
    };
    module.exports = function() {
      function ReferNotifier(session, id, expires) {
        _classCallCheck(this, ReferNotifier);
        this._session = session;
        this._id = id;
        this._expires = expires || C.expires;
        this._active = true;
        this.notify(100);
      }
      _createClass(ReferNotifier, [{
        key: "notify",
        value: function notify(code, reason) {
          debug2("notify()");
          if (this._active === false) {
            return;
          }
          reason = reason || JsSIP_C.REASON_PHRASE[code] || "";
          var state;
          if (code >= 200) {
            state = "terminated;reason=noresource";
          } else {
            state = "active;expires=".concat(this._expires);
          }
          this._session.sendRequest(JsSIP_C.NOTIFY, {
            extraHeaders: ["Event: ".concat(C.event_type, ";id=").concat(this._id), "Subscription-State: ".concat(state), "Content-Type: ".concat(C.body_type)],
            body: "SIP/2.0 ".concat(code, " ").concat(reason),
            eventHandlers: {
              // If a negative response is received, subscription is canceled.
              onErrorResponse: function onErrorResponse() {
                this._active = false;
              }
            }
          });
        }
      }]);
      return ReferNotifier;
    }();
  }
});

// node_modules/jssip/lib-es5/RTCSession/ReferSubscriber.js
var require_ReferSubscriber = __commonJS({
  "node_modules/jssip/lib-es5/RTCSession/ReferSubscriber.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var JsSIP_C = require_Constants();
    var Grammar = require_Grammar();
    var Utils = require_Utils();
    var debug2 = require_browser()("JsSIP:RTCSession:ReferSubscriber");
    module.exports = function(_EventEmitter) {
      _inherits(ReferSubscriber, _EventEmitter);
      function ReferSubscriber(session) {
        var _this;
        _classCallCheck(this, ReferSubscriber);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(ReferSubscriber).call(this));
        _this._id = null;
        _this._session = session;
        return _this;
      }
      _createClass(ReferSubscriber, [{
        key: "sendRefer",
        value: function sendRefer(target) {
          var _this2 = this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          debug2("sendRefer()");
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = options.eventHandlers || {};
          for (var event in eventHandlers) {
            if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {
              this.on(event, eventHandlers[event]);
            }
          }
          var replaces = null;
          if (options.replaces) {
            replaces = options.replaces._request.call_id;
            replaces += ";to-tag=".concat(options.replaces._to_tag);
            replaces += ";from-tag=".concat(options.replaces._from_tag);
            replaces = encodeURIComponent(replaces);
          }
          var referTo = "Refer-To: <".concat(target).concat(replaces ? "?Replaces=".concat(replaces) : "", ">");
          extraHeaders.push(referTo);
          extraHeaders.push("Contact: ".concat(this._session.contact));
          var request = this._session.sendRequest(JsSIP_C.REFER, {
            extraHeaders,
            eventHandlers: {
              onSuccessResponse: function onSuccessResponse(response) {
                _this2._requestSucceeded(response);
              },
              onErrorResponse: function onErrorResponse(response) {
                _this2._requestFailed(response, JsSIP_C.causes.REJECTED);
              },
              onTransportError: function onTransportError() {
                _this2._requestFailed(null, JsSIP_C.causes.CONNECTION_ERROR);
              },
              onRequestTimeout: function onRequestTimeout() {
                _this2._requestFailed(null, JsSIP_C.causes.REQUEST_TIMEOUT);
              },
              onDialogError: function onDialogError() {
                _this2._requestFailed(null, JsSIP_C.causes.DIALOG_ERROR);
              }
            }
          });
          this._id = request.cseq;
        }
      }, {
        key: "receiveNotify",
        value: function receiveNotify(request) {
          debug2("receiveNotify()");
          if (!request.body) {
            return;
          }
          var status_line = Grammar.parse(request.body.trim(), "Status_Line");
          if (status_line === -1) {
            debug2('receiveNotify() | error parsing NOTIFY body: "'.concat(request.body, '"'));
            return;
          }
          switch (true) {
            case /^100$/.test(status_line.status_code):
              this.emit("trying", {
                request,
                status_line
              });
              break;
            case /^1[0-9]{2}$/.test(status_line.status_code):
              this.emit("progress", {
                request,
                status_line
              });
              break;
            case /^2[0-9]{2}$/.test(status_line.status_code):
              this.emit("accepted", {
                request,
                status_line
              });
              break;
            default:
              this.emit("failed", {
                request,
                status_line
              });
              break;
          }
        }
      }, {
        key: "_requestSucceeded",
        value: function _requestSucceeded(response) {
          debug2("REFER succeeded");
          debug2('emit "requestSucceeded"');
          this.emit("requestSucceeded", {
            response
          });
        }
      }, {
        key: "_requestFailed",
        value: function _requestFailed(response, cause) {
          debug2("REFER failed");
          debug2('emit "requestFailed"');
          this.emit("requestFailed", {
            response: response || null,
            cause
          });
        }
      }, {
        key: "id",
        get: function get() {
          return this._id;
        }
      }]);
      return ReferSubscriber;
    }(EventEmitter6);
  }
});

// node_modules/jssip/lib-es5/RTCSession.js
var require_RTCSession = __commonJS({
  "node_modules/jssip/lib-es5/RTCSession.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var sdp_transform = require_lib2();
    var JsSIP_C = require_Constants();
    var Exceptions = require_Exceptions();
    var Transactions = require_Transactions();
    var Utils = require_Utils();
    var Timers = require_Timers();
    var SIPMessage = require_SIPMessage();
    var Dialog = require_Dialog();
    var RequestSender = require_RequestSender();
    var RTCSession_DTMF = require_DTMF();
    var RTCSession_Info = require_Info();
    var RTCSession_ReferNotifier = require_ReferNotifier();
    var RTCSession_ReferSubscriber = require_ReferSubscriber();
    var URI = require_URI();
    var debug2 = require_browser()("JsSIP:RTCSession");
    var debugerror = require_browser()("JsSIP:ERROR:RTCSession");
    debugerror.log = console.warn.bind(console);
    var C = {
      // RTCSession states.
      STATUS_NULL: 0,
      STATUS_INVITE_SENT: 1,
      STATUS_1XX_RECEIVED: 2,
      STATUS_INVITE_RECEIVED: 3,
      STATUS_WAITING_FOR_ANSWER: 4,
      STATUS_ANSWERED: 5,
      STATUS_WAITING_FOR_ACK: 6,
      STATUS_CANCELED: 7,
      STATUS_TERMINATED: 8,
      STATUS_CONFIRMED: 9
    };
    var holdMediaTypes = ["audio", "video"];
    module.exports = function(_EventEmitter) {
      _inherits(RTCSession, _EventEmitter);
      _createClass(RTCSession, null, [{
        key: "C",
        /**
         * Expose C object.
         */
        get: function get() {
          return C;
        }
      }]);
      function RTCSession(ua) {
        var _this;
        _classCallCheck(this, RTCSession);
        debug2("new");
        _this = _possibleConstructorReturn(this, _getPrototypeOf(RTCSession).call(this));
        _this._id = null;
        _this._ua = ua;
        _this._status = C.STATUS_NULL;
        _this._dialog = null;
        _this._earlyDialogs = {};
        _this._contact = null;
        _this._from_tag = null;
        _this._to_tag = null;
        _this._connection = null;
        _this._connectionPromiseQueue = Promise.resolve();
        _this._request = null;
        _this._is_canceled = false;
        _this._cancel_reason = "";
        _this._is_confirmed = false;
        _this._late_sdp = false;
        _this._rtcOfferConstraints = null;
        _this._rtcAnswerConstraints = null;
        _this._localMediaStream = null;
        _this._localMediaStreamLocallyGenerated = false;
        _this._rtcReady = true;
        _this._timers = {
          ackTimer: null,
          expiresTimer: null,
          invite2xxTimer: null,
          userNoAnswerTimer: null
        };
        _this._direction = null;
        _this._local_identity = null;
        _this._remote_identity = null;
        _this._start_time = null;
        _this._end_time = null;
        _this._tones = null;
        _this._audioMuted = false;
        _this._videoMuted = false;
        _this._localHold = false;
        _this._remoteHold = false;
        _this._sessionTimers = {
          enabled: _this._ua.configuration.session_timers,
          refreshMethod: _this._ua.configuration.session_timers_refresh_method,
          defaultExpires: JsSIP_C.SESSION_EXPIRES,
          currentExpires: null,
          running: false,
          refresher: false,
          timer: null
          // A setTimeout.
        };
        _this._referSubscribers = {};
        _this._data = {};
        return _this;
      }
      _createClass(RTCSession, [{
        key: "isInProgress",
        value: function isInProgress() {
          switch (this._status) {
            case C.STATUS_NULL:
            case C.STATUS_INVITE_SENT:
            case C.STATUS_1XX_RECEIVED:
            case C.STATUS_INVITE_RECEIVED:
            case C.STATUS_WAITING_FOR_ANSWER:
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isEstablished",
        value: function isEstablished() {
          switch (this._status) {
            case C.STATUS_ANSWERED:
            case C.STATUS_WAITING_FOR_ACK:
            case C.STATUS_CONFIRMED:
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isEnded",
        value: function isEnded() {
          switch (this._status) {
            case C.STATUS_CANCELED:
            case C.STATUS_TERMINATED:
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isMuted",
        value: function isMuted() {
          return {
            audio: this._audioMuted,
            video: this._videoMuted
          };
        }
      }, {
        key: "isOnHold",
        value: function isOnHold() {
          return {
            local: this._localHold,
            remote: this._remoteHold
          };
        }
      }, {
        key: "connect",
        value: function connect(target) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var initCallback = arguments.length > 2 ? arguments[2] : void 0;
          debug2("connect()");
          var originalTarget = target;
          var eventHandlers = options.eventHandlers || {};
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var mediaConstraints = options.mediaConstraints || {
            audio: true,
            video: true
          };
          var mediaStream = options.mediaStream || null;
          var pcConfig = options.pcConfig || {
            iceServers: []
          };
          var rtcConstraints = options.rtcConstraints || null;
          var rtcOfferConstraints = options.rtcOfferConstraints || null;
          this._rtcOfferConstraints = rtcOfferConstraints;
          this._rtcAnswerConstraints = options.rtcAnswerConstraints || null;
          this._data = options.data || this._data;
          if (target === void 0) {
            throw new TypeError("Not enough arguments");
          }
          if (this._status !== C.STATUS_NULL) {
            throw new Exceptions.InvalidStateError(this._status);
          }
          if (!window.RTCPeerConnection) {
            throw new Exceptions.NotSupportedError("WebRTC not supported");
          }
          target = this._ua.normalizeTarget(target);
          if (!target) {
            throw new TypeError("Invalid target: ".concat(originalTarget));
          }
          if (this._sessionTimers.enabled) {
            if (Utils.isDecimal(options.sessionTimersExpires)) {
              if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES) {
                this._sessionTimers.defaultExpires = options.sessionTimersExpires;
              } else {
                this._sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;
              }
            }
          }
          for (var event in eventHandlers) {
            if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {
              this.on(event, eventHandlers[event]);
            }
          }
          this._from_tag = Utils.newTag();
          var anonymous = options.anonymous || false;
          var requestParams = {
            from_tag: this._from_tag
          };
          this._contact = this._ua.contact.toString({
            anonymous,
            outbound: true
          });
          if (anonymous) {
            requestParams.from_display_name = "Anonymous";
            requestParams.from_uri = new URI("sip", "anonymous", "anonymous.invalid");
            extraHeaders.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString()));
            extraHeaders.push("Privacy: id");
          }
          extraHeaders.push("Contact: ".concat(this._contact));
          extraHeaders.push("Content-Type: application/sdp");
          if (this._sessionTimers.enabled) {
            extraHeaders.push("Session-Expires: ".concat(this._sessionTimers.defaultExpires));
          }
          this._request = new SIPMessage.InitialOutgoingInviteRequest(target, this._ua, requestParams, extraHeaders);
          this._id = this._request.call_id + this._from_tag;
          this._createRTCConnection(pcConfig, rtcConstraints);
          this._direction = "outgoing";
          this._local_identity = this._request.from;
          this._remote_identity = this._request.to;
          if (initCallback) {
            initCallback(this);
          }
          this._newRTCSession("local", this._request);
          this._sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream);
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request, initCallback) {
          var _this2 = this;
          debug2("init_incoming()");
          var expires;
          var contentType = request.getHeader("Content-Type");
          if (request.body && contentType !== "application/sdp") {
            request.reply(415);
            return;
          }
          this._status = C.STATUS_INVITE_RECEIVED;
          this._from_tag = request.from_tag;
          this._id = request.call_id + this._from_tag;
          this._request = request;
          this._contact = this._ua.contact.toString();
          if (request.hasHeader("expires")) {
            expires = request.getHeader("expires") * 1e3;
          }
          request.to_tag = Utils.newTag();
          if (!this._createDialog(request, "UAS", true)) {
            request.reply(500, "Missing Contact header field");
            return;
          }
          if (request.body) {
            this._late_sdp = false;
          } else {
            this._late_sdp = true;
          }
          this._status = C.STATUS_WAITING_FOR_ANSWER;
          this._timers.userNoAnswerTimer = setTimeout(function() {
            request.reply(408);
            _this2._failed("local", null, JsSIP_C.causes.NO_ANSWER);
          }, this._ua.configuration.no_answer_timeout);
          if (expires) {
            this._timers.expiresTimer = setTimeout(function() {
              if (_this2._status === C.STATUS_WAITING_FOR_ANSWER) {
                request.reply(487);
                _this2._failed("system", null, JsSIP_C.causes.EXPIRES);
              }
            }, expires);
          }
          this._direction = "incoming";
          this._local_identity = request.to;
          this._remote_identity = request.from;
          if (initCallback) {
            initCallback(this);
          }
          this._newRTCSession("remote", request);
          if (this._status === C.STATUS_TERMINATED) {
            return;
          }
          request.reply(180, null, ["Contact: ".concat(this._contact)]);
          this._progress("local", null);
        }
        /**
         * Answer the call.
         */
      }, {
        key: "answer",
        value: function answer() {
          var _this3 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          debug2("answer()");
          var request = this._request;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var mediaConstraints = options.mediaConstraints || {};
          var mediaStream = options.mediaStream || null;
          var pcConfig = options.pcConfig || {
            iceServers: []
          };
          var rtcConstraints = options.rtcConstraints || null;
          var rtcAnswerConstraints = options.rtcAnswerConstraints || null;
          var tracks;
          var peerHasAudioLine = false;
          var peerHasVideoLine = false;
          var peerOffersFullAudio = false;
          var peerOffersFullVideo = false;
          this._rtcAnswerConstraints = rtcAnswerConstraints;
          this._rtcOfferConstraints = options.rtcOfferConstraints || null;
          this._data = options.data || this._data;
          if (this._direction !== "incoming") {
            throw new Exceptions.NotSupportedError('"answer" not supported for outgoing RTCSession');
          }
          if (this._status !== C.STATUS_WAITING_FOR_ANSWER) {
            throw new Exceptions.InvalidStateError(this._status);
          }
          if (this._sessionTimers.enabled) {
            if (Utils.isDecimal(options.sessionTimersExpires)) {
              if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES) {
                this._sessionTimers.defaultExpires = options.sessionTimersExpires;
              } else {
                this._sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;
              }
            }
          }
          this._status = C.STATUS_ANSWERED;
          if (!this._createDialog(request, "UAS")) {
            request.reply(500, "Error creating dialog");
            return;
          }
          clearTimeout(this._timers.userNoAnswerTimer);
          extraHeaders.unshift("Contact: ".concat(this._contact));
          var sdp = request.parseSDP();
          if (!Array.isArray(sdp.media)) {
            sdp.media = [sdp.media];
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = sdp.media[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var m = _step.value;
              if (m.type === "audio") {
                peerHasAudioLine = true;
                if (!m.direction || m.direction === "sendrecv") {
                  peerOffersFullAudio = true;
                }
              }
              if (m.type === "video") {
                peerHasVideoLine = true;
                if (!m.direction || m.direction === "sendrecv") {
                  peerOffersFullVideo = true;
                }
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          if (mediaStream && mediaConstraints.audio === false) {
            tracks = mediaStream.getAudioTracks();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = tracks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var track = _step2.value;
                mediaStream.removeTrack(track);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
          if (mediaStream && mediaConstraints.video === false) {
            tracks = mediaStream.getVideoTracks();
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = void 0;
            try {
              for (var _iterator3 = tracks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _track = _step3.value;
                mediaStream.removeTrack(_track);
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }
          if (!mediaStream && mediaConstraints.audio === void 0) {
            mediaConstraints.audio = peerOffersFullAudio;
          }
          if (!mediaStream && mediaConstraints.video === void 0) {
            mediaConstraints.video = peerOffersFullVideo;
          }
          if (!mediaStream && !peerHasAudioLine) {
            mediaConstraints.audio = false;
          }
          if (!mediaStream && !peerHasVideoLine) {
            mediaConstraints.video = false;
          }
          this._createRTCConnection(pcConfig, rtcConstraints);
          Promise.resolve().then(function() {
            if (mediaStream) {
              return mediaStream;
            } else if (mediaConstraints.audio || mediaConstraints.video) {
              _this3._localMediaStreamLocallyGenerated = true;
              return navigator.mediaDevices.getUserMedia(mediaConstraints)["catch"](function(error) {
                if (_this3._status === C.STATUS_TERMINATED) {
                  throw new Error("terminated");
                }
                request.reply(480);
                _this3._failed("local", null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);
                debugerror('emit "getusermediafailed" [error:%o]', error);
                _this3.emit("getusermediafailed", error);
                throw new Error("getUserMedia() failed");
              });
            }
          }).then(function(stream) {
            if (_this3._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            _this3._localMediaStream = stream;
            if (stream) {
              stream.getTracks().forEach(function(track2) {
                _this3._connection.addTrack(track2, stream);
              });
            }
          }).then(function() {
            if (_this3._late_sdp) {
              return;
            }
            var e = {
              originator: "remote",
              type: "offer",
              sdp: request.body
            };
            debug2('emit "sdp"');
            _this3.emit("sdp", e);
            var offer = new RTCSessionDescription({
              type: "offer",
              sdp: e.sdp
            });
            _this3._connectionPromiseQueue = _this3._connectionPromiseQueue.then(function() {
              return _this3._connection.setRemoteDescription(offer);
            })["catch"](function(error) {
              request.reply(488);
              _this3._failed("system", null, JsSIP_C.causes.WEBRTC_ERROR);
              debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
              _this3.emit("peerconnection:setremotedescriptionfailed", error);
              throw new Error("peerconnection.setRemoteDescription() failed");
            });
            return _this3._connectionPromiseQueue;
          }).then(function() {
            if (_this3._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            _this3._connecting(request);
            if (!_this3._late_sdp) {
              return _this3._createLocalDescription("answer", rtcAnswerConstraints)["catch"](function() {
                request.reply(500);
                throw new Error("_createLocalDescription() failed");
              });
            } else {
              return _this3._createLocalDescription("offer", _this3._rtcOfferConstraints)["catch"](function() {
                request.reply(500);
                throw new Error("_createLocalDescription() failed");
              });
            }
          }).then(function(desc) {
            if (_this3._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            _this3._handleSessionTimersInIncomingRequest(request, extraHeaders);
            request.reply(200, null, extraHeaders, desc, function() {
              _this3._status = C.STATUS_WAITING_FOR_ACK;
              _this3._setInvite2xxTimer(request, desc);
              _this3._setACKTimer();
              _this3._accepted("local");
            }, function() {
              _this3._failed("system", null, JsSIP_C.causes.CONNECTION_ERROR);
            });
          })["catch"](function(error) {
            if (_this3._status === C.STATUS_TERMINATED) {
              return;
            }
            debugerror(error);
          });
        }
        /**
         * Terminate the call.
         */
      }, {
        key: "terminate",
        value: function terminate() {
          var _this4 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          debug2("terminate()");
          var cause = options.cause || JsSIP_C.causes.BYE;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var body = options.body;
          var cancel_reason;
          var status_code = options.status_code;
          var reason_phrase = options.reason_phrase;
          if (this._status === C.STATUS_TERMINATED) {
            throw new Exceptions.InvalidStateError(this._status);
          }
          switch (this._status) {
            case C.STATUS_NULL:
            case C.STATUS_INVITE_SENT:
            case C.STATUS_1XX_RECEIVED:
              debug2("canceling session");
              if (status_code && (status_code < 200 || status_code >= 700)) {
                throw new TypeError("Invalid status_code: ".concat(status_code));
              } else if (status_code) {
                reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || "";
                cancel_reason = "SIP ;cause=".concat(status_code, ' ;text="').concat(reason_phrase, '"');
              }
              if (this._status === C.STATUS_NULL || this._status === C.STATUS_INVITE_SENT) {
                this._is_canceled = true;
                this._cancel_reason = cancel_reason;
              } else if (this._status === C.STATUS_1XX_RECEIVED) {
                this._request.cancel(cancel_reason);
              }
              this._status = C.STATUS_CANCELED;
              this._failed("local", null, JsSIP_C.causes.CANCELED);
              break;
            case C.STATUS_WAITING_FOR_ANSWER:
            case C.STATUS_ANSWERED:
              debug2("rejecting session");
              status_code = status_code || 480;
              if (status_code < 300 || status_code >= 700) {
                throw new TypeError("Invalid status_code: ".concat(status_code));
              }
              this._request.reply(status_code, reason_phrase, extraHeaders, body);
              this._failed("local", null, JsSIP_C.causes.REJECTED);
              break;
            case C.STATUS_WAITING_FOR_ACK:
            case C.STATUS_CONFIRMED:
              debug2("terminating session");
              reason_phrase = options.reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || "";
              if (status_code && (status_code < 200 || status_code >= 700)) {
                throw new TypeError("Invalid status_code: ".concat(status_code));
              } else if (status_code) {
                extraHeaders.push("Reason: SIP ;cause=".concat(status_code, '; text="').concat(reason_phrase, '"'));
              }
              if (this._status === C.STATUS_WAITING_FOR_ACK && this._direction === "incoming" && this._request.server_transaction.state !== Transactions.C.STATUS_TERMINATED) {
                var dialog = this._dialog;
                this.receiveRequest = function(_ref) {
                  var method = _ref.method;
                  if (method === JsSIP_C.ACK) {
                    _this4.sendRequest(JsSIP_C.BYE, {
                      extraHeaders,
                      body
                    });
                    dialog.terminate();
                  }
                };
                this._request.server_transaction.on("stateChanged", function() {
                  if (_this4._request.server_transaction.state === Transactions.C.STATUS_TERMINATED) {
                    _this4.sendRequest(JsSIP_C.BYE, {
                      extraHeaders,
                      body
                    });
                    dialog.terminate();
                  }
                });
                this._ended("local", null, cause);
                this._dialog = dialog;
                this._ua.newDialog(dialog);
              } else {
                this.sendRequest(JsSIP_C.BYE, {
                  extraHeaders,
                  body
                });
                this._ended("local", null, cause);
              }
          }
        }
      }, {
        key: "sendDTMF",
        value: function sendDTMF(tones) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          debug2("sendDTMF() | tones: %s", tones);
          var position = 0;
          var duration = options.duration || null;
          var interToneGap = options.interToneGap || null;
          if (tones === void 0) {
            throw new TypeError("Not enough arguments");
          }
          if (this._status !== C.STATUS_CONFIRMED && this._status !== C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._status);
          }
          if (typeof tones === "number") {
            tones = tones.toString();
          }
          if (!tones || typeof tones !== "string" || !tones.match(/^[0-9A-DR#*,]+$/i)) {
            throw new TypeError("Invalid tones: ".concat(tones));
          }
          if (duration && !Utils.isDecimal(duration)) {
            throw new TypeError("Invalid tone duration: ".concat(duration));
          } else if (!duration) {
            duration = RTCSession_DTMF.C.DEFAULT_DURATION;
          } else if (duration < RTCSession_DTMF.C.MIN_DURATION) {
            debug2('"duration" value is lower than the minimum allowed, setting it to '.concat(RTCSession_DTMF.C.MIN_DURATION, " milliseconds"));
            duration = RTCSession_DTMF.C.MIN_DURATION;
          } else if (duration > RTCSession_DTMF.C.MAX_DURATION) {
            debug2('"duration" value is greater than the maximum allowed, setting it to '.concat(RTCSession_DTMF.C.MAX_DURATION, " milliseconds"));
            duration = RTCSession_DTMF.C.MAX_DURATION;
          } else {
            duration = Math.abs(duration);
          }
          options.duration = duration;
          if (interToneGap && !Utils.isDecimal(interToneGap)) {
            throw new TypeError("Invalid interToneGap: ".concat(interToneGap));
          } else if (!interToneGap) {
            interToneGap = RTCSession_DTMF.C.DEFAULT_INTER_TONE_GAP;
          } else if (interToneGap < RTCSession_DTMF.C.MIN_INTER_TONE_GAP) {
            debug2('"interToneGap" value is lower than the minimum allowed, setting it to '.concat(RTCSession_DTMF.C.MIN_INTER_TONE_GAP, " milliseconds"));
            interToneGap = RTCSession_DTMF.C.MIN_INTER_TONE_GAP;
          } else {
            interToneGap = Math.abs(interToneGap);
          }
          if (this._tones) {
            this._tones += tones;
            return;
          }
          this._tones = tones;
          _sendDTMF.call(this);
          function _sendDTMF() {
            var _this5 = this;
            var timeout;
            if (this._status === C.STATUS_TERMINATED || !this._tones || position >= this._tones.length) {
              this._tones = null;
              return;
            }
            var tone = this._tones[position];
            position += 1;
            if (tone === ",") {
              timeout = 2e3;
            } else {
              var dtmf = new RTCSession_DTMF(this);
              options.eventHandlers = {
                onFailed: function onFailed() {
                  _this5._tones = null;
                }
              };
              dtmf.send(tone, options);
              timeout = duration + interToneGap;
            }
            setTimeout(_sendDTMF.bind(this), timeout);
          }
        }
      }, {
        key: "sendInfo",
        value: function sendInfo(contentType, body) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          debug2("sendInfo()");
          if (this._status !== C.STATUS_CONFIRMED && this._status !== C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._status);
          }
          var info = new RTCSession_Info(this);
          info.send(contentType, body, options);
        }
        /**
         * Mute
         */
      }, {
        key: "mute",
        value: function mute() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
            audio: true,
            video: false
          };
          debug2("mute()");
          var audioMuted = false, videoMuted = false;
          if (this._audioMuted === false && options.audio) {
            audioMuted = true;
            this._audioMuted = true;
            this._toggleMuteAudio(true);
          }
          if (this._videoMuted === false && options.video) {
            videoMuted = true;
            this._videoMuted = true;
            this._toggleMuteVideo(true);
          }
          if (audioMuted === true || videoMuted === true) {
            this._onmute({
              audio: audioMuted,
              video: videoMuted
            });
          }
        }
        /**
         * Unmute
         */
      }, {
        key: "unmute",
        value: function unmute() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
            audio: true,
            video: true
          };
          debug2("unmute()");
          var audioUnMuted = false, videoUnMuted = false;
          if (this._audioMuted === true && options.audio) {
            audioUnMuted = true;
            this._audioMuted = false;
            if (this._localHold === false) {
              this._toggleMuteAudio(false);
            }
          }
          if (this._videoMuted === true && options.video) {
            videoUnMuted = true;
            this._videoMuted = false;
            if (this._localHold === false) {
              this._toggleMuteVideo(false);
            }
          }
          if (audioUnMuted === true || videoUnMuted === true) {
            this._onunmute({
              audio: audioUnMuted,
              video: videoUnMuted
            });
          }
        }
        /**
         * Hold
         */
      }, {
        key: "hold",
        value: function hold() {
          var _this6 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var done = arguments.length > 1 ? arguments[1] : void 0;
          debug2("hold()");
          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }
          if (this._localHold === true) {
            return false;
          }
          if (!this._isReadyToReOffer()) {
            return false;
          }
          this._localHold = true;
          this._onhold("local");
          var eventHandlers = {
            succeeded: function succeeded() {
              if (done) {
                done();
              }
            },
            failed: function failed() {
              _this6.terminate({
                cause: JsSIP_C.causes.WEBRTC_ERROR,
                status_code: 500,
                reason_phrase: "Hold Failed"
              });
            }
          };
          if (options.useUpdate) {
            this._sendUpdate({
              sdpOffer: true,
              eventHandlers,
              extraHeaders: options.extraHeaders
            });
          } else {
            this._sendReinvite({
              eventHandlers,
              extraHeaders: options.extraHeaders
            });
          }
          return true;
        }
      }, {
        key: "unhold",
        value: function unhold() {
          var _this7 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var done = arguments.length > 1 ? arguments[1] : void 0;
          debug2("unhold()");
          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }
          if (this._localHold === false) {
            return false;
          }
          if (!this._isReadyToReOffer()) {
            return false;
          }
          this._localHold = false;
          this._onunhold("local");
          var eventHandlers = {
            succeeded: function succeeded() {
              if (done) {
                done();
              }
            },
            failed: function failed() {
              _this7.terminate({
                cause: JsSIP_C.causes.WEBRTC_ERROR,
                status_code: 500,
                reason_phrase: "Unhold Failed"
              });
            }
          };
          if (options.useUpdate) {
            this._sendUpdate({
              sdpOffer: true,
              eventHandlers,
              extraHeaders: options.extraHeaders
            });
          } else {
            this._sendReinvite({
              eventHandlers,
              extraHeaders: options.extraHeaders
            });
          }
          return true;
        }
      }, {
        key: "renegotiate",
        value: function renegotiate() {
          var _this8 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var done = arguments.length > 1 ? arguments[1] : void 0;
          debug2("renegotiate()");
          var rtcOfferConstraints = options.rtcOfferConstraints || null;
          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }
          if (!this._isReadyToReOffer()) {
            return false;
          }
          var eventHandlers = {
            succeeded: function succeeded() {
              if (done) {
                done();
              }
            },
            failed: function failed() {
              _this8.terminate({
                cause: JsSIP_C.causes.WEBRTC_ERROR,
                status_code: 500,
                reason_phrase: "Media Renegotiation Failed"
              });
            }
          };
          this._setLocalMediaStatus();
          if (options.useUpdate) {
            this._sendUpdate({
              sdpOffer: true,
              eventHandlers,
              rtcOfferConstraints,
              extraHeaders: options.extraHeaders
            });
          } else {
            this._sendReinvite({
              eventHandlers,
              rtcOfferConstraints,
              extraHeaders: options.extraHeaders
            });
          }
          return true;
        }
        /**
         * Refer
         */
      }, {
        key: "refer",
        value: function refer(target, options) {
          var _this9 = this;
          debug2("refer()");
          var originalTarget = target;
          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }
          target = this._ua.normalizeTarget(target);
          if (!target) {
            throw new TypeError("Invalid target: ".concat(originalTarget));
          }
          var referSubscriber = new RTCSession_ReferSubscriber(this);
          referSubscriber.sendRefer(target, options);
          var id = referSubscriber.id;
          this._referSubscribers[id] = referSubscriber;
          referSubscriber.on("requestFailed", function() {
            delete _this9._referSubscribers[id];
          });
          referSubscriber.on("accepted", function() {
            delete _this9._referSubscribers[id];
          });
          referSubscriber.on("failed", function() {
            delete _this9._referSubscribers[id];
          });
          return referSubscriber;
        }
        /**
         * Send a generic in-dialog Request
         */
      }, {
        key: "sendRequest",
        value: function sendRequest(method, options) {
          debug2("sendRequest()");
          return this._dialog.sendRequest(method, options);
        }
        /**
         * In dialog Request Reception
         */
      }, {
        key: "receiveRequest",
        value: function receiveRequest(request) {
          var _this10 = this;
          debug2("receiveRequest()");
          if (request.method === JsSIP_C.CANCEL) {
            if (this._status === C.STATUS_WAITING_FOR_ANSWER || this._status === C.STATUS_ANSWERED) {
              this._status = C.STATUS_CANCELED;
              this._request.reply(487);
              this._failed("remote", request, JsSIP_C.causes.CANCELED);
            }
          } else {
            switch (request.method) {
              case JsSIP_C.ACK:
                if (this._status !== C.STATUS_WAITING_FOR_ACK) {
                  return;
                }
                this._status = C.STATUS_CONFIRMED;
                clearTimeout(this._timers.ackTimer);
                clearTimeout(this._timers.invite2xxTimer);
                if (this._late_sdp) {
                  if (!request.body) {
                    this.terminate({
                      cause: JsSIP_C.causes.MISSING_SDP,
                      status_code: 400
                    });
                    break;
                  }
                  var e = {
                    originator: "remote",
                    type: "answer",
                    sdp: request.body
                  };
                  debug2('emit "sdp"');
                  this.emit("sdp", e);
                  var answer = new RTCSessionDescription({
                    type: "answer",
                    sdp: e.sdp
                  });
                  this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
                    return _this10._connection.setRemoteDescription(answer);
                  }).then(function() {
                    if (!_this10._is_confirmed) {
                      _this10._confirmed("remote", request);
                    }
                  })["catch"](function(error) {
                    _this10.terminate({
                      cause: JsSIP_C.causes.BAD_MEDIA_DESCRIPTION,
                      status_code: 488
                    });
                    debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
                    _this10.emit("peerconnection:setremotedescriptionfailed", error);
                  });
                } else if (!this._is_confirmed) {
                  this._confirmed("remote", request);
                }
                break;
              case JsSIP_C.BYE:
                if (this._status === C.STATUS_CONFIRMED) {
                  request.reply(200);
                  this._ended("remote", request, JsSIP_C.causes.BYE);
                } else if (this._status === C.STATUS_INVITE_RECEIVED) {
                  request.reply(200);
                  this._request.reply(487, "BYE Received");
                  this._ended("remote", request, JsSIP_C.causes.BYE);
                } else {
                  request.reply(403, "Wrong Status");
                }
                break;
              case JsSIP_C.INVITE:
                if (this._status === C.STATUS_CONFIRMED) {
                  if (request.hasHeader("replaces")) {
                    this._receiveReplaces(request);
                  } else {
                    this._receiveReinvite(request);
                  }
                } else {
                  request.reply(403, "Wrong Status");
                }
                break;
              case JsSIP_C.INFO:
                if (this._status === C.STATUS_1XX_RECEIVED || this._status === C.STATUS_WAITING_FOR_ANSWER || this._status === C.STATUS_ANSWERED || this._status === C.STATUS_WAITING_FOR_ACK || this._status === C.STATUS_CONFIRMED) {
                  var contentType = request.getHeader("content-type");
                  if (contentType && contentType.match(/^application\/dtmf-relay/i)) {
                    new RTCSession_DTMF(this).init_incoming(request);
                  } else if (contentType !== void 0) {
                    new RTCSession_Info(this).init_incoming(request);
                  } else {
                    request.reply(415);
                  }
                } else {
                  request.reply(403, "Wrong Status");
                }
                break;
              case JsSIP_C.UPDATE:
                if (this._status === C.STATUS_CONFIRMED) {
                  this._receiveUpdate(request);
                } else {
                  request.reply(403, "Wrong Status");
                }
                break;
              case JsSIP_C.REFER:
                if (this._status === C.STATUS_CONFIRMED) {
                  this._receiveRefer(request);
                } else {
                  request.reply(403, "Wrong Status");
                }
                break;
              case JsSIP_C.NOTIFY:
                if (this._status === C.STATUS_CONFIRMED) {
                  this._receiveNotify(request);
                } else {
                  request.reply(403, "Wrong Status");
                }
                break;
              default:
                request.reply(501);
            }
          }
        }
        /**
         * Session Callbacks
         */
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          debugerror("onTransportError()");
          if (this._status !== C.STATUS_TERMINATED) {
            this.terminate({
              status_code: 500,
              reason_phrase: JsSIP_C.causes.CONNECTION_ERROR,
              cause: JsSIP_C.causes.CONNECTION_ERROR
            });
          }
        }
      }, {
        key: "onRequestTimeout",
        value: function onRequestTimeout() {
          debugerror("onRequestTimeout()");
          if (this._status !== C.STATUS_TERMINATED) {
            this.terminate({
              status_code: 408,
              reason_phrase: JsSIP_C.causes.REQUEST_TIMEOUT,
              cause: JsSIP_C.causes.REQUEST_TIMEOUT
            });
          }
        }
      }, {
        key: "onDialogError",
        value: function onDialogError() {
          debugerror("onDialogError()");
          if (this._status !== C.STATUS_TERMINATED) {
            this.terminate({
              status_code: 500,
              reason_phrase: JsSIP_C.causes.DIALOG_ERROR,
              cause: JsSIP_C.causes.DIALOG_ERROR
            });
          }
        }
        // Called from DTMF handler.
      }, {
        key: "newDTMF",
        value: function newDTMF(data) {
          debug2("newDTMF()");
          this.emit("newDTMF", data);
        }
        // Called from Info handler.
      }, {
        key: "newInfo",
        value: function newInfo(data) {
          debug2("newInfo()");
          this.emit("newInfo", data);
        }
        /**
         * Check if RTCSession is ready for an outgoing re-INVITE or UPDATE with SDP.
         */
      }, {
        key: "_isReadyToReOffer",
        value: function _isReadyToReOffer() {
          if (!this._rtcReady) {
            debug2("_isReadyToReOffer() | internal WebRTC status not ready");
            return false;
          }
          if (!this._dialog) {
            debug2("_isReadyToReOffer() | session not established yet");
            return false;
          }
          if (this._dialog.uac_pending_reply === true || this._dialog.uas_pending_reply === true) {
            debug2("_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress");
            return false;
          }
          return true;
        }
      }, {
        key: "_close",
        value: function _close() {
          debug2("close()");
          if (this._status === C.STATUS_TERMINATED) {
            return;
          }
          this._status = C.STATUS_TERMINATED;
          if (this._connection) {
            try {
              this._connection.close();
            } catch (error) {
              debugerror("close() | error closing the RTCPeerConnection: %o", error);
            }
          }
          if (this._localMediaStream && this._localMediaStreamLocallyGenerated) {
            debug2("close() | closing local MediaStream");
            Utils.closeMediaStream(this._localMediaStream);
          }
          for (var timer in this._timers) {
            if (Object.prototype.hasOwnProperty.call(this._timers, timer)) {
              clearTimeout(this._timers[timer]);
            }
          }
          clearTimeout(this._sessionTimers.timer);
          if (this._dialog) {
            this._dialog.terminate();
            delete this._dialog;
          }
          for (var dialog in this._earlyDialogs) {
            if (Object.prototype.hasOwnProperty.call(this._earlyDialogs, dialog)) {
              this._earlyDialogs[dialog].terminate();
              delete this._earlyDialogs[dialog];
            }
          }
          for (var subscriber in this._referSubscribers) {
            if (Object.prototype.hasOwnProperty.call(this._referSubscribers, subscriber)) {
              delete this._referSubscribers[subscriber];
            }
          }
          this._ua.destroyRTCSession(this);
        }
        /**
         * Private API.
         */
        /**
         * RFC3261 13.3.1.4
         * Response retransmissions cannot be accomplished by transaction layer
         *  since it is destroyed when receiving the first 2xx answer
         */
      }, {
        key: "_setInvite2xxTimer",
        value: function _setInvite2xxTimer(request, body) {
          var timeout = Timers.T1;
          function invite2xxRetransmission() {
            if (this._status !== C.STATUS_WAITING_FOR_ACK) {
              return;
            }
            request.reply(200, null, ["Contact: ".concat(this._contact)], body);
            if (timeout < Timers.T2) {
              timeout = timeout * 2;
              if (timeout > Timers.T2) {
                timeout = Timers.T2;
              }
            }
            this._timers.invite2xxTimer = setTimeout(invite2xxRetransmission.bind(this), timeout);
          }
          this._timers.invite2xxTimer = setTimeout(invite2xxRetransmission.bind(this), timeout);
        }
        /**
         * RFC3261 14.2
         * If a UAS generates a 2xx response and never receives an ACK,
         *  it SHOULD generate a BYE to terminate the dialog.
         */
      }, {
        key: "_setACKTimer",
        value: function _setACKTimer() {
          var _this11 = this;
          this._timers.ackTimer = setTimeout(function() {
            if (_this11._status === C.STATUS_WAITING_FOR_ACK) {
              debug2("no ACK received, terminating the session");
              clearTimeout(_this11._timers.invite2xxTimer);
              _this11.sendRequest(JsSIP_C.BYE);
              _this11._ended("remote", null, JsSIP_C.causes.NO_ACK);
            }
          }, Timers.TIMER_H);
        }
      }, {
        key: "_createRTCConnection",
        value: function _createRTCConnection(pcConfig, rtcConstraints) {
          var _this12 = this;
          this._connection = new RTCPeerConnection(pcConfig, rtcConstraints);
          this._connection.addEventListener("iceconnectionstatechange", function() {
            var state = _this12._connection.iceConnectionState;
            if (state === "failed") {
              _this12.terminate({
                cause: JsSIP_C.causes.RTP_TIMEOUT,
                status_code: 408,
                reason_phrase: JsSIP_C.causes.RTP_TIMEOUT
              });
            }
          });
          debug2('emit "peerconnection"');
          this.emit("peerconnection", {
            peerconnection: this._connection
          });
        }
      }, {
        key: "_createLocalDescription",
        value: function _createLocalDescription(type, constraints) {
          var _this13 = this;
          debug2("createLocalDescription()");
          if (type !== "offer" && type !== "answer")
            throw new Error('createLocalDescription() | invalid type "'.concat(type, '"'));
          var connection = this._connection;
          this._rtcReady = false;
          return Promise.resolve().then(function() {
            if (type === "offer") {
              return connection.createOffer(constraints)["catch"](function(error) {
                debugerror('emit "peerconnection:createofferfailed" [error:%o]', error);
                _this13.emit("peerconnection:createofferfailed", error);
                return Promise.reject(error);
              });
            } else {
              return connection.createAnswer(constraints)["catch"](function(error) {
                debugerror('emit "peerconnection:createanswerfailed" [error:%o]', error);
                _this13.emit("peerconnection:createanswerfailed", error);
                return Promise.reject(error);
              });
            }
          }).then(function(desc) {
            return connection.setLocalDescription(desc)["catch"](function(error) {
              _this13._rtcReady = true;
              debugerror('emit "peerconnection:setlocaldescriptionfailed" [error:%o]', error);
              _this13.emit("peerconnection:setlocaldescriptionfailed", error);
              return Promise.reject(error);
            });
          }).then(function() {
            if (connection.iceGatheringState === "complete") {
              _this13._rtcReady = true;
              var e = {
                originator: "local",
                type,
                sdp: connection.localDescription.sdp
              };
              debug2('emit "sdp"');
              _this13.emit("sdp", e);
              return Promise.resolve(e.sdp);
            }
            return new Promise(function(resolve) {
              var finished = false;
              var listener;
              var ready = function ready2() {
                connection.removeEventListener("icecandidate", listener);
                finished = true;
                _this13._rtcReady = true;
                var e2 = {
                  originator: "local",
                  type,
                  sdp: connection.localDescription.sdp
                };
                debug2('emit "sdp"');
                _this13.emit("sdp", e2);
                resolve(e2.sdp);
              };
              connection.addEventListener("icecandidate", listener = function listener2(event) {
                var candidate = event.candidate;
                if (candidate) {
                  _this13.emit("icecandidate", {
                    candidate,
                    ready
                  });
                } else if (!finished) {
                  ready();
                }
              });
            });
          });
        }
        /**
         * Dialog Management
         */
      }, {
        key: "_createDialog",
        value: function _createDialog(message, type, early) {
          var local_tag = type === "UAS" ? message.to_tag : message.from_tag;
          var remote_tag = type === "UAS" ? message.from_tag : message.to_tag;
          var id = message.call_id + local_tag + remote_tag;
          var early_dialog = this._earlyDialogs[id];
          if (early) {
            if (early_dialog) {
              return true;
            } else {
              early_dialog = new Dialog(this, message, type, Dialog.C.STATUS_EARLY);
              if (early_dialog.error) {
                debug2(early_dialog.error);
                this._failed("remote", message, JsSIP_C.causes.INTERNAL_ERROR);
                return false;
              } else {
                this._earlyDialogs[id] = early_dialog;
                return true;
              }
            }
          } else {
            this._from_tag = message.from_tag;
            this._to_tag = message.to_tag;
            if (early_dialog) {
              early_dialog.update(message, type);
              this._dialog = early_dialog;
              delete this._earlyDialogs[id];
              return true;
            }
            var dialog = new Dialog(this, message, type);
            if (dialog.error) {
              debug2(dialog.error);
              this._failed("remote", message, JsSIP_C.causes.INTERNAL_ERROR);
              return false;
            } else {
              this._dialog = dialog;
              return true;
            }
          }
        }
        /**
         * In dialog INVITE Reception
         */
      }, {
        key: "_receiveReinvite",
        value: function _receiveReinvite(request) {
          var _this14 = this;
          debug2("receiveReinvite()");
          var contentType = request.getHeader("Content-Type");
          var data = {
            request,
            callback: void 0,
            reject: reject.bind(this)
          };
          var rejected = false;
          function reject() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            rejected = true;
            var status_code = options.status_code || 403;
            var reason_phrase = options.reason_phrase || "";
            var extraHeaders = Utils.cloneArray(options.extraHeaders);
            if (this._status !== C.STATUS_CONFIRMED) {
              return false;
            }
            if (status_code < 300 || status_code >= 700) {
              throw new TypeError("Invalid status_code: ".concat(status_code));
            }
            request.reply(status_code, reason_phrase, extraHeaders);
          }
          this.emit("reinvite", data);
          if (rejected) {
            return;
          }
          this._late_sdp = false;
          if (!request.body) {
            this._late_sdp = true;
            this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
              return _this14._createLocalDescription("offer", _this14._rtcOfferConstraints);
            }).then(function(sdp) {
              sendAnswer.call(_this14, sdp);
            })["catch"](function() {
              request.reply(500);
            });
            return;
          }
          if (contentType !== "application/sdp") {
            debug2("invalid Content-Type");
            request.reply(415);
            return;
          }
          this._processInDialogSdpOffer(request).then(function(desc) {
            if (_this14._status === C.STATUS_TERMINATED) {
              return;
            }
            sendAnswer.call(_this14, desc);
          })["catch"](function(error) {
            debugerror(error);
          });
          function sendAnswer(desc) {
            var _this15 = this;
            var extraHeaders = ["Contact: ".concat(this._contact)];
            this._handleSessionTimersInIncomingRequest(request, extraHeaders);
            if (this._late_sdp) {
              desc = this._mangleOffer(desc);
            }
            request.reply(200, null, extraHeaders, desc, function() {
              _this15._status = C.STATUS_WAITING_FOR_ACK;
              _this15._setInvite2xxTimer(request, desc);
              _this15._setACKTimer();
            });
            if (typeof data.callback === "function") {
              data.callback();
            }
          }
        }
        /**
         * In dialog UPDATE Reception
         */
      }, {
        key: "_receiveUpdate",
        value: function _receiveUpdate(request) {
          var _this16 = this;
          debug2("receiveUpdate()");
          var contentType = request.getHeader("Content-Type");
          var data = {
            request,
            callback: void 0,
            reject: reject.bind(this)
          };
          var rejected = false;
          function reject() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            rejected = true;
            var status_code = options.status_code || 403;
            var reason_phrase = options.reason_phrase || "";
            var extraHeaders = Utils.cloneArray(options.extraHeaders);
            if (this._status !== C.STATUS_CONFIRMED) {
              return false;
            }
            if (status_code < 300 || status_code >= 700) {
              throw new TypeError("Invalid status_code: ".concat(status_code));
            }
            request.reply(status_code, reason_phrase, extraHeaders);
          }
          this.emit("update", data);
          if (rejected) {
            return;
          }
          if (!request.body) {
            sendAnswer.call(this, null);
            return;
          }
          if (contentType !== "application/sdp") {
            debug2("invalid Content-Type");
            request.reply(415);
            return;
          }
          this._processInDialogSdpOffer(request).then(function(desc) {
            if (_this16._status === C.STATUS_TERMINATED) {
              return;
            }
            sendAnswer.call(_this16, desc);
          })["catch"](function(error) {
            debugerror(error);
          });
          function sendAnswer(desc) {
            var extraHeaders = ["Contact: ".concat(this._contact)];
            this._handleSessionTimersInIncomingRequest(request, extraHeaders);
            request.reply(200, null, extraHeaders, desc);
            if (typeof data.callback === "function") {
              data.callback();
            }
          }
        }
      }, {
        key: "_processInDialogSdpOffer",
        value: function _processInDialogSdpOffer(request) {
          var _this17 = this;
          debug2("_processInDialogSdpOffer()");
          var sdp = request.parseSDP();
          var hold = false;
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = void 0;
          try {
            for (var _iterator4 = sdp.media[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var m = _step4.value;
              if (holdMediaTypes.indexOf(m.type) === -1) {
                continue;
              }
              var direction = m.direction || sdp.direction || "sendrecv";
              if (direction === "sendonly" || direction === "inactive") {
                hold = true;
              } else {
                hold = false;
                break;
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
          var e = {
            originator: "remote",
            type: "offer",
            sdp: request.body
          };
          debug2('emit "sdp"');
          this.emit("sdp", e);
          var offer = new RTCSessionDescription({
            type: "offer",
            sdp: e.sdp
          });
          this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
            if (_this17._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            return _this17._connection.setRemoteDescription(offer)["catch"](function(error) {
              request.reply(488);
              debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
              _this17.emit("peerconnection:setremotedescriptionfailed", error);
              throw new Error("peerconnection.setRemoteDescription() failed");
            });
          }).then(function() {
            if (_this17._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            if (_this17._remoteHold === true && hold === false) {
              _this17._remoteHold = false;
              _this17._onunhold("remote");
            } else if (_this17._remoteHold === false && hold === true) {
              _this17._remoteHold = true;
              _this17._onhold("remote");
            }
          }).then(function() {
            if (_this17._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            return _this17._createLocalDescription("answer", _this17._rtcAnswerConstraints)["catch"](function() {
              request.reply(500);
              throw new Error("_createLocalDescription() failed");
            });
          });
          return this._connectionPromiseQueue;
        }
        /**
         * In dialog Refer Reception
         */
      }, {
        key: "_receiveRefer",
        value: function _receiveRefer(request) {
          var _this18 = this;
          debug2("receiveRefer()");
          if (!request.refer_to) {
            debug2("no Refer-To header field present in REFER");
            request.reply(400);
            return;
          }
          if (request.refer_to.uri.scheme !== JsSIP_C.SIP) {
            debug2("Refer-To header field points to a non-SIP URI scheme");
            request.reply(416);
            return;
          }
          request.reply(202);
          var notifier = new RTCSession_ReferNotifier(this, request.cseq);
          debug2('emit "refer"');
          this.emit("refer", {
            request,
            accept: function accept(initCallback, options) {
              _accept.call(_this18, initCallback, options);
            },
            reject: function reject() {
              _reject.call(_this18);
            }
          });
          function _accept(initCallback) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            initCallback = typeof initCallback === "function" ? initCallback : null;
            if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
              return false;
            }
            var session = new RTCSession(this._ua);
            session.on("progress", function(_ref2) {
              var response = _ref2.response;
              notifier.notify(response.status_code, response.reason_phrase);
            });
            session.on("accepted", function(_ref3) {
              var response = _ref3.response;
              notifier.notify(response.status_code, response.reason_phrase);
            });
            session.on("_failed", function(_ref4) {
              var message = _ref4.message, cause = _ref4.cause;
              if (message) {
                notifier.notify(message.status_code, message.reason_phrase);
              } else {
                notifier.notify(487, cause);
              }
            });
            if (request.refer_to.uri.hasHeader("replaces")) {
              var replaces = decodeURIComponent(request.refer_to.uri.getHeader("replaces"));
              options.extraHeaders = Utils.cloneArray(options.extraHeaders);
              options.extraHeaders.push("Replaces: ".concat(replaces));
            }
            session.connect(request.refer_to.uri.toAor(), options, initCallback);
          }
          function _reject() {
            notifier.notify(603);
          }
        }
        /**
         * In dialog Notify Reception
         */
      }, {
        key: "_receiveNotify",
        value: function _receiveNotify(request) {
          debug2("receiveNotify()");
          if (!request.event) {
            request.reply(400);
          }
          switch (request.event.event) {
            case "refer": {
              var id;
              var referSubscriber;
              if (request.event.params && request.event.params.id) {
                id = request.event.params.id;
                referSubscriber = this._referSubscribers[id];
              } else if (Object.keys(this._referSubscribers).length === 1) {
                referSubscriber = this._referSubscribers[Object.keys(this._referSubscribers)[0]];
              } else {
                request.reply(400, "Missing event id parameter");
                return;
              }
              if (!referSubscriber) {
                request.reply(481, "Subscription does not exist");
                return;
              }
              referSubscriber.receiveNotify(request);
              request.reply(200);
              break;
            }
            default: {
              request.reply(489);
            }
          }
        }
        /**
         * INVITE with Replaces Reception
         */
      }, {
        key: "_receiveReplaces",
        value: function _receiveReplaces(request) {
          var _this20 = this;
          debug2("receiveReplaces()");
          function _accept2(initCallback) {
            var _this19 = this;
            if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
              return false;
            }
            var session = new RTCSession(this._ua);
            session.on("confirmed", function() {
              _this19.terminate();
            });
            session.init_incoming(request, initCallback);
          }
          function _reject2() {
            debug2("Replaced INVITE rejected by the user");
            request.reply(486);
          }
          this.emit("replaces", {
            request,
            accept: function accept(initCallback) {
              _accept2.call(_this20, initCallback);
            },
            reject: function reject() {
              _reject2.call(_this20);
            }
          });
        }
        /**
         * Initial Request Sender
         */
      }, {
        key: "_sendInitialRequest",
        value: function _sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream) {
          var _this21 = this;
          var request_sender = new RequestSender(this._ua, this._request, {
            onRequestTimeout: function onRequestTimeout() {
              _this21.onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this21.onTransportError();
            },
            // Update the request on authentication.
            onAuthenticated: function onAuthenticated(request) {
              _this21._request = request;
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this21._receiveInviteResponse(response);
            }
          });
          Promise.resolve().then(function() {
            if (mediaStream) {
              return mediaStream;
            } else if (mediaConstraints.audio || mediaConstraints.video) {
              _this21._localMediaStreamLocallyGenerated = true;
              return navigator.mediaDevices.getUserMedia(mediaConstraints)["catch"](function(error) {
                if (_this21._status === C.STATUS_TERMINATED) {
                  throw new Error("terminated");
                }
                _this21._failed("local", null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);
                debugerror('emit "getusermediafailed" [error:%o]', error);
                _this21.emit("getusermediafailed", error);
                throw error;
              });
            }
          }).then(function(stream) {
            if (_this21._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            _this21._localMediaStream = stream;
            if (stream) {
              stream.getTracks().forEach(function(track) {
                _this21._connection.addTrack(track, stream);
              });
            }
            _this21._connecting(_this21._request);
            return _this21._createLocalDescription("offer", rtcOfferConstraints)["catch"](function(error) {
              _this21._failed("local", null, JsSIP_C.causes.WEBRTC_ERROR);
              throw error;
            });
          }).then(function(desc) {
            if (_this21._is_canceled || _this21._status === C.STATUS_TERMINATED) {
              throw new Error("terminated");
            }
            _this21._request.body = desc;
            _this21._status = C.STATUS_INVITE_SENT;
            debug2('emit "sending" [request:%o]', _this21._request);
            _this21.emit("sending", {
              request: _this21._request
            });
            request_sender.send();
          })["catch"](function(error) {
            if (_this21._status === C.STATUS_TERMINATED) {
              return;
            }
            debugerror(error);
          });
        }
        /**
         * Reception of Response for Initial INVITE
         */
      }, {
        key: "_receiveInviteResponse",
        value: function _receiveInviteResponse(response) {
          var _this22 = this;
          debug2("receiveInviteResponse()");
          if (this._dialog && response.status_code >= 200 && response.status_code <= 299) {
            if (this._dialog.id.call_id === response.call_id && this._dialog.id.local_tag === response.from_tag && this._dialog.id.remote_tag === response.to_tag) {
              this.sendRequest(JsSIP_C.ACK);
              return;
            } else {
              var dialog = new Dialog(this, response, "UAC");
              if (dialog.error !== void 0) {
                debug2(dialog.error);
                return;
              }
              this.sendRequest(JsSIP_C.ACK);
              this.sendRequest(JsSIP_C.BYE);
              return;
            }
          }
          if (this._is_canceled) {
            if (response.status_code >= 100 && response.status_code < 200) {
              this._request.cancel(this._cancel_reason);
            } else if (response.status_code >= 200 && response.status_code < 299) {
              this._acceptAndTerminate(response);
            }
            return;
          }
          if (this._status !== C.STATUS_INVITE_SENT && this._status !== C.STATUS_1XX_RECEIVED) {
            return;
          }
          switch (true) {
            case /^100$/.test(response.status_code):
              this._status = C.STATUS_1XX_RECEIVED;
              break;
            case /^1[0-9]{2}$/.test(response.status_code): {
              if (!response.to_tag) {
                debug2("1xx response received without to tag");
                break;
              }
              if (response.hasHeader("contact")) {
                if (!this._createDialog(response, "UAC", true)) {
                  break;
                }
              }
              this._status = C.STATUS_1XX_RECEIVED;
              this._progress("remote", response);
              if (!response.body) {
                break;
              }
              var e = {
                originator: "remote",
                type: "answer",
                sdp: response.body
              };
              debug2('emit "sdp"');
              this.emit("sdp", e);
              var answer = new RTCSessionDescription({
                type: "answer",
                sdp: e.sdp
              });
              this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
                return _this22._connection.setRemoteDescription(answer);
              })["catch"](function(error) {
                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
                _this22.emit("peerconnection:setremotedescriptionfailed", error);
              });
              break;
            }
            case /^2[0-9]{2}$/.test(response.status_code): {
              this._status = C.STATUS_CONFIRMED;
              if (!response.body) {
                this._acceptAndTerminate(response, 400, JsSIP_C.causes.MISSING_SDP);
                this._failed("remote", response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);
                break;
              }
              if (!this._createDialog(response, "UAC")) {
                break;
              }
              var _e = {
                originator: "remote",
                type: "answer",
                sdp: response.body
              };
              debug2('emit "sdp"');
              this.emit("sdp", _e);
              var _answer = new RTCSessionDescription({
                type: "answer",
                sdp: _e.sdp
              });
              this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
                if (_this22._connection.signalingState === "stable") {
                  return _this22._connection.createOffer(_this22._rtcOfferConstraints).then(function(offer) {
                    return _this22._connection.setLocalDescription(offer);
                  })["catch"](function(error) {
                    _this22._acceptAndTerminate(response, 500, error.toString());
                    _this22._failed("local", response, JsSIP_C.causes.WEBRTC_ERROR);
                  });
                }
              }).then(function() {
                _this22._connection.setRemoteDescription(_answer).then(function() {
                  _this22._handleSessionTimersInIncomingResponse(response);
                  _this22._accepted("remote", response);
                  _this22.sendRequest(JsSIP_C.ACK);
                  _this22._confirmed("local", null);
                })["catch"](function(error) {
                  _this22._acceptAndTerminate(response, 488, "Not Acceptable Here");
                  _this22._failed("remote", response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);
                  debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
                  _this22.emit("peerconnection:setremotedescriptionfailed", error);
                });
              });
              break;
            }
            default: {
              var cause = Utils.sipErrorCause(response.status_code);
              this._failed("remote", response, cause);
            }
          }
        }
        /**
         * Send Re-INVITE
         */
      }, {
        key: "_sendReinvite",
        value: function _sendReinvite() {
          var _this23 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          debug2("sendReinvite()");
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = options.eventHandlers || {};
          var rtcOfferConstraints = options.rtcOfferConstraints || this._rtcOfferConstraints || null;
          var succeeded = false;
          extraHeaders.push("Contact: ".concat(this._contact));
          extraHeaders.push("Content-Type: application/sdp");
          if (this._sessionTimers.running) {
            extraHeaders.push("Session-Expires: ".concat(this._sessionTimers.currentExpires, ";refresher=").concat(this._sessionTimers.refresher ? "uac" : "uas"));
          }
          this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
            return _this23._createLocalDescription("offer", rtcOfferConstraints);
          }).then(function(sdp) {
            sdp = _this23._mangleOffer(sdp);
            var e = {
              originator: "local",
              type: "offer",
              sdp
            };
            debug2('emit "sdp"');
            _this23.emit("sdp", e);
            _this23.sendRequest(JsSIP_C.INVITE, {
              extraHeaders,
              body: sdp,
              eventHandlers: {
                onSuccessResponse: function onSuccessResponse(response) {
                  onSucceeded.call(_this23, response);
                  succeeded = true;
                },
                onErrorResponse: function onErrorResponse(response) {
                  onFailed.call(_this23, response);
                },
                onTransportError: function onTransportError() {
                  _this23.onTransportError();
                },
                onRequestTimeout: function onRequestTimeout() {
                  _this23.onRequestTimeout();
                },
                onDialogError: function onDialogError() {
                  _this23.onDialogError();
                }
              }
            });
          })["catch"](function() {
            onFailed();
          });
          function onSucceeded(response) {
            var _this24 = this;
            if (this._status === C.STATUS_TERMINATED) {
              return;
            }
            this.sendRequest(JsSIP_C.ACK);
            if (succeeded) {
              return;
            }
            this._handleSessionTimersInIncomingResponse(response);
            if (!response.body) {
              onFailed.call(this);
              return;
            } else if (response.getHeader("Content-Type") !== "application/sdp") {
              onFailed.call(this);
              return;
            }
            var e = {
              originator: "remote",
              type: "answer",
              sdp: response.body
            };
            debug2('emit "sdp"');
            this.emit("sdp", e);
            var answer = new RTCSessionDescription({
              type: "answer",
              sdp: e.sdp
            });
            this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
              return _this24._connection.setRemoteDescription(answer);
            }).then(function() {
              if (eventHandlers.succeeded) {
                eventHandlers.succeeded(response);
              }
            })["catch"](function(error) {
              onFailed.call(_this24);
              debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
              _this24.emit("peerconnection:setremotedescriptionfailed", error);
            });
          }
          function onFailed(response) {
            if (eventHandlers.failed) {
              eventHandlers.failed(response);
            }
          }
        }
        /**
         * Send UPDATE
         */
      }, {
        key: "_sendUpdate",
        value: function _sendUpdate() {
          var _this25 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          debug2("sendUpdate()");
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = options.eventHandlers || {};
          var rtcOfferConstraints = options.rtcOfferConstraints || this._rtcOfferConstraints || null;
          var sdpOffer = options.sdpOffer || false;
          var succeeded = false;
          extraHeaders.push("Contact: ".concat(this._contact));
          if (this._sessionTimers.running) {
            extraHeaders.push("Session-Expires: ".concat(this._sessionTimers.currentExpires, ";refresher=").concat(this._sessionTimers.refresher ? "uac" : "uas"));
          }
          if (sdpOffer) {
            extraHeaders.push("Content-Type: application/sdp");
            this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
              return _this25._createLocalDescription("offer", rtcOfferConstraints);
            }).then(function(sdp) {
              sdp = _this25._mangleOffer(sdp);
              var e = {
                originator: "local",
                type: "offer",
                sdp
              };
              debug2('emit "sdp"');
              _this25.emit("sdp", e);
              _this25.sendRequest(JsSIP_C.UPDATE, {
                extraHeaders,
                body: sdp,
                eventHandlers: {
                  onSuccessResponse: function onSuccessResponse(response) {
                    onSucceeded.call(_this25, response);
                    succeeded = true;
                  },
                  onErrorResponse: function onErrorResponse(response) {
                    onFailed.call(_this25, response);
                  },
                  onTransportError: function onTransportError() {
                    _this25.onTransportError();
                  },
                  onRequestTimeout: function onRequestTimeout() {
                    _this25.onRequestTimeout();
                  },
                  onDialogError: function onDialogError() {
                    _this25.onDialogError();
                  }
                }
              });
            })["catch"](function() {
              onFailed.call(_this25);
            });
          } else {
            this.sendRequest(JsSIP_C.UPDATE, {
              extraHeaders,
              eventHandlers: {
                onSuccessResponse: function onSuccessResponse(response) {
                  onSucceeded.call(_this25, response);
                },
                onErrorResponse: function onErrorResponse(response) {
                  onFailed.call(_this25, response);
                },
                onTransportError: function onTransportError() {
                  _this25.onTransportError();
                },
                onRequestTimeout: function onRequestTimeout() {
                  _this25.onRequestTimeout();
                },
                onDialogError: function onDialogError() {
                  _this25.onDialogError();
                }
              }
            });
          }
          function onSucceeded(response) {
            var _this26 = this;
            if (this._status === C.STATUS_TERMINATED) {
              return;
            }
            if (succeeded) {
              return;
            }
            this._handleSessionTimersInIncomingResponse(response);
            if (sdpOffer) {
              if (!response.body) {
                onFailed.call(this);
                return;
              } else if (response.getHeader("Content-Type") !== "application/sdp") {
                onFailed.call(this);
                return;
              }
              var e = {
                originator: "remote",
                type: "answer",
                sdp: response.body
              };
              debug2('emit "sdp"');
              this.emit("sdp", e);
              var answer = new RTCSessionDescription({
                type: "answer",
                sdp: e.sdp
              });
              this._connectionPromiseQueue = this._connectionPromiseQueue.then(function() {
                return _this26._connection.setRemoteDescription(answer);
              }).then(function() {
                if (eventHandlers.succeeded) {
                  eventHandlers.succeeded(response);
                }
              })["catch"](function(error) {
                onFailed.call(_this26);
                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
                _this26.emit("peerconnection:setremotedescriptionfailed", error);
              });
            } else if (eventHandlers.succeeded) {
              eventHandlers.succeeded(response);
            }
          }
          function onFailed(response) {
            if (eventHandlers.failed) {
              eventHandlers.failed(response);
            }
          }
        }
      }, {
        key: "_acceptAndTerminate",
        value: function _acceptAndTerminate(response, status_code, reason_phrase) {
          debug2("acceptAndTerminate()");
          var extraHeaders = [];
          if (status_code) {
            reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || "";
            extraHeaders.push("Reason: SIP ;cause=".concat(status_code, '; text="').concat(reason_phrase, '"'));
          }
          if (this._dialog || this._createDialog(response, "UAC")) {
            this.sendRequest(JsSIP_C.ACK);
            this.sendRequest(JsSIP_C.BYE, {
              extraHeaders
            });
          }
          this._status = C.STATUS_TERMINATED;
        }
        /**
         * Correctly set the SDP direction attributes if the call is on local hold
         */
      }, {
        key: "_mangleOffer",
        value: function _mangleOffer(sdp) {
          if (!this._localHold && !this._remoteHold) {
            return sdp;
          }
          sdp = sdp_transform.parse(sdp);
          if (this._localHold && !this._remoteHold) {
            debug2("mangleOffer() | me on hold, mangling offer");
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = void 0;
            try {
              for (var _iterator5 = sdp.media[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var m = _step5.value;
                if (holdMediaTypes.indexOf(m.type) === -1) {
                  continue;
                }
                if (!m.direction) {
                  m.direction = "sendonly";
                } else if (m.direction === "sendrecv") {
                  m.direction = "sendonly";
                } else if (m.direction === "recvonly") {
                  m.direction = "inactive";
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                  _iterator5["return"]();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
          } else if (this._localHold && this._remoteHold) {
            debug2("mangleOffer() | both on hold, mangling offer");
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = void 0;
            try {
              for (var _iterator6 = sdp.media[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var _m = _step6.value;
                if (holdMediaTypes.indexOf(_m.type) === -1) {
                  continue;
                }
                _m.direction = "inactive";
              }
            } catch (err) {
              _didIteratorError6 = true;
              _iteratorError6 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                  _iterator6["return"]();
                }
              } finally {
                if (_didIteratorError6) {
                  throw _iteratorError6;
                }
              }
            }
          } else if (this._remoteHold) {
            debug2("mangleOffer() | remote on hold, mangling offer");
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = void 0;
            try {
              for (var _iterator7 = sdp.media[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var _m2 = _step7.value;
                if (holdMediaTypes.indexOf(_m2.type) === -1) {
                  continue;
                }
                if (!_m2.direction) {
                  _m2.direction = "recvonly";
                } else if (_m2.direction === "sendrecv") {
                  _m2.direction = "recvonly";
                } else if (_m2.direction === "recvonly") {
                  _m2.direction = "inactive";
                }
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                  _iterator7["return"]();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }
          }
          return sdp_transform.write(sdp);
        }
      }, {
        key: "_setLocalMediaStatus",
        value: function _setLocalMediaStatus() {
          var enableAudio = true, enableVideo = true;
          if (this._localHold || this._remoteHold) {
            enableAudio = false;
            enableVideo = false;
          }
          if (this._audioMuted) {
            enableAudio = false;
          }
          if (this._videoMuted) {
            enableVideo = false;
          }
          this._toggleMuteAudio(!enableAudio);
          this._toggleMuteVideo(!enableVideo);
        }
        /**
         * Handle SessionTimers for an incoming INVITE or UPDATE.
         * @param  {IncomingRequest} request
         * @param  {Array} responseExtraHeaders  Extra headers for the 200 response.
         */
      }, {
        key: "_handleSessionTimersInIncomingRequest",
        value: function _handleSessionTimersInIncomingRequest(request, responseExtraHeaders) {
          if (!this._sessionTimers.enabled) {
            return;
          }
          var session_expires_refresher;
          if (request.session_expires && request.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES) {
            this._sessionTimers.currentExpires = request.session_expires;
            session_expires_refresher = request.session_expires_refresher || "uas";
          } else {
            this._sessionTimers.currentExpires = this._sessionTimers.defaultExpires;
            session_expires_refresher = "uas";
          }
          responseExtraHeaders.push("Session-Expires: ".concat(this._sessionTimers.currentExpires, ";refresher=").concat(session_expires_refresher));
          this._sessionTimers.refresher = session_expires_refresher === "uas";
          this._runSessionTimer();
        }
        /**
         * Handle SessionTimers for an incoming response to INVITE or UPDATE.
         * @param  {IncomingResponse} response
         */
      }, {
        key: "_handleSessionTimersInIncomingResponse",
        value: function _handleSessionTimersInIncomingResponse(response) {
          if (!this._sessionTimers.enabled) {
            return;
          }
          var session_expires_refresher;
          if (response.session_expires && response.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES) {
            this._sessionTimers.currentExpires = response.session_expires;
            session_expires_refresher = response.session_expires_refresher || "uac";
          } else {
            this._sessionTimers.currentExpires = this._sessionTimers.defaultExpires;
            session_expires_refresher = "uac";
          }
          this._sessionTimers.refresher = session_expires_refresher === "uac";
          this._runSessionTimer();
        }
      }, {
        key: "_runSessionTimer",
        value: function _runSessionTimer() {
          var _this27 = this;
          var expires = this._sessionTimers.currentExpires;
          this._sessionTimers.running = true;
          clearTimeout(this._sessionTimers.timer);
          if (this._sessionTimers.refresher) {
            this._sessionTimers.timer = setTimeout(function() {
              if (_this27._status === C.STATUS_TERMINATED) {
                return;
              }
              debug2("runSessionTimer() | sending session refresh request");
              if (_this27._sessionTimers.refreshMethod === JsSIP_C.UPDATE) {
                _this27._sendUpdate();
              } else {
                _this27._sendReinvite();
              }
            }, expires * 500);
          } else {
            this._sessionTimers.timer = setTimeout(function() {
              if (_this27._status === C.STATUS_TERMINATED) {
                return;
              }
              debugerror("runSessionTimer() | timer expired, terminating the session");
              _this27.terminate({
                cause: JsSIP_C.causes.REQUEST_TIMEOUT,
                status_code: 408,
                reason_phrase: "Session Timer Expired"
              });
            }, expires * 1100);
          }
        }
      }, {
        key: "_toggleMuteAudio",
        value: function _toggleMuteAudio(mute) {
          var senders = this._connection.getSenders().filter(function(sender2) {
            return sender2.track && sender2.track.kind === "audio";
          });
          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = void 0;
          try {
            for (var _iterator8 = senders[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var sender = _step8.value;
              sender.track.enabled = !mute;
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }
        }
      }, {
        key: "_toggleMuteVideo",
        value: function _toggleMuteVideo(mute) {
          var senders = this._connection.getSenders().filter(function(sender2) {
            return sender2.track && sender2.track.kind === "video";
          });
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = void 0;
          try {
            for (var _iterator9 = senders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var sender = _step9.value;
              sender.track.enabled = !mute;
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }
        }
      }, {
        key: "_newRTCSession",
        value: function _newRTCSession(originator, request) {
          debug2("newRTCSession()");
          this._ua.newRTCSession(this, {
            originator,
            session: this,
            request
          });
        }
      }, {
        key: "_connecting",
        value: function _connecting(request) {
          debug2("session connecting");
          debug2('emit "connecting"');
          this.emit("connecting", {
            request
          });
        }
      }, {
        key: "_progress",
        value: function _progress(originator, response) {
          debug2("session progress");
          debug2('emit "progress"');
          this.emit("progress", {
            originator,
            response: response || null
          });
        }
      }, {
        key: "_accepted",
        value: function _accepted(originator, message) {
          debug2("session accepted");
          this._start_time = /* @__PURE__ */ new Date();
          debug2('emit "accepted"');
          this.emit("accepted", {
            originator,
            response: message || null
          });
        }
      }, {
        key: "_confirmed",
        value: function _confirmed(originator, ack) {
          debug2("session confirmed");
          this._is_confirmed = true;
          debug2('emit "confirmed"');
          this.emit("confirmed", {
            originator,
            ack: ack || null
          });
        }
      }, {
        key: "_ended",
        value: function _ended(originator, message, cause) {
          debug2("session ended");
          this._end_time = /* @__PURE__ */ new Date();
          this._close();
          debug2('emit "ended"');
          this.emit("ended", {
            originator,
            message: message || null,
            cause
          });
        }
      }, {
        key: "_failed",
        value: function _failed(originator, message, cause) {
          debug2("session failed");
          debug2('emit "_failed"');
          this.emit("_failed", {
            originator,
            message: message || null,
            cause
          });
          this._close();
          debug2('emit "failed"');
          this.emit("failed", {
            originator,
            message: message || null,
            cause
          });
        }
      }, {
        key: "_onhold",
        value: function _onhold(originator) {
          debug2("session onhold");
          this._setLocalMediaStatus();
          debug2('emit "hold"');
          this.emit("hold", {
            originator
          });
        }
      }, {
        key: "_onunhold",
        value: function _onunhold(originator) {
          debug2("session onunhold");
          this._setLocalMediaStatus();
          debug2('emit "unhold"');
          this.emit("unhold", {
            originator
          });
        }
      }, {
        key: "_onmute",
        value: function _onmute(_ref5) {
          var audio = _ref5.audio, video = _ref5.video;
          debug2("session onmute");
          this._setLocalMediaStatus();
          debug2('emit "muted"');
          this.emit("muted", {
            audio,
            video
          });
        }
      }, {
        key: "_onunmute",
        value: function _onunmute(_ref6) {
          var audio = _ref6.audio, video = _ref6.video;
          debug2("session onunmute");
          this._setLocalMediaStatus();
          debug2('emit "unmuted"');
          this.emit("unmuted", {
            audio,
            video
          });
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
        // Expose session failed/ended causes as a property of the RTCSession instance.
      }, {
        key: "causes",
        get: function get() {
          return JsSIP_C.causes;
        }
      }, {
        key: "id",
        get: function get() {
          return this._id;
        }
      }, {
        key: "connection",
        get: function get() {
          return this._connection;
        }
      }, {
        key: "contact",
        get: function get() {
          return this._contact;
        }
      }, {
        key: "direction",
        get: function get() {
          return this._direction;
        }
      }, {
        key: "local_identity",
        get: function get() {
          return this._local_identity;
        }
      }, {
        key: "remote_identity",
        get: function get() {
          return this._remote_identity;
        }
      }, {
        key: "start_time",
        get: function get() {
          return this._start_time;
        }
      }, {
        key: "end_time",
        get: function get() {
          return this._end_time;
        }
      }, {
        key: "data",
        get: function get() {
          return this._data;
        },
        set: function set(_data) {
          this._data = _data;
        }
      }, {
        key: "status",
        get: function get() {
          return this._status;
        }
      }]);
      return RTCSession;
    }(EventEmitter6);
  }
});

// node_modules/jssip/lib-es5/Message.js
var require_Message = __commonJS({
  "node_modules/jssip/lib-es5/Message.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var JsSIP_C = require_Constants();
    var SIPMessage = require_SIPMessage();
    var Utils = require_Utils();
    var RequestSender = require_RequestSender();
    var Exceptions = require_Exceptions();
    var debug2 = require_browser()("JsSIP:Message");
    module.exports = function(_EventEmitter) {
      _inherits(Message, _EventEmitter);
      function Message(ua) {
        var _this;
        _classCallCheck(this, Message);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this));
        _this._ua = ua;
        _this._request = null;
        _this._closed = false;
        _this._direction = null;
        _this._local_identity = null;
        _this._remote_identity = null;
        _this._is_replied = false;
        _this._data = {};
        return _this;
      }
      _createClass(Message, [{
        key: "send",
        value: function send(target, body) {
          var _this2 = this;
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var originalTarget = target;
          if (target === void 0 || body === void 0) {
            throw new TypeError("Not enough arguments");
          }
          target = this._ua.normalizeTarget(target);
          if (!target) {
            throw new TypeError("Invalid target: ".concat(originalTarget));
          }
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = options.eventHandlers || {};
          var contentType = options.contentType || "text/plain";
          for (var event in eventHandlers) {
            if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {
              this.on(event, eventHandlers[event]);
            }
          }
          extraHeaders.push("Content-Type: ".concat(contentType));
          this._request = new SIPMessage.OutgoingRequest(JsSIP_C.MESSAGE, target, this._ua, null, extraHeaders);
          if (body) {
            this._request.body = body;
          }
          var request_sender = new RequestSender(this._ua, this._request, {
            onRequestTimeout: function onRequestTimeout() {
              _this2._onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this2._onTransportError();
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this2._receiveResponse(response);
            }
          });
          this._newMessage("local", this._request);
          request_sender.send();
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request) {
          this._request = request;
          this._newMessage("remote", request);
          if (!this._is_replied) {
            this._is_replied = true;
            request.reply(200);
          }
          this._close();
        }
        /**
         * Accept the incoming Message
         * Only valid for incoming Messages
         */
      }, {
        key: "accept",
        value: function accept() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var body = options.body;
          if (this._direction !== "incoming") {
            throw new Exceptions.NotSupportedError('"accept" not supported for outgoing Message');
          }
          if (this._is_replied) {
            throw new Error("incoming Message already replied");
          }
          this._is_replied = true;
          this._request.reply(200, null, extraHeaders, body);
        }
        /**
         * Reject the incoming Message
         * Only valid for incoming Messages
         */
      }, {
        key: "reject",
        value: function reject() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var status_code = options.status_code || 480;
          var reason_phrase = options.reason_phrase;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var body = options.body;
          if (this._direction !== "incoming") {
            throw new Exceptions.NotSupportedError('"reject" not supported for outgoing Message');
          }
          if (this._is_replied) {
            throw new Error("incoming Message already replied");
          }
          if (status_code < 300 || status_code >= 700) {
            throw new TypeError("Invalid status_code: ".concat(status_code));
          }
          this._is_replied = true;
          this._request.reply(status_code, reason_phrase, extraHeaders, body);
        }
      }, {
        key: "_receiveResponse",
        value: function _receiveResponse(response) {
          if (this._closed) {
            return;
          }
          switch (true) {
            case /^1[0-9]{2}$/.test(response.status_code):
              break;
            case /^2[0-9]{2}$/.test(response.status_code):
              this._succeeded("remote", response);
              break;
            default: {
              var cause = Utils.sipErrorCause(response.status_code);
              this._failed("remote", response, cause);
              break;
            }
          }
        }
      }, {
        key: "_onRequestTimeout",
        value: function _onRequestTimeout() {
          if (this._closed) {
            return;
          }
          this._failed("system", null, JsSIP_C.causes.REQUEST_TIMEOUT);
        }
      }, {
        key: "_onTransportError",
        value: function _onTransportError() {
          if (this._closed) {
            return;
          }
          this._failed("system", null, JsSIP_C.causes.CONNECTION_ERROR);
        }
      }, {
        key: "_close",
        value: function _close() {
          this._closed = true;
          this._ua.destroyMessage(this);
        }
        /**
         * Internal Callbacks
         */
      }, {
        key: "_newMessage",
        value: function _newMessage(originator, request) {
          if (originator === "remote") {
            this._direction = "incoming";
            this._local_identity = request.to;
            this._remote_identity = request.from;
          } else if (originator === "local") {
            this._direction = "outgoing";
            this._local_identity = request.from;
            this._remote_identity = request.to;
          }
          this._ua.newMessage(this, {
            originator,
            message: this,
            request
          });
        }
      }, {
        key: "_failed",
        value: function _failed(originator, response, cause) {
          debug2("MESSAGE failed");
          this._close();
          debug2('emit "failed"');
          this.emit("failed", {
            originator,
            response: response || null,
            cause
          });
        }
      }, {
        key: "_succeeded",
        value: function _succeeded(originator, response) {
          debug2("MESSAGE succeeded");
          this._close();
          debug2('emit "succeeded"');
          this.emit("succeeded", {
            originator,
            response
          });
        }
      }, {
        key: "direction",
        get: function get() {
          return this._direction;
        }
      }, {
        key: "local_identity",
        get: function get() {
          return this._local_identity;
        }
      }, {
        key: "remote_identity",
        get: function get() {
          return this._remote_identity;
        }
      }]);
      return Message;
    }(EventEmitter6);
  }
});

// node_modules/jssip/lib-es5/Socket.js
var require_Socket = __commonJS({
  "node_modules/jssip/lib-es5/Socket.js"(exports) {
    "use strict";
    var Utils = require_Utils();
    var Grammar = require_Grammar();
    var debugerror = require_browser()("JsSIP:ERROR:Socket");
    debugerror.log = console.warn.bind(console);
    exports.isSocket = function(socket) {
      if (Array.isArray(socket)) {
        return false;
      }
      if (typeof socket === "undefined") {
        debugerror("undefined JsSIP.Socket instance");
        return false;
      }
      try {
        if (!Utils.isString(socket.url)) {
          debugerror("missing or invalid JsSIP.Socket url property");
          throw new Error();
        }
        if (!Utils.isString(socket.via_transport)) {
          debugerror("missing or invalid JsSIP.Socket via_transport property");
          throw new Error();
        }
        if (Grammar.parse(socket.sip_uri, "SIP_URI") === -1) {
          debugerror("missing or invalid JsSIP.Socket sip_uri property");
          throw new Error();
        }
      } catch (e) {
        return false;
      }
      try {
        ["connect", "disconnect", "send"].forEach(function(method) {
          if (!Utils.isFunction(socket[method])) {
            debugerror("missing or invalid JsSIP.Socket method: ".concat(method));
            throw new Error();
          }
        });
      } catch (e) {
        return false;
      }
      return true;
    };
  }
});

// node_modules/jssip/lib-es5/Transport.js
var require_Transport = __commonJS({
  "node_modules/jssip/lib-es5/Transport.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Socket2 = require_Socket();
    var debug2 = require_browser()("JsSIP:Transport");
    var debugerror = require_browser()("JsSIP:ERROR:Transport");
    debugerror.log = console.warn.bind(console);
    var C = {
      // Transport status.
      STATUS_CONNECTED: 0,
      STATUS_CONNECTING: 1,
      STATUS_DISCONNECTED: 2,
      // Socket status.
      SOCKET_STATUS_READY: 0,
      SOCKET_STATUS_ERROR: 1,
      // Recovery options.
      recovery_options: {
        min_interval: 2,
        // minimum interval in seconds between recover attempts
        max_interval: 30
        // maximum interval in seconds between recover attempts
      }
    };
    module.exports = function() {
      function Transport(sockets) {
        var recovery_options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : C.recovery_options;
        _classCallCheck(this, Transport);
        debug2("new()");
        this.status = C.STATUS_DISCONNECTED;
        this.socket = null;
        this.sockets = [];
        this.recovery_options = recovery_options;
        this.recover_attempts = 0;
        this.recovery_timer = null;
        this.close_requested = false;
        if (typeof sockets === "undefined") {
          throw new TypeError("Invalid argument. undefined 'sockets' argument");
        }
        if (!(sockets instanceof Array)) {
          sockets = [sockets];
        }
        sockets.forEach(function(socket) {
          if (!Socket2.isSocket(socket.socket)) {
            throw new TypeError("Invalid argument. invalid 'JsSIP.Socket' instance");
          }
          if (socket.weight && !Number(socket.weight)) {
            throw new TypeError("Invalid argument. 'weight' attribute is not a number");
          }
          this.sockets.push({
            socket: socket.socket,
            weight: socket.weight || 0,
            status: C.SOCKET_STATUS_READY
          });
        }, this);
        this._getSocket();
      }
      _createClass(Transport, [{
        key: "connect",
        value: function connect() {
          debug2("connect()");
          if (this.isConnected()) {
            debug2("Transport is already connected");
            return;
          } else if (this.isConnecting()) {
            debug2("Transport is connecting");
            return;
          }
          this.close_requested = false;
          this.status = C.STATUS_CONNECTING;
          this.onconnecting({
            socket: this.socket,
            attempts: this.recover_attempts
          });
          if (!this.close_requested) {
            this.socket.onconnect = this._onConnect.bind(this);
            this.socket.ondisconnect = this._onDisconnect.bind(this);
            this.socket.ondata = this._onData.bind(this);
            this.socket.connect();
          }
          return;
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          debug2("close()");
          this.close_requested = true;
          this.recover_attempts = 0;
          this.status = C.STATUS_DISCONNECTED;
          if (this.recovery_timer !== null) {
            clearTimeout(this.recovery_timer);
            this.recovery_timer = null;
          }
          this.socket.onconnect = function() {
          };
          this.socket.ondisconnect = function() {
          };
          this.socket.ondata = function() {
          };
          this.socket.disconnect();
          this.ondisconnect({
            socket: this.socket,
            error: false
          });
        }
      }, {
        key: "send",
        value: function send(data) {
          debug2("send()");
          if (!this.isConnected()) {
            debugerror("unable to send message, transport is not connected");
            return false;
          }
          var message = data.toString();
          debug2("sending message:\n\n".concat(message, "\n"));
          return this.socket.send(message);
        }
      }, {
        key: "isConnected",
        value: function isConnected() {
          return this.status === C.STATUS_CONNECTED;
        }
      }, {
        key: "isConnecting",
        value: function isConnecting() {
          return this.status === C.STATUS_CONNECTING;
        }
        /**
         * Private API.
         */
      }, {
        key: "_reconnect",
        value: function _reconnect() {
          var _this = this;
          this.recover_attempts += 1;
          var k = Math.floor(Math.random() * Math.pow(2, this.recover_attempts) + 1);
          if (k < this.recovery_options.min_interval) {
            k = this.recovery_options.min_interval;
          } else if (k > this.recovery_options.max_interval) {
            k = this.recovery_options.max_interval;
          }
          debug2("reconnection attempt: ".concat(this.recover_attempts, ". next connection attempt in ").concat(k, " seconds"));
          this.recovery_timer = setTimeout(function() {
            if (!_this.close_requested && !(_this.isConnected() || _this.isConnecting())) {
              _this._getSocket();
              _this.connect();
            }
          }, k * 1e3);
        }
        /**
         * get the next available socket with higher weight
         */
      }, {
        key: "_getSocket",
        value: function _getSocket() {
          var candidates = [];
          this.sockets.forEach(function(socket) {
            if (socket.status === C.SOCKET_STATUS_ERROR) {
              return;
            } else if (candidates.length === 0) {
              candidates.push(socket);
            } else if (socket.weight > candidates[0].weight) {
              candidates = [socket];
            } else if (socket.weight === candidates[0].weight) {
              candidates.push(socket);
            }
          });
          if (candidates.length === 0) {
            this.sockets.forEach(function(socket) {
              socket.status = C.SOCKET_STATUS_READY;
            });
            this._getSocket();
            return;
          }
          var idx = Math.floor(Math.random() * candidates.length);
          this.socket = candidates[idx].socket;
        }
        /**
         * Socket Event Handlers
         */
      }, {
        key: "_onConnect",
        value: function _onConnect() {
          this.recover_attempts = 0;
          this.status = C.STATUS_CONNECTED;
          if (this.recovery_timer !== null) {
            clearTimeout(this.recovery_timer);
            this.recovery_timer = null;
          }
          this.onconnect({
            socket: this
          });
        }
      }, {
        key: "_onDisconnect",
        value: function _onDisconnect(error, code, reason) {
          this.status = C.STATUS_DISCONNECTED;
          this.ondisconnect({
            socket: this.socket,
            error,
            code,
            reason
          });
          if (this.close_requested) {
            return;
          } else {
            this.sockets.forEach(function(socket) {
              if (this.socket === socket.socket) {
                socket.status = C.SOCKET_STATUS_ERROR;
              }
            }, this);
          }
          this._reconnect(error);
        }
      }, {
        key: "_onData",
        value: function _onData(data) {
          if (data === "\r\n") {
            debug2("received message with CRLF Keep Alive response");
            return;
          } else if (typeof data !== "string") {
            try {
              data = String.fromCharCode.apply(null, new Uint8Array(data));
            } catch (evt) {
              debug2("received binary message failed to be converted into string, message discarded");
              return;
            }
            debug2("received binary message:\n\n".concat(data, "\n"));
          } else {
            debug2("received text message:\n\n".concat(data, "\n"));
          }
          this.ondata({
            transport: this,
            message: data
          });
        }
      }, {
        key: "via_transport",
        get: function get() {
          return this.socket.via_transport;
        }
      }, {
        key: "url",
        get: function get() {
          return this.socket.url;
        }
      }, {
        key: "sip_uri",
        get: function get() {
          return this.socket.sip_uri;
        }
      }]);
      return Transport;
    }();
  }
});

// node_modules/jssip/lib-es5/Parser.js
var require_Parser = __commonJS({
  "node_modules/jssip/lib-es5/Parser.js"(exports) {
    "use strict";
    var Grammar = require_Grammar();
    var SIPMessage = require_SIPMessage();
    var debugerror = require_browser()("JsSIP:ERROR:Parser");
    debugerror.log = console.warn.bind(console);
    exports.parseMessage = function(data, ua) {
      var message;
      var bodyStart;
      var headerEnd = data.indexOf("\r\n");
      if (headerEnd === -1) {
        debugerror("parseMessage() | no CRLF found, not a SIP message");
        return;
      }
      var firstLine = data.substring(0, headerEnd);
      var parsed = Grammar.parse(firstLine, "Request_Response");
      if (parsed === -1) {
        debugerror('parseMessage() | error parsing first line of SIP message: "'.concat(firstLine, '"'));
        return;
      } else if (!parsed.status_code) {
        message = new SIPMessage.IncomingRequest(ua);
        message.method = parsed.method;
        message.ruri = parsed.uri;
      } else {
        message = new SIPMessage.IncomingResponse();
        message.status_code = parsed.status_code;
        message.reason_phrase = parsed.reason_phrase;
      }
      message.data = data;
      var headerStart = headerEnd + 2;
      while (true) {
        headerEnd = getHeader(data, headerStart);
        if (headerEnd === -2) {
          bodyStart = headerStart + 2;
          break;
        } else if (headerEnd === -1) {
          debugerror("parseMessage() | malformed message");
          return;
        }
        parsed = parseHeader(message, data, headerStart, headerEnd);
        if (parsed !== true) {
          debugerror("parseMessage() |", parsed.error);
          return;
        }
        headerStart = headerEnd + 2;
      }
      if (message.hasHeader("content-length")) {
        var contentLength = message.getHeader("content-length");
        message.body = data.substr(bodyStart, contentLength);
      } else {
        message.body = data.substring(bodyStart);
      }
      return message;
    };
    function getHeader(data, headerStart) {
      var start = headerStart;
      var end = 0;
      var partialEnd = 0;
      if (data.substring(start, start + 2).match(/(^\r\n)/)) {
        return -2;
      }
      while (end === 0) {
        partialEnd = data.indexOf("\r\n", start);
        if (partialEnd === -1) {
          return partialEnd;
        }
        if (!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\r\n)/) && data.charAt(partialEnd + 2).match(/(^\s+)/)) {
          start = partialEnd + 2;
        } else {
          end = partialEnd;
        }
      }
      return end;
    }
    function parseHeader(message, data, headerStart, headerEnd) {
      var parsed;
      var hcolonIndex = data.indexOf(":", headerStart);
      var headerName = data.substring(headerStart, hcolonIndex).trim();
      var headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();
      switch (headerName.toLowerCase()) {
        case "via":
        case "v":
          message.addHeader("via", headerValue);
          if (message.getHeaders("via").length === 1) {
            parsed = message.parseHeader("Via");
            if (parsed) {
              message.via = parsed;
              message.via_branch = parsed.branch;
            }
          } else {
            parsed = 0;
          }
          break;
        case "from":
        case "f":
          message.setHeader("from", headerValue);
          parsed = message.parseHeader("from");
          if (parsed) {
            message.from = parsed;
            message.from_tag = parsed.getParam("tag");
          }
          break;
        case "to":
        case "t":
          message.setHeader("to", headerValue);
          parsed = message.parseHeader("to");
          if (parsed) {
            message.to = parsed;
            message.to_tag = parsed.getParam("tag");
          }
          break;
        case "record-route":
          parsed = Grammar.parse(headerValue, "Record_Route");
          if (parsed === -1) {
            parsed = void 0;
          } else {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = void 0;
            try {
              for (var _iterator = parsed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var header = _step.value;
                message.addHeader("record-route", headerValue.substring(header.possition, header.offset));
                message.headers["Record-Route"][message.getHeaders("record-route").length - 1].parsed = header.parsed;
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
          break;
        case "call-id":
        case "i":
          message.setHeader("call-id", headerValue);
          parsed = message.parseHeader("call-id");
          if (parsed) {
            message.call_id = headerValue;
          }
          break;
        case "contact":
        case "m":
          parsed = Grammar.parse(headerValue, "Contact");
          if (parsed === -1) {
            parsed = void 0;
          } else {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = parsed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _header = _step2.value;
                message.addHeader("contact", headerValue.substring(_header.possition, _header.offset));
                message.headers.Contact[message.getHeaders("contact").length - 1].parsed = _header.parsed;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
          break;
        case "content-length":
        case "l":
          message.setHeader("content-length", headerValue);
          parsed = message.parseHeader("content-length");
          break;
        case "content-type":
        case "c":
          message.setHeader("content-type", headerValue);
          parsed = message.parseHeader("content-type");
          break;
        case "cseq":
          message.setHeader("cseq", headerValue);
          parsed = message.parseHeader("cseq");
          if (parsed) {
            message.cseq = parsed.value;
          }
          if (message instanceof SIPMessage.IncomingResponse) {
            message.method = parsed.method;
          }
          break;
        case "max-forwards":
          message.setHeader("max-forwards", headerValue);
          parsed = message.parseHeader("max-forwards");
          break;
        case "www-authenticate":
          message.setHeader("www-authenticate", headerValue);
          parsed = message.parseHeader("www-authenticate");
          break;
        case "proxy-authenticate":
          message.setHeader("proxy-authenticate", headerValue);
          parsed = message.parseHeader("proxy-authenticate");
          break;
        case "session-expires":
        case "x":
          message.setHeader("session-expires", headerValue);
          parsed = message.parseHeader("session-expires");
          if (parsed) {
            message.session_expires = parsed.expires;
            message.session_expires_refresher = parsed.refresher;
          }
          break;
        case "refer-to":
        case "r":
          message.setHeader("refer-to", headerValue);
          parsed = message.parseHeader("refer-to");
          if (parsed) {
            message.refer_to = parsed;
          }
          break;
        case "replaces":
          message.setHeader("replaces", headerValue);
          parsed = message.parseHeader("replaces");
          if (parsed) {
            message.replaces = parsed;
          }
          break;
        case "event":
        case "o":
          message.setHeader("event", headerValue);
          parsed = message.parseHeader("event");
          if (parsed) {
            message.event = parsed;
          }
          break;
        default:
          message.addHeader(headerName, headerValue);
          parsed = 0;
      }
      if (parsed === void 0) {
        return {
          error: 'error parsing header "'.concat(headerName, '"')
        };
      } else {
        return true;
      }
    }
  }
});

// node_modules/jssip/lib-es5/sanityCheck.js
var require_sanityCheck = __commonJS({
  "node_modules/jssip/lib-es5/sanityCheck.js"(exports, module) {
    "use strict";
    var JsSIP_C = require_Constants();
    var SIPMessage = require_SIPMessage();
    var Utils = require_Utils();
    var debug2 = require_browser()("JsSIP:sanityCheck");
    var all = [minimumHeaders];
    var requests = [rfc3261_8_2_2_1, rfc3261_16_3_4, rfc3261_18_3_request, rfc3261_8_2_2_2];
    var responses = [rfc3261_8_1_3_3, rfc3261_18_3_response];
    var message;
    var ua;
    var transport;
    module.exports = function(m, u, t) {
      message = m;
      ua = u;
      transport = t;
      for (var _i = 0, _all = all; _i < _all.length; _i++) {
        var _check2 = _all[_i];
        if (_check2() === false) {
          return false;
        }
      }
      if (message instanceof SIPMessage.IncomingRequest) {
        for (var _i2 = 0, _requests = requests; _i2 < _requests.length; _i2++) {
          var check = _requests[_i2];
          if (check() === false) {
            return false;
          }
        }
      } else if (message instanceof SIPMessage.IncomingResponse) {
        for (var _i3 = 0, _responses = responses; _i3 < _responses.length; _i3++) {
          var _check = _responses[_i3];
          if (_check() === false) {
            return false;
          }
        }
      }
      return true;
    };
    function rfc3261_8_2_2_1() {
      if (message.s("to").uri.scheme !== "sip") {
        reply(416);
        return false;
      }
    }
    function rfc3261_16_3_4() {
      if (!message.to_tag) {
        if (message.call_id.substr(0, 5) === ua.configuration.jssip_id) {
          reply(482);
          return false;
        }
      }
    }
    function rfc3261_18_3_request() {
      var len = Utils.str_utf8_length(message.body);
      var contentLength = message.getHeader("content-length");
      if (len < contentLength) {
        reply(400);
        return false;
      }
    }
    function rfc3261_8_2_2_2() {
      var fromTag = message.from_tag;
      var call_id = message.call_id;
      var cseq = message.cseq;
      var tr;
      if (message.to_tag) {
        return;
      }
      if (message.method === JsSIP_C.INVITE) {
        if (ua._transactions.ist[message.via_branch]) {
          return false;
        } else {
          for (var transaction in ua._transactions.ist) {
            if (Object.prototype.hasOwnProperty.call(ua._transactions.ist, transaction)) {
              tr = ua._transactions.ist[transaction];
              if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {
                reply(482);
                return false;
              }
            }
          }
        }
      } else if (ua._transactions.nist[message.via_branch]) {
        return false;
      } else {
        for (var _transaction in ua._transactions.nist) {
          if (Object.prototype.hasOwnProperty.call(ua._transactions.nist, _transaction)) {
            tr = ua._transactions.nist[_transaction];
            if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {
              reply(482);
              return false;
            }
          }
        }
      }
    }
    function rfc3261_8_1_3_3() {
      if (message.getHeaders("via").length > 1) {
        debug2("more than one Via header field present in the response, dropping the response");
        return false;
      }
    }
    function rfc3261_18_3_response() {
      var len = Utils.str_utf8_length(message.body), contentLength = message.getHeader("content-length");
      if (len < contentLength) {
        debug2("message body length is lower than the value in Content-Length header field, dropping the response");
        return false;
      }
    }
    function minimumHeaders() {
      var mandatoryHeaders = ["from", "to", "call_id", "cseq", "via"];
      for (var _i4 = 0, _mandatoryHeaders = mandatoryHeaders; _i4 < _mandatoryHeaders.length; _i4++) {
        var header = _mandatoryHeaders[_i4];
        if (!message.hasHeader(header)) {
          debug2("missing mandatory header field : ".concat(header, ", dropping the response"));
          return false;
        }
      }
    }
    function reply(status_code) {
      var vias = message.getHeaders("via");
      var to;
      var response = "SIP/2.0 ".concat(status_code, " ").concat(JsSIP_C.REASON_PHRASE[status_code], "\r\n");
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = vias[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var via = _step.value;
          response += "Via: ".concat(via, "\r\n");
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      to = message.getHeader("To");
      if (!message.to_tag) {
        to += ";tag=".concat(Utils.newTag());
      }
      response += "To: ".concat(to, "\r\n");
      response += "From: ".concat(message.getHeader("From"), "\r\n");
      response += "Call-ID: ".concat(message.call_id, "\r\n");
      response += "CSeq: ".concat(message.cseq, " ").concat(message.method, "\r\n");
      response += "\r\n";
      transport.send(response);
    }
  }
});

// node_modules/jssip/lib-es5/Config.js
var require_Config = __commonJS({
  "node_modules/jssip/lib-es5/Config.js"(exports) {
    "use strict";
    var Utils = require_Utils();
    var JsSIP_C = require_Constants();
    var Grammar = require_Grammar();
    var URI = require_URI();
    var Socket2 = require_Socket();
    var Exceptions = require_Exceptions();
    exports.settings = {
      // SIP authentication.
      authorization_user: null,
      password: null,
      realm: null,
      ha1: null,
      // SIP account.
      display_name: null,
      uri: null,
      contact_uri: null,
      // SIP instance id (GRUU).
      instance_id: null,
      // Preloaded SIP Route header field.
      use_preloaded_route: false,
      // Session parameters.
      session_timers: true,
      session_timers_refresh_method: JsSIP_C.UPDATE,
      no_answer_timeout: 60,
      // Registration parameters.
      register: true,
      register_expires: 600,
      registrar_server: null,
      // Connection options.
      sockets: null,
      connection_recovery_max_interval: null,
      connection_recovery_min_interval: null,
      /*
       * Host address.
       * Value to be set in Via sent_by and host part of Contact FQDN.
      */
      via_host: "".concat(Utils.createRandomToken(12), ".invalid")
    };
    var checks = {
      mandatory: {
        sockets: function sockets(_sockets2) {
          var _sockets = [];
          if (Socket2.isSocket(_sockets2)) {
            _sockets.push({
              socket: _sockets2
            });
          } else if (Array.isArray(_sockets2) && _sockets2.length) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = void 0;
            try {
              for (var _iterator = _sockets2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var socket = _step.value;
                if (Object.prototype.hasOwnProperty.call(socket, "socket") && Socket2.isSocket(socket.socket)) {
                  _sockets.push(socket);
                } else if (Socket2.isSocket(socket)) {
                  _sockets.push({
                    socket
                  });
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          } else {
            return;
          }
          return _sockets;
        },
        uri: function uri(_uri) {
          if (!/^sip:/i.test(_uri)) {
            _uri = "".concat(JsSIP_C.SIP, ":").concat(_uri);
          }
          var parsed = URI.parse(_uri);
          if (!parsed) {
            return;
          } else if (!parsed.user) {
            return;
          } else {
            return parsed;
          }
        }
      },
      optional: {
        authorization_user: function authorization_user(_authorization_user) {
          if (Grammar.parse('"'.concat(_authorization_user, '"'), "quoted_string") === -1) {
            return;
          } else {
            return _authorization_user;
          }
        },
        user_agent: function user_agent(_user_agent) {
          if (typeof _user_agent === "string") {
            return _user_agent;
          }
        },
        connection_recovery_max_interval: function connection_recovery_max_interval(_connection_recovery_max_interval) {
          if (Utils.isDecimal(_connection_recovery_max_interval)) {
            var value = Number(_connection_recovery_max_interval);
            if (value > 0) {
              return value;
            }
          }
        },
        connection_recovery_min_interval: function connection_recovery_min_interval(_connection_recovery_min_interval) {
          if (Utils.isDecimal(_connection_recovery_min_interval)) {
            var value = Number(_connection_recovery_min_interval);
            if (value > 0) {
              return value;
            }
          }
        },
        contact_uri: function contact_uri(_contact_uri) {
          if (typeof _contact_uri === "string") {
            var uri = Grammar.parse(_contact_uri, "SIP_URI");
            if (uri !== -1) {
              return uri;
            }
          }
        },
        display_name: function display_name(_display_name) {
          return _display_name;
        },
        instance_id: function instance_id(_instance_id) {
          if (/^uuid:/i.test(_instance_id)) {
            _instance_id = _instance_id.substr(5);
          }
          if (Grammar.parse(_instance_id, "uuid") === -1) {
            return;
          } else {
            return _instance_id;
          }
        },
        no_answer_timeout: function no_answer_timeout(_no_answer_timeout) {
          if (Utils.isDecimal(_no_answer_timeout)) {
            var value = Number(_no_answer_timeout);
            if (value > 0) {
              return value;
            }
          }
        },
        session_timers: function session_timers(_session_timers) {
          if (typeof _session_timers === "boolean") {
            return _session_timers;
          }
        },
        session_timers_refresh_method: function session_timers_refresh_method(method) {
          if (typeof method === "string") {
            method = method.toUpperCase();
            if (method === JsSIP_C.INVITE || method === JsSIP_C.UPDATE) {
              return method;
            }
          }
        },
        password: function password(_password) {
          return String(_password);
        },
        realm: function realm(_realm) {
          return String(_realm);
        },
        ha1: function ha1(_ha) {
          return String(_ha);
        },
        register: function register(_register) {
          if (typeof _register === "boolean") {
            return _register;
          }
        },
        register_expires: function register_expires(_register_expires) {
          if (Utils.isDecimal(_register_expires)) {
            var value = Number(_register_expires);
            if (value > 0) {
              return value;
            }
          }
        },
        registrar_server: function registrar_server(_registrar_server) {
          if (!/^sip:/i.test(_registrar_server)) {
            _registrar_server = "".concat(JsSIP_C.SIP, ":").concat(_registrar_server);
          }
          var parsed = URI.parse(_registrar_server);
          if (!parsed) {
            return;
          } else if (parsed.user) {
            return;
          } else {
            return parsed;
          }
        },
        use_preloaded_route: function use_preloaded_route(_use_preloaded_route) {
          if (typeof _use_preloaded_route === "boolean") {
            return _use_preloaded_route;
          }
        }
      }
    };
    exports.load = function(dst, src) {
      for (var parameter in checks.mandatory) {
        if (!src.hasOwnProperty(parameter)) {
          throw new Exceptions.ConfigurationError(parameter);
        } else {
          var value = src[parameter];
          var checked_value = checks.mandatory[parameter](value);
          if (checked_value !== void 0) {
            dst[parameter] = checked_value;
          } else {
            throw new Exceptions.ConfigurationError(parameter, value);
          }
        }
      }
      for (var _parameter in checks.optional) {
        if (src.hasOwnProperty(_parameter)) {
          var _value = src[_parameter];
          if (Utils.isEmpty(_value)) {
            continue;
          }
          var _checked_value = checks.optional[_parameter](_value);
          if (_checked_value !== void 0) {
            dst[_parameter] = _checked_value;
          } else {
            throw new Exceptions.ConfigurationError(_parameter, _value);
          }
        }
      }
    };
  }
});

// node_modules/jssip/lib-es5/UA.js
var require_UA = __commonJS({
  "node_modules/jssip/lib-es5/UA.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EventEmitter6 = require_events().EventEmitter;
    var JsSIP_C = require_Constants();
    var Registrator = require_Registrator();
    var RTCSession = require_RTCSession();
    var Message = require_Message();
    var Transactions = require_Transactions();
    var Transport = require_Transport();
    var Utils = require_Utils();
    var Exceptions = require_Exceptions();
    var URI = require_URI();
    var Parser = require_Parser();
    var SIPMessage = require_SIPMessage();
    var sanityCheck = require_sanityCheck();
    var config = require_Config();
    var debug2 = require_browser()("JsSIP:UA");
    var debugerror = require_browser()("JsSIP:ERROR:UA");
    debugerror.log = console.warn.bind(console);
    var C = {
      // UA status codes.
      STATUS_INIT: 0,
      STATUS_READY: 1,
      STATUS_USER_CLOSED: 2,
      STATUS_NOT_READY: 3,
      // UA error codes.
      CONFIGURATION_ERROR: 1,
      NETWORK_ERROR: 2
    };
    module.exports = function(_EventEmitter) {
      _inherits(UA2, _EventEmitter);
      _createClass(UA2, null, [{
        key: "C",
        // Expose C object.
        get: function get() {
          return C;
        }
      }]);
      function UA2(configuration) {
        var _this;
        _classCallCheck(this, UA2);
        debug2("new() [configuration:%o]", configuration);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(UA2).call(this));
        _this._cache = {
          credentials: {}
        };
        _this._configuration = Object.assign({}, config.settings);
        _this._dynConfiguration = {};
        _this._dialogs = {};
        _this._applicants = {};
        _this._sessions = {};
        _this._transport = null;
        _this._contact = null;
        _this._status = C.STATUS_INIT;
        _this._error = null;
        _this._transactions = {
          nist: {},
          nict: {},
          ist: {},
          ict: {}
        };
        _this._data = {};
        _this._closeTimer = null;
        if (configuration === void 0) {
          throw new TypeError("Not enough arguments");
        }
        try {
          _this._loadConfig(configuration);
        } catch (e) {
          _this._status = C.STATUS_NOT_READY;
          _this._error = C.CONFIGURATION_ERROR;
          throw e;
        }
        _this._registrator = new Registrator(_assertThisInitialized(_this));
        return _this;
      }
      _createClass(UA2, [{
        key: "start",
        // =================
        //  High Level API
        // =================
        /**
         * Connect to the server if status = STATUS_INIT.
         * Resume UA after being closed.
         */
        value: function start() {
          debug2("start()");
          if (this._status === C.STATUS_INIT) {
            this._transport.connect();
          } else if (this._status === C.STATUS_USER_CLOSED) {
            debug2("restarting UA");
            if (this._closeTimer !== null) {
              clearTimeout(this._closeTimer);
              this._closeTimer = null;
              this._transport.disconnect();
            }
            this._status = C.STATUS_INIT;
            this._transport.connect();
          } else if (this._status === C.STATUS_READY) {
            debug2("UA is in READY status, not restarted");
          } else {
            debug2("ERROR: connection is down, Auto-Recovery system is trying to reconnect");
          }
          this._dynConfiguration.register = this._configuration.register;
        }
        /**
         * Register.
         */
      }, {
        key: "register",
        value: function register() {
          debug2("register()");
          this._dynConfiguration.register = true;
          this._registrator.register();
        }
        /**
         * Unregister.
         */
      }, {
        key: "unregister",
        value: function unregister(options) {
          debug2("unregister()");
          this._dynConfiguration.register = false;
          this._registrator.unregister(options);
        }
        /**
         * Get the Registrator instance.
         */
      }, {
        key: "registrator",
        value: function registrator() {
          return this._registrator;
        }
        /**
         * Registration state.
         */
      }, {
        key: "isRegistered",
        value: function isRegistered() {
          return this._registrator.registered;
        }
        /**
         * Connection state.
         */
      }, {
        key: "isConnected",
        value: function isConnected() {
          return this._transport.isConnected();
        }
        /**
         * Make an outgoing call.
         *
         * -param {String} target
         * -param {Object} [options]
         *
         * -throws {TypeError}
         *
         */
      }, {
        key: "call",
        value: function call(target, options) {
          debug2("call()");
          var session = new RTCSession(this);
          session.connect(target, options);
          return session;
        }
        /**
         * Send a message.
         *
         * -param {String} target
         * -param {String} body
         * -param {Object} [options]
         *
         * -throws {TypeError}
         *
         */
      }, {
        key: "sendMessage",
        value: function sendMessage(target, body, options) {
          debug2("sendMessage()");
          var message = new Message(this);
          message.send(target, body, options);
          return message;
        }
        /**
         * Terminate ongoing sessions.
         */
      }, {
        key: "terminateSessions",
        value: function terminateSessions(options) {
          debug2("terminateSessions()");
          for (var idx in this._sessions) {
            if (!this._sessions[idx].isEnded()) {
              this._sessions[idx].terminate(options);
            }
          }
        }
        /**
         * Gracefully close.
         *
         */
      }, {
        key: "stop",
        value: function stop() {
          var _this2 = this;
          debug2("stop()");
          this._dynConfiguration = {};
          if (this._status === C.STATUS_USER_CLOSED) {
            debug2("UA already closed");
            return;
          }
          this._registrator.close();
          var num_sessions = Object.keys(this._sessions).length;
          for (var session in this._sessions) {
            if (Object.prototype.hasOwnProperty.call(this._sessions, session)) {
              debug2("closing session ".concat(session));
              try {
                this._sessions[session].terminate();
              } catch (error) {
              }
            }
          }
          for (var applicant in this._applicants) {
            if (Object.prototype.hasOwnProperty.call(this._applicants, applicant))
              try {
                this._applicants[applicant].close();
              } catch (error) {
              }
          }
          this._status = C.STATUS_USER_CLOSED;
          var num_transactions = Object.keys(this._transactions.nict).length + Object.keys(this._transactions.nist).length + Object.keys(this._transactions.ict).length + Object.keys(this._transactions.ist).length;
          if (num_transactions === 0 && num_sessions === 0) {
            this._transport.disconnect();
          } else {
            this._closeTimer = setTimeout(function() {
              _this2._closeTimer = null;
              _this2._transport.disconnect();
            }, 2e3);
          }
        }
        /**
         * Normalice a string into a valid SIP request URI
         * -param {String} target
         * -returns {JsSIP.URI|undefined}
         */
      }, {
        key: "normalizeTarget",
        value: function normalizeTarget(target) {
          return Utils.normalizeTarget(target, this._configuration.hostport_params);
        }
        /**
         * Allow retrieving configuration and autogenerated fields in runtime.
         */
      }, {
        key: "get",
        value: function get(parameter) {
          switch (parameter) {
            case "realm":
              return this._configuration.realm;
            case "ha1":
              return this._configuration.ha1;
            default:
              debugerror('get() | cannot get "%s" parameter in runtime', parameter);
              return void 0;
          }
        }
        /**
         * Allow configuration changes in runtime.
         * Returns true if the parameter could be set.
         */
      }, {
        key: "set",
        value: function set(parameter, value) {
          switch (parameter) {
            case "password": {
              this._configuration.password = String(value);
              break;
            }
            case "realm": {
              this._configuration.realm = String(value);
              break;
            }
            case "ha1": {
              this._configuration.ha1 = String(value);
              this._configuration.password = null;
              break;
            }
            case "display_name": {
              this._configuration.display_name = value;
              break;
            }
            default:
              debugerror('set() | cannot set "%s" parameter in runtime', parameter);
              return false;
          }
          return true;
        }
        // ==========================
        // Event Handlers.
        // ==========================
        /**
         * new Transaction
         */
      }, {
        key: "newTransaction",
        value: function newTransaction(transaction) {
          this._transactions[transaction.type][transaction.id] = transaction;
          this.emit("newTransaction", {
            transaction
          });
        }
        /**
         * Transaction destroyed.
         */
      }, {
        key: "destroyTransaction",
        value: function destroyTransaction(transaction) {
          delete this._transactions[transaction.type][transaction.id];
          this.emit("transactionDestroyed", {
            transaction
          });
        }
        /**
         * new Dialog
         */
      }, {
        key: "newDialog",
        value: function newDialog(dialog) {
          this._dialogs[dialog.id] = dialog;
        }
        /**
         * Dialog destroyed.
         */
      }, {
        key: "destroyDialog",
        value: function destroyDialog(dialog) {
          delete this._dialogs[dialog.id];
        }
        /**
         *  new Message
         */
      }, {
        key: "newMessage",
        value: function newMessage(message, data) {
          this._applicants[message] = message;
          this.emit("newMessage", data);
        }
        /**
         *  Message destroyed.
         */
      }, {
        key: "destroyMessage",
        value: function destroyMessage(message) {
          delete this._applicants[message];
        }
        /**
         * new RTCSession
         */
      }, {
        key: "newRTCSession",
        value: function newRTCSession(session, data) {
          this._sessions[session.id] = session;
          this.emit("newRTCSession", data);
        }
        /**
         * RTCSession destroyed.
         */
      }, {
        key: "destroyRTCSession",
        value: function destroyRTCSession(session) {
          delete this._sessions[session.id];
        }
        /**
         * Registered
         */
      }, {
        key: "registered",
        value: function registered(data) {
          this.emit("registered", data);
        }
        /**
         * Unregistered
         */
      }, {
        key: "unregistered",
        value: function unregistered(data) {
          this.emit("unregistered", data);
        }
        /**
         * Registration Failed
         */
      }, {
        key: "registrationFailed",
        value: function registrationFailed(data) {
          this.emit("registrationFailed", data);
        }
        // =========================
        // ReceiveRequest.
        // =========================
        /**
         * Request reception
         */
      }, {
        key: "receiveRequest",
        value: function receiveRequest(request) {
          var method = request.method;
          if (request.ruri.user !== this._configuration.uri.user && request.ruri.user !== this._contact.uri.user) {
            debug2("Request-URI does not point to us");
            if (request.method !== JsSIP_C.ACK) {
              request.reply_sl(404);
            }
            return;
          }
          if (request.ruri.scheme === JsSIP_C.SIPS) {
            request.reply_sl(416);
            return;
          }
          if (Transactions.checkTransaction(this, request)) {
            return;
          }
          if (method === JsSIP_C.INVITE) {
            new Transactions.InviteServerTransaction(this, this._transport, request);
          } else if (method !== JsSIP_C.ACK && method !== JsSIP_C.CANCEL) {
            new Transactions.NonInviteServerTransaction(this, this._transport, request);
          }
          if (method === JsSIP_C.OPTIONS) {
            request.reply(200);
          } else if (method === JsSIP_C.MESSAGE) {
            if (this.listeners("newMessage").length === 0) {
              request.reply(405);
              return;
            }
            var message = new Message(this);
            message.init_incoming(request);
          } else if (method === JsSIP_C.INVITE) {
            if (!request.to_tag && this.listeners("newRTCSession").length === 0) {
              request.reply(405);
              return;
            }
          }
          var dialog;
          var session;
          if (!request.to_tag) {
            switch (method) {
              case JsSIP_C.INVITE:
                if (window.RTCPeerConnection) {
                  if (request.hasHeader("replaces")) {
                    var replaces = request.replaces;
                    dialog = this._findDialog(replaces.call_id, replaces.from_tag, replaces.to_tag);
                    if (dialog) {
                      session = dialog.owner;
                      if (!session.isEnded()) {
                        session.receiveRequest(request);
                      } else {
                        request.reply(603);
                      }
                    } else {
                      request.reply(481);
                    }
                  } else {
                    session = new RTCSession(this);
                    session.init_incoming(request);
                  }
                } else {
                  debugerror("INVITE received but WebRTC is not supported");
                  request.reply(488);
                }
                break;
              case JsSIP_C.BYE:
                request.reply(481);
                break;
              case JsSIP_C.CANCEL:
                session = this._findSession(request);
                if (session) {
                  session.receiveRequest(request);
                } else {
                  debug2("received CANCEL request for a non existent session");
                }
                break;
              case JsSIP_C.ACK:
                break;
              case JsSIP_C.NOTIFY:
                this.emit("sipEvent", {
                  event: request.event,
                  request
                });
                request.reply(200);
                break;
              default:
                request.reply(405);
                break;
            }
          } else {
            dialog = this._findDialog(request.call_id, request.from_tag, request.to_tag);
            if (dialog) {
              dialog.receiveRequest(request);
            } else if (method === JsSIP_C.NOTIFY) {
              session = this._findSession(request);
              if (session) {
                session.receiveRequest(request);
              } else {
                debug2("received NOTIFY request for a non existent subscription");
                request.reply(481, "Subscription does not exist");
              }
            } else if (method !== JsSIP_C.ACK) {
              request.reply(481);
            }
          }
        }
        // =================
        // Utils.
        // =================
        /**
         * Get the session to which the request belongs to, if any.
         */
      }, {
        key: "_findSession",
        value: function _findSession(_ref) {
          var call_id = _ref.call_id, from_tag = _ref.from_tag, to_tag = _ref.to_tag;
          var sessionIDa = call_id + from_tag;
          var sessionA = this._sessions[sessionIDa];
          var sessionIDb = call_id + to_tag;
          var sessionB = this._sessions[sessionIDb];
          if (sessionA) {
            return sessionA;
          } else if (sessionB) {
            return sessionB;
          } else {
            return null;
          }
        }
        /**
         * Get the dialog to which the request belongs to, if any.
         */
      }, {
        key: "_findDialog",
        value: function _findDialog(call_id, from_tag, to_tag) {
          var id = call_id + from_tag + to_tag;
          var dialog = this._dialogs[id];
          if (dialog) {
            return dialog;
          } else {
            id = call_id + to_tag + from_tag;
            dialog = this._dialogs[id];
            if (dialog) {
              return dialog;
            } else {
              return null;
            }
          }
        }
      }, {
        key: "_loadConfig",
        value: function _loadConfig(configuration) {
          try {
            config.load(this._configuration, configuration);
          } catch (e) {
            throw e;
          }
          if (this._configuration.display_name === 0) {
            this._configuration.display_name = "0";
          }
          if (!this._configuration.instance_id) {
            this._configuration.instance_id = Utils.newUUID();
          }
          this._configuration.jssip_id = Utils.createRandomToken(5);
          var hostport_params = this._configuration.uri.clone();
          hostport_params.user = null;
          this._configuration.hostport_params = hostport_params.toString().replace(/^sip:/i, "");
          try {
            this._transport = new Transport(this._configuration.sockets, {
              // Recovery options.
              max_interval: this._configuration.connection_recovery_max_interval,
              min_interval: this._configuration.connection_recovery_min_interval
            });
            this._transport.onconnecting = onTransportConnecting.bind(this);
            this._transport.onconnect = onTransportConnect.bind(this);
            this._transport.ondisconnect = onTransportDisconnect.bind(this);
            this._transport.ondata = onTransportData.bind(this);
          } catch (e) {
            debugerror(e);
            throw new Exceptions.ConfigurationError("sockets", this._configuration.sockets);
          }
          delete this._configuration.sockets;
          if (!this._configuration.authorization_user) {
            this._configuration.authorization_user = this._configuration.uri.user;
          }
          if (!this._configuration.registrar_server) {
            var registrar_server = this._configuration.uri.clone();
            registrar_server.user = null;
            registrar_server.clearParams();
            registrar_server.clearHeaders();
            this._configuration.registrar_server = registrar_server;
          }
          this._configuration.no_answer_timeout *= 1e3;
          if (this._configuration.contact_uri) {
            this._configuration.via_host = this._configuration.contact_uri.host;
          } else {
            this._configuration.contact_uri = new URI("sip", Utils.createRandomToken(8), this._configuration.via_host, null, {
              transport: "ws"
            });
          }
          this._contact = {
            pub_gruu: null,
            temp_gruu: null,
            uri: this._configuration.contact_uri,
            toString: function toString() {
              var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
              var anonymous = options.anonymous || null;
              var outbound = options.outbound || null;
              var contact = "<";
              if (anonymous) {
                contact += this.temp_gruu || "sip:anonymous@anonymous.invalid;transport=ws";
              } else {
                contact += this.pub_gruu || this.uri.toString();
              }
              if (outbound && (anonymous ? !this.temp_gruu : !this.pub_gruu)) {
                contact += ";ob";
              }
              contact += ">";
              return contact;
            }
          };
          var writable_parameters = ["password", "realm", "ha1", "display_name", "register"];
          for (var parameter in this._configuration) {
            if (Object.prototype.hasOwnProperty.call(this._configuration, parameter)) {
              if (writable_parameters.indexOf(parameter) !== -1) {
                Object.defineProperty(this._configuration, parameter, {
                  writable: true,
                  configurable: false
                });
              } else {
                Object.defineProperty(this._configuration, parameter, {
                  writable: false,
                  configurable: false
                });
              }
            }
          }
          debug2("configuration parameters after validation:");
          for (var _parameter in this._configuration) {
            if (Object.prototype.hasOwnProperty.call(config.settings, _parameter)) {
              switch (_parameter) {
                case "uri":
                case "registrar_server":
                  debug2("- ".concat(_parameter, ": ").concat(this._configuration[_parameter]));
                  break;
                case "password":
                case "ha1":
                  debug2("- ".concat(_parameter, ": NOT SHOWN"));
                  break;
                default:
                  debug2("- ".concat(_parameter, ": ").concat(JSON.stringify(this._configuration[_parameter])));
              }
            }
          }
          return;
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }, {
        key: "status",
        get: function get() {
          return this._status;
        }
      }, {
        key: "contact",
        get: function get() {
          return this._contact;
        }
      }, {
        key: "configuration",
        get: function get() {
          return this._configuration;
        }
      }, {
        key: "transport",
        get: function get() {
          return this._transport;
        }
      }]);
      return UA2;
    }(EventEmitter6);
    function onTransportConnecting(data) {
      this.emit("connecting", data);
    }
    function onTransportConnect(data) {
      if (this._status === C.STATUS_USER_CLOSED) {
        return;
      }
      this._status = C.STATUS_READY;
      this._error = null;
      this.emit("connected", data);
      if (this._dynConfiguration.register) {
        this._registrator.register();
      }
    }
    function onTransportDisconnect(data) {
      var client_transactions = ["nict", "ict", "nist", "ist"];
      for (var _i = 0, _client_transactions = client_transactions; _i < _client_transactions.length; _i++) {
        var type = _client_transactions[_i];
        for (var id in this._transactions[type]) {
          if (Object.prototype.hasOwnProperty.call(this._transactions[type], id)) {
            this._transactions[type][id].onTransportError();
          }
        }
      }
      this.emit("disconnected", data);
      this._registrator.onTransportClosed();
      if (this._status !== C.STATUS_USER_CLOSED) {
        this._status = C.STATUS_NOT_READY;
        this._error = C.NETWORK_ERROR;
      }
    }
    function onTransportData(data) {
      var transport = data.transport;
      var message = data.message;
      message = Parser.parseMessage(message, this);
      if (!message) {
        return;
      }
      if (this._status === C.STATUS_USER_CLOSED && message instanceof SIPMessage.IncomingRequest) {
        return;
      }
      if (!sanityCheck(message, this, transport)) {
        return;
      }
      if (message instanceof SIPMessage.IncomingRequest) {
        message.transport = transport;
        this.receiveRequest(message);
      } else if (message instanceof SIPMessage.IncomingResponse) {
        var transaction;
        switch (message.method) {
          case JsSIP_C.INVITE:
            transaction = this._transactions.ict[message.via_branch];
            if (transaction) {
              transaction.receiveResponse(message);
            }
            break;
          case JsSIP_C.ACK:
            break;
          default:
            transaction = this._transactions.nict[message.via_branch];
            if (transaction) {
              transaction.receiveResponse(message);
            }
            break;
        }
      }
    }
  }
});

// node_modules/jssip/lib-es5/WebSocketInterface.js
var require_WebSocketInterface = __commonJS({
  "node_modules/jssip/lib-es5/WebSocketInterface.js"(exports, module) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Grammar = require_Grammar();
    var debug2 = require_browser()("JsSIP:WebSocketInterface");
    var debugerror = require_browser()("JsSIP:ERROR:WebSocketInterface");
    debugerror.log = console.warn.bind(console);
    module.exports = function() {
      function WebSocketInterface2(url) {
        _classCallCheck(this, WebSocketInterface2);
        debug2('new() [url:"%s"]', url);
        this._url = url;
        this._sip_uri = null;
        this._via_transport = null;
        this._ws = null;
        var parsed_url = Grammar.parse(url, "absoluteURI");
        if (parsed_url === -1) {
          debugerror("invalid WebSocket URI: ".concat(url));
          throw new TypeError("Invalid argument: ".concat(url));
        } else if (parsed_url.scheme !== "wss" && parsed_url.scheme !== "ws") {
          debugerror("invalid WebSocket URI scheme: ".concat(parsed_url.scheme));
          throw new TypeError("Invalid argument: ".concat(url));
        } else {
          this._sip_uri = "sip:".concat(parsed_url.host).concat(parsed_url.port ? ":".concat(parsed_url.port) : "", ";transport=ws");
          this._via_transport = parsed_url.scheme.toUpperCase();
        }
      }
      _createClass(WebSocketInterface2, [{
        key: "connect",
        value: function connect() {
          debug2("connect()");
          if (this.isConnected()) {
            debug2("WebSocket ".concat(this._url, " is already connected"));
            return;
          } else if (this.isConnecting()) {
            debug2("WebSocket ".concat(this._url, " is connecting"));
            return;
          }
          if (this._ws) {
            this.disconnect();
          }
          debug2("connecting to WebSocket ".concat(this._url));
          try {
            this._ws = new WebSocket(this._url, "sip");
            this._ws.binaryType = "arraybuffer";
            this._ws.onopen = this._onOpen.bind(this);
            this._ws.onclose = this._onClose.bind(this);
            this._ws.onmessage = this._onMessage.bind(this);
            this._ws.onerror = this._onError.bind(this);
          } catch (e) {
            this._onError(e);
          }
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          debug2("disconnect()");
          if (this._ws) {
            this._ws.onopen = function() {
            };
            this._ws.onclose = function() {
            };
            this._ws.onmessage = function() {
            };
            this._ws.onerror = function() {
            };
            this._ws.close();
            this._ws = null;
          }
        }
      }, {
        key: "send",
        value: function send(message) {
          debug2("send()");
          if (this.isConnected()) {
            this._ws.send(message);
            return true;
          } else {
            debugerror("unable to send message, WebSocket is not open");
            return false;
          }
        }
      }, {
        key: "isConnected",
        value: function isConnected() {
          return this._ws && this._ws.readyState === this._ws.OPEN;
        }
      }, {
        key: "isConnecting",
        value: function isConnecting() {
          return this._ws && this._ws.readyState === this._ws.CONNECTING;
        }
        /**
         * WebSocket Event Handlers
         */
      }, {
        key: "_onOpen",
        value: function _onOpen() {
          debug2("WebSocket ".concat(this._url, " connected"));
          this.onconnect();
        }
      }, {
        key: "_onClose",
        value: function _onClose(_ref) {
          var wasClean = _ref.wasClean, code = _ref.code, reason = _ref.reason;
          debug2("WebSocket ".concat(this._url, " closed"));
          if (wasClean === false) {
            debug2("WebSocket abrupt disconnection");
          }
          var data = {
            socket: this,
            error: !wasClean,
            code,
            reason
          };
          this.ondisconnect(data);
        }
      }, {
        key: "_onMessage",
        value: function _onMessage(_ref2) {
          var data = _ref2.data;
          debug2("received WebSocket message");
          this.ondata(data);
        }
      }, {
        key: "_onError",
        value: function _onError(e) {
          debugerror("WebSocket ".concat(this._url, " error: ").concat(e));
        }
      }, {
        key: "via_transport",
        get: function get() {
          return this._via_transport;
        },
        set: function set(value) {
          this._via_transport = value.toUpperCase();
        }
      }, {
        key: "sip_uri",
        get: function get() {
          return this._sip_uri;
        }
      }, {
        key: "url",
        get: function get() {
          return this._url;
        }
      }]);
      return WebSocketInterface2;
    }();
  }
});

// node_modules/jssip/lib-es5/JsSIP.js
var require_JsSIP = __commonJS({
  "node_modules/jssip/lib-es5/JsSIP.js"(exports, module) {
    "use strict";
    var pkg = require_package();
    var C = require_Constants();
    var Exceptions = require_Exceptions();
    var Utils = require_Utils();
    var UA2 = require_UA();
    var URI = require_URI();
    var NameAddrHeader = require_NameAddrHeader();
    var Grammar = require_Grammar();
    var WebSocketInterface2 = require_WebSocketInterface();
    var debug2 = require_browser()("JsSIP");
    debug2("version %s", pkg.version);
    module.exports = {
      C,
      Exceptions,
      Utils,
      UA: UA2,
      URI,
      NameAddrHeader,
      WebSocketInterface: WebSocketInterface2,
      Grammar,
      // Expose the debug module.
      debug: require_browser(),
      get name() {
        return pkg.title;
      },
      get version() {
        return pkg.version;
      }
    };
  }
});

// node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}

// node_modules/webitel-sdk/esm5/api/agent-pause-cause-service-api.js
var globalImportUrl = __toESM(require_url());
var import_axios2 = __toESM(require_axios2());

// node_modules/webitel-sdk/esm5/base.js
var import_axios = __toESM(require_axios2());
var BASE_PATH = "https://dev.webitel.com/api".replace(/\/+$/, "");
var BaseAPI = (
  /** @class */
  function() {
    function BaseAPI2(configuration, basePath, axios) {
      if (basePath === void 0) {
        basePath = BASE_PATH;
      }
      if (axios === void 0) {
        axios = import_axios.default;
      }
      this.basePath = basePath;
      this.axios = axios;
      if (configuration) {
        this.configuration = configuration;
        this.basePath = configuration.basePath || this.basePath;
      }
    }
    return BaseAPI2;
  }()
);
var RequiredError = (
  /** @class */
  function(_super) {
    __extends(RequiredError2, _super);
    function RequiredError2(field, msg) {
      var _this = _super.call(this, msg) || this;
      _this.field = field;
      _this.name = "RequiredError";
      return _this;
    }
    return RequiredError2;
  }(Error)
);

// node_modules/webitel-sdk/esm5/api/agent-pause-cause-service-api.js
var AgentPauseCauseServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {EngineCreateAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentPauseCause: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAgentPauseCause.");
              }
              localVarPath = "/call_center/pause_causes";
              localVarUrlObj = globalImportUrl.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentPauseCause: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteAgentPauseCause.");
              }
              localVarPath = "/call_center/pause_causes/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentPauseCause: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchAgentPauseCause.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchAgentPauseCause.");
              }
              localVarPath = "/call_center/pause_causes/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentPauseCause: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readAgentPauseCause.");
              }
              localVarPath = "/call_center/pause_causes/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentPauseCause: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/pause_causes";
              localVarUrlObj = globalImportUrl.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentPauseCause: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateAgentPauseCause.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateAgentPauseCause.");
              }
              localVarPath = "/call_center/pause_causes/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var AgentPauseCauseServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {EngineCreateAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentPauseCause: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentPauseCauseServiceApiAxiosParamCreator(configuration).createAgentPauseCause(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios2.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentPauseCause: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentPauseCauseServiceApiAxiosParamCreator(configuration).deleteAgentPauseCause(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios2.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentPauseCause: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentPauseCauseServiceApiAxiosParamCreator(configuration).patchAgentPauseCause(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios2.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentPauseCause: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentPauseCauseServiceApiAxiosParamCreator(configuration).readAgentPauseCause(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios2.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentPauseCause: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentPauseCauseServiceApiAxiosParamCreator(configuration).searchAgentPauseCause(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios2.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentPauseCause: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentPauseCauseServiceApiAxiosParamCreator(configuration).updateAgentPauseCause(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios2.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var AgentPauseCauseServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {EngineCreateAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentPauseCause: function(body, options) {
      return AgentPauseCauseServiceApiFp(configuration).createAgentPauseCause(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentPauseCause: function(id, options) {
      return AgentPauseCauseServiceApiFp(configuration).deleteAgentPauseCause(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentPauseCause: function(id, body, options) {
      return AgentPauseCauseServiceApiFp(configuration).patchAgentPauseCause(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentPauseCause: function(id, options) {
      return AgentPauseCauseServiceApiFp(configuration).readAgentPauseCause(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentPauseCause: function(page, size, q, sort, fields, id, options) {
      return AgentPauseCauseServiceApiFp(configuration).searchAgentPauseCause(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateAgentPauseCauseRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentPauseCause: function(id, body, options) {
      return AgentPauseCauseServiceApiFp(configuration).updateAgentPauseCause(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var AgentPauseCauseServiceApi = (
  /** @class */
  function(_super) {
    __extends(AgentPauseCauseServiceApi2, _super);
    function AgentPauseCauseServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AgentPauseCauseServiceApi2.prototype.createAgentPauseCause = function(body, options) {
      var _this = this;
      return AgentPauseCauseServiceApiFp(this.configuration).createAgentPauseCause(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentPauseCauseServiceApi2.prototype.deleteAgentPauseCause = function(id, options) {
      var _this = this;
      return AgentPauseCauseServiceApiFp(this.configuration).deleteAgentPauseCause(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentPauseCauseServiceApi2.prototype.patchAgentPauseCause = function(id, body, options) {
      var _this = this;
      return AgentPauseCauseServiceApiFp(this.configuration).patchAgentPauseCause(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentPauseCauseServiceApi2.prototype.readAgentPauseCause = function(id, options) {
      var _this = this;
      return AgentPauseCauseServiceApiFp(this.configuration).readAgentPauseCause(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentPauseCauseServiceApi2.prototype.searchAgentPauseCause = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return AgentPauseCauseServiceApiFp(this.configuration).searchAgentPauseCause(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentPauseCauseServiceApi2.prototype.updateAgentPauseCause = function(id, body, options) {
      var _this = this;
      return AgentPauseCauseServiceApiFp(this.configuration).updateAgentPauseCause(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return AgentPauseCauseServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/agent-service-api.js
var globalImportUrl2 = __toESM(require_url());
var import_axios3 = __toESM(require_axios2());
var AgentServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {number} agentId
     * @param {EngineAgentSetStateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentSetState: function(agentId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling agentSetState.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling agentSetState.");
              }
              localVarPath = "/call_center/agents/{agent_id}/states/waiting".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory: function(agentId, page, size, timeFrom, timeTo, q, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling agentStateHistory.");
              }
              localVarPath = "/call_center/agents/{agent_id}/states/history".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (timeFrom !== void 0) {
                localVarQueryParameter["time_from"] = timeFrom;
              }
              if (timeTo !== void 0) {
                localVarQueryParameter["time_to"] = timeTo;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentTodayStatistics: function(agentId, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling agentTodayStatistics.");
              }
              localVarPath = "/call_center/agents/{agent_id}/statistics/today".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAgent.");
              }
              localVarPath = "/call_center/agents";
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteAgent.");
              }
              localVarPath = "/call_center/agents/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EnginePatchAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgent: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchAgent.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchAgent.");
              }
              localVarPath = "/call_center/agents/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readAgent.");
              }
              localVarPath = "/call_center/agents/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [allowChannels]
     * @param {Array<number>} [supervisorId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [auditorId]
     * @param {boolean} [isSupervisor]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [queueId]
     * @param {boolean} [notSupervisor]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [extension]
     * @param {Array<number>} [notTeamId]
     * @param {Array<number>} [notSkillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent: function(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/agents";
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (allowChannels) {
                localVarQueryParameter["allow_channels"] = allowChannels;
              }
              if (supervisorId) {
                localVarQueryParameter["supervisor_id"] = supervisorId;
              }
              if (teamId) {
                localVarQueryParameter["team_id"] = teamId;
              }
              if (regionId) {
                localVarQueryParameter["region_id"] = regionId;
              }
              if (auditorId) {
                localVarQueryParameter["auditor_id"] = auditorId;
              }
              if (isSupervisor !== void 0) {
                localVarQueryParameter["is_supervisor"] = isSupervisor;
              }
              if (skillId) {
                localVarQueryParameter["skill_id"] = skillId;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (notSupervisor !== void 0) {
                localVarQueryParameter["not_supervisor"] = notSupervisor;
              }
              if (userId) {
                localVarQueryParameter["user_id"] = userId;
              }
              if (extension) {
                localVarQueryParameter["extension"] = extension;
              }
              if (notTeamId) {
                localVarQueryParameter["not_team_id"] = notTeamId;
              }
              if (notSkillId) {
                localVarQueryParameter["not_skill_id"] = notSkillId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<number>} [agentId]
     * @param {string} [domainId]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics: function(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/agents/reports/call";
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (timeFrom !== void 0) {
                localVarQueryParameter["time.from"] = timeFrom;
              }
              if (timeTo !== void 0) {
                localVarQueryParameter["time.to"] = timeTo;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue: function(id, page, size, q, sort, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling searchAgentInQueue.");
              }
              localVarPath = "/call_center/agents/{id}/queues".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics: function(agentId, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling searchAgentInQueueStatistics.");
              }
              localVarPath = "/call_center/agents/{agent_id}/statistics/queues".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary todo deprecated ?
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam: function(id, page, size, q, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling searchAgentInTeam.");
              }
              localVarPath = "/call_center/agents/{id}/teams".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [agentId]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {string} [fromId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory: function(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/agents/states/history";
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (joinedAtFrom !== void 0) {
                localVarQueryParameter["joined_at.from"] = joinedAtFrom;
              }
              if (joinedAtTo !== void 0) {
                localVarQueryParameter["joined_at.to"] = joinedAtTo;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              if (fromId !== void 0) {
                localVarQueryParameter["from_id"] = fromId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [agentId]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<string>} [status]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {string} [utilizationFrom]
     * @param {string} [utilizationTo]
     * @param {boolean} [hasCall]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [supervisorId]
     * @param {Array<string>} [auditorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic: function(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/agents/reports/status";
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (timeFrom !== void 0) {
                localVarQueryParameter["time.from"] = timeFrom;
              }
              if (timeTo !== void 0) {
                localVarQueryParameter["time.to"] = timeTo;
              }
              if (status) {
                localVarQueryParameter["status"] = status;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (teamId) {
                localVarQueryParameter["team_id"] = teamId;
              }
              if (utilizationFrom !== void 0) {
                localVarQueryParameter["utilization.from"] = utilizationFrom;
              }
              if (utilizationTo !== void 0) {
                localVarQueryParameter["utilization.to"] = utilizationTo;
              }
              if (hasCall !== void 0) {
                localVarQueryParameter["has_call"] = hasCall;
              }
              if (skillId) {
                localVarQueryParameter["skill_id"] = skillId;
              }
              if (regionId) {
                localVarQueryParameter["region_id"] = regionId;
              }
              if (supervisorId) {
                localVarQueryParameter["supervisor_id"] = supervisorId;
              }
              if (auditorId) {
                localVarQueryParameter["auditor_id"] = auditorId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatisticItem: function(agentId, timeFrom, timeTo, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling searchAgentStatusStatisticItem.");
              }
              localVarPath = "/call_center/agents/reports/status/{agent_id}".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (timeFrom !== void 0) {
                localVarQueryParameter["time.from"] = timeFrom;
              }
              if (timeTo !== void 0) {
                localVarQueryParameter["time.to"] = timeTo;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists: function(page, size, q, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/lookups/agents/users";
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {boolean} [allowChange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseCauseForAgent: function(agentId, allowChange, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling searchPauseCauseForAgent.");
              }
              localVarPath = "/call_center/agents/{agent_id}/pause_causes".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (allowChange !== void 0) {
                localVarQueryParameter["allow_change"] = allowChange;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateAgent.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateAgent.");
              }
              localVarPath = "/call_center/agents/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateAgentStatus.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateAgentStatus.");
              }
              localVarPath = "/call_center/agents/{id}/status".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl2.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl2.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var AgentServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {number} agentId
     * @param {EngineAgentSetStateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentSetState: function(agentId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).agentSetState(agentId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory: function(agentId, page, size, timeFrom, timeTo, q, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).agentStateHistory(agentId, page, size, timeFrom, timeTo, q, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentTodayStatistics: function(agentId, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).agentTodayStatistics(agentId, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).createAgent(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).deleteAgent(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EnginePatchAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgent: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).patchAgent(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).readAgent(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [allowChannels]
     * @param {Array<number>} [supervisorId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [auditorId]
     * @param {boolean} [isSupervisor]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [queueId]
     * @param {boolean} [notSupervisor]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [extension]
     * @param {Array<number>} [notTeamId]
     * @param {Array<number>} [notSkillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent: function(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgent(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<number>} [agentId]
     * @param {string} [domainId]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics: function(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentCallStatistics(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue: function(id, page, size, q, sort, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentInQueue(id, page, size, q, sort, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics: function(agentId, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentInQueueStatistics(agentId, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary todo deprecated ?
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam: function(id, page, size, q, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentInTeam(id, page, size, q, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [agentId]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {string} [fromId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory: function(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentStateHistory(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [agentId]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<string>} [status]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {string} [utilizationFrom]
     * @param {string} [utilizationTo]
     * @param {boolean} [hasCall]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [supervisorId]
     * @param {Array<string>} [auditorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic: function(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentStatusStatistic(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatisticItem: function(agentId, timeFrom, timeTo, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchAgentStatusStatisticItem(agentId, timeFrom, timeTo, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists: function(page, size, q, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchLookupUsersAgentNotExists(page, size, q, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {boolean} [allowChange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseCauseForAgent: function(agentId, allowChange, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).searchPauseCauseForAgent(agentId, allowChange, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).updateAgent(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentServiceApiAxiosParamCreator(configuration).updateAgentStatus(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios3.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var AgentServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {number} agentId
     * @param {EngineAgentSetStateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentSetState: function(agentId, body, options) {
      return AgentServiceApiFp(configuration).agentSetState(agentId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentStateHistory: function(agentId, page, size, timeFrom, timeTo, q, domainId, options) {
      return AgentServiceApiFp(configuration).agentStateHistory(agentId, page, size, timeFrom, timeTo, q, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    agentTodayStatistics: function(agentId, fields, options) {
      return AgentServiceApiFp(configuration).agentTodayStatistics(agentId, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create Agent
     * @param {EngineCreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgent: function(body, options) {
      return AgentServiceApiFp(configuration).createAgent(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove Agent
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgent: function(id, domainId, options) {
      return AgentServiceApiFp(configuration).deleteAgent(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EnginePatchAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgent: function(id, body, options) {
      return AgentServiceApiFp(configuration).patchAgent(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Agent item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgent: function(id, domainId, options) {
      return AgentServiceApiFp(configuration).readAgent(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of Agent
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [allowChannels]
     * @param {Array<number>} [supervisorId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [auditorId]
     * @param {boolean} [isSupervisor]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [queueId]
     * @param {boolean} [notSupervisor]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [extension]
     * @param {Array<number>} [notTeamId]
     * @param {Array<number>} [notSkillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgent: function(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options) {
      return AgentServiceApiFp(configuration).searchAgent(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<number>} [agentId]
     * @param {string} [domainId]
     * @param {string} [q]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentCallStatistics: function(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options) {
      return AgentServiceApiFp(configuration).searchAgentCallStatistics(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueue: function(id, page, size, q, sort, fields, options) {
      return AgentServiceApiFp(configuration).searchAgentInQueue(id, page, size, q, sort, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInQueueStatistics: function(agentId, domainId, options) {
      return AgentServiceApiFp(configuration).searchAgentInQueueStatistics(agentId, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary todo deprecated ?
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentInTeam: function(id, page, size, q, domainId, options) {
      return AgentServiceApiFp(configuration).searchAgentInTeam(id, page, size, q, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [agentId]
     * @param {string} [sort]
     * @param {string} [domainId]
     * @param {string} [fromId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStateHistory: function(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options) {
      return AgentServiceApiFp(configuration).searchAgentStateHistory(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [agentId]
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {Array<string>} [status]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {string} [utilizationFrom]
     * @param {string} [utilizationTo]
     * @param {boolean} [hasCall]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [regionId]
     * @param {Array<number>} [supervisorId]
     * @param {Array<string>} [auditorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatistic: function(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options) {
      return AgentServiceApiFp(configuration).searchAgentStatusStatistic(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} [timeFrom]
     * @param {string} [timeTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentStatusStatisticItem: function(agentId, timeFrom, timeTo, options) {
      return AgentServiceApiFp(configuration).searchAgentStatusStatisticItem(agentId, timeFrom, timeTo, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsUser
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupUsersAgentNotExists: function(page, size, q, domainId, options) {
      return AgentServiceApiFp(configuration).searchLookupUsersAgentNotExists(page, size, q, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {boolean} [allowChange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPauseCauseForAgent: function(agentId, allowChange, options) {
      return AgentServiceApiFp(configuration).searchPauseCauseForAgent(agentId, allowChange, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update Agent
     * @param {string} id
     * @param {EngineUpdateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgent: function(id, body, options) {
      return AgentServiceApiFp(configuration).updateAgent(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Change agent status
     * @param {string} id
     * @param {EngineAgentStatusRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentStatus: function(id, body, options) {
      return AgentServiceApiFp(configuration).updateAgentStatus(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var AgentServiceApi = (
  /** @class */
  function(_super) {
    __extends(AgentServiceApi2, _super);
    function AgentServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AgentServiceApi2.prototype.agentSetState = function(agentId, body, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).agentSetState(agentId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.agentStateHistory = function(agentId, page, size, timeFrom, timeTo, q, domainId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).agentStateHistory(agentId, page, size, timeFrom, timeTo, q, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.agentTodayStatistics = function(agentId, fields, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).agentTodayStatistics(agentId, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.createAgent = function(body, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).createAgent(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.deleteAgent = function(id, domainId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).deleteAgent(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.patchAgent = function(id, body, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).patchAgent(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.readAgent = function(id, domainId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).readAgent(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgent = function(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgent(page, size, q, sort, fields, id, allowChannels, supervisorId, teamId, regionId, auditorId, isSupervisor, skillId, queueId, notSupervisor, userId, extension, notTeamId, notSkillId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentCallStatistics = function(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentCallStatistics(page, size, timeFrom, timeTo, agentId, domainId, q, fields, sort, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentInQueue = function(id, page, size, q, sort, fields, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentInQueue(id, page, size, q, sort, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentInQueueStatistics = function(agentId, domainId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentInQueueStatistics(agentId, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentInTeam = function(id, page, size, q, domainId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentInTeam(id, page, size, q, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentStateHistory = function(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentStateHistory(page, size, joinedAtFrom, joinedAtTo, agentId, sort, domainId, fromId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentStatusStatistic = function(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentStatusStatistic(page, size, q, sort, fields, agentId, timeFrom, timeTo, status, queueId, teamId, utilizationFrom, utilizationTo, hasCall, skillId, regionId, supervisorId, auditorId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchAgentStatusStatisticItem = function(agentId, timeFrom, timeTo, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchAgentStatusStatisticItem(agentId, timeFrom, timeTo, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchLookupUsersAgentNotExists = function(page, size, q, domainId, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchLookupUsersAgentNotExists(page, size, q, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.searchPauseCauseForAgent = function(agentId, allowChange, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).searchPauseCauseForAgent(agentId, allowChange, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.updateAgent = function(id, body, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).updateAgent(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentServiceApi2.prototype.updateAgentStatus = function(id, body, options) {
      var _this = this;
      return AgentServiceApiFp(this.configuration).updateAgentStatus(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return AgentServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/agent-skill-service-api.js
var globalImportUrl3 = __toESM(require_url());
var import_axios4 = __toESM(require_axios2());
var AgentSkillServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agentId
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill: function(agentId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling createAgentSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAgentSkill.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {EngineCreateAgentSkillsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkills: function(agentId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling createAgentSkills.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAgentSkills.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills/bulk".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill: function(agentId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling deleteAgentSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteAgentSkill.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills/{id}".replace("{agent_id}", encodeURIComponent(String(agentId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [id]
     * @param {Array<string>} [skillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkills: function(agentId, id, skillId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling deleteAgentSkills.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (skillId) {
                localVarQueryParameter["skill_id"] = skillId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} id
     * @param {EnginePatchAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentSkill: function(agentId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling patchAgentSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchAgentSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchAgentSkill.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills/{id}".replace("{agent_id}", encodeURIComponent(String(agentId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {EnginePatchAgentSkillsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentSkills: function(agentId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling patchAgentSkills.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchAgentSkills.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill: function(agentId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling readAgentSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readAgentSkill.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills/{id}".replace("{agent_id}", encodeURIComponent(String(agentId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [skillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill: function(agentId, page, size, q, sort, fields, id, skillId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling searchAgentSkill.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (skillId) {
                localVarQueryParameter["skill_id"] = skillId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsSkill
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupAgentNotExistsSkill: function(agentId, page, size, q, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling searchLookupAgentNotExistsSkill.");
              }
              localVarPath = "/call_center/lookups/agents/skills/{agent_id}".replace("{agent_id}", encodeURIComponent(String(agentId)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill: function(agentId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (agentId === null || agentId === void 0) {
                throw new RequiredError("agentId", "Required parameter agentId was null or undefined when calling updateAgentSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateAgentSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateAgentSkill.");
              }
              localVarPath = "/call_center/agents/{agent_id}/skills/{id}".replace("{agent_id}", encodeURIComponent(String(agentId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl3.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl3.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var AgentSkillServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agentId
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill: function(agentId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).createAgentSkill(agentId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {EngineCreateAgentSkillsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkills: function(agentId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).createAgentSkills(agentId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill: function(agentId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).deleteAgentSkill(agentId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [id]
     * @param {Array<string>} [skillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkills: function(agentId, id, skillId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).deleteAgentSkills(agentId, id, skillId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} id
     * @param {EnginePatchAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentSkill: function(agentId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).patchAgentSkill(agentId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {EnginePatchAgentSkillsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentSkills: function(agentId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).patchAgentSkills(agentId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill: function(agentId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).readAgentSkill(agentId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [skillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill: function(agentId, page, size, q, sort, fields, id, skillId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).searchAgentSkill(agentId, page, size, q, sort, fields, id, skillId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsSkill
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupAgentNotExistsSkill: function(agentId, page, size, q, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).searchLookupAgentNotExistsSkill(agentId, page, size, q, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill: function(agentId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentSkillServiceApiAxiosParamCreator(configuration).updateAgentSkill(agentId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios4.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var AgentSkillServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create AgentSkill
     * @param {string} agentId
     * @param {EngineCreateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkill: function(agentId, body, options) {
      return AgentSkillServiceApiFp(configuration).createAgentSkill(agentId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {EngineCreateAgentSkillsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentSkills: function(agentId, body, options) {
      return AgentSkillServiceApiFp(configuration).createAgentSkills(agentId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkill: function(agentId, id, domainId, options) {
      return AgentSkillServiceApiFp(configuration).deleteAgentSkill(agentId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {Array<string>} [id]
     * @param {Array<string>} [skillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentSkills: function(agentId, id, skillId, options) {
      return AgentSkillServiceApiFp(configuration).deleteAgentSkills(agentId, id, skillId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {string} id
     * @param {EnginePatchAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentSkill: function(agentId, id, body, options) {
      return AgentSkillServiceApiFp(configuration).patchAgentSkill(agentId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} agentId
     * @param {EnginePatchAgentSkillsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAgentSkills: function(agentId, body, options) {
      return AgentSkillServiceApiFp(configuration).patchAgentSkills(agentId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary AgentSkill item
     * @param {string} agentId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentSkill: function(agentId, id, domainId, options) {
      return AgentSkillServiceApiFp(configuration).readAgentSkill(agentId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of AgentSkill
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [skillId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentSkill: function(agentId, page, size, q, sort, fields, id, skillId, options) {
      return AgentSkillServiceApiFp(configuration).searchAgentSkill(agentId, page, size, q, sort, fields, id, skillId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchLookupAgentNotExistsSkill
     * @param {string} agentId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLookupAgentNotExistsSkill: function(agentId, page, size, q, domainId, options) {
      return AgentSkillServiceApiFp(configuration).searchLookupAgentNotExistsSkill(agentId, page, size, q, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update AgentSkill
     * @param {string} agentId
     * @param {string} id
     * @param {EngineUpdateAgentSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentSkill: function(agentId, id, body, options) {
      return AgentSkillServiceApiFp(configuration).updateAgentSkill(agentId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var AgentSkillServiceApi = (
  /** @class */
  function(_super) {
    __extends(AgentSkillServiceApi2, _super);
    function AgentSkillServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AgentSkillServiceApi2.prototype.createAgentSkill = function(agentId, body, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).createAgentSkill(agentId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.createAgentSkills = function(agentId, body, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).createAgentSkills(agentId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.deleteAgentSkill = function(agentId, id, domainId, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).deleteAgentSkill(agentId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.deleteAgentSkills = function(agentId, id, skillId, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).deleteAgentSkills(agentId, id, skillId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.patchAgentSkill = function(agentId, id, body, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).patchAgentSkill(agentId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.patchAgentSkills = function(agentId, body, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).patchAgentSkills(agentId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.readAgentSkill = function(agentId, id, domainId, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).readAgentSkill(agentId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.searchAgentSkill = function(agentId, page, size, q, sort, fields, id, skillId, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).searchAgentSkill(agentId, page, size, q, sort, fields, id, skillId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.searchLookupAgentNotExistsSkill = function(agentId, page, size, q, domainId, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).searchLookupAgentNotExistsSkill(agentId, page, size, q, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentSkillServiceApi2.prototype.updateAgentSkill = function(agentId, id, body, options) {
      var _this = this;
      return AgentSkillServiceApiFp(this.configuration).updateAgentSkill(agentId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return AgentSkillServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/agent-team-service-api.js
var globalImportUrl4 = __toESM(require_url());
var import_axios5 = __toESM(require_axios2());
var AgentTeamServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAgentTeam.");
              }
              localVarPath = "/call_center/teams";
              localVarUrlObj = globalImportUrl4.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl4.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteAgentTeam.");
              }
              localVarPath = "/call_center/teams/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl4.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl4.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readAgentTeam.");
              }
              localVarPath = "/call_center/teams/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl4.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl4.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<string>} [strategy]
     * @param {Array<number>} [adminId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam: function(page, size, q, sort, fields, id, strategy, adminId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/teams";
              localVarUrlObj = globalImportUrl4.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (strategy) {
                localVarQueryParameter["strategy"] = strategy;
              }
              if (adminId) {
                localVarQueryParameter["admin_id"] = adminId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl4.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateAgentTeam.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateAgentTeam.");
              }
              localVarPath = "/call_center/teams/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl4.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl4.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var AgentTeamServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentTeamServiceApiAxiosParamCreator(configuration).createAgentTeam(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios5.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentTeamServiceApiAxiosParamCreator(configuration).deleteAgentTeam(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios5.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentTeamServiceApiAxiosParamCreator(configuration).readAgentTeam(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios5.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<string>} [strategy]
     * @param {Array<number>} [adminId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam: function(page, size, q, sort, fields, id, strategy, adminId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentTeamServiceApiAxiosParamCreator(configuration).searchAgentTeam(page, size, q, sort, fields, id, strategy, adminId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios5.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AgentTeamServiceApiAxiosParamCreator(configuration).updateAgentTeam(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios5.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var AgentTeamServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create AgentTeam
     * @param {EngineCreateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAgentTeam: function(body, options) {
      return AgentTeamServiceApiFp(configuration).createAgentTeam(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove AgentTeam
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAgentTeam: function(id, domainId, options) {
      return AgentTeamServiceApiFp(configuration).deleteAgentTeam(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary AgentTeam item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAgentTeam: function(id, domainId, options) {
      return AgentTeamServiceApiFp(configuration).readAgentTeam(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of AgentTeam
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<string>} [strategy]
     * @param {Array<number>} [adminId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAgentTeam: function(page, size, q, sort, fields, id, strategy, adminId, options) {
      return AgentTeamServiceApiFp(configuration).searchAgentTeam(page, size, q, sort, fields, id, strategy, adminId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update AgentTeam
     * @param {string} id
     * @param {EngineUpdateAgentTeamRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAgentTeam: function(id, body, options) {
      return AgentTeamServiceApiFp(configuration).updateAgentTeam(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var AgentTeamServiceApi = (
  /** @class */
  function(_super) {
    __extends(AgentTeamServiceApi2, _super);
    function AgentTeamServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AgentTeamServiceApi2.prototype.createAgentTeam = function(body, options) {
      var _this = this;
      return AgentTeamServiceApiFp(this.configuration).createAgentTeam(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentTeamServiceApi2.prototype.deleteAgentTeam = function(id, domainId, options) {
      var _this = this;
      return AgentTeamServiceApiFp(this.configuration).deleteAgentTeam(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentTeamServiceApi2.prototype.readAgentTeam = function(id, domainId, options) {
      var _this = this;
      return AgentTeamServiceApiFp(this.configuration).readAgentTeam(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentTeamServiceApi2.prototype.searchAgentTeam = function(page, size, q, sort, fields, id, strategy, adminId, options) {
      var _this = this;
      return AgentTeamServiceApiFp(this.configuration).searchAgentTeam(page, size, q, sort, fields, id, strategy, adminId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AgentTeamServiceApi2.prototype.updateAgentTeam = function(id, body, options) {
      var _this = this;
      return AgentTeamServiceApiFp(this.configuration).updateAgentTeam(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return AgentTeamServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/audit-form-service-api.js
var globalImportUrl5 = __toESM(require_url());
var import_axios6 = __toESM(require_axios2());
var AuditFormServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {EngineCreateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditForm: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAuditForm.");
              }
              localVarPath = "/call_center/audit/forms";
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {EngineCreateAuditFormRateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditFormRate: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAuditFormRate.");
              }
              localVarPath = "/call_center/audit/rate";
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditForm: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteAuditForm.");
              }
              localVarPath = "/call_center/audit/forms/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAuditForm: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchAuditForm.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchAuditForm.");
              }
              localVarPath = "/call_center/audit/forms/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditForm: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readAuditForm.");
              }
              localVarPath = "/call_center/audit/forms/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditRate: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readAuditRate.");
              }
              localVarPath = "/call_center/audit/rate/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [teamId]
     * @param {boolean} [enabled]
     * @param {boolean} [archive]
     * @param {boolean} [editable]
     * @param {boolean} [active]
     * @param {string} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditForm: function(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/audit/forms";
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (teamId) {
                localVarQueryParameter["team_id"] = teamId;
              }
              if (enabled !== void 0) {
                localVarQueryParameter["enabled"] = enabled;
              }
              if (archive !== void 0) {
                localVarQueryParameter["archive"] = archive;
              }
              if (editable !== void 0) {
                localVarQueryParameter["editable"] = editable;
              }
              if (active !== void 0) {
                localVarQueryParameter["active"] = active;
              }
              if (question !== void 0) {
                localVarQueryParameter["question"] = question;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} formId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<number>} [id]
     * @param {Array<string>} [callId]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditRate: function(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (formId === null || formId === void 0) {
                throw new RequiredError("formId", "Required parameter formId was null or undefined when calling searchAuditRate.");
              }
              localVarPath = "/call_center/audit/forms/{form_id}/rate".replace("{form_id}", encodeURIComponent(String(formId)));
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (createdAtFrom !== void 0) {
                localVarQueryParameter["created_at.from"] = createdAtFrom;
              }
              if (createdAtTo !== void 0) {
                localVarQueryParameter["created_at.to"] = createdAtTo;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (callId) {
                localVarQueryParameter["call_id"] = callId;
              }
              if (ratedUser) {
                localVarQueryParameter["rated_user"] = ratedUser;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditForm: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateAuditForm.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateAuditForm.");
              }
              localVarPath = "/call_center/audit/forms/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl5.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl5.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var AuditFormServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {EngineCreateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditForm: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).createAuditForm(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {EngineCreateAuditFormRateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditFormRate: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).createAuditFormRate(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditForm: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).deleteAuditForm(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAuditForm: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).patchAuditForm(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditForm: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).readAuditForm(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditRate: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).readAuditRate(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [teamId]
     * @param {boolean} [enabled]
     * @param {boolean} [archive]
     * @param {boolean} [editable]
     * @param {boolean} [active]
     * @param {string} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditForm: function(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).searchAuditForm(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} formId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<number>} [id]
     * @param {Array<string>} [callId]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditRate: function(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).searchAuditRate(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditForm: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, AuditFormServiceApiAxiosParamCreator(configuration).updateAuditForm(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios6.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var AuditFormServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {EngineCreateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditForm: function(body, options) {
      return AuditFormServiceApiFp(configuration).createAuditForm(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {EngineCreateAuditFormRateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditFormRate: function(body, options) {
      return AuditFormServiceApiFp(configuration).createAuditFormRate(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuditForm: function(id, options) {
      return AuditFormServiceApiFp(configuration).deleteAuditForm(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchAuditForm: function(id, body, options) {
      return AuditFormServiceApiFp(configuration).patchAuditForm(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditForm: function(id, options) {
      return AuditFormServiceApiFp(configuration).readAuditForm(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAuditRate: function(id, options) {
      return AuditFormServiceApiFp(configuration).readAuditRate(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [teamId]
     * @param {boolean} [enabled]
     * @param {boolean} [archive]
     * @param {boolean} [editable]
     * @param {boolean} [active]
     * @param {string} [question]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditForm: function(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options) {
      return AuditFormServiceApiFp(configuration).searchAuditForm(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} formId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<number>} [id]
     * @param {Array<string>} [callId]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAuditRate: function(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options) {
      return AuditFormServiceApiFp(configuration).searchAuditRate(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateAuditFormRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuditForm: function(id, body, options) {
      return AuditFormServiceApiFp(configuration).updateAuditForm(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var AuditFormServiceApi = (
  /** @class */
  function(_super) {
    __extends(AuditFormServiceApi2, _super);
    function AuditFormServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    AuditFormServiceApi2.prototype.createAuditForm = function(body, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).createAuditForm(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.createAuditFormRate = function(body, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).createAuditFormRate(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.deleteAuditForm = function(id, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).deleteAuditForm(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.patchAuditForm = function(id, body, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).patchAuditForm(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.readAuditForm = function(id, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).readAuditForm(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.readAuditRate = function(id, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).readAuditRate(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.searchAuditForm = function(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).searchAuditForm(page, size, q, sort, fields, id, teamId, enabled, archive, editable, active, question, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.searchAuditRate = function(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).searchAuditRate(formId, page, size, q, sort, fields, createdAtFrom, createdAtTo, id, callId, ratedUser, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    AuditFormServiceApi2.prototype.updateAuditForm = function(id, body, options) {
      var _this = this;
      return AuditFormServiceApiFp(this.configuration).updateAuditForm(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return AuditFormServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/backend-profile-service-api.js
var globalImportUrl6 = __toESM(require_url());
var import_axios7 = __toESM(require_axios2());
var BackendProfileServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackendProfile: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createBackendProfile.");
              }
              localVarPath = "/storage/backend_profiles";
              localVarUrlObj = globalImportUrl6.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl6.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBackendProfile: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteBackendProfile.");
              }
              localVarPath = "/storage/backend_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl6.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl6.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchBackendProfile: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchBackendProfile.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchBackendProfile.");
              }
              localVarPath = "/storage/backend_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl6.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl6.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBackendProfile: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readBackendProfile.");
              }
              localVarPath = "/storage/backend_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl6.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl6.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBackendProfile: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/storage/backend_profiles";
              localVarUrlObj = globalImportUrl6.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl6.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBackendProfile: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateBackendProfile.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateBackendProfile.");
              }
              localVarPath = "/storage/backend_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl6.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl6.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var BackendProfileServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackendProfile: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BackendProfileServiceApiAxiosParamCreator(configuration).createBackendProfile(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios7.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBackendProfile: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BackendProfileServiceApiAxiosParamCreator(configuration).deleteBackendProfile(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios7.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchBackendProfile: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BackendProfileServiceApiAxiosParamCreator(configuration).patchBackendProfile(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios7.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBackendProfile: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BackendProfileServiceApiAxiosParamCreator(configuration).readBackendProfile(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios7.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBackendProfile: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BackendProfileServiceApiAxiosParamCreator(configuration).searchBackendProfile(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios7.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBackendProfile: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BackendProfileServiceApiAxiosParamCreator(configuration).updateBackendProfile(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios7.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var BackendProfileServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create BackendProfile
     * @param {StorageCreateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackendProfile: function(body, options) {
      return BackendProfileServiceApiFp(configuration).createBackendProfile(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBackendProfile: function(id, domainId, options) {
      return BackendProfileServiceApiFp(configuration).deleteBackendProfile(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Patch BackendProfile
     * @param {string} id
     * @param {StoragePatchBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchBackendProfile: function(id, body, options) {
      return BackendProfileServiceApiFp(configuration).patchBackendProfile(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary BackendProfile item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBackendProfile: function(id, domainId, options) {
      return BackendProfileServiceApiFp(configuration).readBackendProfile(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of BackendProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBackendProfile: function(page, size, q, sort, fields, id, options) {
      return BackendProfileServiceApiFp(configuration).searchBackendProfile(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update BackendProfile
     * @param {string} id
     * @param {StorageUpdateBackendProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBackendProfile: function(id, body, options) {
      return BackendProfileServiceApiFp(configuration).updateBackendProfile(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var BackendProfileServiceApi = (
  /** @class */
  function(_super) {
    __extends(BackendProfileServiceApi2, _super);
    function BackendProfileServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    BackendProfileServiceApi2.prototype.createBackendProfile = function(body, options) {
      var _this = this;
      return BackendProfileServiceApiFp(this.configuration).createBackendProfile(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BackendProfileServiceApi2.prototype.deleteBackendProfile = function(id, domainId, options) {
      var _this = this;
      return BackendProfileServiceApiFp(this.configuration).deleteBackendProfile(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BackendProfileServiceApi2.prototype.patchBackendProfile = function(id, body, options) {
      var _this = this;
      return BackendProfileServiceApiFp(this.configuration).patchBackendProfile(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BackendProfileServiceApi2.prototype.readBackendProfile = function(id, domainId, options) {
      var _this = this;
      return BackendProfileServiceApiFp(this.configuration).readBackendProfile(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BackendProfileServiceApi2.prototype.searchBackendProfile = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return BackendProfileServiceApiFp(this.configuration).searchBackendProfile(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BackendProfileServiceApi2.prototype.updateBackendProfile = function(id, body, options) {
      var _this = this;
      return BackendProfileServiceApiFp(this.configuration).updateBackendProfile(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return BackendProfileServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/bucket-service-api.js
var globalImportUrl7 = __toESM(require_url());
var import_axios8 = __toESM(require_axios2());
var BucketServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBucket: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createBucket.");
              }
              localVarPath = "/call_center/buckets";
              localVarUrlObj = globalImportUrl7.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl7.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBucket: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteBucket.");
              }
              localVarPath = "/call_center/buckets/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl7.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl7.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBucket: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readBucket.");
              }
              localVarPath = "/call_center/buckets/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl7.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl7.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBucket: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/buckets";
              localVarUrlObj = globalImportUrl7.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl7.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBucket: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateBucket.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateBucket.");
              }
              localVarPath = "/call_center/buckets/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl7.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl7.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var BucketServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBucket: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BucketServiceApiAxiosParamCreator(configuration).createBucket(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios8.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBucket: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BucketServiceApiAxiosParamCreator(configuration).deleteBucket(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios8.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBucket: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BucketServiceApiAxiosParamCreator(configuration).readBucket(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios8.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBucket: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BucketServiceApiAxiosParamCreator(configuration).searchBucket(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios8.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBucket: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, BucketServiceApiAxiosParamCreator(configuration).updateBucket(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios8.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var BucketServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Bucket
     * @param {EngineCreateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBucket: function(body, options) {
      return BucketServiceApiFp(configuration).createBucket(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove Bucket
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBucket: function(id, domainId, options) {
      return BucketServiceApiFp(configuration).deleteBucket(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Bucket item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readBucket: function(id, domainId, options) {
      return BucketServiceApiFp(configuration).readBucket(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of Bucket
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBucket: function(page, size, q, sort, fields, id, options) {
      return BucketServiceApiFp(configuration).searchBucket(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update Bucket
     * @param {string} id
     * @param {EngineUpdateBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBucket: function(id, body, options) {
      return BucketServiceApiFp(configuration).updateBucket(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var BucketServiceApi = (
  /** @class */
  function(_super) {
    __extends(BucketServiceApi2, _super);
    function BucketServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    BucketServiceApi2.prototype.createBucket = function(body, options) {
      var _this = this;
      return BucketServiceApiFp(this.configuration).createBucket(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BucketServiceApi2.prototype.deleteBucket = function(id, domainId, options) {
      var _this = this;
      return BucketServiceApiFp(this.configuration).deleteBucket(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BucketServiceApi2.prototype.readBucket = function(id, domainId, options) {
      var _this = this;
      return BucketServiceApiFp(this.configuration).readBucket(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BucketServiceApi2.prototype.searchBucket = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return BucketServiceApiFp(this.configuration).searchBucket(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    BucketServiceApi2.prototype.updateBucket = function(id, body, options) {
      var _this = this;
      return BucketServiceApiFp(this.configuration).updateBucket(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return BucketServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/calendar-service-api.js
var globalImportUrl8 = __toESM(require_url());
var import_axios9 = __toESM(require_axios2());
var CalendarServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createCalendar.");
              }
              localVarPath = "/calendars";
              localVarUrlObj = globalImportUrl8.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl8.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteCalendar.");
              }
              localVarPath = "/calendars/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl8.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl8.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readCalendar.");
              }
              localVarPath = "/calendars/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl8.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl8.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/calendars";
              localVarUrlObj = globalImportUrl8.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl8.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones: function(page, size, q, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/calendars/timezones";
              localVarUrlObj = globalImportUrl8.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl8.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateCalendar.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateCalendar.");
              }
              localVarPath = "/calendars/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl8.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl8.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var CalendarServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CalendarServiceApiAxiosParamCreator(configuration).createCalendar(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios9.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CalendarServiceApiAxiosParamCreator(configuration).deleteCalendar(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios9.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CalendarServiceApiAxiosParamCreator(configuration).readCalendar(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios9.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CalendarServiceApiAxiosParamCreator(configuration).searchCalendar(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios9.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones: function(page, size, q, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CalendarServiceApiAxiosParamCreator(configuration).searchTimezones(page, size, q, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios9.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CalendarServiceApiAxiosParamCreator(configuration).updateCalendar(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios9.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var CalendarServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create calendar
     * @param {EngineCreateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCalendar: function(body, options) {
      return CalendarServiceApiFp(configuration).createCalendar(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove calendar
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCalendar: function(id, domainId, options) {
      return CalendarServiceApiFp(configuration).deleteCalendar(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Calendar item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCalendar: function(id, domainId, options) {
      return CalendarServiceApiFp(configuration).readCalendar(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of calendar
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCalendar: function(page, size, q, sort, fields, id, options) {
      return CalendarServiceApiFp(configuration).searchCalendar(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List timezones
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTimezones: function(page, size, q, options) {
      return CalendarServiceApiFp(configuration).searchTimezones(page, size, q, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update calendar
     * @param {string} id
     * @param {EngineUpdateCalendarRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCalendar: function(id, body, options) {
      return CalendarServiceApiFp(configuration).updateCalendar(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var CalendarServiceApi = (
  /** @class */
  function(_super) {
    __extends(CalendarServiceApi2, _super);
    function CalendarServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarServiceApi2.prototype.createCalendar = function(body, options) {
      var _this = this;
      return CalendarServiceApiFp(this.configuration).createCalendar(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CalendarServiceApi2.prototype.deleteCalendar = function(id, domainId, options) {
      var _this = this;
      return CalendarServiceApiFp(this.configuration).deleteCalendar(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CalendarServiceApi2.prototype.readCalendar = function(id, domainId, options) {
      var _this = this;
      return CalendarServiceApiFp(this.configuration).readCalendar(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CalendarServiceApi2.prototype.searchCalendar = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return CalendarServiceApiFp(this.configuration).searchCalendar(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CalendarServiceApi2.prototype.searchTimezones = function(page, size, q, options) {
      var _this = this;
      return CalendarServiceApiFp(this.configuration).searchTimezones(page, size, q, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CalendarServiceApi2.prototype.updateCalendar = function(id, body, options) {
      var _this = this;
      return CalendarServiceApiFp(this.configuration).updateCalendar(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return CalendarServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/call-service-api.js
var globalImportUrl9 = __toESM(require_url());
var import_axios10 = __toESM(require_axios2());
var CallServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {EngineAggregateHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateHistoryCall: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling aggregateHistoryCall.");
              }
              localVarPath = "/calls/history/aggregate";
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineBlindTransferCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blindTransferCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling blindTransferCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling blindTransferCall.");
              }
              localVarPath = "/calls/active/{id}/transfer".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmPush: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling confirmPush.");
              }
              localVarPath = "/calls/active/{id}/confirm_push".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {EngineCreateCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCall: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createCall.");
              }
              localVarPath = "/calls";
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} callId
     * @param {EngineCreateCallAnnotationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCallAnnotation: function(callId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (callId === null || callId === void 0) {
                throw new RequiredError("callId", "Required parameter callId was null or undefined when calling createCallAnnotation.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createCallAnnotation.");
              }
              localVarPath = "/calls/history/{call_id}/annotation".replace("{call_id}", encodeURIComponent(String(callId)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} callId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCallAnnotation: function(callId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (callId === null || callId === void 0) {
                throw new RequiredError("callId", "Required parameter callId was null or undefined when calling deleteCallAnnotation.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteCallAnnotation.");
              }
              localVarPath = "/calls/history/{call_id}/annotation/{id}".replace("{call_id}", encodeURIComponent(String(callId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineDtmfCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dtmfCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling dtmfCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling dtmfCall.");
              }
              localVarPath = "/calls/active/{id}/dtmf".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineEavesdropCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eavesdropCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling eavesdropCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling eavesdropCall.");
              }
              localVarPath = "/calls/active/{id}/eavesdrop".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineHangupCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hangupCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling hangupCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling hangupCall.");
              }
              localVarPath = "/calls/active/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    holdCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling holdCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling holdCall.");
              }
              localVarPath = "/calls/active/{id}/hold".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchHistoryCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchHistoryCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchHistoryCall.");
              }
              localVarPath = "/calls/history/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCall: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readCall.");
              }
              localVarPath = "/calls/active/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [gatewayId]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {boolean} [skipParent]
     * @param {string} [parentId]
     * @param {Array<string>} [cause]
     * @param {boolean} [existsFile]
     * @param {string} [domainId]
     * @param {string} [number]
     * @param {Array<string>} [direction]
     * @param {string} [answeredAtFrom]
     * @param {string} [answeredAtTo]
     * @param {boolean} [missed]
     * @param {string} [storedAtFrom]
     * @param {string} [storedAtTo]
     * @param {Array<string>} [supervisorId]
     * @param {Array<string>} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchActiveCall: function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/calls/active";
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (createdAtFrom !== void 0) {
                localVarQueryParameter["created_at.from"] = createdAtFrom;
              }
              if (createdAtTo !== void 0) {
                localVarQueryParameter["created_at.to"] = createdAtTo;
              }
              if (userId) {
                localVarQueryParameter["user_id"] = userId;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (teamId) {
                localVarQueryParameter["team_id"] = teamId;
              }
              if (memberId) {
                localVarQueryParameter["member_id"] = memberId;
              }
              if (gatewayId) {
                localVarQueryParameter["gateway_id"] = gatewayId;
              }
              if (durationFrom !== void 0) {
                localVarQueryParameter["duration.from"] = durationFrom;
              }
              if (durationTo !== void 0) {
                localVarQueryParameter["duration.to"] = durationTo;
              }
              if (skipParent !== void 0) {
                localVarQueryParameter["skip_parent"] = skipParent;
              }
              if (parentId !== void 0) {
                localVarQueryParameter["parent_id"] = parentId;
              }
              if (cause) {
                localVarQueryParameter["cause"] = cause;
              }
              if (existsFile !== void 0) {
                localVarQueryParameter["exists_file"] = existsFile;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              if (number !== void 0) {
                localVarQueryParameter["number"] = number;
              }
              if (direction) {
                localVarQueryParameter["direction"] = direction;
              }
              if (answeredAtFrom !== void 0) {
                localVarQueryParameter["answered_at.from"] = answeredAtFrom;
              }
              if (answeredAtTo !== void 0) {
                localVarQueryParameter["answered_at.to"] = answeredAtTo;
              }
              if (missed !== void 0) {
                localVarQueryParameter["missed"] = missed;
              }
              if (storedAtFrom !== void 0) {
                localVarQueryParameter["stored_at.from"] = storedAtFrom;
              }
              if (storedAtTo !== void 0) {
                localVarQueryParameter["stored_at.to"] = storedAtTo;
              }
              if (supervisorId) {
                localVarQueryParameter["supervisor_id"] = supervisorId;
              }
              if (state) {
                localVarQueryParameter["state"] = state;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of call
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [gatewayId]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {boolean} [skipParent]
     * @param {string} [parentId]
     * @param {Array<string>} [cause]
     * @param {'undefined' | 'true' | 'false'} [hasFile]
     * @param {string} [domainId]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answeredAtFrom]
     * @param {string} [answeredAtTo]
     * @param {boolean} [missed]
     * @param {string} [storedAtFrom]
     * @param {string} [storedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [transferFrom]
     * @param {Array<string>} [transferTo]
     * @param {string} [dependencyId]
     * @param {Array<string>} [tags]
     * @param {Array<string>} [amdResult]
     * @param {string} [fts]
     * @param {Array<string>} [directions]
     * @param {'undefined' | 'true' | 'false'} [hasTranscript]
     * @param {string} [agentDescription]
     * @param {Array<string>} [ownerId]
     * @param {Array<string>} [granteeId]
     * @param {Array<string>} [amdAiResult]
     * @param {string} [talkFrom]
     * @param {string} [talkTo]
     * @param {'undefined' | 'true' | 'false'} [rated]
     * @param {Array<string>} [ratedBy]
     * @param {string} [scoreRequiredFrom]
     * @param {string} [scoreRequiredTo]
     * @param {string} [scoreOptionalFrom]
     * @param {string} [scoreOptionalTo]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCall: function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/calls/history";
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (createdAtFrom !== void 0) {
                localVarQueryParameter["created_at.from"] = createdAtFrom;
              }
              if (createdAtTo !== void 0) {
                localVarQueryParameter["created_at.to"] = createdAtTo;
              }
              if (userId) {
                localVarQueryParameter["user_id"] = userId;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (teamId) {
                localVarQueryParameter["team_id"] = teamId;
              }
              if (memberId) {
                localVarQueryParameter["member_id"] = memberId;
              }
              if (gatewayId) {
                localVarQueryParameter["gateway_id"] = gatewayId;
              }
              if (durationFrom !== void 0) {
                localVarQueryParameter["duration.from"] = durationFrom;
              }
              if (durationTo !== void 0) {
                localVarQueryParameter["duration.to"] = durationTo;
              }
              if (skipParent !== void 0) {
                localVarQueryParameter["skip_parent"] = skipParent;
              }
              if (parentId !== void 0) {
                localVarQueryParameter["parent_id"] = parentId;
              }
              if (cause) {
                localVarQueryParameter["cause"] = cause;
              }
              if (hasFile !== void 0) {
                localVarQueryParameter["has_file"] = hasFile;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              if (number !== void 0) {
                localVarQueryParameter["number"] = number;
              }
              if (direction !== void 0) {
                localVarQueryParameter["direction"] = direction;
              }
              if (answeredAtFrom !== void 0) {
                localVarQueryParameter["answered_at.from"] = answeredAtFrom;
              }
              if (answeredAtTo !== void 0) {
                localVarQueryParameter["answered_at.to"] = answeredAtTo;
              }
              if (missed !== void 0) {
                localVarQueryParameter["missed"] = missed;
              }
              if (storedAtFrom !== void 0) {
                localVarQueryParameter["stored_at.from"] = storedAtFrom;
              }
              if (storedAtTo !== void 0) {
                localVarQueryParameter["stored_at.to"] = storedAtTo;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (transferFrom) {
                localVarQueryParameter["transfer_from"] = transferFrom;
              }
              if (transferTo) {
                localVarQueryParameter["transfer_to"] = transferTo;
              }
              if (dependencyId !== void 0) {
                localVarQueryParameter["dependency_id"] = dependencyId;
              }
              if (tags) {
                localVarQueryParameter["tags"] = tags;
              }
              if (amdResult) {
                localVarQueryParameter["amd_result"] = amdResult;
              }
              if (fts !== void 0) {
                localVarQueryParameter["fts"] = fts;
              }
              if (directions) {
                localVarQueryParameter["directions"] = directions;
              }
              if (hasTranscript !== void 0) {
                localVarQueryParameter["has_transcript"] = hasTranscript;
              }
              if (agentDescription !== void 0) {
                localVarQueryParameter["agent_description"] = agentDescription;
              }
              if (ownerId) {
                localVarQueryParameter["owner_id"] = ownerId;
              }
              if (granteeId) {
                localVarQueryParameter["grantee_id"] = granteeId;
              }
              if (amdAiResult) {
                localVarQueryParameter["amd_ai_result"] = amdAiResult;
              }
              if (talkFrom !== void 0) {
                localVarQueryParameter["talk.from"] = talkFrom;
              }
              if (talkTo !== void 0) {
                localVarQueryParameter["talk.to"] = talkTo;
              }
              if (rated !== void 0) {
                localVarQueryParameter["rated"] = rated;
              }
              if (ratedBy) {
                localVarQueryParameter["rated_by"] = ratedBy;
              }
              if (scoreRequiredFrom !== void 0) {
                localVarQueryParameter["score_required.from"] = scoreRequiredFrom;
              }
              if (scoreRequiredTo !== void 0) {
                localVarQueryParameter["score_required.to"] = scoreRequiredTo;
              }
              if (scoreOptionalFrom !== void 0) {
                localVarQueryParameter["score_optional.from"] = scoreOptionalFrom;
              }
              if (scoreOptionalTo !== void 0) {
                localVarQueryParameter["score_optional.to"] = scoreOptionalTo;
              }
              if (ratedUser) {
                localVarQueryParameter["rated_user"] = ratedUser;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of call
     * @param {EngineSearchHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCallPost: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling searchHistoryCallPost.");
              }
              localVarPath = "/calls/history";
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineSetVariablesCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVariablesCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling setVariablesCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling setVariablesCall.");
              }
              localVarPath = "/calls/active/{id}/variables".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unHoldCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling unHoldCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling unHoldCall.");
              }
              localVarPath = "/calls/active/{id}/unhold".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} callId
     * @param {string} id
     * @param {EngineUpdateCallAnnotationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCallAnnotation: function(callId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (callId === null || callId === void 0) {
                throw new RequiredError("callId", "Required parameter callId was null or undefined when calling updateCallAnnotation.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateCallAnnotation.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateCallAnnotation.");
              }
              localVarPath = "/calls/history/{call_id}/annotation/{id}".replace("{call_id}", encodeURIComponent(String(callId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl9.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl9.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var CallServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {EngineAggregateHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateHistoryCall: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).aggregateHistoryCall(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineBlindTransferCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blindTransferCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).blindTransferCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmPush: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).confirmPush(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {EngineCreateCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCall: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).createCall(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} callId
     * @param {EngineCreateCallAnnotationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCallAnnotation: function(callId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).createCallAnnotation(callId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} callId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCallAnnotation: function(callId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).deleteCallAnnotation(callId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineDtmfCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dtmfCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).dtmfCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineEavesdropCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eavesdropCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).eavesdropCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineHangupCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hangupCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).hangupCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    holdCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).holdCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchHistoryCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).patchHistoryCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCall: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).readCall(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [gatewayId]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {boolean} [skipParent]
     * @param {string} [parentId]
     * @param {Array<string>} [cause]
     * @param {boolean} [existsFile]
     * @param {string} [domainId]
     * @param {string} [number]
     * @param {Array<string>} [direction]
     * @param {string} [answeredAtFrom]
     * @param {string} [answeredAtTo]
     * @param {boolean} [missed]
     * @param {string} [storedAtFrom]
     * @param {string} [storedAtTo]
     * @param {Array<string>} [supervisorId]
     * @param {Array<string>} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchActiveCall: function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).searchActiveCall(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of call
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [gatewayId]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {boolean} [skipParent]
     * @param {string} [parentId]
     * @param {Array<string>} [cause]
     * @param {'undefined' | 'true' | 'false'} [hasFile]
     * @param {string} [domainId]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answeredAtFrom]
     * @param {string} [answeredAtTo]
     * @param {boolean} [missed]
     * @param {string} [storedAtFrom]
     * @param {string} [storedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [transferFrom]
     * @param {Array<string>} [transferTo]
     * @param {string} [dependencyId]
     * @param {Array<string>} [tags]
     * @param {Array<string>} [amdResult]
     * @param {string} [fts]
     * @param {Array<string>} [directions]
     * @param {'undefined' | 'true' | 'false'} [hasTranscript]
     * @param {string} [agentDescription]
     * @param {Array<string>} [ownerId]
     * @param {Array<string>} [granteeId]
     * @param {Array<string>} [amdAiResult]
     * @param {string} [talkFrom]
     * @param {string} [talkTo]
     * @param {'undefined' | 'true' | 'false'} [rated]
     * @param {Array<string>} [ratedBy]
     * @param {string} [scoreRequiredFrom]
     * @param {string} [scoreRequiredTo]
     * @param {string} [scoreOptionalFrom]
     * @param {string} [scoreOptionalTo]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCall: function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).searchHistoryCall(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of call
     * @param {EngineSearchHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCallPost: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).searchHistoryCallPost(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineSetVariablesCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVariablesCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).setVariablesCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unHoldCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).unHoldCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} callId
     * @param {string} id
     * @param {EngineUpdateCallAnnotationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCallAnnotation: function(callId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CallServiceApiAxiosParamCreator(configuration).updateCallAnnotation(callId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios10.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var CallServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {EngineAggregateHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateHistoryCall: function(body, options) {
      return CallServiceApiFp(configuration).aggregateHistoryCall(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineBlindTransferCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blindTransferCall: function(id, body, options) {
      return CallServiceApiFp(configuration).blindTransferCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmPush: function(id, options) {
      return CallServiceApiFp(configuration).confirmPush(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {EngineCreateCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCall: function(body, options) {
      return CallServiceApiFp(configuration).createCall(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} callId
     * @param {EngineCreateCallAnnotationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCallAnnotation: function(callId, body, options) {
      return CallServiceApiFp(configuration).createCallAnnotation(callId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} callId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCallAnnotation: function(callId, id, options) {
      return CallServiceApiFp(configuration).deleteCallAnnotation(callId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineDtmfCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dtmfCall: function(id, body, options) {
      return CallServiceApiFp(configuration).dtmfCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineEavesdropCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eavesdropCall: function(id, body, options) {
      return CallServiceApiFp(configuration).eavesdropCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineHangupCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hangupCall: function(id, body, options) {
      return CallServiceApiFp(configuration).hangupCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    holdCall: function(id, body, options) {
      return CallServiceApiFp(configuration).holdCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchHistoryCall: function(id, body, options) {
      return CallServiceApiFp(configuration).patchHistoryCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Call item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCall: function(id, domainId, options) {
      return CallServiceApiFp(configuration).readCall(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [gatewayId]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {boolean} [skipParent]
     * @param {string} [parentId]
     * @param {Array<string>} [cause]
     * @param {boolean} [existsFile]
     * @param {string} [domainId]
     * @param {string} [number]
     * @param {Array<string>} [direction]
     * @param {string} [answeredAtFrom]
     * @param {string} [answeredAtTo]
     * @param {boolean} [missed]
     * @param {string} [storedAtFrom]
     * @param {string} [storedAtTo]
     * @param {Array<string>} [supervisorId]
     * @param {Array<string>} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchActiveCall: function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options) {
      return CallServiceApiFp(configuration).searchActiveCall(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of call
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {Array<string>} [userId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [teamId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [gatewayId]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {boolean} [skipParent]
     * @param {string} [parentId]
     * @param {Array<string>} [cause]
     * @param {'undefined' | 'true' | 'false'} [hasFile]
     * @param {string} [domainId]
     * @param {string} [number]
     * @param {string} [direction]
     * @param {string} [answeredAtFrom]
     * @param {string} [answeredAtTo]
     * @param {boolean} [missed]
     * @param {string} [storedAtFrom]
     * @param {string} [storedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [transferFrom]
     * @param {Array<string>} [transferTo]
     * @param {string} [dependencyId]
     * @param {Array<string>} [tags]
     * @param {Array<string>} [amdResult]
     * @param {string} [fts]
     * @param {Array<string>} [directions]
     * @param {'undefined' | 'true' | 'false'} [hasTranscript]
     * @param {string} [agentDescription]
     * @param {Array<string>} [ownerId]
     * @param {Array<string>} [granteeId]
     * @param {Array<string>} [amdAiResult]
     * @param {string} [talkFrom]
     * @param {string} [talkTo]
     * @param {'undefined' | 'true' | 'false'} [rated]
     * @param {Array<string>} [ratedBy]
     * @param {string} [scoreRequiredFrom]
     * @param {string} [scoreRequiredTo]
     * @param {string} [scoreOptionalFrom]
     * @param {string} [scoreOptionalTo]
     * @param {Array<string>} [ratedUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCall: function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options) {
      return CallServiceApiFp(configuration).searchHistoryCall(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of call
     * @param {EngineSearchHistoryCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchHistoryCallPost: function(body, options) {
      return CallServiceApiFp(configuration).searchHistoryCallPost(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineSetVariablesCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVariablesCall: function(id, body, options) {
      return CallServiceApiFp(configuration).setVariablesCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUserCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unHoldCall: function(id, body, options) {
      return CallServiceApiFp(configuration).unHoldCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} callId
     * @param {string} id
     * @param {EngineUpdateCallAnnotationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCallAnnotation: function(callId, id, body, options) {
      return CallServiceApiFp(configuration).updateCallAnnotation(callId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var CallServiceApi = (
  /** @class */
  function(_super) {
    __extends(CallServiceApi2, _super);
    function CallServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CallServiceApi2.prototype.aggregateHistoryCall = function(body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).aggregateHistoryCall(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.blindTransferCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).blindTransferCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.confirmPush = function(id, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).confirmPush(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.createCall = function(body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).createCall(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.createCallAnnotation = function(callId, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).createCallAnnotation(callId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.deleteCallAnnotation = function(callId, id, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).deleteCallAnnotation(callId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.dtmfCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).dtmfCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.eavesdropCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).eavesdropCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.hangupCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).hangupCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.holdCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).holdCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.patchHistoryCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).patchHistoryCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.readCall = function(id, domainId, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).readCall(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.searchActiveCall = function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).searchActiveCall(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, existsFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, supervisorId, state, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.searchHistoryCall = function(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).searchHistoryCall(page, size, q, sort, fields, createdAtFrom, createdAtTo, userId, agentId, queueId, teamId, memberId, gatewayId, durationFrom, durationTo, skipParent, parentId, cause, hasFile, domainId, number, direction, answeredAtFrom, answeredAtTo, missed, storedAtFrom, storedAtTo, id, transferFrom, transferTo, dependencyId, tags, amdResult, fts, directions, hasTranscript, agentDescription, ownerId, granteeId, amdAiResult, talkFrom, talkTo, rated, ratedBy, scoreRequiredFrom, scoreRequiredTo, scoreOptionalFrom, scoreOptionalTo, ratedUser, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.searchHistoryCallPost = function(body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).searchHistoryCallPost(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.setVariablesCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).setVariablesCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.unHoldCall = function(id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).unHoldCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CallServiceApi2.prototype.updateCallAnnotation = function(callId, id, body, options) {
      var _this = this;
      return CallServiceApiFp(this.configuration).updateCallAnnotation(callId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return CallServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/chat-helper-service-api.js
var globalImportUrl10 = __toESM(require_url());
var import_axios11 = __toESM(require_axios2());
var ChatHelperServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {string} profileId
     * @param {EngineBroadcastRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcast: function(profileId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (profileId === null || profileId === void 0) {
                throw new RequiredError("profileId", "Required parameter profileId was null or undefined when calling broadcast.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling broadcast.");
              }
              localVarPath = "/chat/bots/{profile_id}/broadcast".replace("{profile_id}", encodeURIComponent(String(profileId)));
              localVarUrlObj = globalImportUrl10.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl10.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var ChatHelperServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {string} profileId
     * @param {EngineBroadcastRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcast: function(profileId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ChatHelperServiceApiAxiosParamCreator(configuration).broadcast(profileId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios11.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var ChatHelperServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {string} profileId
     * @param {EngineBroadcastRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcast: function(profileId, body, options) {
      return ChatHelperServiceApiFp(configuration).broadcast(profileId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var ChatHelperServiceApi = (
  /** @class */
  function(_super) {
    __extends(ChatHelperServiceApi2, _super);
    function ChatHelperServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ChatHelperServiceApi2.prototype.broadcast = function(profileId, body, options) {
      var _this = this;
      return ChatHelperServiceApiFp(this.configuration).broadcast(profileId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return ChatHelperServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/cognitive-profile-service-api.js
var globalImportUrl11 = __toESM(require_url());
var import_axios12 = __toESM(require_axios2());
var CognitiveProfileServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {StorageCreateCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCognitiveProfile: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createCognitiveProfile.");
              }
              localVarPath = "/storage/cognitive_profiles";
              localVarUrlObj = globalImportUrl11.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl11.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCognitiveProfile: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteCognitiveProfile.");
              }
              localVarPath = "/storage/cognitive_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl11.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl11.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {StoragePatchCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCognitiveProfile: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchCognitiveProfile.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchCognitiveProfile.");
              }
              localVarPath = "/storage/cognitive_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl11.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl11.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCognitiveProfile: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readCognitiveProfile.");
              }
              localVarPath = "/storage/cognitive_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl11.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl11.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<'DefaultService' | 'STT' | 'TTS'>} [service]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCognitiveProfile: function(page, size, q, sort, fields, id, service, enabled, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/storage/cognitive_profiles";
              localVarUrlObj = globalImportUrl11.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (service) {
                localVarQueryParameter["service"] = service;
              }
              if (enabled !== void 0) {
                localVarQueryParameter["enabled"] = enabled;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl11.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {StorageUpdateCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCognitiveProfile: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateCognitiveProfile.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateCognitiveProfile.");
              }
              localVarPath = "/storage/cognitive_profiles/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl11.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl11.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var CognitiveProfileServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {StorageCreateCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCognitiveProfile: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CognitiveProfileServiceApiAxiosParamCreator(configuration).createCognitiveProfile(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios12.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCognitiveProfile: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CognitiveProfileServiceApiAxiosParamCreator(configuration).deleteCognitiveProfile(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios12.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {StoragePatchCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCognitiveProfile: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CognitiveProfileServiceApiAxiosParamCreator(configuration).patchCognitiveProfile(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios12.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCognitiveProfile: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CognitiveProfileServiceApiAxiosParamCreator(configuration).readCognitiveProfile(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios12.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<'DefaultService' | 'STT' | 'TTS'>} [service]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCognitiveProfile: function(page, size, q, sort, fields, id, service, enabled, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CognitiveProfileServiceApiAxiosParamCreator(configuration).searchCognitiveProfile(page, size, q, sort, fields, id, service, enabled, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios12.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {StorageUpdateCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCognitiveProfile: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CognitiveProfileServiceApiAxiosParamCreator(configuration).updateCognitiveProfile(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios12.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var CognitiveProfileServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {StorageCreateCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCognitiveProfile: function(body, options) {
      return CognitiveProfileServiceApiFp(configuration).createCognitiveProfile(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove BackendProfile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCognitiveProfile: function(id, options) {
      return CognitiveProfileServiceApiFp(configuration).deleteCognitiveProfile(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {StoragePatchCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCognitiveProfile: function(id, body, options) {
      return CognitiveProfileServiceApiFp(configuration).patchCognitiveProfile(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCognitiveProfile: function(id, options) {
      return CognitiveProfileServiceApiFp(configuration).readCognitiveProfile(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<'DefaultService' | 'STT' | 'TTS'>} [service]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCognitiveProfile: function(page, size, q, sort, fields, id, service, enabled, options) {
      return CognitiveProfileServiceApiFp(configuration).searchCognitiveProfile(page, size, q, sort, fields, id, service, enabled, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {StorageUpdateCognitiveProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCognitiveProfile: function(id, body, options) {
      return CognitiveProfileServiceApiFp(configuration).updateCognitiveProfile(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var CognitiveProfileServiceApi = (
  /** @class */
  function(_super) {
    __extends(CognitiveProfileServiceApi2, _super);
    function CognitiveProfileServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CognitiveProfileServiceApi2.prototype.createCognitiveProfile = function(body, options) {
      var _this = this;
      return CognitiveProfileServiceApiFp(this.configuration).createCognitiveProfile(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CognitiveProfileServiceApi2.prototype.deleteCognitiveProfile = function(id, options) {
      var _this = this;
      return CognitiveProfileServiceApiFp(this.configuration).deleteCognitiveProfile(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CognitiveProfileServiceApi2.prototype.patchCognitiveProfile = function(id, body, options) {
      var _this = this;
      return CognitiveProfileServiceApiFp(this.configuration).patchCognitiveProfile(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CognitiveProfileServiceApi2.prototype.readCognitiveProfile = function(id, options) {
      var _this = this;
      return CognitiveProfileServiceApiFp(this.configuration).readCognitiveProfile(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CognitiveProfileServiceApi2.prototype.searchCognitiveProfile = function(page, size, q, sort, fields, id, service, enabled, options) {
      var _this = this;
      return CognitiveProfileServiceApiFp(this.configuration).searchCognitiveProfile(page, size, q, sort, fields, id, service, enabled, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CognitiveProfileServiceApi2.prototype.updateCognitiveProfile = function(id, body, options) {
      var _this = this;
      return CognitiveProfileServiceApiFp(this.configuration).updateCognitiveProfile(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return CognitiveProfileServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/communication-type-service-api.js
var globalImportUrl12 = __toESM(require_url());
var import_axios13 = __toESM(require_axios2());
var CommunicationTypeServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunicationType: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createCommunicationType.");
              }
              localVarPath = "/call_center/communication_type";
              localVarUrlObj = globalImportUrl12.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl12.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommunicationType: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteCommunicationType.");
              }
              localVarPath = "/call_center/communication_type/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl12.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl12.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCommunicationType: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readCommunicationType.");
              }
              localVarPath = "/call_center/communication_type/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl12.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl12.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<'Undefined' | 'Phone' | 'Email' | 'Messaging'>} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCommunicationType: function(page, size, q, sort, fields, id, channel, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/communication_type";
              localVarUrlObj = globalImportUrl12.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (channel) {
                localVarQueryParameter["channel"] = channel;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl12.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommunicationType: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateCommunicationType.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateCommunicationType.");
              }
              localVarPath = "/call_center/communication_type/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl12.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl12.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var CommunicationTypeServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunicationType: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CommunicationTypeServiceApiAxiosParamCreator(configuration).createCommunicationType(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios13.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommunicationType: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CommunicationTypeServiceApiAxiosParamCreator(configuration).deleteCommunicationType(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios13.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCommunicationType: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CommunicationTypeServiceApiAxiosParamCreator(configuration).readCommunicationType(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios13.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<'Undefined' | 'Phone' | 'Email' | 'Messaging'>} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCommunicationType: function(page, size, q, sort, fields, id, channel, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CommunicationTypeServiceApiAxiosParamCreator(configuration).searchCommunicationType(page, size, q, sort, fields, id, channel, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios13.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommunicationType: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, CommunicationTypeServiceApiAxiosParamCreator(configuration).updateCommunicationType(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios13.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var CommunicationTypeServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create CommunicationType
     * @param {EngineCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunicationType: function(body, options) {
      return CommunicationTypeServiceApiFp(configuration).createCommunicationType(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove CommunicationType
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommunicationType: function(id, domainId, options) {
      return CommunicationTypeServiceApiFp(configuration).deleteCommunicationType(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary CommunicationType item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCommunicationType: function(id, domainId, options) {
      return CommunicationTypeServiceApiFp(configuration).readCommunicationType(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of CommunicationType
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<'Undefined' | 'Phone' | 'Email' | 'Messaging'>} [channel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCommunicationType: function(page, size, q, sort, fields, id, channel, options) {
      return CommunicationTypeServiceApiFp(configuration).searchCommunicationType(page, size, q, sort, fields, id, channel, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update CommunicationType
     * @param {string} id
     * @param {EngineUpdateCommunicationTypeRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommunicationType: function(id, body, options) {
      return CommunicationTypeServiceApiFp(configuration).updateCommunicationType(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var CommunicationTypeServiceApi = (
  /** @class */
  function(_super) {
    __extends(CommunicationTypeServiceApi2, _super);
    function CommunicationTypeServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CommunicationTypeServiceApi2.prototype.createCommunicationType = function(body, options) {
      var _this = this;
      return CommunicationTypeServiceApiFp(this.configuration).createCommunicationType(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CommunicationTypeServiceApi2.prototype.deleteCommunicationType = function(id, domainId, options) {
      var _this = this;
      return CommunicationTypeServiceApiFp(this.configuration).deleteCommunicationType(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CommunicationTypeServiceApi2.prototype.readCommunicationType = function(id, domainId, options) {
      var _this = this;
      return CommunicationTypeServiceApiFp(this.configuration).readCommunicationType(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CommunicationTypeServiceApi2.prototype.searchCommunicationType = function(page, size, q, sort, fields, id, channel, options) {
      var _this = this;
      return CommunicationTypeServiceApiFp(this.configuration).searchCommunicationType(page, size, q, sort, fields, id, channel, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    CommunicationTypeServiceApi2.prototype.updateCommunicationType = function(id, body, options) {
      var _this = this;
      return CommunicationTypeServiceApiFp(this.configuration).updateCommunicationType(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return CommunicationTypeServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/config-service-api.js
var globalImportUrl13 = __toESM(require_url());
var import_axios14 = __toESM(require_axios2());
var ConfigServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {LoggerCreateConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfig: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createConfig.");
              }
              localVarPath = "/logger/config";
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfig: function(configId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (configId === null || configId === void 0) {
                throw new RequiredError("configId", "Required parameter configId was null or undefined when calling deleteConfig.");
              }
              localVarPath = "/logger/config/{config_id}".replace("{config_id}", encodeURIComponent(String(configId)));
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {LoggerDeleteConfigBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfigBulk: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling deleteConfigBulk.");
              }
              localVarPath = "/logger/config";
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {LoggerPatchConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchConfig: function(configId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (configId === null || configId === void 0) {
                throw new RequiredError("configId", "Required parameter configId was null or undefined when calling patchConfig.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchConfig.");
              }
              localVarPath = "/logger/config/{config_id}".replace("{config_id}", encodeURIComponent(String(configId)));
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConfig: function(configId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (configId === null || configId === void 0) {
                throw new RequiredError("configId", "Required parameter configId was null or undefined when calling readConfig.");
              }
              localVarPath = "/logger/config/{config_id}".replace("{config_id}", encodeURIComponent(String(configId)));
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSystemObjects: function(options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/logger/available_objects";
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchConfig: function(page, size, q, sort, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/logger/config";
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {LoggerUpdateConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfig: function(configId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (configId === null || configId === void 0) {
                throw new RequiredError("configId", "Required parameter configId was null or undefined when calling updateConfig.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateConfig.");
              }
              localVarPath = "/logger/config/{config_id}".replace("{config_id}", encodeURIComponent(String(configId)));
              localVarUrlObj = globalImportUrl13.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl13.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var ConfigServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {LoggerCreateConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfig: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).createConfig(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfig: function(configId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).deleteConfig(configId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {LoggerDeleteConfigBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfigBulk: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).deleteConfigBulk(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {LoggerPatchConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchConfig: function(configId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).patchConfig(configId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConfig: function(configId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).readConfig(configId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSystemObjects: function(options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).readSystemObjects(options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchConfig: function(page, size, q, sort, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).searchConfig(page, size, q, sort, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} configId
     * @param {LoggerUpdateConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfig: function(configId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ConfigServiceApiAxiosParamCreator(configuration).updateConfig(configId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios14.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var ConfigServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {LoggerCreateConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConfig: function(body, options) {
      return ConfigServiceApiFp(configuration).createConfig(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} configId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfig: function(configId, options) {
      return ConfigServiceApiFp(configuration).deleteConfig(configId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {LoggerDeleteConfigBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConfigBulk: function(body, options) {
      return ConfigServiceApiFp(configuration).deleteConfigBulk(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} configId
     * @param {LoggerPatchConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchConfig: function(configId, body, options) {
      return ConfigServiceApiFp(configuration).patchConfig(configId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} configId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConfig: function(configId, options) {
      return ConfigServiceApiFp(configuration).readConfig(configId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSystemObjects: function(options) {
      return ConfigServiceApiFp(configuration).readSystemObjects(options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchConfig: function(page, size, q, sort, fields, options) {
      return ConfigServiceApiFp(configuration).searchConfig(page, size, q, sort, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} configId
     * @param {LoggerUpdateConfigRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfig: function(configId, body, options) {
      return ConfigServiceApiFp(configuration).updateConfig(configId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var ConfigServiceApi = (
  /** @class */
  function(_super) {
    __extends(ConfigServiceApi2, _super);
    function ConfigServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ConfigServiceApi2.prototype.createConfig = function(body, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).createConfig(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.deleteConfig = function(configId, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).deleteConfig(configId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.deleteConfigBulk = function(body, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).deleteConfigBulk(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.patchConfig = function(configId, body, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).patchConfig(configId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.readConfig = function(configId, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).readConfig(configId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.readSystemObjects = function(options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).readSystemObjects(options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.searchConfig = function(page, size, q, sort, fields, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).searchConfig(page, size, q, sort, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ConfigServiceApi2.prototype.updateConfig = function(configId, body, options) {
      var _this = this;
      return ConfigServiceApiFp(this.configuration).updateConfig(configId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return ConfigServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/contacts-api.js
var globalImportUrl14 = __toESM(require_url());
var import_axios15 = __toESM(require_axios2());
var ContactsApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create NEW Contact
     * @param {WebitelContactsInputContact} input NEW Contact source changes
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact: function(input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling createContact.");
              }
              localVarPath = "/contacts";
              localVarUrlObj = globalImportUrl14.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl14.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Contact source
     * @param {string} etag Unique ID of the latest version of a resource.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContact: function(etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling deleteContact.");
              }
              localVarPath = "/contacts/{etag}".replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl14.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl14.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locate Contact source
     * @param {string} etag The Contact source IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {'READ' | 'WRITE' | 'DELETE'} [mode] The requirement of a special access mode to the Source.   - READ: Can &#x60;fetch&#x60; record. [GET]  - WRITE: Can &#x60;update&#x60; record. [PUT|PATCH]  - DELETE: Can &#x60;delete&#x60; record. [DELETE]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateContact: function(etag, fields, mode, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling locateContact.");
              }
              localVarPath = "/contacts/{etag}".replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl14.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (mode !== void 0) {
                localVarQueryParameter["mode"] = mode;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl14.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     * | Field       | Type  | ----------- | ----  | **----------- READ-ONLY -----------** |  | `id`        | int64  | `ver`       | int32  | `etag`      | string  | **---------- OPERATIONAL ----------** |  | `created_at` | int64(epoch:milli)  | `created_by` | lookup(user)  | `updated_at` | int64(epoch:milli)  | `updated_by` | lookup(user)  | **---------- ATTRIBUTES -----------** |  | `name`      | name!  | `about`     | string  | `labels`    | list[label!]  | `emails`    | list[email!]  | `photos`    | list[photo!]  | `phones`    | list[phone!]  | `managers`  | list[manager!]  | `comments`  | list[comment!]  | `addresses` | list[address!]  | `languages` | list[language!]  | `timezones` | list[timezone!]  | `variables` | list[variable!]  | `imclients` | list[imClient!]
     * @summary Search for Contact(s)
     * @param {number} [page] Page number of result records.   _default(1); offset&#x3D;(size*(page-1));_  &#x60;&#x60;&#x60;javascript let     offset &#x3D; 0   , page &#x3D; req.page ; if (page &lt;&#x3D; 0)     page &#x3D; 1; if (page &gt; 1)     offset &#x3D; ((page-1)*size); // . . . &#x60;&#x60;&#x60;
     * @param {number} [size] Limit of result page records count.   _default(16); limit&#x3D;(size&lt;&#x3D;0?-1:size+1);_  &#x60;&#x60;&#x60;javascript const     default &#x3D; 16   , maximum &#x3D; 32 ; let limit &#x3D; req.size; if (limit &lt;&#x3D; 0)     limit &#x3D; default; if (maximum &lt; limit)     limit &#x3D; maximum; // . . . &#x60;&#x60;&#x60;
     * @param {string} [q] Search term: &#x60;?&#x60; - matches any character &#x60;*&#x60; - matches 0 or more characters Used to query records within a set of &#x60;qin&#x60; fields, eg: name,emails{type},labels etc...
     * @param {Array<string>} [sort] Sort result dataset of records by fields. &#x60;&#x60;&#x60; sort ::&#x3D; *( ORDER name )  ORDER  &#x3D; ASC / DESC DESC   &#x3D; \&quot;-\&quot; / \&quot;!\&quot; ASC    &#x3D; [ \&quot;+\&quot; ]   ; Default &#x60;&#x60;&#x60;  Fields available  - &#x60;id&#x60;(seq) - &#x60;domain&#x60;{name} - &#x60;created_at&#x60; - &#x60;created_by&#x60;{name} - &#x60;updated_at&#x60; - &#x60;updated_by&#x60;{name}  Use ?fields&#x3D;&#x60;field.sort()&#x60; option to sort Edge fields.
     * @param {Array<string>} [fields] Fields [Q]uery to build result dataset record. &#x60;&#x60;&#x60; fields ::&#x3D; field [ *( \&quot;,\&quot; field ) ] field  ::&#x3D; name [ *( func ) ] [ inner ] inner  ::&#x3D; \&quot;{\&quot; fields \&quot;}\&quot; funcs  ::&#x3D; *( func ) func   ::&#x3D; \&quot;.\&quot; name \&quot;(\&quot; [ args ] \&quot;)\&quot; name   ::&#x3D; ALPHA / DIGIT / USCORE  ALPHA    &#x3D; %x41-5A / %x61-7A  ; \&quot;A\&quot;-\&quot;Z\&quot; / \&quot;a\&quot;-\&quot;z\&quot; DIGIT    &#x3D; %x30-39            ; \&quot;0\&quot;-\&quot;9\&quot; USCORE   &#x3D; %x5F ; underscore  ; \&quot;_\&quot; &#x60;&#x60;&#x60;
     * @param {Array<string>} [id] Records with unique IDentifier(s). Accept: &#x60;id&#x60; -or- &#x60;etag&#x60;.
     * @param {Array<string>} [qin] [Q]uery[IN] is a set of search fields for term &#x60;q&#x60;. Default: &#x60;name{common_name}&#x60;.
     * @param {'READ' | 'WRITE' | 'DELETE'} [mode] Source access mode requirement.   - READ: Can &#x60;fetch&#x60; record. [GET]  - WRITE: Can &#x60;update&#x60; record. [PUT|PATCH]  - DELETE: Can &#x60;delete&#x60; record. [DELETE]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchContacts: function(page, size, q, sort, fields, id, qin, mode, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/contacts";
              localVarUrlObj = globalImportUrl14.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (qin) {
                localVarQueryParameter["qin"] = qin;
              }
              if (mode !== void 0) {
                localVarQueryParameter["mode"] = mode;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl14.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary NEW Update of the Contact source
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWContactSourceChanges} input
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContact: function(etag, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling updateContact.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling updateContact.");
              }
              localVarPath = "/contacts/{etag}".replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl14.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl14.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var ContactsApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create NEW Contact
     * @param {WebitelContactsInputContact} input NEW Contact source changes
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact: function(input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ContactsApiAxiosParamCreator(configuration).createContact(input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios15.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Contact source
     * @param {string} etag Unique ID of the latest version of a resource.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContact: function(etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ContactsApiAxiosParamCreator(configuration).deleteContact(etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios15.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locate Contact source
     * @param {string} etag The Contact source IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {'READ' | 'WRITE' | 'DELETE'} [mode] The requirement of a special access mode to the Source.   - READ: Can &#x60;fetch&#x60; record. [GET]  - WRITE: Can &#x60;update&#x60; record. [PUT|PATCH]  - DELETE: Can &#x60;delete&#x60; record. [DELETE]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateContact: function(etag, fields, mode, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ContactsApiAxiosParamCreator(configuration).locateContact(etag, fields, mode, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios15.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     * | Field       | Type  | ----------- | ----  | **----------- READ-ONLY -----------** |  | `id`        | int64  | `ver`       | int32  | `etag`      | string  | **---------- OPERATIONAL ----------** |  | `created_at` | int64(epoch:milli)  | `created_by` | lookup(user)  | `updated_at` | int64(epoch:milli)  | `updated_by` | lookup(user)  | **---------- ATTRIBUTES -----------** |  | `name`      | name!  | `about`     | string  | `labels`    | list[label!]  | `emails`    | list[email!]  | `photos`    | list[photo!]  | `phones`    | list[phone!]  | `managers`  | list[manager!]  | `comments`  | list[comment!]  | `addresses` | list[address!]  | `languages` | list[language!]  | `timezones` | list[timezone!]  | `variables` | list[variable!]  | `imclients` | list[imClient!]
     * @summary Search for Contact(s)
     * @param {number} [page] Page number of result records.   _default(1); offset&#x3D;(size*(page-1));_  &#x60;&#x60;&#x60;javascript let     offset &#x3D; 0   , page &#x3D; req.page ; if (page &lt;&#x3D; 0)     page &#x3D; 1; if (page &gt; 1)     offset &#x3D; ((page-1)*size); // . . . &#x60;&#x60;&#x60;
     * @param {number} [size] Limit of result page records count.   _default(16); limit&#x3D;(size&lt;&#x3D;0?-1:size+1);_  &#x60;&#x60;&#x60;javascript const     default &#x3D; 16   , maximum &#x3D; 32 ; let limit &#x3D; req.size; if (limit &lt;&#x3D; 0)     limit &#x3D; default; if (maximum &lt; limit)     limit &#x3D; maximum; // . . . &#x60;&#x60;&#x60;
     * @param {string} [q] Search term: &#x60;?&#x60; - matches any character &#x60;*&#x60; - matches 0 or more characters Used to query records within a set of &#x60;qin&#x60; fields, eg: name,emails{type},labels etc...
     * @param {Array<string>} [sort] Sort result dataset of records by fields. &#x60;&#x60;&#x60; sort ::&#x3D; *( ORDER name )  ORDER  &#x3D; ASC / DESC DESC   &#x3D; \&quot;-\&quot; / \&quot;!\&quot; ASC    &#x3D; [ \&quot;+\&quot; ]   ; Default &#x60;&#x60;&#x60;  Fields available  - &#x60;id&#x60;(seq) - &#x60;domain&#x60;{name} - &#x60;created_at&#x60; - &#x60;created_by&#x60;{name} - &#x60;updated_at&#x60; - &#x60;updated_by&#x60;{name}  Use ?fields&#x3D;&#x60;field.sort()&#x60; option to sort Edge fields.
     * @param {Array<string>} [fields] Fields [Q]uery to build result dataset record. &#x60;&#x60;&#x60; fields ::&#x3D; field [ *( \&quot;,\&quot; field ) ] field  ::&#x3D; name [ *( func ) ] [ inner ] inner  ::&#x3D; \&quot;{\&quot; fields \&quot;}\&quot; funcs  ::&#x3D; *( func ) func   ::&#x3D; \&quot;.\&quot; name \&quot;(\&quot; [ args ] \&quot;)\&quot; name   ::&#x3D; ALPHA / DIGIT / USCORE  ALPHA    &#x3D; %x41-5A / %x61-7A  ; \&quot;A\&quot;-\&quot;Z\&quot; / \&quot;a\&quot;-\&quot;z\&quot; DIGIT    &#x3D; %x30-39            ; \&quot;0\&quot;-\&quot;9\&quot; USCORE   &#x3D; %x5F ; underscore  ; \&quot;_\&quot; &#x60;&#x60;&#x60;
     * @param {Array<string>} [id] Records with unique IDentifier(s). Accept: &#x60;id&#x60; -or- &#x60;etag&#x60;.
     * @param {Array<string>} [qin] [Q]uery[IN] is a set of search fields for term &#x60;q&#x60;. Default: &#x60;name{common_name}&#x60;.
     * @param {'READ' | 'WRITE' | 'DELETE'} [mode] Source access mode requirement.   - READ: Can &#x60;fetch&#x60; record. [GET]  - WRITE: Can &#x60;update&#x60; record. [PUT|PATCH]  - DELETE: Can &#x60;delete&#x60; record. [DELETE]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchContacts: function(page, size, q, sort, fields, id, qin, mode, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ContactsApiAxiosParamCreator(configuration).searchContacts(page, size, q, sort, fields, id, qin, mode, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios15.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary NEW Update of the Contact source
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWContactSourceChanges} input
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContact: function(etag, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ContactsApiAxiosParamCreator(configuration).updateContact(etag, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios15.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var ContactsApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create NEW Contact
     * @param {WebitelContactsInputContact} input NEW Contact source changes
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact: function(input, fields, options) {
      return ContactsApiFp(configuration).createContact(input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove Contact source
     * @param {string} etag Unique ID of the latest version of a resource.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContact: function(etag, fields, options) {
      return ContactsApiFp(configuration).deleteContact(etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Locate Contact source
     * @param {string} etag The Contact source IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {'READ' | 'WRITE' | 'DELETE'} [mode] The requirement of a special access mode to the Source.   - READ: Can &#x60;fetch&#x60; record. [GET]  - WRITE: Can &#x60;update&#x60; record. [PUT|PATCH]  - DELETE: Can &#x60;delete&#x60; record. [DELETE]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateContact: function(etag, fields, mode, options) {
      return ContactsApiFp(configuration).locateContact(etag, fields, mode, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     * | Field       | Type  | ----------- | ----  | **----------- READ-ONLY -----------** |  | `id`        | int64  | `ver`       | int32  | `etag`      | string  | **---------- OPERATIONAL ----------** |  | `created_at` | int64(epoch:milli)  | `created_by` | lookup(user)  | `updated_at` | int64(epoch:milli)  | `updated_by` | lookup(user)  | **---------- ATTRIBUTES -----------** |  | `name`      | name!  | `about`     | string  | `labels`    | list[label!]  | `emails`    | list[email!]  | `photos`    | list[photo!]  | `phones`    | list[phone!]  | `managers`  | list[manager!]  | `comments`  | list[comment!]  | `addresses` | list[address!]  | `languages` | list[language!]  | `timezones` | list[timezone!]  | `variables` | list[variable!]  | `imclients` | list[imClient!]
     * @summary Search for Contact(s)
     * @param {number} [page] Page number of result records.   _default(1); offset&#x3D;(size*(page-1));_  &#x60;&#x60;&#x60;javascript let     offset &#x3D; 0   , page &#x3D; req.page ; if (page &lt;&#x3D; 0)     page &#x3D; 1; if (page &gt; 1)     offset &#x3D; ((page-1)*size); // . . . &#x60;&#x60;&#x60;
     * @param {number} [size] Limit of result page records count.   _default(16); limit&#x3D;(size&lt;&#x3D;0?-1:size+1);_  &#x60;&#x60;&#x60;javascript const     default &#x3D; 16   , maximum &#x3D; 32 ; let limit &#x3D; req.size; if (limit &lt;&#x3D; 0)     limit &#x3D; default; if (maximum &lt; limit)     limit &#x3D; maximum; // . . . &#x60;&#x60;&#x60;
     * @param {string} [q] Search term: &#x60;?&#x60; - matches any character &#x60;*&#x60; - matches 0 or more characters Used to query records within a set of &#x60;qin&#x60; fields, eg: name,emails{type},labels etc...
     * @param {Array<string>} [sort] Sort result dataset of records by fields. &#x60;&#x60;&#x60; sort ::&#x3D; *( ORDER name )  ORDER  &#x3D; ASC / DESC DESC   &#x3D; \&quot;-\&quot; / \&quot;!\&quot; ASC    &#x3D; [ \&quot;+\&quot; ]   ; Default &#x60;&#x60;&#x60;  Fields available  - &#x60;id&#x60;(seq) - &#x60;domain&#x60;{name} - &#x60;created_at&#x60; - &#x60;created_by&#x60;{name} - &#x60;updated_at&#x60; - &#x60;updated_by&#x60;{name}  Use ?fields&#x3D;&#x60;field.sort()&#x60; option to sort Edge fields.
     * @param {Array<string>} [fields] Fields [Q]uery to build result dataset record. &#x60;&#x60;&#x60; fields ::&#x3D; field [ *( \&quot;,\&quot; field ) ] field  ::&#x3D; name [ *( func ) ] [ inner ] inner  ::&#x3D; \&quot;{\&quot; fields \&quot;}\&quot; funcs  ::&#x3D; *( func ) func   ::&#x3D; \&quot;.\&quot; name \&quot;(\&quot; [ args ] \&quot;)\&quot; name   ::&#x3D; ALPHA / DIGIT / USCORE  ALPHA    &#x3D; %x41-5A / %x61-7A  ; \&quot;A\&quot;-\&quot;Z\&quot; / \&quot;a\&quot;-\&quot;z\&quot; DIGIT    &#x3D; %x30-39            ; \&quot;0\&quot;-\&quot;9\&quot; USCORE   &#x3D; %x5F ; underscore  ; \&quot;_\&quot; &#x60;&#x60;&#x60;
     * @param {Array<string>} [id] Records with unique IDentifier(s). Accept: &#x60;id&#x60; -or- &#x60;etag&#x60;.
     * @param {Array<string>} [qin] [Q]uery[IN] is a set of search fields for term &#x60;q&#x60;. Default: &#x60;name{common_name}&#x60;.
     * @param {'READ' | 'WRITE' | 'DELETE'} [mode] Source access mode requirement.   - READ: Can &#x60;fetch&#x60; record. [GET]  - WRITE: Can &#x60;update&#x60; record. [PUT|PATCH]  - DELETE: Can &#x60;delete&#x60; record. [DELETE]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchContacts: function(page, size, q, sort, fields, id, qin, mode, options) {
      return ContactsApiFp(configuration).searchContacts(page, size, q, sort, fields, id, qin, mode, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary NEW Update of the Contact source
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWContactSourceChanges} input
     * @param {Array<string>} [fields] Source Fields to return into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContact: function(etag, input, fields, options) {
      return ContactsApiFp(configuration).updateContact(etag, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var ContactsApi = (
  /** @class */
  function(_super) {
    __extends(ContactsApi2, _super);
    function ContactsApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ContactsApi2.prototype.createContact = function(input, fields, options) {
      var _this = this;
      return ContactsApiFp(this.configuration).createContact(input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ContactsApi2.prototype.deleteContact = function(etag, fields, options) {
      var _this = this;
      return ContactsApiFp(this.configuration).deleteContact(etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ContactsApi2.prototype.locateContact = function(etag, fields, mode, options) {
      var _this = this;
      return ContactsApiFp(this.configuration).locateContact(etag, fields, mode, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ContactsApi2.prototype.searchContacts = function(page, size, q, sort, fields, id, qin, mode, options) {
      var _this = this;
      return ContactsApiFp(this.configuration).searchContacts(page, size, q, sort, fields, id, qin, mode, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ContactsApi2.prototype.updateContact = function(etag, input, fields, options) {
      var _this = this;
      return ContactsApiFp(this.configuration).updateContact(etag, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return ContactsApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/email-profile-service-api.js
var globalImportUrl15 = __toESM(require_url());
var import_axios16 = __toESM(require_axios2());
var EmailProfileServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create EmailProfile
     * @param {EngineCreateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmailProfile: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createEmailProfile.");
              }
              localVarPath = "/email/profile";
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove EmailProfile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmailProfile: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteEmailProfile.");
              }
              localVarPath = "/email/profile/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginEmailProfile: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling loginEmailProfile.");
              }
              localVarPath = "/email/profile/{id}/login".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEmailProfile: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchEmailProfile.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchEmailProfile.");
              }
              localVarPath = "/email/profile/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary EmailProfile item
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEmailProfile: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readEmailProfile.");
              }
              localVarPath = "/email/profile/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search EmailProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmailProfile: function(page, size, q, sort, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/email/profile";
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary EmailProfile check login
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testEmailProfile: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling testEmailProfile.");
              }
              localVarPath = "/email/profile/{id}/test".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update EmailProfile
     * @param {string} id
     * @param {EngineUpdateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmailProfile: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateEmailProfile.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateEmailProfile.");
              }
              localVarPath = "/email/profile/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl15.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl15.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var EmailProfileServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create EmailProfile
     * @param {EngineCreateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmailProfile: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).createEmailProfile(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove EmailProfile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmailProfile: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).deleteEmailProfile(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginEmailProfile: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).loginEmailProfile(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEmailProfile: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).patchEmailProfile(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary EmailProfile item
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEmailProfile: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).readEmailProfile(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search EmailProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmailProfile: function(page, size, q, sort, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).searchEmailProfile(page, size, q, sort, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary EmailProfile check login
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testEmailProfile: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).testEmailProfile(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update EmailProfile
     * @param {string} id
     * @param {EngineUpdateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmailProfile: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailProfileServiceApiAxiosParamCreator(configuration).updateEmailProfile(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios16.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var EmailProfileServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create EmailProfile
     * @param {EngineCreateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmailProfile: function(body, options) {
      return EmailProfileServiceApiFp(configuration).createEmailProfile(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove EmailProfile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmailProfile: function(id, options) {
      return EmailProfileServiceApiFp(configuration).deleteEmailProfile(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginEmailProfile: function(id, options) {
      return EmailProfileServiceApiFp(configuration).loginEmailProfile(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEmailProfile: function(id, body, options) {
      return EmailProfileServiceApiFp(configuration).patchEmailProfile(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary EmailProfile item
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readEmailProfile: function(id, options) {
      return EmailProfileServiceApiFp(configuration).readEmailProfile(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Search EmailProfile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchEmailProfile: function(page, size, q, sort, fields, options) {
      return EmailProfileServiceApiFp(configuration).searchEmailProfile(page, size, q, sort, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary EmailProfile check login
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testEmailProfile: function(id, options) {
      return EmailProfileServiceApiFp(configuration).testEmailProfile(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update EmailProfile
     * @param {string} id
     * @param {EngineUpdateEmailProfileRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmailProfile: function(id, body, options) {
      return EmailProfileServiceApiFp(configuration).updateEmailProfile(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var EmailProfileServiceApi = (
  /** @class */
  function(_super) {
    __extends(EmailProfileServiceApi2, _super);
    function EmailProfileServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    EmailProfileServiceApi2.prototype.createEmailProfile = function(body, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).createEmailProfile(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.deleteEmailProfile = function(id, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).deleteEmailProfile(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.loginEmailProfile = function(id, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).loginEmailProfile(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.patchEmailProfile = function(id, body, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).patchEmailProfile(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.readEmailProfile = function(id, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).readEmailProfile(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.searchEmailProfile = function(page, size, q, sort, fields, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).searchEmailProfile(page, size, q, sort, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.testEmailProfile = function(id, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).testEmailProfile(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailProfileServiceApi2.prototype.updateEmailProfile = function(id, body, options) {
      var _this = this;
      return EmailProfileServiceApiFp(this.configuration).updateEmailProfile(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return EmailProfileServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/emails-api.js
var globalImportUrl16 = __toESM(require_url());
var import_axios17 = __toESM(require_axios2());
var EmailsApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Remove the contact\'s email address link
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmail: function(contactId, etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling deleteEmail.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling deleteEmail.");
              }
              localVarPath = "/contacts/{contact_id}/emails/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove email address(es) of the contact.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmails: function(contactId, etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling deleteEmails.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling deleteEmails.");
              }
              localVarPath = "/contacts/{contact_id}/emails".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (etag) {
                localVarQueryParameter["etag"] = etag;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locates email address(es) of the contact.
     * @param {string} contactId The Contact ID linked with.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: email address. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Link(s) with unique ID only.
     * @param {boolean} [primary] Primary email address only.
     * @param {boolean} [verified] Verified email addresses only.
     * @param {string} [typeId] Reference Object unique ID.
     * @param {string} [typeType] Reference Object well-known type.
     * @param {string} [typeName] Reference Object display name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmails: function(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling listEmails.");
              }
              localVarPath = "/contacts/{contact_id}/emails".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (primary !== void 0) {
                localVarQueryParameter["primary"] = primary;
              }
              if (verified !== void 0) {
                localVarQueryParameter["verified"] = verified;
              }
              if (typeId !== void 0) {
                localVarQueryParameter["type.id"] = typeId;
              }
              if (typeType !== void 0) {
                localVarQueryParameter["type.type"] = typeType;
              }
              if (typeName !== void 0) {
                localVarQueryParameter["type.name"] = typeName;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locate the email address link.
     * @param {string} contactId Contact source ID.
     * @param {string} etag Unique mail address link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateEmail: function(contactId, etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling locateEmail.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling locateEmail.");
              }
              localVarPath = "/contacts/{contact_id}/emails/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update or append email address(es) of the contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputEmailAddress>} input Fixed set of email address(es) to be linked with the contact. Email address(es) that conflicts(email) with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeEmails: function(contactId, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling mergeEmails.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling mergeEmails.");
              }
              localVarPath = "/contacts/{contact_id}/emails".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Resets all emails of the contact according to the input dataset.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputEmailAddress>} input Final set of email address(es) to be linked with the contact. Email address(es) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEmails: function(contactId, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling resetEmails.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling resetEmails.");
              }
              localVarPath = "/contacts/{contact_id}/emails".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update the contact\'s email address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWUpdateOfTheEmailAddressLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmail: function(contactId, etag, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling updateEmail.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling updateEmail.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling updateEmail.");
              }
              localVarPath = "/contacts/{contact_id}/emails/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update the contact\'s email address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWUpdateOfTheEmailAddressLink1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmail2: function(contactId, etag, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling updateEmail2.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling updateEmail2.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling updateEmail2.");
              }
              localVarPath = "/contacts/{contact_id}/emails/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl16.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl16.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var EmailsApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Remove the contact\'s email address link
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmail: function(contactId, etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).deleteEmail(contactId, etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove email address(es) of the contact.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmails: function(contactId, etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).deleteEmails(contactId, etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locates email address(es) of the contact.
     * @param {string} contactId The Contact ID linked with.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: email address. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Link(s) with unique ID only.
     * @param {boolean} [primary] Primary email address only.
     * @param {boolean} [verified] Verified email addresses only.
     * @param {string} [typeId] Reference Object unique ID.
     * @param {string} [typeType] Reference Object well-known type.
     * @param {string} [typeName] Reference Object display name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmails: function(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).listEmails(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locate the email address link.
     * @param {string} contactId Contact source ID.
     * @param {string} etag Unique mail address link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateEmail: function(contactId, etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).locateEmail(contactId, etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update or append email address(es) of the contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputEmailAddress>} input Fixed set of email address(es) to be linked with the contact. Email address(es) that conflicts(email) with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeEmails: function(contactId, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).mergeEmails(contactId, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Resets all emails of the contact according to the input dataset.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputEmailAddress>} input Final set of email address(es) to be linked with the contact. Email address(es) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEmails: function(contactId, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).resetEmails(contactId, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update the contact\'s email address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWUpdateOfTheEmailAddressLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmail: function(contactId, etag, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).updateEmail(contactId, etag, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update the contact\'s email address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWUpdateOfTheEmailAddressLink1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmail2: function(contactId, etag, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, EmailsApiAxiosParamCreator(configuration).updateEmail2(contactId, etag, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios17.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var EmailsApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Remove the contact\'s email address link
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmail: function(contactId, etag, fields, options) {
      return EmailsApiFp(configuration).deleteEmail(contactId, etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove email address(es) of the contact.
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEmails: function(contactId, etag, fields, options) {
      return EmailsApiFp(configuration).deleteEmails(contactId, etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Locates email address(es) of the contact.
     * @param {string} contactId The Contact ID linked with.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; (page*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: email address. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Link(s) with unique ID only.
     * @param {boolean} [primary] Primary email address only.
     * @param {boolean} [verified] Verified email addresses only.
     * @param {string} [typeId] Reference Object unique ID.
     * @param {string} [typeType] Reference Object well-known type.
     * @param {string} [typeName] Reference Object display name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEmails: function(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options) {
      return EmailsApiFp(configuration).listEmails(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Locate the email address link.
     * @param {string} contactId Contact source ID.
     * @param {string} etag Unique mail address link IDentifier. Accept: &#x60;etag&#x60; (obsolete+) or &#x60;id&#x60;.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    locateEmail: function(contactId, etag, fields, options) {
      return EmailsApiFp(configuration).locateEmail(contactId, etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update or append email address(es) of the contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputEmailAddress>} input Fixed set of email address(es) to be linked with the contact. Email address(es) that conflicts(email) with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeEmails: function(contactId, input, fields, options) {
      return EmailsApiFp(configuration).mergeEmails(contactId, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Resets all emails of the contact according to the input dataset.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputEmailAddress>} input Final set of email address(es) to be linked with the contact. Email address(es) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEmails: function(contactId, input, fields, options) {
      return EmailsApiFp(configuration).resetEmails(contactId, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update the contact\'s email address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWUpdateOfTheEmailAddressLink} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmail: function(contactId, etag, input, fields, options) {
      return EmailsApiFp(configuration).updateEmail(contactId, etag, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update the contact\'s email address link details
     * @param {string} contactId Link contact ID.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWUpdateOfTheEmailAddressLink1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEmail2: function(contactId, etag, input, fields, options) {
      return EmailsApiFp(configuration).updateEmail2(contactId, etag, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var EmailsApi = (
  /** @class */
  function(_super) {
    __extends(EmailsApi2, _super);
    function EmailsApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    EmailsApi2.prototype.deleteEmail = function(contactId, etag, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).deleteEmail(contactId, etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.deleteEmails = function(contactId, etag, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).deleteEmails(contactId, etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.listEmails = function(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).listEmails(contactId, page, size, q, sort, fields, id, primary, verified, typeId, typeType, typeName, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.locateEmail = function(contactId, etag, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).locateEmail(contactId, etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.mergeEmails = function(contactId, input, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).mergeEmails(contactId, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.resetEmails = function(contactId, input, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).resetEmails(contactId, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.updateEmail = function(contactId, etag, input, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).updateEmail(contactId, etag, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    EmailsApi2.prototype.updateEmail2 = function(contactId, etag, input, fields, options) {
      var _this = this;
      return EmailsApiFp(this.configuration).updateEmail2(contactId, etag, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return EmailsApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/file-service-api.js
var globalImportUrl17 = __toESM(require_url());
var import_axios18 = __toESM(require_axios2());
var FileServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {StorageDeleteFilesRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFiles: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling deleteFiles.");
              }
              localVarPath = "/storage/file";
              localVarUrlObj = globalImportUrl17.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl17.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var FileServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {StorageDeleteFilesRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFiles: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, FileServiceApiAxiosParamCreator(configuration).deleteFiles(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios18.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var FileServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {StorageDeleteFilesRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFiles: function(body, options) {
      return FileServiceApiFp(configuration).deleteFiles(body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var FileServiceApi = (
  /** @class */
  function(_super) {
    __extends(FileServiceApi2, _super);
    function FileServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FileServiceApi2.prototype.deleteFiles = function(body, options) {
      var _this = this;
      return FileServiceApiFp(this.configuration).deleteFiles(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return FileServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/file-transcript-service-api.js
var globalImportUrl18 = __toESM(require_url());
var import_axios19 = __toESM(require_axios2());
var FileTranscriptServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {StorageStartFileTranscriptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFileTranscript: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createFileTranscript.");
              }
              localVarPath = "/storage/transcript_file";
              localVarUrlObj = globalImportUrl18.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl18.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {StorageDeleteFileTranscriptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileTranscript: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling deleteFileTranscript.");
              }
              localVarPath = "/storage/transcript_file";
              localVarUrlObj = globalImportUrl18.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl18.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileTranscriptPhrases: function(id, page, size, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling getFileTranscriptPhrases.");
              }
              localVarPath = "/storage/transcript_file/{id}/phrases".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl18.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl18.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var FileTranscriptServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {StorageStartFileTranscriptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFileTranscript: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, FileTranscriptServiceApiAxiosParamCreator(configuration).createFileTranscript(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios19.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {StorageDeleteFileTranscriptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileTranscript: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, FileTranscriptServiceApiAxiosParamCreator(configuration).deleteFileTranscript(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios19.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileTranscriptPhrases: function(id, page, size, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, FileTranscriptServiceApiAxiosParamCreator(configuration).getFileTranscriptPhrases(id, page, size, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios19.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var FileTranscriptServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {StorageStartFileTranscriptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFileTranscript: function(body, options) {
      return FileTranscriptServiceApiFp(configuration).createFileTranscript(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {StorageDeleteFileTranscriptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileTranscript: function(body, options) {
      return FileTranscriptServiceApiFp(configuration).deleteFileTranscript(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileTranscriptPhrases: function(id, page, size, options) {
      return FileTranscriptServiceApiFp(configuration).getFileTranscriptPhrases(id, page, size, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var FileTranscriptServiceApi = (
  /** @class */
  function(_super) {
    __extends(FileTranscriptServiceApi2, _super);
    function FileTranscriptServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    FileTranscriptServiceApi2.prototype.createFileTranscript = function(body, options) {
      var _this = this;
      return FileTranscriptServiceApiFp(this.configuration).createFileTranscript(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    FileTranscriptServiceApi2.prototype.deleteFileTranscript = function(body, options) {
      var _this = this;
      return FileTranscriptServiceApiFp(this.configuration).deleteFileTranscript(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    FileTranscriptServiceApi2.prototype.getFileTranscriptPhrases = function(id, page, size, options) {
      var _this = this;
      return FileTranscriptServiceApiFp(this.configuration).getFileTranscriptPhrases(id, page, size, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return FileTranscriptServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/import-template-service-api.js
var globalImportUrl19 = __toESM(require_url());
var import_axios20 = __toESM(require_axios2());
var ImportTemplateServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {StorageCreateImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImportTemplate: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createImportTemplate.");
              }
              localVarPath = "/storage/import_templates";
              localVarUrlObj = globalImportUrl19.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl19.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteImportTemplate: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteImportTemplate.");
              }
              localVarPath = "/storage/import_templates/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl19.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl19.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {StoragePatchImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchImportTemplate: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchImportTemplate.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchImportTemplate.");
              }
              localVarPath = "/storage/import_templates/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl19.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl19.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readImportTemplate: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readImportTemplate.");
              }
              localVarPath = "/storage/import_templates/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl19.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl19.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchImportTemplate: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/storage/import_templates";
              localVarUrlObj = globalImportUrl19.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl19.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {StorageUpdateImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateImportTemplate: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateImportTemplate.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateImportTemplate.");
              }
              localVarPath = "/storage/import_templates/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl19.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl19.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var ImportTemplateServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {StorageCreateImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImportTemplate: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ImportTemplateServiceApiAxiosParamCreator(configuration).createImportTemplate(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios20.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteImportTemplate: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ImportTemplateServiceApiAxiosParamCreator(configuration).deleteImportTemplate(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios20.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {StoragePatchImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchImportTemplate: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ImportTemplateServiceApiAxiosParamCreator(configuration).patchImportTemplate(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios20.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readImportTemplate: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ImportTemplateServiceApiAxiosParamCreator(configuration).readImportTemplate(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios20.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchImportTemplate: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ImportTemplateServiceApiAxiosParamCreator(configuration).searchImportTemplate(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios20.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {StorageUpdateImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateImportTemplate: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ImportTemplateServiceApiAxiosParamCreator(configuration).updateImportTemplate(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios20.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var ImportTemplateServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {StorageCreateImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImportTemplate: function(body, options) {
      return ImportTemplateServiceApiFp(configuration).createImportTemplate(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteImportTemplate: function(id, options) {
      return ImportTemplateServiceApiFp(configuration).deleteImportTemplate(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {StoragePatchImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchImportTemplate: function(id, body, options) {
      return ImportTemplateServiceApiFp(configuration).patchImportTemplate(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readImportTemplate: function(id, options) {
      return ImportTemplateServiceApiFp(configuration).readImportTemplate(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchImportTemplate: function(page, size, q, sort, fields, id, options) {
      return ImportTemplateServiceApiFp(configuration).searchImportTemplate(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {StorageUpdateImportTemplateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateImportTemplate: function(id, body, options) {
      return ImportTemplateServiceApiFp(configuration).updateImportTemplate(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var ImportTemplateServiceApi = (
  /** @class */
  function(_super) {
    __extends(ImportTemplateServiceApi2, _super);
    function ImportTemplateServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ImportTemplateServiceApi2.prototype.createImportTemplate = function(body, options) {
      var _this = this;
      return ImportTemplateServiceApiFp(this.configuration).createImportTemplate(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ImportTemplateServiceApi2.prototype.deleteImportTemplate = function(id, options) {
      var _this = this;
      return ImportTemplateServiceApiFp(this.configuration).deleteImportTemplate(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ImportTemplateServiceApi2.prototype.patchImportTemplate = function(id, body, options) {
      var _this = this;
      return ImportTemplateServiceApiFp(this.configuration).patchImportTemplate(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ImportTemplateServiceApi2.prototype.readImportTemplate = function(id, options) {
      var _this = this;
      return ImportTemplateServiceApiFp(this.configuration).readImportTemplate(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ImportTemplateServiceApi2.prototype.searchImportTemplate = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return ImportTemplateServiceApiFp(this.configuration).searchImportTemplate(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ImportTemplateServiceApi2.prototype.updateImportTemplate = function(id, body, options) {
      var _this = this;
      return ImportTemplateServiceApiFp(this.configuration).updateImportTemplate(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return ImportTemplateServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/labels-api.js
var globalImportUrl20 = __toESM(require_url());
var import_axios21 = __toESM(require_axios2());
var LabelsApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Remove Contact Labels associations.
     * @param {string} contactId Link contact ID.
     * @param {Array<string>} etag Set of unique label(s).etag identifiers.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLabels: function(contactId, etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling deleteLabels.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling deleteLabels.");
              }
              localVarPath = "/contacts/{contact_id}/labels".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl20.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (etag) {
                localVarQueryParameter["etag"] = etag;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl20.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search for Contacts engaged Label(s).
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLabels: function(page, size, q, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/contacts/labels";
              localVarUrlObj = globalImportUrl20.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl20.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locate the Contact\'s associated Label(s).
     * @param {string} contactId Link contact ID.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Record(s) with unique ID or ETag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLabels: function(contactId, page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling listLabels.");
              }
              localVarPath = "/contacts/{contact_id}/labels".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl20.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl20.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Associate NEW Labels to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeLabels: function(contactId, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling mergeLabels.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling mergeLabels.");
              }
              localVarPath = "/contacts/{contact_id}/labels".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl20.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl20.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Reset Labels to fit the specified final set.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetLabels: function(contactId, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling resetLabels.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling resetLabels.");
              }
              localVarPath = "/contacts/{contact_id}/labels".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl20.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl20.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var LabelsApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Remove Contact Labels associations.
     * @param {string} contactId Link contact ID.
     * @param {Array<string>} etag Set of unique label(s).etag identifiers.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLabels: function(contactId, etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LabelsApiAxiosParamCreator(configuration).deleteLabels(contactId, etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios21.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search for Contacts engaged Label(s).
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLabels: function(page, size, q, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LabelsApiAxiosParamCreator(configuration).getLabels(page, size, q, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios21.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Locate the Contact\'s associated Label(s).
     * @param {string} contactId Link contact ID.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Record(s) with unique ID or ETag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLabels: function(contactId, page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LabelsApiAxiosParamCreator(configuration).listLabels(contactId, page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios21.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Associate NEW Labels to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeLabels: function(contactId, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LabelsApiAxiosParamCreator(configuration).mergeLabels(contactId, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios21.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Reset Labels to fit the specified final set.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetLabels: function(contactId, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LabelsApiAxiosParamCreator(configuration).resetLabels(contactId, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios21.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var LabelsApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Remove Contact Labels associations.
     * @param {string} contactId Link contact ID.
     * @param {Array<string>} etag Set of unique label(s).etag identifiers.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLabels: function(contactId, etag, fields, options) {
      return LabelsApiFp(configuration).deleteLabels(contactId, etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Search for Contacts engaged Label(s).
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLabels: function(page, size, q, options) {
      return LabelsApiFp(configuration).getLabels(page, size, q, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Locate the Contact\'s associated Label(s).
     * @param {string} contactId Link contact ID.
     * @param {number} [page] Page number of result dataset records. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size count of records on result page. limit &#x3D; (size+1)
     * @param {string} [q] Search term: label tag. &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {Array<string>} [id] Record(s) with unique ID or ETag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLabels: function(contactId, page, size, q, sort, fields, id, options) {
      return LabelsApiFp(configuration).listLabels(contactId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Associate NEW Labels to the Contact.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Fixed set of label(s) to be linked with the contact. Label(s) that conflicts with already linked will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeLabels: function(contactId, input, fields, options) {
      return LabelsApiFp(configuration).mergeLabels(contactId, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Reset Labels to fit the specified final set.
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputLabel>} input Final set of labels(s) to be linked with the contact. Label(s) that are already linked with the contact but not given in here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetLabels: function(contactId, input, fields, options) {
      return LabelsApiFp(configuration).resetLabels(contactId, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var LabelsApi = (
  /** @class */
  function(_super) {
    __extends(LabelsApi2, _super);
    function LabelsApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelsApi2.prototype.deleteLabels = function(contactId, etag, fields, options) {
      var _this = this;
      return LabelsApiFp(this.configuration).deleteLabels(contactId, etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    LabelsApi2.prototype.getLabels = function(page, size, q, options) {
      var _this = this;
      return LabelsApiFp(this.configuration).getLabels(page, size, q, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    LabelsApi2.prototype.listLabels = function(contactId, page, size, q, sort, fields, id, options) {
      var _this = this;
      return LabelsApiFp(this.configuration).listLabels(contactId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    LabelsApi2.prototype.mergeLabels = function(contactId, input, fields, options) {
      var _this = this;
      return LabelsApiFp(this.configuration).mergeLabels(contactId, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    LabelsApi2.prototype.resetLabels = function(contactId, input, fields, options) {
      var _this = this;
      return LabelsApiFp(this.configuration).resetLabels(contactId, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return LabelsApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/list-service-api.js
var globalImportUrl21 = __toESM(require_url());
var import_axios22 = __toESM(require_axios2());
var ListServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createList.");
              }
              localVarPath = "/call_center/list";
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create ListCommunication
     * @param {string} listId
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createListCommunication: function(listId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (listId === null || listId === void 0) {
                throw new RequiredError("listId", "Required parameter listId was null or undefined when calling createListCommunication.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createListCommunication.");
              }
              localVarPath = "/call_center/list/{list_id}/communication".replace("{list_id}", encodeURIComponent(String(listId)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteList.");
              }
              localVarPath = "/call_center/list/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} listId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListCommunication: function(listId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (listId === null || listId === void 0) {
                throw new RequiredError("listId", "Required parameter listId was null or undefined when calling deleteListCommunication.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteListCommunication.");
              }
              localVarPath = "/call_center/list/{list_id}/communication/{id}".replace("{list_id}", encodeURIComponent(String(listId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readList: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readList.");
              }
              localVarPath = "/call_center/list/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List item
     * @param {string} listId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readListCommunication: function(listId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (listId === null || listId === void 0) {
                throw new RequiredError("listId", "Required parameter listId was null or undefined when calling readListCommunication.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readListCommunication.");
              }
              localVarPath = "/call_center/list/{list_id}/communication/{id}".replace("{list_id}", encodeURIComponent(String(listId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchList: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/list";
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of List
     * @param {string} listId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [expireAtFrom]
     * @param {string} [expireAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchListCommunication: function(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (listId === null || listId === void 0) {
                throw new RequiredError("listId", "Required parameter listId was null or undefined when calling searchListCommunication.");
              }
              localVarPath = "/call_center/list/{list_id}/communication".replace("{list_id}", encodeURIComponent(String(listId)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (expireAtFrom !== void 0) {
                localVarQueryParameter["expire_at.from"] = expireAtFrom;
              }
              if (expireAtTo !== void 0) {
                localVarQueryParameter["expire_at.to"] = expireAtTo;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateList.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateList.");
              }
              localVarPath = "/call_center/list/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update ListCommunication
     * @param {string} listId
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListCommunication: function(listId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (listId === null || listId === void 0) {
                throw new RequiredError("listId", "Required parameter listId was null or undefined when calling updateListCommunication.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateListCommunication.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateListCommunication.");
              }
              localVarPath = "/call_center/list/{list_id}/communication/{id}".replace("{list_id}", encodeURIComponent(String(listId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl21.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl21.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var ListServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).createList(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create ListCommunication
     * @param {string} listId
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createListCommunication: function(listId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).createListCommunication(listId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).deleteList(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} listId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListCommunication: function(listId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).deleteListCommunication(listId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readList: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).readList(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List item
     * @param {string} listId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readListCommunication: function(listId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).readListCommunication(listId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchList: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).searchList(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of List
     * @param {string} listId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [expireAtFrom]
     * @param {string} [expireAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchListCommunication: function(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).searchListCommunication(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).updateList(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update ListCommunication
     * @param {string} listId
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListCommunication: function(listId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, ListServiceApiAxiosParamCreator(configuration).updateListCommunication(listId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios22.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var ListServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create List
     * @param {EngineCreateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList: function(body, options) {
      return ListServiceApiFp(configuration).createList(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create ListCommunication
     * @param {string} listId
     * @param {EngineCreateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createListCommunication: function(listId, body, options) {
      return ListServiceApiFp(configuration).createListCommunication(listId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove list
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteList: function(id, domainId, options) {
      return ListServiceApiFp(configuration).deleteList(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove ListCommunication
     * @param {string} listId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteListCommunication: function(listId, id, domainId, options) {
      return ListServiceApiFp(configuration).deleteListCommunication(listId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readList: function(id, domainId, options) {
      return ListServiceApiFp(configuration).readList(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List item
     * @param {string} listId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readListCommunication: function(listId, id, domainId, options) {
      return ListServiceApiFp(configuration).readListCommunication(listId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of List
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchList: function(page, size, q, sort, fields, id, options) {
      return ListServiceApiFp(configuration).searchList(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of List
     * @param {string} listId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [expireAtFrom]
     * @param {string} [expireAtTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchListCommunication: function(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options) {
      return ListServiceApiFp(configuration).searchListCommunication(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update list
     * @param {string} id
     * @param {EngineUpdateListRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateList: function(id, body, options) {
      return ListServiceApiFp(configuration).updateList(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update ListCommunication
     * @param {string} listId
     * @param {string} id
     * @param {EngineUpdateListCommunicationRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListCommunication: function(listId, id, body, options) {
      return ListServiceApiFp(configuration).updateListCommunication(listId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var ListServiceApi = (
  /** @class */
  function(_super) {
    __extends(ListServiceApi2, _super);
    function ListServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ListServiceApi2.prototype.createList = function(body, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).createList(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.createListCommunication = function(listId, body, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).createListCommunication(listId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.deleteList = function(id, domainId, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).deleteList(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.deleteListCommunication = function(listId, id, domainId, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).deleteListCommunication(listId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.readList = function(id, domainId, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).readList(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.readListCommunication = function(listId, id, domainId, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).readListCommunication(listId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.searchList = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).searchList(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.searchListCommunication = function(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).searchListCommunication(listId, page, size, q, sort, fields, id, expireAtFrom, expireAtTo, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.updateList = function(id, body, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).updateList(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    ListServiceApi2.prototype.updateListCommunication = function(listId, id, body, options) {
      var _this = this;
      return ListServiceApiFp(this.configuration).updateListCommunication(listId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return ListServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/logger-service-api.js
var globalImportUrl22 = __toESM(require_url());
var import_axios23 = __toESM(require_axios2());
var LoggerServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {number} configId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [userId]
     * @param {string} [userName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByConfigId: function(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (configId === null || configId === void 0) {
                throw new RequiredError("configId", "Required parameter configId was null or undefined when calling searchLogByConfigId.");
              }
              localVarPath = "/logger/config/{config_id}/logs".replace("{config_id}", encodeURIComponent(String(configId)));
              localVarUrlObj = globalImportUrl22.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (userId !== void 0) {
                localVarQueryParameter["user.id"] = userId;
              }
              if (userName !== void 0) {
                localVarQueryParameter["user.name"] = userName;
              }
              if (action !== void 0) {
                localVarQueryParameter["action"] = action;
              }
              if (userIp !== void 0) {
                localVarQueryParameter["userIp"] = userIp;
              }
              if (dateFrom !== void 0) {
                localVarQueryParameter["dateFrom"] = dateFrom;
              }
              if (dateTo !== void 0) {
                localVarQueryParameter["dateTo"] = dateTo;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl22.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} userId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [objectId]
     * @param {string} [objectName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByUserId: function(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (userId === null || userId === void 0) {
                throw new RequiredError("userId", "Required parameter userId was null or undefined when calling searchLogByUserId.");
              }
              localVarPath = "/logger/user/{user_id}/logs".replace("{user_id}", encodeURIComponent(String(userId)));
              localVarUrlObj = globalImportUrl22.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (objectId !== void 0) {
                localVarQueryParameter["object.id"] = objectId;
              }
              if (objectName !== void 0) {
                localVarQueryParameter["object.name"] = objectName;
              }
              if (action !== void 0) {
                localVarQueryParameter["action"] = action;
              }
              if (userIp !== void 0) {
                localVarQueryParameter["userIp"] = userIp;
              }
              if (dateFrom !== void 0) {
                localVarQueryParameter["dateFrom"] = dateFrom;
              }
              if (dateTo !== void 0) {
                localVarQueryParameter["dateTo"] = dateTo;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl22.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var LoggerServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {number} configId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [userId]
     * @param {string} [userName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByConfigId: function(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LoggerServiceApiAxiosParamCreator(configuration).searchLogByConfigId(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios23.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} userId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [objectId]
     * @param {string} [objectName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByUserId: function(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, LoggerServiceApiAxiosParamCreator(configuration).searchLogByUserId(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios23.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var LoggerServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {number} configId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [userId]
     * @param {string} [userName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByConfigId: function(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options) {
      return LoggerServiceApiFp(configuration).searchLogByConfigId(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} userId REQUIRED filter
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {number} [objectId]
     * @param {string} [objectName]
     * @param {'DEFAULT_NO_ACTION' | 'CREATE' | 'UPDATE' | 'READ' | 'DELETE'} [action] GENERAL filters.
     * @param {string} [userIp]
     * @param {string} [dateFrom]
     * @param {string} [dateTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLogByUserId: function(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options) {
      return LoggerServiceApiFp(configuration).searchLogByUserId(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var LoggerServiceApi = (
  /** @class */
  function(_super) {
    __extends(LoggerServiceApi2, _super);
    function LoggerServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    LoggerServiceApi2.prototype.searchLogByConfigId = function(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options) {
      var _this = this;
      return LoggerServiceApiFp(this.configuration).searchLogByConfigId(configId, page, size, q, sort, fields, userId, userName, action, userIp, dateFrom, dateTo, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    LoggerServiceApi2.prototype.searchLogByUserId = function(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options) {
      var _this = this;
      return LoggerServiceApiFp(this.configuration).searchLogByUserId(userId, page, size, q, sort, fields, objectId, objectName, action, userIp, dateFrom, dateTo, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return LoggerServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/media-file-service-api.js
var globalImportUrl23 = __toESM(require_url());
var import_axios24 = __toESM(require_axios2());
var MediaFileServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMediaFile: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteMediaFile.");
              }
              localVarPath = "/storage/media/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl23.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl23.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMediaFile: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readMediaFile.");
              }
              localVarPath = "/storage/media/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl23.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl23.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMediaFile: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/storage/media";
              localVarUrlObj = globalImportUrl23.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl23.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var MediaFileServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMediaFile: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MediaFileServiceApiAxiosParamCreator(configuration).deleteMediaFile(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios24.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMediaFile: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MediaFileServiceApiAxiosParamCreator(configuration).readMediaFile(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios24.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMediaFile: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MediaFileServiceApiAxiosParamCreator(configuration).searchMediaFile(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios24.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var MediaFileServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Remove MediaFile
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMediaFile: function(id, domainId, options) {
      return MediaFileServiceApiFp(configuration).deleteMediaFile(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary MediaFile item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMediaFile: function(id, domainId, options) {
      return MediaFileServiceApiFp(configuration).readMediaFile(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Search MediaFile
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMediaFile: function(page, size, q, sort, fields, id, options) {
      return MediaFileServiceApiFp(configuration).searchMediaFile(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var MediaFileServiceApi = (
  /** @class */
  function(_super) {
    __extends(MediaFileServiceApi2, _super);
    function MediaFileServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MediaFileServiceApi2.prototype.deleteMediaFile = function(id, domainId, options) {
      var _this = this;
      return MediaFileServiceApiFp(this.configuration).deleteMediaFile(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MediaFileServiceApi2.prototype.readMediaFile = function(id, domainId, options) {
      var _this = this;
      return MediaFileServiceApiFp(this.configuration).readMediaFile(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MediaFileServiceApi2.prototype.searchMediaFile = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return MediaFileServiceApiFp(this.configuration).searchMediaFile(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return MediaFileServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/member-service-api.js
var globalImportUrl24 = __toESM(require_url());
var import_axios25 = __toESM(require_axios2());
var MemberServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptCallbackRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptCallback: function(attemptId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (attemptId === null || attemptId === void 0) {
                throw new RequiredError("attemptId", "Required parameter attemptId was null or undefined when calling attemptCallback.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling attemptCallback.");
              }
              localVarPath = "/call_center/attempts/{attempt_id}".replace("{attempt_id}", encodeURIComponent(String(attemptId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {string} memberId
     * @param {string} attemptId
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptResult: function(queueId, memberId, attemptId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling attemptResult.");
              }
              if (memberId === null || memberId === void 0) {
                throw new RequiredError("memberId", "Required parameter memberId was null or undefined when calling attemptResult.");
              }
              if (attemptId === null || attemptId === void 0) {
                throw new RequiredError("attemptId", "Required parameter attemptId was null or undefined when calling attemptResult.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling attemptResult.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{member_id}/attempts/{attempt_id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{member_id}", encodeURIComponent(String(memberId))).replace("{attempt_id}", encodeURIComponent(String(attemptId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptRenewalResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptsRenewalResult: function(attemptId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (attemptId === null || attemptId === void 0) {
                throw new RequiredError("attemptId", "Required parameter attemptId was null or undefined when calling attemptsRenewalResult.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling attemptsRenewalResult.");
              }
              localVarPath = "/call_center/queues/attempts/{attempt_id}/renewal".replace("{attempt_id}", encodeURIComponent(String(attemptId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queueId
     * @param {string} memberId
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAttempt: function(queueId, memberId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createAttempt.");
              }
              if (memberId === null || memberId === void 0) {
                throw new RequiredError("memberId", "Required parameter memberId was null or undefined when calling createAttempt.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createAttempt.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{member_id}/attempts".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{member_id}", encodeURIComponent(String(memberId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createMember.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createMember.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMemberBulk: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createMemberBulk.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createMemberBulk.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/bulk".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: function(queueId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling deleteMember.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteMember.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queueId
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMembers: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling deleteMembers.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling deleteMembers.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling patchMember.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchMember.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchMember.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember: function(queueId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling readMember.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readMember.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ResetMembers
     * @param {string} queueId
     * @param {EngineResetMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetMembers: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling resetMembers.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling resetMembers.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/reset".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [result]
     * @param {string} [leavingAtFrom]
     * @param {string} [leavingAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttempts: function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/queues/attempts/active";
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (joinedAtFrom !== void 0) {
                localVarQueryParameter["joined_at.from"] = joinedAtFrom;
              }
              if (joinedAtTo !== void 0) {
                localVarQueryParameter["joined_at.to"] = joinedAtTo;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (bucketId) {
                localVarQueryParameter["bucket_id"] = bucketId;
              }
              if (memberId) {
                localVarQueryParameter["member_id"] = memberId;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (result) {
                localVarQueryParameter["result"] = result;
              }
              if (leavingAtFrom !== void 0) {
                localVarQueryParameter["leaving_at.from"] = leavingAtFrom;
              }
              if (leavingAtTo !== void 0) {
                localVarQueryParameter["leaving_at.to"] = leavingAtTo;
              }
              if (offeringAtFrom !== void 0) {
                localVarQueryParameter["offering_at.from"] = offeringAtFrom;
              }
              if (offeringAtTo !== void 0) {
                localVarQueryParameter["offering_at.to"] = offeringAtTo;
              }
              if (durationFrom !== void 0) {
                localVarQueryParameter["duration.from"] = durationFrom;
              }
              if (durationTo !== void 0) {
                localVarQueryParameter["duration.to"] = durationTo;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [result]
     * @param {string} [leavingAtFrom]
     * @param {string} [leavingAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttemptsHistory: function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/queues/attempts/history";
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (joinedAtFrom !== void 0) {
                localVarQueryParameter["joined_at.from"] = joinedAtFrom;
              }
              if (joinedAtTo !== void 0) {
                localVarQueryParameter["joined_at.to"] = joinedAtTo;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (bucketId) {
                localVarQueryParameter["bucket_id"] = bucketId;
              }
              if (memberId) {
                localVarQueryParameter["member_id"] = memberId;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              if (result) {
                localVarQueryParameter["result"] = result;
              }
              if (leavingAtFrom !== void 0) {
                localVarQueryParameter["leaving_at.from"] = leavingAtFrom;
              }
              if (leavingAtTo !== void 0) {
                localVarQueryParameter["leaving_at.to"] = leavingAtTo;
              }
              if (offeringAtFrom !== void 0) {
                localVarQueryParameter["offering_at.from"] = offeringAtFrom;
              }
              if (offeringAtTo !== void 0) {
                localVarQueryParameter["offering_at.to"] = offeringAtTo;
              }
              if (durationFrom !== void 0) {
                localVarQueryParameter["duration.from"] = durationFrom;
              }
              if (durationTo !== void 0) {
                localVarQueryParameter["duration.to"] = durationTo;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queueId
     * @param {string} memberId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberAttempts: function(queueId, memberId, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling searchMemberAttempts.");
              }
              if (memberId === null || memberId === void 0) {
                throw new RequiredError("memberId", "Required parameter memberId was null or undefined when calling searchMemberAttempts.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{member_id}/attempts".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{member_id}", encodeURIComponent(String(memberId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Member
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [bucketId]
     * @param {string} [destination]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {Array<string>} [stopCause]
     * @param {string} [priorityFrom]
     * @param {string} [priorityTo]
     * @param {string} [name]
     * @param {string} [attemptsFrom]
     * @param {string} [attemptsTo]
     * @param {Array<number>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberInQueue: function(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling searchMemberInQueue.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (bucketId) {
                localVarQueryParameter["bucket_id"] = bucketId;
              }
              if (destination !== void 0) {
                localVarQueryParameter["destination"] = destination;
              }
              if (createdAtFrom !== void 0) {
                localVarQueryParameter["created_at.from"] = createdAtFrom;
              }
              if (createdAtTo !== void 0) {
                localVarQueryParameter["created_at.to"] = createdAtTo;
              }
              if (offeringAtFrom !== void 0) {
                localVarQueryParameter["offering_at.from"] = offeringAtFrom;
              }
              if (offeringAtTo !== void 0) {
                localVarQueryParameter["offering_at.to"] = offeringAtTo;
              }
              if (stopCause) {
                localVarQueryParameter["stop_cause"] = stopCause;
              }
              if (priorityFrom !== void 0) {
                localVarQueryParameter["priority.from"] = priorityFrom;
              }
              if (priorityTo !== void 0) {
                localVarQueryParameter["priority.to"] = priorityTo;
              }
              if (name !== void 0) {
                localVarQueryParameter["name"] = name;
              }
              if (attemptsFrom !== void 0) {
                localVarQueryParameter["attempts.from"] = attemptsFrom;
              }
              if (attemptsTo !== void 0) {
                localVarQueryParameter["attempts.to"] = attemptsTo;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [bucketId]
     * @param {string} [destination]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {Array<string>} [stopCause]
     * @param {string} [priorityFrom]
     * @param {string} [priorityTo]
     * @param {string} [name]
     * @param {string} [attemptsFrom]
     * @param {string} [attemptsTo]
     * @param {Array<number>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMembers: function(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/members";
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (bucketId) {
                localVarQueryParameter["bucket_id"] = bucketId;
              }
              if (destination !== void 0) {
                localVarQueryParameter["destination"] = destination;
              }
              if (createdAtFrom !== void 0) {
                localVarQueryParameter["created_at.from"] = createdAtFrom;
              }
              if (createdAtTo !== void 0) {
                localVarQueryParameter["created_at.to"] = createdAtTo;
              }
              if (offeringAtFrom !== void 0) {
                localVarQueryParameter["offering_at.from"] = offeringAtFrom;
              }
              if (offeringAtTo !== void 0) {
                localVarQueryParameter["offering_at.to"] = offeringAtTo;
              }
              if (stopCause) {
                localVarQueryParameter["stop_cause"] = stopCause;
              }
              if (priorityFrom !== void 0) {
                localVarQueryParameter["priority.from"] = priorityFrom;
              }
              if (priorityTo !== void 0) {
                localVarQueryParameter["priority.to"] = priorityTo;
              }
              if (name !== void 0) {
                localVarQueryParameter["name"] = name;
              }
              if (attemptsFrom !== void 0) {
                localVarQueryParameter["attempts.from"] = attemptsFrom;
              }
              if (attemptsTo !== void 0) {
                localVarQueryParameter["attempts.to"] = attemptsTo;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling updateMember.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateMember.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateMember.");
              }
              localVarPath = "/call_center/queues/{queue_id}/members/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl24.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl24.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var MemberServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptCallbackRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptCallback: function(attemptId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).attemptCallback(attemptId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {string} memberId
     * @param {string} attemptId
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptResult: function(queueId, memberId, attemptId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).attemptResult(queueId, memberId, attemptId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptRenewalResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptsRenewalResult: function(attemptId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).attemptsRenewalResult(attemptId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queueId
     * @param {string} memberId
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAttempt: function(queueId, memberId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).createAttempt(queueId, memberId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).createMember(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMemberBulk: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).createMemberBulk(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: function(queueId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).deleteMember(queueId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queueId
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMembers: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).deleteMembers(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).patchMember(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember: function(queueId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).readMember(queueId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ResetMembers
     * @param {string} queueId
     * @param {EngineResetMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetMembers: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).resetMembers(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [result]
     * @param {string} [leavingAtFrom]
     * @param {string} [leavingAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttempts: function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).searchAttempts(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [result]
     * @param {string} [leavingAtFrom]
     * @param {string} [leavingAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttemptsHistory: function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).searchAttemptsHistory(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queueId
     * @param {string} memberId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberAttempts: function(queueId, memberId, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).searchMemberAttempts(queueId, memberId, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Member
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [bucketId]
     * @param {string} [destination]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {Array<string>} [stopCause]
     * @param {string} [priorityFrom]
     * @param {string} [priorityTo]
     * @param {string} [name]
     * @param {string} [attemptsFrom]
     * @param {string} [attemptsTo]
     * @param {Array<number>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberInQueue: function(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).searchMemberInQueue(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [bucketId]
     * @param {string} [destination]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {Array<string>} [stopCause]
     * @param {string} [priorityFrom]
     * @param {string} [priorityTo]
     * @param {string} [name]
     * @param {string} [attemptsFrom]
     * @param {string} [attemptsTo]
     * @param {Array<number>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMembers: function(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).searchMembers(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, MemberServiceApiAxiosParamCreator(configuration).updateMember(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios25.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var MemberServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptCallbackRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptCallback: function(attemptId, body, options) {
      return MemberServiceApiFp(configuration).attemptCallback(attemptId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {string} memberId
     * @param {string} attemptId
     * @param {EngineAttemptResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptResult: function(queueId, memberId, attemptId, body, options) {
      return MemberServiceApiFp(configuration).attemptResult(queueId, memberId, attemptId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} attemptId
     * @param {EngineAttemptRenewalResultRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attemptsRenewalResult: function(attemptId, body, options) {
      return MemberServiceApiFp(configuration).attemptsRenewalResult(attemptId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Offline queue
     * @param {string} queueId
     * @param {string} memberId
     * @param {EngineCreateAttemptRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAttempt: function(queueId, memberId, body, options) {
      return MemberServiceApiFp(configuration).createAttempt(queueId, memberId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember: function(queueId, body, options) {
      return MemberServiceApiFp(configuration).createMember(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create Member
     * @param {string} queueId
     * @param {EngineCreateMemberBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMemberBulk: function(queueId, body, options) {
      return MemberServiceApiFp(configuration).createMemberBulk(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary DeleteMember
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: function(queueId, id, domainId, options) {
      return MemberServiceApiFp(configuration).deleteMember(queueId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary DeleteMembers
     * @param {string} queueId
     * @param {EngineDeleteMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMembers: function(queueId, body, options) {
      return MemberServiceApiFp(configuration).deleteMembers(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Patch Member
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchMember: function(queueId, id, body, options) {
      return MemberServiceApiFp(configuration).patchMember(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember: function(queueId, id, domainId, options) {
      return MemberServiceApiFp(configuration).readMember(queueId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary ResetMembers
     * @param {string} queueId
     * @param {EngineResetMembersRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetMembers: function(queueId, body, options) {
      return MemberServiceApiFp(configuration).resetMembers(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [result]
     * @param {string} [leavingAtFrom]
     * @param {string} [leavingAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttempts: function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      return MemberServiceApiFp(configuration).searchAttempts(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {Array<string>} [id]
     * @param {Array<string>} [queueId]
     * @param {Array<string>} [bucketId]
     * @param {Array<string>} [memberId]
     * @param {Array<string>} [agentId]
     * @param {Array<string>} [result]
     * @param {string} [leavingAtFrom]
     * @param {string} [leavingAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAttemptsHistory: function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      return MemberServiceApiFp(configuration).searchAttemptsHistory(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchMemberAttempts
     * @param {string} queueId
     * @param {string} memberId
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberAttempts: function(queueId, memberId, domainId, options) {
      return MemberServiceApiFp(configuration).searchMemberAttempts(queueId, memberId, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of Member
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [bucketId]
     * @param {string} [destination]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {Array<string>} [stopCause]
     * @param {string} [priorityFrom]
     * @param {string} [priorityTo]
     * @param {string} [name]
     * @param {string} [attemptsFrom]
     * @param {string} [attemptsTo]
     * @param {Array<number>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMemberInQueue: function(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      return MemberServiceApiFp(configuration).searchMemberInQueue(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Search of Member
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [bucketId]
     * @param {string} [destination]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [offeringAtFrom]
     * @param {string} [offeringAtTo]
     * @param {Array<string>} [stopCause]
     * @param {string} [priorityFrom]
     * @param {string} [priorityTo]
     * @param {string} [name]
     * @param {string} [attemptsFrom]
     * @param {string} [attemptsTo]
     * @param {Array<number>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMembers: function(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      return MemberServiceApiFp(configuration).searchMembers(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary UpdateMember
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateMemberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember: function(queueId, id, body, options) {
      return MemberServiceApiFp(configuration).updateMember(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var MemberServiceApi = (
  /** @class */
  function(_super) {
    __extends(MemberServiceApi2, _super);
    function MemberServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MemberServiceApi2.prototype.attemptCallback = function(attemptId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).attemptCallback(attemptId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.attemptResult = function(queueId, memberId, attemptId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).attemptResult(queueId, memberId, attemptId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.attemptsRenewalResult = function(attemptId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).attemptsRenewalResult(attemptId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.createAttempt = function(queueId, memberId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).createAttempt(queueId, memberId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.createMember = function(queueId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).createMember(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.createMemberBulk = function(queueId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).createMemberBulk(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.deleteMember = function(queueId, id, domainId, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).deleteMember(queueId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.deleteMembers = function(queueId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).deleteMembers(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.patchMember = function(queueId, id, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).patchMember(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.readMember = function(queueId, id, domainId, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).readMember(queueId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.resetMembers = function(queueId, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).resetMembers(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.searchAttempts = function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).searchAttempts(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.searchAttemptsHistory = function(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).searchAttemptsHistory(page, size, q, sort, fields, joinedAtFrom, joinedAtTo, id, queueId, bucketId, memberId, agentId, result, leavingAtFrom, leavingAtTo, offeringAtFrom, offeringAtTo, durationFrom, durationTo, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.searchMemberAttempts = function(queueId, memberId, domainId, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).searchMemberAttempts(queueId, memberId, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.searchMemberInQueue = function(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).searchMemberInQueue(queueId, page, size, q, sort, fields, id, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.searchMembers = function(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).searchMembers(page, size, q, sort, fields, id, queueId, bucketId, destination, createdAtFrom, createdAtTo, offeringAtFrom, offeringAtTo, stopCause, priorityFrom, priorityTo, name, attemptsFrom, attemptsTo, agentId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    MemberServiceApi2.prototype.updateMember = function(queueId, id, body, options) {
      var _this = this;
      return MemberServiceApiFp(this.configuration).updateMember(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return MemberServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/outbound-resource-group-service-api.js
var globalImportUrl25 = __toESM(require_url());
var import_axios26 = __toESM(require_axios2());
var OutboundResourceGroupServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceGroup: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createOutboundResourceGroup.");
              }
              localVarPath = "/call_center/resource_group";
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} groupId
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceInGroup: function(groupId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (groupId === null || groupId === void 0) {
                throw new RequiredError("groupId", "Required parameter groupId was null or undefined when calling createOutboundResourceInGroup.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createOutboundResourceInGroup.");
              }
              localVarPath = "/call_center/resource_group/{group_id}/resource".replace("{group_id}", encodeURIComponent(String(groupId)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceGroup: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteOutboundResourceGroup.");
              }
              localVarPath = "/call_center/resource_group/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} groupId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceInGroup: function(groupId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (groupId === null || groupId === void 0) {
                throw new RequiredError("groupId", "Required parameter groupId was null or undefined when calling deleteOutboundResourceInGroup.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteOutboundResourceInGroup.");
              }
              localVarPath = "/call_center/resource_group/{group_id}/resource/{id}".replace("{group_id}", encodeURIComponent(String(groupId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceGroup: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readOutboundResourceGroup.");
              }
              localVarPath = "/call_center/resource_group/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} groupId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceInGroup: function(groupId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (groupId === null || groupId === void 0) {
                throw new RequiredError("groupId", "Required parameter groupId was null or undefined when calling readOutboundResourceInGroup.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readOutboundResourceInGroup.");
              }
              localVarPath = "/call_center/resource_group/{group_id}/resource/{id}".replace("{group_id}", encodeURIComponent(String(groupId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceGroup: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/resource_group";
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} groupId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceInGroup: function(groupId, page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (groupId === null || groupId === void 0) {
                throw new RequiredError("groupId", "Required parameter groupId was null or undefined when calling searchOutboundResourceInGroup.");
              }
              localVarPath = "/call_center/resource_group/{group_id}/resource".replace("{group_id}", encodeURIComponent(String(groupId)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceGroup: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateOutboundResourceGroup.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateOutboundResourceGroup.");
              }
              localVarPath = "/call_center/resource_group/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} groupId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceInGroup: function(groupId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (groupId === null || groupId === void 0) {
                throw new RequiredError("groupId", "Required parameter groupId was null or undefined when calling updateOutboundResourceInGroup.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateOutboundResourceInGroup.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateOutboundResourceInGroup.");
              }
              localVarPath = "/call_center/resource_group/{group_id}/resource/{id}".replace("{group_id}", encodeURIComponent(String(groupId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl25.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl25.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var OutboundResourceGroupServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceGroup: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).createOutboundResourceGroup(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} groupId
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceInGroup: function(groupId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).createOutboundResourceInGroup(groupId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceGroup: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).deleteOutboundResourceGroup(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} groupId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceInGroup: function(groupId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).deleteOutboundResourceInGroup(groupId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceGroup: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).readOutboundResourceGroup(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} groupId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceInGroup: function(groupId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).readOutboundResourceInGroup(groupId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceGroup: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).searchOutboundResourceGroup(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} groupId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceInGroup: function(groupId, page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).searchOutboundResourceInGroup(groupId, page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceGroup: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).updateOutboundResourceGroup(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} groupId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceInGroup: function(groupId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceGroupServiceApiAxiosParamCreator(configuration).updateOutboundResourceInGroup(groupId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios26.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var OutboundResourceGroupServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {EngineCreateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceGroup: function(body, options) {
      return OutboundResourceGroupServiceApiFp(configuration).createOutboundResourceGroup(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create OutboundResourceGroup
     * @param {string} groupId
     * @param {EngineCreateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceInGroup: function(groupId, body, options) {
      return OutboundResourceGroupServiceApiFp(configuration).createOutboundResourceInGroup(groupId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove OutboundResourceGroup
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceGroup: function(id, domainId, options) {
      return OutboundResourceGroupServiceApiFp(configuration).deleteOutboundResourceGroup(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove OutboundResourceInGroup
     * @param {string} groupId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceInGroup: function(groupId, id, domainId, options) {
      return OutboundResourceGroupServiceApiFp(configuration).deleteOutboundResourceInGroup(groupId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary OutboundResourceGroup item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceGroup: function(id, domainId, options) {
      return OutboundResourceGroupServiceApiFp(configuration).readOutboundResourceGroup(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary OutboundResourceInGroup item
     * @param {string} groupId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceInGroup: function(groupId, id, domainId, options) {
      return OutboundResourceGroupServiceApiFp(configuration).readOutboundResourceInGroup(groupId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of OutboundResourceGroup
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceGroup: function(page, size, q, sort, fields, id, options) {
      return OutboundResourceGroupServiceApiFp(configuration).searchOutboundResourceGroup(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of OutboundResourceInGroup
     * @param {string} groupId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceInGroup: function(groupId, page, size, q, sort, fields, id, options) {
      return OutboundResourceGroupServiceApiFp(configuration).searchOutboundResourceInGroup(groupId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update OutboundResourceGroup
     * @param {string} id
     * @param {EngineUpdateOutboundResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceGroup: function(id, body, options) {
      return OutboundResourceGroupServiceApiFp(configuration).updateOutboundResourceGroup(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update OutboundResourceInGroup
     * @param {string} groupId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceInGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceInGroup: function(groupId, id, body, options) {
      return OutboundResourceGroupServiceApiFp(configuration).updateOutboundResourceInGroup(groupId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var OutboundResourceGroupServiceApi = (
  /** @class */
  function(_super) {
    __extends(OutboundResourceGroupServiceApi2, _super);
    function OutboundResourceGroupServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    OutboundResourceGroupServiceApi2.prototype.createOutboundResourceGroup = function(body, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).createOutboundResourceGroup(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.createOutboundResourceInGroup = function(groupId, body, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).createOutboundResourceInGroup(groupId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.deleteOutboundResourceGroup = function(id, domainId, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).deleteOutboundResourceGroup(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.deleteOutboundResourceInGroup = function(groupId, id, domainId, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).deleteOutboundResourceInGroup(groupId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.readOutboundResourceGroup = function(id, domainId, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).readOutboundResourceGroup(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.readOutboundResourceInGroup = function(groupId, id, domainId, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).readOutboundResourceInGroup(groupId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.searchOutboundResourceGroup = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).searchOutboundResourceGroup(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.searchOutboundResourceInGroup = function(groupId, page, size, q, sort, fields, id, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).searchOutboundResourceInGroup(groupId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.updateOutboundResourceGroup = function(id, body, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).updateOutboundResourceGroup(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceGroupServiceApi2.prototype.updateOutboundResourceInGroup = function(groupId, id, body, options) {
      var _this = this;
      return OutboundResourceGroupServiceApiFp(this.configuration).updateOutboundResourceInGroup(groupId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return OutboundResourceGroupServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/outbound-resource-service-api.js
var globalImportUrl26 = __toESM(require_url());
var import_axios27 = __toESM(require_axios2());
var OutboundResourceServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createOutboundResource.");
              }
              localVarPath = "/call_center/resources";
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplay: function(resourceId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling createOutboundResourceDisplay.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createOutboundResourceDisplay.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display".replace("{resource_id}", encodeURIComponent(String(resourceId)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplayBulk: function(resourceId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling createOutboundResourceDisplayBulk.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createOutboundResourceDisplayBulk.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display/bulk".replace("{resource_id}", encodeURIComponent(String(resourceId)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteOutboundResource.");
              }
              localVarPath = "/call_center/resources/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplay: function(resourceId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling deleteOutboundResourceDisplay.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteOutboundResourceDisplay.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display/{id}".replace("{resource_id}", encodeURIComponent(String(resourceId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove ResourceDisplays
     * @param {string} resourceId
     * @param {Array<string>} [items]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplays: function(resourceId, items, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling deleteOutboundResourceDisplays.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display".replace("{resource_id}", encodeURIComponent(String(resourceId)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (items) {
                localVarQueryParameter["items"] = items;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOutboundResource: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchOutboundResource.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchOutboundResource.");
              }
              localVarPath = "/call_center/resources/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readOutboundResource.");
              }
              localVarPath = "/call_center/resources/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceDisplay: function(resourceId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling readOutboundResourceDisplay.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readOutboundResourceDisplay.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display/{id}".replace("{resource_id}", encodeURIComponent(String(resourceId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/resources";
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resourceId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceDisplay: function(resourceId, page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling searchOutboundResourceDisplay.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display".replace("{resource_id}", encodeURIComponent(String(resourceId)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateOutboundResource.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateOutboundResource.");
              }
              localVarPath = "/call_center/resources/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceDisplay: function(resourceId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (resourceId === null || resourceId === void 0) {
                throw new RequiredError("resourceId", "Required parameter resourceId was null or undefined when calling updateOutboundResourceDisplay.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateOutboundResourceDisplay.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateOutboundResourceDisplay.");
              }
              localVarPath = "/call_center/resources/{resource_id}/display/{id}".replace("{resource_id}", encodeURIComponent(String(resourceId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl26.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl26.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var OutboundResourceServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResource(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplay: function(resourceId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResourceDisplay(resourceId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplayBulk: function(resourceId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).createOutboundResourceDisplayBulk(resourceId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResource(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplay: function(resourceId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResourceDisplay(resourceId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove ResourceDisplays
     * @param {string} resourceId
     * @param {Array<string>} [items]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplays: function(resourceId, items, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).deleteOutboundResourceDisplays(resourceId, items, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOutboundResource: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).patchOutboundResource(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResource(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceDisplay: function(resourceId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).readOutboundResourceDisplay(resourceId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResource(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resourceId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceDisplay: function(resourceId, page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).searchOutboundResourceDisplay(resourceId, page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResource(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceDisplay: function(resourceId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, OutboundResourceServiceApiAxiosParamCreator(configuration).updateOutboundResourceDisplay(resourceId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios27.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var OutboundResourceServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create OutboundResource
     * @param {EngineCreateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResource: function(body, options) {
      return OutboundResourceServiceApiFp(configuration).createOutboundResource(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplay: function(resourceId, body, options) {
      return OutboundResourceServiceApiFp(configuration).createOutboundResourceDisplay(resourceId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Create CreateOutboundResourceDisplay
     * @param {string} resourceId
     * @param {EngineCreateOutboundResourceDisplayBulkRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutboundResourceDisplayBulk: function(resourceId, body, options) {
      return OutboundResourceServiceApiFp(configuration).createOutboundResourceDisplayBulk(resourceId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove OutboundResource
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResource: function(id, domainId, options) {
      return OutboundResourceServiceApiFp(configuration).deleteOutboundResource(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplay: function(resourceId, id, domainId, options) {
      return OutboundResourceServiceApiFp(configuration).deleteOutboundResourceDisplay(resourceId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove ResourceDisplays
     * @param {string} resourceId
     * @param {Array<string>} [items]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOutboundResourceDisplays: function(resourceId, items, options) {
      return OutboundResourceServiceApiFp(configuration).deleteOutboundResourceDisplays(resourceId, items, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Patch OutboundResource
     * @param {string} id
     * @param {EnginePatchOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOutboundResource: function(id, body, options) {
      return OutboundResourceServiceApiFp(configuration).patchOutboundResource(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary OutboundResource item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResource: function(id, domainId, options) {
      return OutboundResourceServiceApiFp(configuration).readOutboundResource(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary ResourceDisplay item
     * @param {string} resourceId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readOutboundResourceDisplay: function(resourceId, id, domainId, options) {
      return OutboundResourceServiceApiFp(configuration).readOutboundResourceDisplay(resourceId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of OutboundResource
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResource: function(page, size, q, sort, fields, id, options) {
      return OutboundResourceServiceApiFp(configuration).searchOutboundResource(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of ResourceDisplay
     * @param {string} resourceId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchOutboundResourceDisplay: function(resourceId, page, size, q, sort, fields, id, options) {
      return OutboundResourceServiceApiFp(configuration).searchOutboundResourceDisplay(resourceId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update OutboundResource
     * @param {string} id
     * @param {EngineUpdateOutboundResourceRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResource: function(id, body, options) {
      return OutboundResourceServiceApiFp(configuration).updateOutboundResource(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update ResourceDisplay
     * @param {string} resourceId
     * @param {string} id
     * @param {EngineUpdateOutboundResourceDisplayRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOutboundResourceDisplay: function(resourceId, id, body, options) {
      return OutboundResourceServiceApiFp(configuration).updateOutboundResourceDisplay(resourceId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var OutboundResourceServiceApi = (
  /** @class */
  function(_super) {
    __extends(OutboundResourceServiceApi2, _super);
    function OutboundResourceServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    OutboundResourceServiceApi2.prototype.createOutboundResource = function(body, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).createOutboundResource(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.createOutboundResourceDisplay = function(resourceId, body, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).createOutboundResourceDisplay(resourceId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.createOutboundResourceDisplayBulk = function(resourceId, body, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).createOutboundResourceDisplayBulk(resourceId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.deleteOutboundResource = function(id, domainId, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResource(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.deleteOutboundResourceDisplay = function(resourceId, id, domainId, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResourceDisplay(resourceId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.deleteOutboundResourceDisplays = function(resourceId, items, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).deleteOutboundResourceDisplays(resourceId, items, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.patchOutboundResource = function(id, body, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).patchOutboundResource(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.readOutboundResource = function(id, domainId, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).readOutboundResource(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.readOutboundResourceDisplay = function(resourceId, id, domainId, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).readOutboundResourceDisplay(resourceId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.searchOutboundResource = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).searchOutboundResource(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.searchOutboundResourceDisplay = function(resourceId, page, size, q, sort, fields, id, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).searchOutboundResourceDisplay(resourceId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.updateOutboundResource = function(id, body, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).updateOutboundResource(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    OutboundResourceServiceApi2.prototype.updateOutboundResourceDisplay = function(resourceId, id, body, options) {
      var _this = this;
      return OutboundResourceServiceApiFp(this.configuration).updateOutboundResourceDisplay(resourceId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return OutboundResourceServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/preset-query-service-api.js
var globalImportUrl27 = __toESM(require_url());
var import_axios28 = __toESM(require_axios2());
var PresetQueryServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {EngineCreatePresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresetQuery: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createPresetQuery.");
              }
              localVarPath = "/call_center/preset/query";
              localVarUrlObj = globalImportUrl27.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl27.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePresetQuery: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deletePresetQuery.");
              }
              localVarPath = "/call_center/preset/query/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl27.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl27.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchPresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPresetQuery: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchPresetQuery.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchPresetQuery.");
              }
              localVarPath = "/call_center/preset/query/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl27.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl27.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readPresetQuery: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readPresetQuery.");
              }
              localVarPath = "/call_center/preset/query/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl27.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl27.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<'section_default' | 'section_calls'>} [section]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPresetQuery: function(page, size, q, sort, fields, id, section, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/preset/query";
              localVarUrlObj = globalImportUrl27.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (section) {
                localVarQueryParameter["section"] = section;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl27.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdatePresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePresetQuery: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updatePresetQuery.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updatePresetQuery.");
              }
              localVarPath = "/call_center/preset/query/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl27.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl27.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var PresetQueryServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {EngineCreatePresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresetQuery: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, PresetQueryServiceApiAxiosParamCreator(configuration).createPresetQuery(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios28.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePresetQuery: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, PresetQueryServiceApiAxiosParamCreator(configuration).deletePresetQuery(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios28.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchPresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPresetQuery: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, PresetQueryServiceApiAxiosParamCreator(configuration).patchPresetQuery(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios28.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readPresetQuery: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, PresetQueryServiceApiAxiosParamCreator(configuration).readPresetQuery(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios28.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<'section_default' | 'section_calls'>} [section]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPresetQuery: function(page, size, q, sort, fields, id, section, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, PresetQueryServiceApiAxiosParamCreator(configuration).searchPresetQuery(page, size, q, sort, fields, id, section, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios28.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdatePresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePresetQuery: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, PresetQueryServiceApiAxiosParamCreator(configuration).updatePresetQuery(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios28.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var PresetQueryServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {EngineCreatePresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresetQuery: function(body, options) {
      return PresetQueryServiceApiFp(configuration).createPresetQuery(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePresetQuery: function(id, options) {
      return PresetQueryServiceApiFp(configuration).deletePresetQuery(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchPresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPresetQuery: function(id, body, options) {
      return PresetQueryServiceApiFp(configuration).patchPresetQuery(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readPresetQuery: function(id, options) {
      return PresetQueryServiceApiFp(configuration).readPresetQuery(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<'section_default' | 'section_calls'>} [section]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPresetQuery: function(page, size, q, sort, fields, id, section, options) {
      return PresetQueryServiceApiFp(configuration).searchPresetQuery(page, size, q, sort, fields, id, section, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdatePresetQueryRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePresetQuery: function(id, body, options) {
      return PresetQueryServiceApiFp(configuration).updatePresetQuery(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var PresetQueryServiceApi = (
  /** @class */
  function(_super) {
    __extends(PresetQueryServiceApi2, _super);
    function PresetQueryServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PresetQueryServiceApi2.prototype.createPresetQuery = function(body, options) {
      var _this = this;
      return PresetQueryServiceApiFp(this.configuration).createPresetQuery(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    PresetQueryServiceApi2.prototype.deletePresetQuery = function(id, options) {
      var _this = this;
      return PresetQueryServiceApiFp(this.configuration).deletePresetQuery(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    PresetQueryServiceApi2.prototype.patchPresetQuery = function(id, body, options) {
      var _this = this;
      return PresetQueryServiceApiFp(this.configuration).patchPresetQuery(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    PresetQueryServiceApi2.prototype.readPresetQuery = function(id, options) {
      var _this = this;
      return PresetQueryServiceApiFp(this.configuration).readPresetQuery(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    PresetQueryServiceApi2.prototype.searchPresetQuery = function(page, size, q, sort, fields, id, section, options) {
      var _this = this;
      return PresetQueryServiceApiFp(this.configuration).searchPresetQuery(page, size, q, sort, fields, id, section, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    PresetQueryServiceApi2.prototype.updatePresetQuery = function(id, body, options) {
      var _this = this;
      return PresetQueryServiceApiFp(this.configuration).updatePresetQuery(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return PresetQueryServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/queue-bucket-service-api.js
var globalImportUrl28 = __toESM(require_url());
var import_axios29 = __toESM(require_axios2());
var QueueBucketServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queueId
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueBucket: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createQueueBucket.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createQueueBucket.");
              }
              localVarPath = "/call_center/queues/{queue_id}/buckets".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl28.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl28.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueBucket: function(queueId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling deleteQueueBucket.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteQueueBucket.");
              }
              localVarPath = "/call_center/queues/{queue_id}/buckets/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl28.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl28.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueBucket: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling patchQueueBucket.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchQueueBucket.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchQueueBucket.");
              }
              localVarPath = "/call_center/queues/{queue_id}/buckets/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl28.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl28.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueBucket: function(queueId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling readQueueBucket.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readQueueBucket.");
              }
              localVarPath = "/call_center/queues/{queue_id}/buckets/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl28.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl28.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueBucket: function(queueId, page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling searchQueueBucket.");
              }
              localVarPath = "/call_center/queues/{queue_id}/buckets".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl28.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl28.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueBucket: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling updateQueueBucket.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateQueueBucket.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateQueueBucket.");
              }
              localVarPath = "/call_center/queues/{queue_id}/buckets/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl28.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl28.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var QueueBucketServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queueId
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueBucket: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueBucketServiceApiAxiosParamCreator(configuration).createQueueBucket(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios29.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueBucket: function(queueId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueBucketServiceApiAxiosParamCreator(configuration).deleteQueueBucket(queueId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios29.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueBucket: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueBucketServiceApiAxiosParamCreator(configuration).patchQueueBucket(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios29.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueBucket: function(queueId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueBucketServiceApiAxiosParamCreator(configuration).readQueueBucket(queueId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios29.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueBucket: function(queueId, page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueBucketServiceApiAxiosParamCreator(configuration).searchQueueBucket(queueId, page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios29.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueBucket: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueBucketServiceApiAxiosParamCreator(configuration).updateQueueBucket(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios29.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var QueueBucketServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create QueueBucket
     * @param {string} queueId
     * @param {EngineCreateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueBucket: function(queueId, body, options) {
      return QueueBucketServiceApiFp(configuration).createQueueBucket(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary DeleteQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueBucket: function(queueId, id, options) {
      return QueueBucketServiceApiFp(configuration).deleteQueueBucket(queueId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} queueId
     * @param {string} id
     * @param {EnginePatchQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueBucket: function(queueId, id, body, options) {
      return QueueBucketServiceApiFp(configuration).patchQueueBucket(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary ReadQueueRouting
     * @param {string} queueId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueBucket: function(queueId, id, options) {
      return QueueBucketServiceApiFp(configuration).readQueueBucket(queueId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchQueueRouting
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueBucket: function(queueId, page, size, q, sort, fields, id, options) {
      return QueueBucketServiceApiFp(configuration).searchQueueBucket(queueId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary UpdateQueueBucket
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateQueueBucketRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueBucket: function(queueId, id, body, options) {
      return QueueBucketServiceApiFp(configuration).updateQueueBucket(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var QueueBucketServiceApi = (
  /** @class */
  function(_super) {
    __extends(QueueBucketServiceApi2, _super);
    function QueueBucketServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueueBucketServiceApi2.prototype.createQueueBucket = function(queueId, body, options) {
      var _this = this;
      return QueueBucketServiceApiFp(this.configuration).createQueueBucket(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueBucketServiceApi2.prototype.deleteQueueBucket = function(queueId, id, options) {
      var _this = this;
      return QueueBucketServiceApiFp(this.configuration).deleteQueueBucket(queueId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueBucketServiceApi2.prototype.patchQueueBucket = function(queueId, id, body, options) {
      var _this = this;
      return QueueBucketServiceApiFp(this.configuration).patchQueueBucket(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueBucketServiceApi2.prototype.readQueueBucket = function(queueId, id, options) {
      var _this = this;
      return QueueBucketServiceApiFp(this.configuration).readQueueBucket(queueId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueBucketServiceApi2.prototype.searchQueueBucket = function(queueId, page, size, q, sort, fields, id, options) {
      var _this = this;
      return QueueBucketServiceApiFp(this.configuration).searchQueueBucket(queueId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueBucketServiceApi2.prototype.updateQueueBucket = function(queueId, id, body, options) {
      var _this = this;
      return QueueBucketServiceApiFp(this.configuration).updateQueueBucket(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return QueueBucketServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/queue-hook-service-api.js
var globalImportUrl29 = __toESM(require_url());
var import_axios30 = __toESM(require_axios2());
var QueueHookServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueHook: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createQueueHook.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createQueueHook.");
              }
              localVarPath = "/call_center/queues/{queue_id}/hooks".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl29.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl29.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueHook: function(queueId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling deleteQueueHook.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteQueueHook.");
              }
              localVarPath = "/call_center/queues/{queue_id}/hooks/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl29.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl29.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueHook: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling patchQueueHook.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchQueueHook.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchQueueHook.");
              }
              localVarPath = "/call_center/queues/{queue_id}/hooks/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl29.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl29.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueHook: function(queueId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling readQueueHook.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readQueueHook.");
              }
              localVarPath = "/call_center/queues/{queue_id}/hooks/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl29.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl29.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [schemaId]
     * @param {Array<string>} [event]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueHook: function(queueId, page, size, q, sort, fields, id, schemaId, event, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling searchQueueHook.");
              }
              localVarPath = "/call_center/queues/{queue_id}/hooks".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl29.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (schemaId) {
                localVarQueryParameter["schema_id"] = schemaId;
              }
              if (event) {
                localVarQueryParameter["event"] = event;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl29.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueHook: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling updateQueueHook.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateQueueHook.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateQueueHook.");
              }
              localVarPath = "/call_center/queues/{queue_id}/hooks/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl29.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl29.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var QueueHookServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueHook: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueHookServiceApiAxiosParamCreator(configuration).createQueueHook(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios30.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueHook: function(queueId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueHookServiceApiAxiosParamCreator(configuration).deleteQueueHook(queueId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios30.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueHook: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueHookServiceApiAxiosParamCreator(configuration).patchQueueHook(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios30.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueHook: function(queueId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueHookServiceApiAxiosParamCreator(configuration).readQueueHook(queueId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios30.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [schemaId]
     * @param {Array<string>} [event]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueHook: function(queueId, page, size, q, sort, fields, id, schemaId, event, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueHookServiceApiAxiosParamCreator(configuration).searchQueueHook(queueId, page, size, q, sort, fields, id, schemaId, event, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios30.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueHook: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueHookServiceApiAxiosParamCreator(configuration).updateQueueHook(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios30.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var QueueHookServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueHook: function(queueId, body, options) {
      return QueueHookServiceApiFp(configuration).createQueueHook(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueHook: function(queueId, id, options) {
      return QueueHookServiceApiFp(configuration).deleteQueueHook(queueId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueHook: function(queueId, id, body, options) {
      return QueueHookServiceApiFp(configuration).patchQueueHook(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueHook: function(queueId, id, options) {
      return QueueHookServiceApiFp(configuration).readQueueHook(queueId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [schemaId]
     * @param {Array<string>} [event]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueHook: function(queueId, page, size, q, sort, fields, id, schemaId, event, options) {
      return QueueHookServiceApiFp(configuration).searchQueueHook(queueId, page, size, q, sort, fields, id, schemaId, event, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueHookRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueHook: function(queueId, id, body, options) {
      return QueueHookServiceApiFp(configuration).updateQueueHook(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var QueueHookServiceApi = (
  /** @class */
  function(_super) {
    __extends(QueueHookServiceApi2, _super);
    function QueueHookServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueueHookServiceApi2.prototype.createQueueHook = function(queueId, body, options) {
      var _this = this;
      return QueueHookServiceApiFp(this.configuration).createQueueHook(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueHookServiceApi2.prototype.deleteQueueHook = function(queueId, id, options) {
      var _this = this;
      return QueueHookServiceApiFp(this.configuration).deleteQueueHook(queueId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueHookServiceApi2.prototype.patchQueueHook = function(queueId, id, body, options) {
      var _this = this;
      return QueueHookServiceApiFp(this.configuration).patchQueueHook(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueHookServiceApi2.prototype.readQueueHook = function(queueId, id, options) {
      var _this = this;
      return QueueHookServiceApiFp(this.configuration).readQueueHook(queueId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueHookServiceApi2.prototype.searchQueueHook = function(queueId, page, size, q, sort, fields, id, schemaId, event, options) {
      var _this = this;
      return QueueHookServiceApiFp(this.configuration).searchQueueHook(queueId, page, size, q, sort, fields, id, schemaId, event, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueHookServiceApi2.prototype.updateQueueHook = function(queueId, id, body, options) {
      var _this = this;
      return QueueHookServiceApiFp(this.configuration).updateQueueHook(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return QueueHookServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/queue-resources-service-api.js
var globalImportUrl30 = __toESM(require_url());
var import_axios31 = __toESM(require_axios2());
var QueueResourcesServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queueId
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueResourceGroup: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createQueueResourceGroup.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createQueueResourceGroup.");
              }
              localVarPath = "/call_center/queues/{queue_id}/resource_groups".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl30.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl30.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueResourceGroup: function(queueId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling deleteQueueResourceGroup.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteQueueResourceGroup.");
              }
              localVarPath = "/call_center/queues/{queue_id}/resource_groups/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl30.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl30.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueResourceGroup: function(queueId, id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling readQueueResourceGroup.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readQueueResourceGroup.");
              }
              localVarPath = "/call_center/queues/{queue_id}/resource_groups/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl30.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl30.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueResourceGroup: function(queueId, page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling searchQueueResourceGroup.");
              }
              localVarPath = "/call_center/queues/{queue_id}/resource_groups".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl30.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl30.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueResourceGroup: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling updateQueueResourceGroup.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateQueueResourceGroup.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateQueueResourceGroup.");
              }
              localVarPath = "/call_center/queues/{queue_id}/resource_groups/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl30.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl30.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var QueueResourcesServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queueId
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueResourceGroup: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueResourcesServiceApiAxiosParamCreator(configuration).createQueueResourceGroup(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios31.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueResourceGroup: function(queueId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueResourcesServiceApiAxiosParamCreator(configuration).deleteQueueResourceGroup(queueId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios31.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueResourceGroup: function(queueId, id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueResourcesServiceApiAxiosParamCreator(configuration).readQueueResourceGroup(queueId, id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios31.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueResourceGroup: function(queueId, page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueResourcesServiceApiAxiosParamCreator(configuration).searchQueueResourceGroup(queueId, page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios31.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueResourceGroup: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueResourcesServiceApiAxiosParamCreator(configuration).updateQueueResourceGroup(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios31.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var QueueResourcesServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary CreateQueueResourceGroup
     * @param {string} queueId
     * @param {EngineCreateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueResourceGroup: function(queueId, body, options) {
      return QueueResourcesServiceApiFp(configuration).createQueueResourceGroup(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary DeleteQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueResourceGroup: function(queueId, id, domainId, options) {
      return QueueResourcesServiceApiFp(configuration).deleteQueueResourceGroup(queueId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary ReadQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueResourceGroup: function(queueId, id, domainId, options) {
      return QueueResourcesServiceApiFp(configuration).readQueueResourceGroup(queueId, id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary SearchQueueResourceGroup
     * @param {string} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueResourceGroup: function(queueId, page, size, q, sort, fields, id, options) {
      return QueueResourcesServiceApiFp(configuration).searchQueueResourceGroup(queueId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary UpdateQueueResourceGroup
     * @param {string} queueId
     * @param {string} id
     * @param {EngineUpdateQueueResourceGroupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueResourceGroup: function(queueId, id, body, options) {
      return QueueResourcesServiceApiFp(configuration).updateQueueResourceGroup(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var QueueResourcesServiceApi = (
  /** @class */
  function(_super) {
    __extends(QueueResourcesServiceApi2, _super);
    function QueueResourcesServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueueResourcesServiceApi2.prototype.createQueueResourceGroup = function(queueId, body, options) {
      var _this = this;
      return QueueResourcesServiceApiFp(this.configuration).createQueueResourceGroup(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueResourcesServiceApi2.prototype.deleteQueueResourceGroup = function(queueId, id, domainId, options) {
      var _this = this;
      return QueueResourcesServiceApiFp(this.configuration).deleteQueueResourceGroup(queueId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueResourcesServiceApi2.prototype.readQueueResourceGroup = function(queueId, id, domainId, options) {
      var _this = this;
      return QueueResourcesServiceApiFp(this.configuration).readQueueResourceGroup(queueId, id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueResourcesServiceApi2.prototype.searchQueueResourceGroup = function(queueId, page, size, q, sort, fields, id, options) {
      var _this = this;
      return QueueResourcesServiceApiFp(this.configuration).searchQueueResourceGroup(queueId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueResourcesServiceApi2.prototype.updateQueueResourceGroup = function(queueId, id, body, options) {
      var _this = this;
      return QueueResourcesServiceApiFp(this.configuration).updateQueueResourceGroup(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return QueueResourcesServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/queue-service-api.js
var globalImportUrl31 = __toESM(require_url());
var import_axios32 = __toESM(require_axios2());
var QueueServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createQueue.");
              }
              localVarPath = "/call_center/queues";
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteQueue.");
              }
              localVarPath = "/call_center/queues/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueue: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchQueue.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchQueue.");
              }
              localVarPath = "/call_center/queues/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readQueue.");
              }
              localVarPath = "/call_center/queues/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue: function(page, size, q, sort, fields, id, type, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/queues";
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (type) {
                localVarQueryParameter["type"] = type;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {string} [domainId]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [q]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueReportGeneral: function(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/queues/reports/general";
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (joinedAtFrom !== void 0) {
                localVarQueryParameter["joined_at.from"] = joinedAtFrom;
              }
              if (joinedAtTo !== void 0) {
                localVarQueryParameter["joined_at.to"] = joinedAtTo;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (queueId) {
                localVarQueryParameter["queue_id"] = queueId;
              }
              if (teamId) {
                localVarQueryParameter["team_id"] = teamId;
              }
              if (type) {
                localVarQueryParameter["type"] = type;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateQueue.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateQueue.");
              }
              localVarPath = "/call_center/queues/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl31.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl31.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var QueueServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).createQueue(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).deleteQueue(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueue: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).patchQueue(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).readQueue(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue: function(page, size, q, sort, fields, id, type, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).searchQueue(page, size, q, sort, fields, id, type, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {string} [domainId]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [q]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueReportGeneral: function(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).searchQueueReportGeneral(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueServiceApiAxiosParamCreator(configuration).updateQueue(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios32.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var QueueServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Queue
     * @param {EngineCreateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueue: function(body, options) {
      return QueueServiceApiFp(configuration).createQueue(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove Queue
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueue: function(id, domainId, options) {
      return QueueServiceApiFp(configuration).deleteQueue(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Patch Queue
     * @param {string} id
     * @param {EnginePatchQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueue: function(id, body, options) {
      return QueueServiceApiFp(configuration).patchQueue(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Queue item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueue: function(id, domainId, options) {
      return QueueServiceApiFp(configuration).readQueue(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of Queue
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueue: function(page, size, q, sort, fields, id, type, options) {
      return QueueServiceApiFp(configuration).searchQueue(page, size, q, sort, fields, id, type, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [joinedAtFrom]
     * @param {string} [joinedAtTo]
     * @param {string} [domainId]
     * @param {Array<string>} [fields]
     * @param {string} [sort]
     * @param {string} [q]
     * @param {Array<number>} [queueId]
     * @param {Array<number>} [teamId]
     * @param {Array<number>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueReportGeneral: function(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options) {
      return QueueServiceApiFp(configuration).searchQueueReportGeneral(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update Queue
     * @param {string} id
     * @param {EngineUpdateQueueRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueue: function(id, body, options) {
      return QueueServiceApiFp(configuration).updateQueue(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var QueueServiceApi = (
  /** @class */
  function(_super) {
    __extends(QueueServiceApi2, _super);
    function QueueServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueueServiceApi2.prototype.createQueue = function(body, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).createQueue(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueServiceApi2.prototype.deleteQueue = function(id, domainId, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).deleteQueue(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueServiceApi2.prototype.patchQueue = function(id, body, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).patchQueue(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueServiceApi2.prototype.readQueue = function(id, domainId, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).readQueue(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueServiceApi2.prototype.searchQueue = function(page, size, q, sort, fields, id, type, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).searchQueue(page, size, q, sort, fields, id, type, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueServiceApi2.prototype.searchQueueReportGeneral = function(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).searchQueueReportGeneral(page, size, joinedAtFrom, joinedAtTo, domainId, fields, sort, q, queueId, teamId, type, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueServiceApi2.prototype.updateQueue = function(id, body, options) {
      var _this = this;
      return QueueServiceApiFp(this.configuration).updateQueue(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return QueueServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/queue-skill-service-api.js
var globalImportUrl32 = __toESM(require_url());
var import_axios33 = __toESM(require_axios2());
var QueueSkillServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueSkill: function(queueId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling createQueueSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createQueueSkill.");
              }
              localVarPath = "/call_center/queues/{queue_id}/skills".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl32.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl32.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueSkill: function(queueId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling deleteQueueSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteQueueSkill.");
              }
              localVarPath = "/call_center/queues/{queue_id}/skills/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl32.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl32.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueSkill: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling patchQueueSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchQueueSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchQueueSkill.");
              }
              localVarPath = "/call_center/queues/{queue_id}/skills/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl32.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl32.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueSkill: function(queueId, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling readQueueSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readQueueSkill.");
              }
              localVarPath = "/call_center/queues/{queue_id}/skills/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl32.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl32.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [bucketId]
     * @param {Array<number>} [lvl]
     * @param {Array<number>} [minCapacity]
     * @param {Array<number>} [maxCapacity]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueSkill: function(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling searchQueueSkill.");
              }
              localVarPath = "/call_center/queues/{queue_id}/skills".replace("{queue_id}", encodeURIComponent(String(queueId)));
              localVarUrlObj = globalImportUrl32.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (skillId) {
                localVarQueryParameter["skill_id"] = skillId;
              }
              if (bucketId) {
                localVarQueryParameter["bucket_id"] = bucketId;
              }
              if (lvl) {
                localVarQueryParameter["lvl"] = lvl;
              }
              if (minCapacity) {
                localVarQueryParameter["min_capacity"] = minCapacity;
              }
              if (maxCapacity) {
                localVarQueryParameter["max_capacity"] = maxCapacity;
              }
              if (enabled !== void 0) {
                localVarQueryParameter["enabled"] = enabled;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl32.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueSkill: function(queueId, id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (queueId === null || queueId === void 0) {
                throw new RequiredError("queueId", "Required parameter queueId was null or undefined when calling updateQueueSkill.");
              }
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateQueueSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateQueueSkill.");
              }
              localVarPath = "/call_center/queues/{queue_id}/skills/{id}".replace("{queue_id}", encodeURIComponent(String(queueId))).replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl32.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl32.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var QueueSkillServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueSkill: function(queueId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueSkillServiceApiAxiosParamCreator(configuration).createQueueSkill(queueId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios33.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueSkill: function(queueId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueSkillServiceApiAxiosParamCreator(configuration).deleteQueueSkill(queueId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios33.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueSkill: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueSkillServiceApiAxiosParamCreator(configuration).patchQueueSkill(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios33.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueSkill: function(queueId, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueSkillServiceApiAxiosParamCreator(configuration).readQueueSkill(queueId, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios33.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [bucketId]
     * @param {Array<number>} [lvl]
     * @param {Array<number>} [minCapacity]
     * @param {Array<number>} [maxCapacity]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueSkill: function(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueSkillServiceApiAxiosParamCreator(configuration).searchQueueSkill(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios33.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueSkill: function(queueId, id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, QueueSkillServiceApiAxiosParamCreator(configuration).updateQueueSkill(queueId, id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios33.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var QueueSkillServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {number} queueId
     * @param {EngineCreateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueueSkill: function(queueId, body, options) {
      return QueueSkillServiceApiFp(configuration).createQueueSkill(queueId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueueSkill: function(queueId, id, options) {
      return QueueSkillServiceApiFp(configuration).deleteQueueSkill(queueId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EnginePatchQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchQueueSkill: function(queueId, id, body, options) {
      return QueueSkillServiceApiFp(configuration).patchQueueSkill(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readQueueSkill: function(queueId, id, options) {
      return QueueSkillServiceApiFp(configuration).readQueueSkill(queueId, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [skillId]
     * @param {Array<number>} [bucketId]
     * @param {Array<number>} [lvl]
     * @param {Array<number>} [minCapacity]
     * @param {Array<number>} [maxCapacity]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchQueueSkill: function(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options) {
      return QueueSkillServiceApiFp(configuration).searchQueueSkill(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} queueId
     * @param {number} id
     * @param {EngineUpdateQueueSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueueSkill: function(queueId, id, body, options) {
      return QueueSkillServiceApiFp(configuration).updateQueueSkill(queueId, id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var QueueSkillServiceApi = (
  /** @class */
  function(_super) {
    __extends(QueueSkillServiceApi2, _super);
    function QueueSkillServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueueSkillServiceApi2.prototype.createQueueSkill = function(queueId, body, options) {
      var _this = this;
      return QueueSkillServiceApiFp(this.configuration).createQueueSkill(queueId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueSkillServiceApi2.prototype.deleteQueueSkill = function(queueId, id, options) {
      var _this = this;
      return QueueSkillServiceApiFp(this.configuration).deleteQueueSkill(queueId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueSkillServiceApi2.prototype.patchQueueSkill = function(queueId, id, body, options) {
      var _this = this;
      return QueueSkillServiceApiFp(this.configuration).patchQueueSkill(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueSkillServiceApi2.prototype.readQueueSkill = function(queueId, id, options) {
      var _this = this;
      return QueueSkillServiceApiFp(this.configuration).readQueueSkill(queueId, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueSkillServiceApi2.prototype.searchQueueSkill = function(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options) {
      var _this = this;
      return QueueSkillServiceApiFp(this.configuration).searchQueueSkill(queueId, page, size, q, sort, fields, id, skillId, bucketId, lvl, minCapacity, maxCapacity, enabled, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    QueueSkillServiceApi2.prototype.updateQueueSkill = function(queueId, id, body, options) {
      var _this = this;
      return QueueSkillServiceApiFp(this.configuration).updateQueueSkill(queueId, id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return QueueSkillServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/region-service-api.js
var globalImportUrl33 = __toESM(require_url());
var import_axios34 = __toESM(require_axios2());
var RegionServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {EngineCreateRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegion: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createRegion.");
              }
              localVarPath = "/regions";
              localVarUrlObj = globalImportUrl33.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl33.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegion: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteRegion.");
              }
              localVarPath = "/regions/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl33.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl33.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRegion: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchRegion.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchRegion.");
              }
              localVarPath = "/regions/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl33.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl33.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRegion: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readRegion.");
              }
              localVarPath = "/regions/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl33.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl33.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Array<number>} [timezoneId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRegion: function(page, size, q, sort, fields, id, name, description, timezoneId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/regions";
              localVarUrlObj = globalImportUrl33.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (name !== void 0) {
                localVarQueryParameter["name"] = name;
              }
              if (description !== void 0) {
                localVarQueryParameter["description"] = description;
              }
              if (timezoneId) {
                localVarQueryParameter["timezone_id"] = timezoneId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl33.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUpdateRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegion: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateRegion.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateRegion.");
              }
              localVarPath = "/regions/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl33.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl33.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var RegionServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {EngineCreateRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegion: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RegionServiceApiAxiosParamCreator(configuration).createRegion(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios34.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegion: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RegionServiceApiAxiosParamCreator(configuration).deleteRegion(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios34.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRegion: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RegionServiceApiAxiosParamCreator(configuration).patchRegion(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios34.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRegion: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RegionServiceApiAxiosParamCreator(configuration).readRegion(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios34.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Array<number>} [timezoneId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRegion: function(page, size, q, sort, fields, id, name, description, timezoneId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RegionServiceApiAxiosParamCreator(configuration).searchRegion(page, size, q, sort, fields, id, name, description, timezoneId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios34.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUpdateRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegion: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RegionServiceApiAxiosParamCreator(configuration).updateRegion(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios34.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var RegionServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {EngineCreateRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegion: function(body, options) {
      return RegionServiceApiFp(configuration).createRegion(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegion: function(id, options) {
      return RegionServiceApiFp(configuration).deleteRegion(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EnginePatchRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRegion: function(id, body, options) {
      return RegionServiceApiFp(configuration).patchRegion(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRegion: function(id, options) {
      return RegionServiceApiFp(configuration).readRegion(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Array<number>} [timezoneId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRegion: function(page, size, q, sort, fields, id, name, description, timezoneId, options) {
      return RegionServiceApiFp(configuration).searchRegion(page, size, q, sort, fields, id, name, description, timezoneId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} id
     * @param {EngineUpdateRegionRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegion: function(id, body, options) {
      return RegionServiceApiFp(configuration).updateRegion(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var RegionServiceApi = (
  /** @class */
  function(_super) {
    __extends(RegionServiceApi2, _super);
    function RegionServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RegionServiceApi2.prototype.createRegion = function(body, options) {
      var _this = this;
      return RegionServiceApiFp(this.configuration).createRegion(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RegionServiceApi2.prototype.deleteRegion = function(id, options) {
      var _this = this;
      return RegionServiceApiFp(this.configuration).deleteRegion(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RegionServiceApi2.prototype.patchRegion = function(id, body, options) {
      var _this = this;
      return RegionServiceApiFp(this.configuration).patchRegion(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RegionServiceApi2.prototype.readRegion = function(id, options) {
      var _this = this;
      return RegionServiceApiFp(this.configuration).readRegion(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RegionServiceApi2.prototype.searchRegion = function(page, size, q, sort, fields, id, name, description, timezoneId, options) {
      var _this = this;
      return RegionServiceApiFp(this.configuration).searchRegion(page, size, q, sort, fields, id, name, description, timezoneId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RegionServiceApi2.prototype.updateRegion = function(id, body, options) {
      var _this = this;
      return RegionServiceApiFp(this.configuration).updateRegion(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return RegionServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/routing-chat-plan-service-api.js
var globalImportUrl34 = __toESM(require_url());
var import_axios35 = __toESM(require_axios2());
var RoutingChatPlanServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {EngineCreateChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChatPlan: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createChatPlan.");
              }
              localVarPath = "/routing/outbound/chat";
              localVarUrlObj = globalImportUrl34.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl34.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatPlan: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteChatPlan.");
              }
              localVarPath = "/routing/outbound/chat/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl34.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl34.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchChatPlan: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchChatPlan.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchChatPlan.");
              }
              localVarPath = "/routing/outbound/chat/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl34.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl34.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChatPlan: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readChatPlan.");
              }
              localVarPath = "/routing/outbound/chat/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl34.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl34.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchChatPlan: function(page, size, q, sort, fields, id, name, enabled, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/routing/outbound/chat";
              localVarUrlObj = globalImportUrl34.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (name !== void 0) {
                localVarQueryParameter["name"] = name;
              }
              if (enabled !== void 0) {
                localVarQueryParameter["enabled"] = enabled;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl34.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChatPlan: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateChatPlan.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateChatPlan.");
              }
              localVarPath = "/routing/outbound/chat/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl34.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl34.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var RoutingChatPlanServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {EngineCreateChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChatPlan: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingChatPlanServiceApiAxiosParamCreator(configuration).createChatPlan(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios35.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatPlan: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingChatPlanServiceApiAxiosParamCreator(configuration).deleteChatPlan(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios35.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchChatPlan: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingChatPlanServiceApiAxiosParamCreator(configuration).patchChatPlan(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios35.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChatPlan: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingChatPlanServiceApiAxiosParamCreator(configuration).readChatPlan(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios35.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchChatPlan: function(page, size, q, sort, fields, id, name, enabled, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingChatPlanServiceApiAxiosParamCreator(configuration).searchChatPlan(page, size, q, sort, fields, id, name, enabled, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios35.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChatPlan: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingChatPlanServiceApiAxiosParamCreator(configuration).updateChatPlan(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios35.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var RoutingChatPlanServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {EngineCreateChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChatPlan: function(body, options) {
      return RoutingChatPlanServiceApiFp(configuration).createChatPlan(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatPlan: function(id, options) {
      return RoutingChatPlanServiceApiFp(configuration).deleteChatPlan(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchChatPlan: function(id, body, options) {
      return RoutingChatPlanServiceApiFp(configuration).patchChatPlan(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChatPlan: function(id, options) {
      return RoutingChatPlanServiceApiFp(configuration).readChatPlan(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchChatPlan: function(page, size, q, sort, fields, id, name, enabled, options) {
      return RoutingChatPlanServiceApiFp(configuration).searchChatPlan(page, size, q, sort, fields, id, name, enabled, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EngineUpdateChatPlanRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChatPlan: function(id, body, options) {
      return RoutingChatPlanServiceApiFp(configuration).updateChatPlan(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var RoutingChatPlanServiceApi = (
  /** @class */
  function(_super) {
    __extends(RoutingChatPlanServiceApi2, _super);
    function RoutingChatPlanServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RoutingChatPlanServiceApi2.prototype.createChatPlan = function(body, options) {
      var _this = this;
      return RoutingChatPlanServiceApiFp(this.configuration).createChatPlan(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingChatPlanServiceApi2.prototype.deleteChatPlan = function(id, options) {
      var _this = this;
      return RoutingChatPlanServiceApiFp(this.configuration).deleteChatPlan(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingChatPlanServiceApi2.prototype.patchChatPlan = function(id, body, options) {
      var _this = this;
      return RoutingChatPlanServiceApiFp(this.configuration).patchChatPlan(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingChatPlanServiceApi2.prototype.readChatPlan = function(id, options) {
      var _this = this;
      return RoutingChatPlanServiceApiFp(this.configuration).readChatPlan(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingChatPlanServiceApi2.prototype.searchChatPlan = function(page, size, q, sort, fields, id, name, enabled, options) {
      var _this = this;
      return RoutingChatPlanServiceApiFp(this.configuration).searchChatPlan(page, size, q, sort, fields, id, name, enabled, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingChatPlanServiceApi2.prototype.updateChatPlan = function(id, body, options) {
      var _this = this;
      return RoutingChatPlanServiceApiFp(this.configuration).updateChatPlan(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return RoutingChatPlanServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/routing-outbound-call-service-api.js
var globalImportUrl35 = __toESM(require_url());
var import_axios36 = __toESM(require_axios2());
var RoutingOutboundCallServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createRoutingOutboundCall.");
              }
              localVarPath = "/routing/outbound/calls";
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteRoutingOutboundCall.");
              }
              localVarPath = "/routing/outbound/calls/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} fromId
     * @param {string} toId
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    movePositionRoutingOutboundCall: function(fromId, toId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (fromId === null || fromId === void 0) {
                throw new RequiredError("fromId", "Required parameter fromId was null or undefined when calling movePositionRoutingOutboundCall.");
              }
              if (toId === null || toId === void 0) {
                throw new RequiredError("toId", "Required parameter toId was null or undefined when calling movePositionRoutingOutboundCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling movePositionRoutingOutboundCall.");
              }
              localVarPath = "/routing/outbound/calls/{from_id}/to/{to_id}".replace("{from_id}", encodeURIComponent(String(fromId))).replace("{to_id}", encodeURIComponent(String(toId)));
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingOutboundCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchRoutingOutboundCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchRoutingOutboundCall.");
              }
              localVarPath = "/routing/outbound/calls/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readRoutingOutboundCall.");
              }
              localVarPath = "/routing/outbound/calls/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<number>} [schemaId]
     * @param {string} [pattern]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall: function(page, size, q, sort, fields, id, name, schemaId, pattern, description, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/routing/outbound/calls";
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (name !== void 0) {
                localVarQueryParameter["name"] = name;
              }
              if (schemaId) {
                localVarQueryParameter["schema_id"] = schemaId;
              }
              if (pattern !== void 0) {
                localVarQueryParameter["pattern"] = pattern;
              }
              if (description !== void 0) {
                localVarQueryParameter["description"] = description;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateRoutingOutboundCall.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateRoutingOutboundCall.");
              }
              localVarPath = "/routing/outbound/calls/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl35.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl35.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var RoutingOutboundCallServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).createRoutingOutboundCall(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).deleteRoutingOutboundCall(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} fromId
     * @param {string} toId
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    movePositionRoutingOutboundCall: function(fromId, toId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).movePositionRoutingOutboundCall(fromId, toId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingOutboundCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).patchRoutingOutboundCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).readRoutingOutboundCall(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<number>} [schemaId]
     * @param {string} [pattern]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall: function(page, size, q, sort, fields, id, name, schemaId, pattern, description, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).searchRoutingOutboundCall(page, size, q, sort, fields, id, name, schemaId, pattern, description, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingOutboundCallServiceApiAxiosParamCreator(configuration).updateRoutingOutboundCall(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios36.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var RoutingOutboundCallServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create RoutingOutboundCall
     * @param {EngineCreateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingOutboundCall: function(body, options) {
      return RoutingOutboundCallServiceApiFp(configuration).createRoutingOutboundCall(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove RoutingOutboundCall
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingOutboundCall: function(id, domainId, options) {
      return RoutingOutboundCallServiceApiFp(configuration).deleteRoutingOutboundCall(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Move RoutingOutboundCall
     * @param {string} fromId
     * @param {string} toId
     * @param {EngineMovePositionRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    movePositionRoutingOutboundCall: function(fromId, toId, body, options) {
      return RoutingOutboundCallServiceApiFp(configuration).movePositionRoutingOutboundCall(fromId, toId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Patch RoutingOutboundCall
     * @param {string} id
     * @param {EnginePatchRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingOutboundCall: function(id, body, options) {
      return RoutingOutboundCallServiceApiFp(configuration).patchRoutingOutboundCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary RoutingOutboundCall item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingOutboundCall: function(id, domainId, options) {
      return RoutingOutboundCallServiceApiFp(configuration).readRoutingOutboundCall(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of RoutingOutboundCall
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<number>} [schemaId]
     * @param {string} [pattern]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingOutboundCall: function(page, size, q, sort, fields, id, name, schemaId, pattern, description, options) {
      return RoutingOutboundCallServiceApiFp(configuration).searchRoutingOutboundCall(page, size, q, sort, fields, id, name, schemaId, pattern, description, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update RoutingOutboundCall
     * @param {string} id
     * @param {EngineUpdateRoutingOutboundCallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingOutboundCall: function(id, body, options) {
      return RoutingOutboundCallServiceApiFp(configuration).updateRoutingOutboundCall(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var RoutingOutboundCallServiceApi = (
  /** @class */
  function(_super) {
    __extends(RoutingOutboundCallServiceApi2, _super);
    function RoutingOutboundCallServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RoutingOutboundCallServiceApi2.prototype.createRoutingOutboundCall = function(body, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).createRoutingOutboundCall(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingOutboundCallServiceApi2.prototype.deleteRoutingOutboundCall = function(id, domainId, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).deleteRoutingOutboundCall(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingOutboundCallServiceApi2.prototype.movePositionRoutingOutboundCall = function(fromId, toId, body, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).movePositionRoutingOutboundCall(fromId, toId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingOutboundCallServiceApi2.prototype.patchRoutingOutboundCall = function(id, body, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).patchRoutingOutboundCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingOutboundCallServiceApi2.prototype.readRoutingOutboundCall = function(id, domainId, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).readRoutingOutboundCall(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingOutboundCallServiceApi2.prototype.searchRoutingOutboundCall = function(page, size, q, sort, fields, id, name, schemaId, pattern, description, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).searchRoutingOutboundCall(page, size, q, sort, fields, id, name, schemaId, pattern, description, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingOutboundCallServiceApi2.prototype.updateRoutingOutboundCall = function(id, body, options) {
      var _this = this;
      return RoutingOutboundCallServiceApiFp(this.configuration).updateRoutingOutboundCall(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return RoutingOutboundCallServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/routing-schema-service-api.js
var globalImportUrl36 = __toESM(require_url());
var import_axios37 = __toESM(require_axios2());
var RoutingSchemaServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingSchema: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createRoutingSchema.");
              }
              localVarPath = "/routing/schema";
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingSchema: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteRoutingSchema.");
              }
              localVarPath = "/routing/schema/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingSchema: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchRoutingSchema.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchRoutingSchema.");
              }
              localVarPath = "/routing/schema/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingSchema: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readRoutingSchema.");
              }
              localVarPath = "/routing/schema/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<'default' | 'voice' | 'chat' | 'processing' | 'service'>} [type]
     * @param {boolean} [editor]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchema: function(page, size, q, sort, fields, id, name, type, editor, tags, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/routing/schema";
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (name !== void 0) {
                localVarQueryParameter["name"] = name;
              }
              if (type) {
                localVarQueryParameter["type"] = type;
              }
              if (editor !== void 0) {
                localVarQueryParameter["editor"] = editor;
              }
              if (tags) {
                localVarQueryParameter["tags"] = tags;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List RoutingSchemaTags
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<'default' | 'voice' | 'chat' | 'processing' | 'service'>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchemaTags: function(page, size, q, sort, fields, type, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/routing/schema/tags";
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (type) {
                localVarQueryParameter["type"] = type;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingSchema: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateRoutingSchema.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateRoutingSchema.");
              }
              localVarPath = "/routing/schema/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl36.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl36.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var RoutingSchemaServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingSchema: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).createRoutingSchema(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingSchema: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).deleteRoutingSchema(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingSchema: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).patchRoutingSchema(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingSchema: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).readRoutingSchema(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<'default' | 'voice' | 'chat' | 'processing' | 'service'>} [type]
     * @param {boolean} [editor]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchema: function(page, size, q, sort, fields, id, name, type, editor, tags, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).searchRoutingSchema(page, size, q, sort, fields, id, name, type, editor, tags, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List RoutingSchemaTags
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<'default' | 'voice' | 'chat' | 'processing' | 'service'>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchemaTags: function(page, size, q, sort, fields, type, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).searchRoutingSchemaTags(page, size, q, sort, fields, type, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingSchema: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingSchemaServiceApiAxiosParamCreator(configuration).updateRoutingSchema(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios37.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var RoutingSchemaServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create RoutingSchema
     * @param {EngineCreateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingSchema: function(body, options) {
      return RoutingSchemaServiceApiFp(configuration).createRoutingSchema(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove RoutingSchema
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingSchema: function(id, domainId, options) {
      return RoutingSchemaServiceApiFp(configuration).deleteRoutingSchema(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Patch RoutingSchema
     * @param {string} id
     * @param {EnginePatchRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoutingSchema: function(id, body, options) {
      return RoutingSchemaServiceApiFp(configuration).patchRoutingSchema(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary RoutingSchema item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingSchema: function(id, domainId, options) {
      return RoutingSchemaServiceApiFp(configuration).readRoutingSchema(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List RoutingSchema
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {string} [name]
     * @param {Array<'default' | 'voice' | 'chat' | 'processing' | 'service'>} [type]
     * @param {boolean} [editor]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchema: function(page, size, q, sort, fields, id, name, type, editor, tags, options) {
      return RoutingSchemaServiceApiFp(configuration).searchRoutingSchema(page, size, q, sort, fields, id, name, type, editor, tags, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List RoutingSchemaTags
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<'default' | 'voice' | 'chat' | 'processing' | 'service'>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingSchemaTags: function(page, size, q, sort, fields, type, options) {
      return RoutingSchemaServiceApiFp(configuration).searchRoutingSchemaTags(page, size, q, sort, fields, type, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update RoutingSchema
     * @param {string} id
     * @param {EngineUpdateRoutingSchemaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingSchema: function(id, body, options) {
      return RoutingSchemaServiceApiFp(configuration).updateRoutingSchema(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var RoutingSchemaServiceApi = (
  /** @class */
  function(_super) {
    __extends(RoutingSchemaServiceApi2, _super);
    function RoutingSchemaServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RoutingSchemaServiceApi2.prototype.createRoutingSchema = function(body, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).createRoutingSchema(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingSchemaServiceApi2.prototype.deleteRoutingSchema = function(id, domainId, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).deleteRoutingSchema(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingSchemaServiceApi2.prototype.patchRoutingSchema = function(id, body, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).patchRoutingSchema(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingSchemaServiceApi2.prototype.readRoutingSchema = function(id, domainId, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).readRoutingSchema(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingSchemaServiceApi2.prototype.searchRoutingSchema = function(page, size, q, sort, fields, id, name, type, editor, tags, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchema(page, size, q, sort, fields, id, name, type, editor, tags, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingSchemaServiceApi2.prototype.searchRoutingSchemaTags = function(page, size, q, sort, fields, type, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).searchRoutingSchemaTags(page, size, q, sort, fields, type, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingSchemaServiceApi2.prototype.updateRoutingSchema = function(id, body, options) {
      var _this = this;
      return RoutingSchemaServiceApiFp(this.configuration).updateRoutingSchema(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return RoutingSchemaServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/routing-variable-service-api.js
var globalImportUrl37 = __toESM(require_url());
var import_axios38 = __toESM(require_axios2());
var RoutingVariableServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createRoutingVariable.");
              }
              localVarPath = "/routing/variables";
              localVarUrlObj = globalImportUrl37.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl37.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteRoutingVariable.");
              }
              localVarPath = "/routing/variables/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl37.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl37.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readRoutingVariable.");
              }
              localVarPath = "/routing/variables/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl37.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl37.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable: function(page, size, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/routing/variables";
              localVarUrlObj = globalImportUrl37.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl37.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateRoutingVariable.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateRoutingVariable.");
              }
              localVarPath = "/routing/variables/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl37.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl37.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var RoutingVariableServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingVariableServiceApiAxiosParamCreator(configuration).createRoutingVariable(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios38.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingVariableServiceApiAxiosParamCreator(configuration).deleteRoutingVariable(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios38.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingVariableServiceApiAxiosParamCreator(configuration).readRoutingVariable(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios38.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable: function(page, size, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingVariableServiceApiAxiosParamCreator(configuration).searchRoutingVariable(page, size, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios38.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, RoutingVariableServiceApiAxiosParamCreator(configuration).updateRoutingVariable(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios38.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var RoutingVariableServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create RoutingVariable
     * @param {EngineCreateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoutingVariable: function(body, options) {
      return RoutingVariableServiceApiFp(configuration).createRoutingVariable(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove RoutingVariable
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoutingVariable: function(id, domainId, options) {
      return RoutingVariableServiceApiFp(configuration).deleteRoutingVariable(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary RoutingVariable item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRoutingVariable: function(id, domainId, options) {
      return RoutingVariableServiceApiFp(configuration).readRoutingVariable(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of RoutingVariable
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRoutingVariable: function(page, size, domainId, options) {
      return RoutingVariableServiceApiFp(configuration).searchRoutingVariable(page, size, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update RoutingVariable
     * @param {string} id
     * @param {EngineUpdateRoutingVariableRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoutingVariable: function(id, body, options) {
      return RoutingVariableServiceApiFp(configuration).updateRoutingVariable(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var RoutingVariableServiceApi = (
  /** @class */
  function(_super) {
    __extends(RoutingVariableServiceApi2, _super);
    function RoutingVariableServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    RoutingVariableServiceApi2.prototype.createRoutingVariable = function(body, options) {
      var _this = this;
      return RoutingVariableServiceApiFp(this.configuration).createRoutingVariable(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingVariableServiceApi2.prototype.deleteRoutingVariable = function(id, domainId, options) {
      var _this = this;
      return RoutingVariableServiceApiFp(this.configuration).deleteRoutingVariable(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingVariableServiceApi2.prototype.readRoutingVariable = function(id, domainId, options) {
      var _this = this;
      return RoutingVariableServiceApiFp(this.configuration).readRoutingVariable(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingVariableServiceApi2.prototype.searchRoutingVariable = function(page, size, domainId, options) {
      var _this = this;
      return RoutingVariableServiceApiFp(this.configuration).searchRoutingVariable(page, size, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    RoutingVariableServiceApi2.prototype.updateRoutingVariable = function(id, body, options) {
      var _this = this;
      return RoutingVariableServiceApiFp(this.configuration).updateRoutingVariable(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return RoutingVariableServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/skill-service-api.js
var globalImportUrl38 = __toESM(require_url());
var import_axios39 = __toESM(require_axios2());
var SkillServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createSkill.");
              }
              localVarPath = "/call_center/skills";
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EngineCreateSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkillAgent: function(skillId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (skillId === null || skillId === void 0) {
                throw new RequiredError("skillId", "Required parameter skillId was null or undefined when calling createSkillAgent.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createSkillAgent.");
              }
              localVarPath = "/call_center/skills/{skill_id}/agents".replace("{skill_id}", encodeURIComponent(String(skillId)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteSkill.");
              }
              localVarPath = "/call_center/skills/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EngineDeleteSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkillAgent: function(skillId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (skillId === null || skillId === void 0) {
                throw new RequiredError("skillId", "Required parameter skillId was null or undefined when calling deleteSkillAgent.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling deleteSkillAgent.");
              }
              localVarPath = "/call_center/skills/{skill_id}/agents".replace("{skill_id}", encodeURIComponent(String(skillId)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EnginePatchSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchSkillAgent: function(skillId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (skillId === null || skillId === void 0) {
                throw new RequiredError("skillId", "Required parameter skillId was null or undefined when calling patchSkillAgent.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchSkillAgent.");
              }
              localVarPath = "/call_center/skills/{skill_id}/agents".replace("{skill_id}", encodeURIComponent(String(skillId)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill: function(id, domainId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readSkill.");
              }
              localVarPath = "/call_center/skills/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (domainId !== void 0) {
                localVarQueryParameter["domain_id"] = domainId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill: function(page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/call_center/skills";
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary For agents SearchSkillAgent
     * @param {string} skillId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkillAgent: function(skillId, page, size, q, sort, fields, id, agentId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (skillId === null || skillId === void 0) {
                throw new RequiredError("skillId", "Required parameter skillId was null or undefined when calling searchSkillAgent.");
              }
              localVarPath = "/call_center/skills/{skill_id}/agents".replace("{skill_id}", encodeURIComponent(String(skillId)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (agentId) {
                localVarQueryParameter["agent_id"] = agentId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateSkill.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateSkill.");
              }
              localVarPath = "/call_center/skills/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl38.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl38.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var SkillServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).createSkill(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EngineCreateSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkillAgent: function(skillId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).createSkillAgent(skillId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).deleteSkill(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EngineDeleteSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkillAgent: function(skillId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).deleteSkillAgent(skillId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EnginePatchSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchSkillAgent: function(skillId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).patchSkillAgent(skillId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill: function(id, domainId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).readSkill(id, domainId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill: function(page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).searchSkill(page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary For agents SearchSkillAgent
     * @param {string} skillId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkillAgent: function(skillId, page, size, q, sort, fields, id, agentId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).searchSkillAgent(skillId, page, size, q, sort, fields, id, agentId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, SkillServiceApiAxiosParamCreator(configuration).updateSkill(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios39.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var SkillServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Skill
     * @param {EngineCreateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkill: function(body, options) {
      return SkillServiceApiFp(configuration).createSkill(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EngineCreateSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSkillAgent: function(skillId, body, options) {
      return SkillServiceApiFp(configuration).createSkillAgent(skillId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove Skill
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkill: function(id, domainId, options) {
      return SkillServiceApiFp(configuration).deleteSkill(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EngineDeleteSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSkillAgent: function(skillId, body, options) {
      return SkillServiceApiFp(configuration).deleteSkillAgent(skillId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {string} skillId
     * @param {EnginePatchSkillAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchSkillAgent: function(skillId, body, options) {
      return SkillServiceApiFp(configuration).patchSkillAgent(skillId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Skill item
     * @param {string} id
     * @param {string} [domainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSkill: function(id, domainId, options) {
      return SkillServiceApiFp(configuration).readSkill(id, domainId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of Skill
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkill: function(page, size, q, sort, fields, id, options) {
      return SkillServiceApiFp(configuration).searchSkill(page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary For agents SearchSkillAgent
     * @param {string} skillId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<string>} [id]
     * @param {Array<string>} [agentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSkillAgent: function(skillId, page, size, q, sort, fields, id, agentId, options) {
      return SkillServiceApiFp(configuration).searchSkillAgent(skillId, page, size, q, sort, fields, id, agentId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update Skill
     * @param {string} id
     * @param {EngineUpdateSkillRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSkill: function(id, body, options) {
      return SkillServiceApiFp(configuration).updateSkill(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var SkillServiceApi = (
  /** @class */
  function(_super) {
    __extends(SkillServiceApi2, _super);
    function SkillServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SkillServiceApi2.prototype.createSkill = function(body, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).createSkill(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.createSkillAgent = function(skillId, body, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).createSkillAgent(skillId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.deleteSkill = function(id, domainId, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).deleteSkill(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.deleteSkillAgent = function(skillId, body, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).deleteSkillAgent(skillId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.patchSkillAgent = function(skillId, body, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).patchSkillAgent(skillId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.readSkill = function(id, domainId, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).readSkill(id, domainId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.searchSkill = function(page, size, q, sort, fields, id, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).searchSkill(page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.searchSkillAgent = function(skillId, page, size, q, sort, fields, id, agentId, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).searchSkillAgent(skillId, page, size, q, sort, fields, id, agentId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    SkillServiceApi2.prototype.updateSkill = function(id, body, options) {
      var _this = this;
      return SkillServiceApiFp(this.configuration).updateSkill(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return SkillServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/trigger-service-api.js
var globalImportUrl39 = __toESM(require_url());
var import_axios40 = __toESM(require_axios2());
var TriggerServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Create Trigger
     * @param {EngineCreateTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrigger: function(body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createTrigger.");
              }
              localVarPath = "/trigger";
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} triggerId
     * @param {EngineCreateTriggerJobRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTriggerJob: function(triggerId, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (triggerId === null || triggerId === void 0) {
                throw new RequiredError("triggerId", "Required parameter triggerId was null or undefined when calling createTriggerJob.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling createTriggerJob.");
              }
              localVarPath = "/trigger/{trigger_id}/job".replace("{trigger_id}", encodeURIComponent(String(triggerId)));
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Trigger
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrigger: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling deleteTrigger.");
              }
              localVarPath = "/trigger/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTrigger: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling patchTrigger.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling patchTrigger.");
              }
              localVarPath = "/trigger/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Trigger item
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTrigger: function(id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling readTrigger.");
              }
              localVarPath = "/trigger/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Trigger
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [schemaId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrigger: function(page, size, q, sort, fields, id, schemaId, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              localVarPath = "/trigger";
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              if (schemaId) {
                localVarQueryParameter["schema_id"] = schemaId;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} triggerId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [startedAtFrom]
     * @param {string} [startedAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {Array<'idle' | 'active' | 'done' | 'error'>} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTriggerJob: function(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (triggerId === null || triggerId === void 0) {
                throw new RequiredError("triggerId", "Required parameter triggerId was null or undefined when calling searchTriggerJob.");
              }
              localVarPath = "/trigger/{trigger_id}/job".replace("{trigger_id}", encodeURIComponent(String(triggerId)));
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort !== void 0) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (createdAtFrom !== void 0) {
                localVarQueryParameter["created_at.from"] = createdAtFrom;
              }
              if (createdAtTo !== void 0) {
                localVarQueryParameter["created_at.to"] = createdAtTo;
              }
              if (startedAtFrom !== void 0) {
                localVarQueryParameter["started_at.from"] = startedAtFrom;
              }
              if (startedAtTo !== void 0) {
                localVarQueryParameter["started_at.to"] = startedAtTo;
              }
              if (durationFrom !== void 0) {
                localVarQueryParameter["duration.from"] = durationFrom;
              }
              if (durationTo !== void 0) {
                localVarQueryParameter["duration.to"] = durationTo;
              }
              if (state) {
                localVarQueryParameter["state"] = state;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Trigger
     * @param {number} id
     * @param {EngineUpdateTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrigger: function(id, body, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (id === null || id === void 0) {
                throw new RequiredError("id", "Required parameter id was null or undefined when calling updateTrigger.");
              }
              if (body === null || body === void 0) {
                throw new RequiredError("body", "Required parameter body was null or undefined when calling updateTrigger.");
              }
              localVarPath = "/trigger/{id}".replace("{id}", encodeURIComponent(String(id)));
              localVarUrlObj = globalImportUrl39.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof body !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== void 0 ? body : {}) : body || "";
              return [2, {
                url: globalImportUrl39.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var TriggerServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Create Trigger
     * @param {EngineCreateTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrigger: function(body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).createTrigger(body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} triggerId
     * @param {EngineCreateTriggerJobRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTriggerJob: function(triggerId, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).createTriggerJob(triggerId, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove Trigger
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrigger: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).deleteTrigger(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTrigger: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).patchTrigger(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Trigger item
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTrigger: function(id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).readTrigger(id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List of Trigger
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [schemaId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrigger: function(page, size, q, sort, fields, id, schemaId, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).searchTrigger(page, size, q, sort, fields, id, schemaId, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @param {number} triggerId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [startedAtFrom]
     * @param {string} [startedAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {Array<'idle' | 'active' | 'done' | 'error'>} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTriggerJob: function(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).searchTriggerJob(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update Trigger
     * @param {number} id
     * @param {EngineUpdateTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrigger: function(id, body, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, TriggerServiceApiAxiosParamCreator(configuration).updateTrigger(id, body, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios40.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var TriggerServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Create Trigger
     * @param {EngineCreateTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrigger: function(body, options) {
      return TriggerServiceApiFp(configuration).createTrigger(body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} triggerId
     * @param {EngineCreateTriggerJobRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTriggerJob: function(triggerId, body, options) {
      return TriggerServiceApiFp(configuration).createTriggerJob(triggerId, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove Trigger
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrigger: function(id, options) {
      return TriggerServiceApiFp(configuration).deleteTrigger(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} id
     * @param {EnginePatchTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTrigger: function(id, body, options) {
      return TriggerServiceApiFp(configuration).patchTrigger(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Trigger item
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTrigger: function(id, options) {
      return TriggerServiceApiFp(configuration).readTrigger(id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List of Trigger
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {Array<number>} [id]
     * @param {Array<number>} [schemaId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrigger: function(page, size, q, sort, fields, id, schemaId, options) {
      return TriggerServiceApiFp(configuration).searchTrigger(page, size, q, sort, fields, id, schemaId, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @param {number} triggerId
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [q]
     * @param {string} [sort]
     * @param {Array<string>} [fields]
     * @param {string} [createdAtFrom]
     * @param {string} [createdAtTo]
     * @param {string} [startedAtFrom]
     * @param {string} [startedAtTo]
     * @param {string} [durationFrom]
     * @param {string} [durationTo]
     * @param {Array<'idle' | 'active' | 'done' | 'error'>} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTriggerJob: function(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options) {
      return TriggerServiceApiFp(configuration).searchTriggerJob(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update Trigger
     * @param {number} id
     * @param {EngineUpdateTriggerRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrigger: function(id, body, options) {
      return TriggerServiceApiFp(configuration).updateTrigger(id, body, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var TriggerServiceApi = (
  /** @class */
  function(_super) {
    __extends(TriggerServiceApi2, _super);
    function TriggerServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TriggerServiceApi2.prototype.createTrigger = function(body, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).createTrigger(body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.createTriggerJob = function(triggerId, body, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).createTriggerJob(triggerId, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.deleteTrigger = function(id, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).deleteTrigger(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.patchTrigger = function(id, body, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).patchTrigger(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.readTrigger = function(id, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).readTrigger(id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.searchTrigger = function(page, size, q, sort, fields, id, schemaId, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).searchTrigger(page, size, q, sort, fields, id, schemaId, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.searchTriggerJob = function(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).searchTriggerJob(triggerId, page, size, q, sort, fields, createdAtFrom, createdAtTo, startedAtFrom, startedAtTo, durationFrom, durationTo, state, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    TriggerServiceApi2.prototype.updateTrigger = function(id, body, options) {
      var _this = this;
      return TriggerServiceApiFp(this.configuration).updateTrigger(id, body, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return TriggerServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/user-helper-service-api.js
var globalImportUrl40 = __toESM(require_url());
var import_axios41 = __toESM(require_axios2());
var UserHelperServiceApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @param {string} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultDeviceConfig: function(type, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (type === null || type === void 0) {
                throw new RequiredError("type", "Required parameter type was null or undefined when calling defaultDeviceConfig.");
              }
              localVarPath = "/user/device/config/{type}".replace("{type}", encodeURIComponent(String(type)));
              localVarUrlObj = globalImportUrl40.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl40.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var UserHelperServiceApiFp = function(configuration) {
  return {
    /**
     *
     * @param {string} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultDeviceConfig: function(type, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, UserHelperServiceApiAxiosParamCreator(configuration).defaultDeviceConfig(type, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios41.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var UserHelperServiceApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @param {string} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultDeviceConfig: function(type, options) {
      return UserHelperServiceApiFp(configuration).defaultDeviceConfig(type, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var UserHelperServiceApi = (
  /** @class */
  function(_super) {
    __extends(UserHelperServiceApi2, _super);
    function UserHelperServiceApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UserHelperServiceApi2.prototype.defaultDeviceConfig = function(type, options) {
      var _this = this;
      return UserHelperServiceApiFp(this.configuration).defaultDeviceConfig(type, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return UserHelperServiceApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/api/variables-api.js
var globalImportUrl41 = __toESM(require_url());
var import_axios42 = __toESM(require_axios2());
var VariablesApiAxiosParamCreator = function(configuration) {
  var _this = this;
  return {
    /**
     *
     * @summary Remove the contact\'s variable by etag
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariable: function(contactId, etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling deleteVariable.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling deleteVariable.");
              }
              localVarPath = "/contacts/{contact_id}/variables/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove variable(s) of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariables: function(contactId, etag, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling deleteVariables.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling deleteVariables.");
              }
              localVarPath = "/contacts/{contact_id}/variables".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (etag) {
                localVarQueryParameter["etag"] = etag;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVariables: function(contactId, page, size, q, sort, fields, id, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling listVariables.");
              }
              localVarPath = "/contacts/{contact_id}/variables".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (page !== void 0) {
                localVarQueryParameter["page"] = page;
              }
              if (size !== void 0) {
                localVarQueryParameter["size"] = size;
              }
              if (q !== void 0) {
                localVarQueryParameter["q"] = q;
              }
              if (sort) {
                localVarQueryParameter["sort"] = sort;
              }
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              if (id) {
                localVarQueryParameter["id"] = id;
              }
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update or append variables to the contact
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeVariables: function(contactId, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling mergeVariables.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling mergeVariables.");
              }
              localVarPath = "/contacts/{contact_id}/variables".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Reset all variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetVariables: function(contactId, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling resetVariables.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling resetVariables.");
              }
              localVarPath = "/contacts/{contact_id}/variables".replace("{contact_id}", encodeURIComponent(String(contactId)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable: function(contactId, etag, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling updateVariable.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling updateVariable.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling updateVariable.");
              }
              localVarPath = "/contacts/{contact_id}/variables/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable2: function(contactId, etag, input, fields, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(_this, void 0, void 0, function() {
        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarApiKeyValue, _a, headersFromBaseOptions, needsSerialization;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (contactId === null || contactId === void 0) {
                throw new RequiredError("contactId", "Required parameter contactId was null or undefined when calling updateVariable2.");
              }
              if (etag === null || etag === void 0) {
                throw new RequiredError("etag", "Required parameter etag was null or undefined when calling updateVariable2.");
              }
              if (input === null || input === void 0) {
                throw new RequiredError("input", "Required parameter input was null or undefined when calling updateVariable2.");
              }
              localVarPath = "/contacts/{contact_id}/variables/{etag}".replace("{contact_id}", encodeURIComponent(String(contactId))).replace("{etag}", encodeURIComponent(String(etag)));
              localVarUrlObj = globalImportUrl41.parse(localVarPath, true);
              if (configuration) {
                baseOptions = configuration.baseOptions;
              }
              localVarRequestOptions = __assign(__assign({ method: "PATCH" }, baseOptions), options);
              localVarHeaderParameter = {};
              localVarQueryParameter = {};
              if (!(configuration && configuration.apiKey))
                return [3, 5];
              if (!(typeof configuration.apiKey === "function"))
                return [3, 2];
              return [4, configuration.apiKey("X-Webitel-Access")];
            case 1:
              _a = _b.sent();
              return [3, 4];
            case 2:
              return [4, configuration.apiKey];
            case 3:
              _a = _b.sent();
              _b.label = 4;
            case 4:
              localVarApiKeyValue = _a;
              localVarHeaderParameter["X-Webitel-Access"] = localVarApiKeyValue;
              _b.label = 5;
            case 5:
              if (fields) {
                localVarQueryParameter["fields"] = fields;
              }
              localVarHeaderParameter["Content-Type"] = "application/json";
              localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
              delete localVarUrlObj.search;
              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
              localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
              needsSerialization = typeof input !== "string" || localVarRequestOptions.headers["Content-Type"] === "application/json";
              localVarRequestOptions.data = needsSerialization ? JSON.stringify(input !== void 0 ? input : {}) : input || "";
              return [2, {
                url: globalImportUrl41.format(localVarUrlObj),
                options: localVarRequestOptions
              }];
          }
        });
      });
    }
  };
};
var VariablesApiFp = function(configuration) {
  return {
    /**
     *
     * @summary Remove the contact\'s variable by etag
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariable: function(contactId, etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).deleteVariable(contactId, etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Remove variable(s) of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariables: function(contactId, etag, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).deleteVariables(contactId, etag, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary List variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVariables: function(contactId, page, size, q, sort, fields, id, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).listVariables(contactId, page, size, q, sort, fields, id, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update or append variables to the contact
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeVariables: function(contactId, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).mergeVariables(contactId, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Reset all variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetVariables: function(contactId, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).resetVariables(contactId, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable: function(contactId, etag, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).updateVariable(contactId, etag, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable2: function(contactId, etag, input, fields, options) {
      return __awaiter(this, void 0, void 0, function() {
        var localVarAxiosArgs;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, VariablesApiAxiosParamCreator(configuration).updateVariable2(contactId, etag, input, fields, options)];
            case 1:
              localVarAxiosArgs = _a.sent();
              return [2, function(axios, basePath) {
                if (axios === void 0) {
                  axios = import_axios42.default;
                }
                if (basePath === void 0) {
                  basePath = BASE_PATH;
                }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
              }];
          }
        });
      });
    }
  };
};
var VariablesApiFactory = function(configuration, basePath, axios) {
  return {
    /**
     *
     * @summary Remove the contact\'s variable by etag
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariable: function(contactId, etag, fields, options) {
      return VariablesApiFp(configuration).deleteVariable(contactId, etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Remove variable(s) of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<string>} etag Set of unique ID(s) to remove.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVariables: function(contactId, etag, fields, options) {
      return VariablesApiFp(configuration).deleteVariables(contactId, etag, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary List variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {number} [page] Page number of result. offset &#x3D; ((page-1)*size)
     * @param {number} [size] Size of result page. limit &#x3D; (size++)
     * @param {string} [q] Search term: variable key; &#x60;?&#x60; - matches any one character &#x60;*&#x60; - matches 0 or more characters
     * @param {Array<string>} [sort] Sort the result according to fields.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {Array<string>} [id] Record(s) with unique ID only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVariables: function(contactId, page, size, q, sort, fields, id, options) {
      return VariablesApiFp(configuration).listVariables(contactId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update or append variables to the contact
     * @param {string} contactId Link contact ID.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact and listed here will be updated.
     * @param {Array<string>} [fields] Fields to be retrieved as a result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mergeVariables: function(contactId, input, fields, options) {
      return VariablesApiFp(configuration).mergeVariables(contactId, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Reset all variables of the contact
     * @param {string} contactId Contact ID associated with.
     * @param {Array<WebitelContactsInputVariable>} input Fixed object of unique variables to associate with a Contact. Each individual key of an object represents a separate variable. Variable{key} already linked with the Contact but not listed here will be removed.
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetVariables: function(contactId, input, fields, options) {
      return VariablesApiFp(configuration).resetVariables(contactId, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable: function(contactId, etag, input, fields, options) {
      return VariablesApiFp(configuration).updateVariable(contactId, etag, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    },
    /**
     *
     * @summary Update contact variable
     * @param {string} contactId Contact ID associated with.
     * @param {string} etag Unique ID of the latest version of an existing resorce.
     * @param {NEWVariableUpdate1} input
     * @param {Array<string>} [fields] Fields to be retrieved into result of changes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVariable2: function(contactId, etag, input, fields, options) {
      return VariablesApiFp(configuration).updateVariable2(contactId, etag, input, fields, options).then(function(request) {
        return request(axios, basePath);
      });
    }
  };
};
var VariablesApi = (
  /** @class */
  function(_super) {
    __extends(VariablesApi2, _super);
    function VariablesApi2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    VariablesApi2.prototype.deleteVariable = function(contactId, etag, fields, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).deleteVariable(contactId, etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    VariablesApi2.prototype.deleteVariables = function(contactId, etag, fields, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).deleteVariables(contactId, etag, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    VariablesApi2.prototype.listVariables = function(contactId, page, size, q, sort, fields, id, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).listVariables(contactId, page, size, q, sort, fields, id, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    VariablesApi2.prototype.mergeVariables = function(contactId, input, fields, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).mergeVariables(contactId, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    VariablesApi2.prototype.resetVariables = function(contactId, input, fields, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).resetVariables(contactId, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    VariablesApi2.prototype.updateVariable = function(contactId, etag, input, fields, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).updateVariable(contactId, etag, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    VariablesApi2.prototype.updateVariable2 = function(contactId, etag, input, fields, options) {
      var _this = this;
      return VariablesApiFp(this.configuration).updateVariable2(contactId, etag, input, fields, options).then(function(request) {
        return request(_this.axios, _this.basePath);
      });
    };
    return VariablesApi2;
  }(BaseAPI)
);

// node_modules/webitel-sdk/esm5/configuration.js
var Configuration = (
  /** @class */
  function() {
    function Configuration2(param) {
      if (param === void 0) {
        param = {};
      }
      this.apiKey = param.apiKey;
      this.username = param.username;
      this.password = param.password;
      this.accessToken = param.accessToken;
      this.basePath = param.basePath;
      this.baseOptions = param.baseOptions;
    }
    return Configuration2;
  }()
);

// node_modules/webitel-sdk/esm5/api/engine-audit-question-type.js
var EngineAuditQuestionType;
(function(EngineAuditQuestionType2) {
  EngineAuditQuestionType2["Default"] = "question_default";
  EngineAuditQuestionType2["Score"] = "question_score";
  EngineAuditQuestionType2["Option"] = "question_option";
})(EngineAuditQuestionType || (EngineAuditQuestionType = {}));

// node_modules/webitel-sdk/esm5/api/engine-bool-filter.js
var EngineBoolFilter;
(function(EngineBoolFilter2) {
  EngineBoolFilter2["Undefined"] = "undefined";
  EngineBoolFilter2["True"] = "true";
  EngineBoolFilter2["False"] = "false";
})(EngineBoolFilter || (EngineBoolFilter = {}));

// node_modules/webitel-sdk/esm5/api/engine-communication-channels.js
var EngineCommunicationChannels;
(function(EngineCommunicationChannels2) {
  EngineCommunicationChannels2["Undefined"] = "Undefined";
  EngineCommunicationChannels2["Phone"] = "Phone";
  EngineCommunicationChannels2["Email"] = "Email";
  EngineCommunicationChannels2["Messaging"] = "Messaging";
})(EngineCommunicationChannels || (EngineCommunicationChannels = {}));

// node_modules/webitel-sdk/esm5/api/engine-preset-query-section.js
var EnginePresetQuerySection;
(function(EnginePresetQuerySection2) {
  EnginePresetQuerySection2["Default"] = "section_default";
  EnginePresetQuerySection2["Calls"] = "section_calls";
})(EnginePresetQuerySection || (EnginePresetQuerySection = {}));

// node_modules/webitel-sdk/esm5/api/engine-routing-schema-type.js
var EngineRoutingSchemaType;
(function(EngineRoutingSchemaType2) {
  EngineRoutingSchemaType2["Default"] = "default";
  EngineRoutingSchemaType2["Voice"] = "voice";
  EngineRoutingSchemaType2["Chat"] = "chat";
  EngineRoutingSchemaType2["Processing"] = "processing";
  EngineRoutingSchemaType2["Service"] = "service";
})(EngineRoutingSchemaType || (EngineRoutingSchemaType = {}));

// node_modules/webitel-sdk/esm5/api/engine-trigger-job-state.js
var EngineTriggerJobState;
(function(EngineTriggerJobState2) {
  EngineTriggerJobState2["Idle"] = "idle";
  EngineTriggerJobState2["Active"] = "active";
  EngineTriggerJobState2["Done"] = "done";
  EngineTriggerJobState2["Error"] = "error";
})(EngineTriggerJobState || (EngineTriggerJobState = {}));

// node_modules/webitel-sdk/esm5/api/engine-trigger-type.js
var EngineTriggerType;
(function(EngineTriggerType2) {
  EngineTriggerType2["DefaultTriggerType"] = "default_trigger_type";
  EngineTriggerType2["Cron"] = "cron";
})(EngineTriggerType || (EngineTriggerType = {}));

// node_modules/webitel-sdk/esm5/api/google-protobuf-null-value.js
var GoogleProtobufNullValue;
(function(GoogleProtobufNullValue2) {
  GoogleProtobufNullValue2["NULLVALUE"] = "NULL_VALUE";
})(GoogleProtobufNullValue || (GoogleProtobufNullValue = {}));

// node_modules/webitel-sdk/esm5/api/history-file-job-history-file-job-action.js
var HistoryFileJobHistoryFileJobAction;
(function(HistoryFileJobHistoryFileJobAction2) {
  HistoryFileJobHistoryFileJobAction2["Undefined"] = "undefined";
  HistoryFileJobHistoryFileJobAction2["STT"] = "STT";
  HistoryFileJobHistoryFileJobAction2["Delete"] = "delete";
})(HistoryFileJobHistoryFileJobAction || (HistoryFileJobHistoryFileJobAction = {}));

// node_modules/webitel-sdk/esm5/api/history-file-job-history-file-job-state.js
var HistoryFileJobHistoryFileJobState;
(function(HistoryFileJobHistoryFileJobState2) {
  HistoryFileJobHistoryFileJobState2["Idle"] = "idle";
  HistoryFileJobHistoryFileJobState2["Active"] = "active";
  HistoryFileJobHistoryFileJobState2["Finished"] = "finished";
  HistoryFileJobHistoryFileJobState2["Error"] = "error";
})(HistoryFileJobHistoryFileJobState || (HistoryFileJobHistoryFileJobState = {}));

// node_modules/webitel-sdk/esm5/api/logger-action.js
var LoggerACTION;
(function(LoggerACTION2) {
  LoggerACTION2["DEFAULTNOACTION"] = "DEFAULT_NO_ACTION";
  LoggerACTION2["CREATE"] = "CREATE";
  LoggerACTION2["UPDATE"] = "UPDATE";
  LoggerACTION2["READ"] = "READ";
  LoggerACTION2["DELETE"] = "DELETE";
})(LoggerACTION || (LoggerACTION = {}));

// node_modules/webitel-sdk/esm5/api/protobuf-null-value.js
var ProtobufNullValue;
(function(ProtobufNullValue2) {
  ProtobufNullValue2["NULLVALUE"] = "NULL_VALUE";
})(ProtobufNullValue || (ProtobufNullValue = {}));

// node_modules/webitel-sdk/esm5/api/storage-import-source-type.js
var StorageImportSourceType;
(function(StorageImportSourceType2) {
  StorageImportSourceType2["DefaultSourceType"] = "DefaultSourceType";
  StorageImportSourceType2["Dialer"] = "Dialer";
})(StorageImportSourceType || (StorageImportSourceType = {}));

// node_modules/webitel-sdk/esm5/api/storage-provider-type.js
var StorageProviderType;
(function(StorageProviderType2) {
  StorageProviderType2["DefaultProvider"] = "DefaultProvider";
  StorageProviderType2["Microsoft"] = "Microsoft";
  StorageProviderType2["Google"] = "Google";
})(StorageProviderType || (StorageProviderType = {}));

// node_modules/webitel-sdk/esm5/api/storage-service-type.js
var StorageServiceType;
(function(StorageServiceType2) {
  StorageServiceType2["DefaultService"] = "DefaultService";
  StorageServiceType2["STT"] = "STT";
  StorageServiceType2["TTS"] = "TTS";
})(StorageServiceType || (StorageServiceType = {}));

// node_modules/webitel-sdk/esm5/api/storage-upload-status-code.js
var StorageUploadStatusCode;
(function(StorageUploadStatusCode2) {
  StorageUploadStatusCode2["Unknown"] = "Unknown";
  StorageUploadStatusCode2["Ok"] = "Ok";
  StorageUploadStatusCode2["Failed"] = "Failed";
})(StorageUploadStatusCode || (StorageUploadStatusCode = {}));

// node_modules/webitel-sdk/esm5/api/webitel-contacts-access-mode.js
var WebitelContactsAccessMode;
(function(WebitelContactsAccessMode2) {
  WebitelContactsAccessMode2["READ"] = "READ";
  WebitelContactsAccessMode2["WRITE"] = "WRITE";
  WebitelContactsAccessMode2["DELETE"] = "DELETE";
})(WebitelContactsAccessMode || (WebitelContactsAccessMode = {}));

// node_modules/webitel-sdk/esm5/socket/client.js
var import_axios43 = __toESM(require_axios2());
var import_ee_ts3 = __toESM(require_ee());

// node_modules/webitel-sdk/esm5/log/index.js
var Log = (
  /** @class */
  function() {
    function Log2() {
    }
    Log2.prototype.debug = function(msg) {
      var supportingDetails = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        supportingDetails[_i - 1] = arguments[_i];
      }
      this.emitLogMessage("debug", msg, supportingDetails);
    };
    Log2.prototype.info = function(msg) {
      var supportingDetails = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        supportingDetails[_i - 1] = arguments[_i];
      }
      this.emitLogMessage("info", msg, supportingDetails);
    };
    Log2.prototype.warn = function(msg) {
      var supportingDetails = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        supportingDetails[_i - 1] = arguments[_i];
      }
      this.emitLogMessage("warn", msg, supportingDetails);
    };
    Log2.prototype.error = function(msg) {
      var supportingDetails = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        supportingDetails[_i - 1] = arguments[_i];
      }
      this.emitLogMessage("error", msg, supportingDetails);
    };
    Log2.prototype.emitLogMessage = function(msgType, msg, supportingDetails) {
      if (supportingDetails.length > 0) {
        console[msgType].apply(console, __spreadArrays([msg], supportingDetails));
      } else {
        console[msgType](msg);
      }
    };
    return Log2;
  }()
);

// node_modules/webitel-sdk/esm5/sip/webrtc/index.js
var import_ee_ts = __toESM(require_ee());
var JsSip = __toESM(require_JsSIP());

// node_modules/webitel-sdk/esm5/sip/webrtc/session.js
var Session = (
  /** @class */
  function() {
    function Session3(e) {
      this.session = e.session;
      this.callId = e.request.getHeader("X-Webitel-Uuid");
      this.incoming = e.session.direction === "incoming";
      this.instanceId = e.request.getHeader("X-Webitel-Sock-Id");
    }
    Object.defineProperty(Session3.prototype, "id", {
      get: function() {
        return this.session.id;
      },
      enumerable: false,
      configurable: true
    });
    Session3.prototype.getLocalMedia = function() {
      if (this.session.connection) {
        var local = this.session.connection.getLocalStreams();
        if (local.length) {
          return local;
        }
      }
      return [];
    };
    Session3.prototype.getPeerMedia = function() {
      if (this.session.connection) {
        var peer = this.session.connection.getRemoteStreams();
        if (peer.length) {
          return peer;
        }
      }
      return [];
    };
    Session3.prototype.answer = function(s) {
      var _this = this;
      return new Promise(function() {
        _this.session.answer(s);
      });
    };
    return Session3;
  }()
);

// node_modules/webitel-sdk/esm5/sip/webrtc/index.js
var SipPhone = (
  /** @class */
  function(_super) {
    __extends(SipPhone2, _super);
    function SipPhone2(instanceId, debug2) {
      var _this = _super.call(this) || this;
      _this.instanceId = instanceId;
      _this.type = "webrtc";
      _this.sessionCache = /* @__PURE__ */ new Map();
      _this.log = new Log();
      if (debug2) {
        _this.log.info("JsSip version: " + JsSip.version);
        JsSip.debug.enable("*");
      } else {
        JsSip.debug.disable();
      }
      _this.on("unregistered", function() {
        _this.sessionCache.clear();
      });
      return _this;
    }
    SipPhone2.prototype.callOption = function(req) {
      if (req === void 0) {
        req = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var mediaStream;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getUserCallStream(req)];
            case 1:
              mediaStream = _a.sent();
              return [2, {
                sessionTimersExpires: 120,
                pcConfig: req.disableStun ? void 0 : {
                  iceServers: [{ urls: ["stun:stun.l.google.com:19302"] }]
                },
                mediaStream
              }];
          }
        });
      });
    };
    SipPhone2.prototype.answer = function(id, req) {
      return __awaiter(this, void 0, void 0, function() {
        var session, params;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.sessionCache.has(id))
                return [3, 2];
              session = this.sessionCache.get(id);
              return [4, this.callOption(req)];
            case 1:
              params = _a.sent();
              return [2, session.answer(params)];
            case 2:
              return [2, false];
          }
        });
      });
    };
    SipPhone2.prototype.call = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        var params, display, invite;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              params = {};
              display = null;
              if (req.params) {
                params.audio = req.params.audio;
                params.video = req.params.video || false;
                params.screen = req.params.screen || false;
                params.disableStun = req.params.disableStun || false;
              }
              if (typeof req.destination !== "string") {
                throw new Error("bad destination type");
              }
              return [4, this.callOption(params)];
            case 1:
              invite = _a.sent();
              if (req.params && req.params.display) {
                display = {
                  extraHeaders: ["X-Webitel-Display: " + req.params.display]
                };
              }
              return [4, this.ua.call(req.destination, __assign(__assign({}, invite), display))];
            case 2:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SipPhone2.prototype.register = function(sipConf) {
      return __awaiter(this, void 0, void 0, function() {
        var socket, configuration, ua;
        var _this = this;
        return __generator(this, function(_a) {
          socket = new JsSip.WebSocketInterface(sipConf.server);
          configuration = {
            realm: sipConf.realm,
            uri: sipConf.uri,
            authorization_user: sipConf.authorization_user,
            ha1: sipConf.ha1,
            user_agent: SipPhone2.userAgent,
            sockets: [socket],
            session_timers: true,
            // use_preloaded_route: true,
            display_name: sipConf.display_name,
            register_expires: sipConf.register_expires || 90,
            connection_recovery_min_interval: 5,
            connection_recovery_max_interval: 60
          };
          ua = this.ua = new JsSip.UA(configuration);
          ua.on("newRTCSession", function(e) {
            var session = e.session;
            var id = session.id;
            var callSession = new Session(e);
            _this.storeSession(id, callSession);
            session.on("connecting", function() {
              _this.emit("localStreams", callSession, session.connection.getLocalStreams());
            });
            if (session.connection) {
              session.connection.addEventListener("addstream", function(evt) {
                _this.emit("peerStreams", callSession, new Array(evt.stream));
              });
            }
            session.on("peerconnection", function(peer) {
              peer.peerconnection.addEventListener("addstream", function(evt) {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a2) {
                    this.emit("peerStreams", callSession, new Array(evt.stream));
                    return [
                      2
                      /*return*/
                    ];
                  });
                });
              });
            });
            session.on("ended", function() {
              _this.removeSession(id, session.connection);
            });
            session.on("failed", function() {
              _this.removeSession(id, session.connection);
            });
            session.on("accepted", function() {
              if (!callSession.incoming) {
                _this.emit("peerStreams", callSession, session.connection.getRemoteStreams());
              }
            });
            session.on("confirmed", function() {
            });
            _this.emit("newSession", callSession);
          });
          ua.on("disconnected", function(e) {
            _this.emit("unregistered");
          });
          ua.on("unregistered", function(e) {
            _this.emit("unregistered");
          });
          ua.on("registrationFailed", function(e) {
            _this.log.error("registrationFailed", e);
          });
          ua.on("registered", function(e) {
            _this.emit("registered");
          });
          ua.start();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    SipPhone2.prototype.unregister = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.ua)
                return [3, 2];
              this.ua.terminateSessions();
              this.ua.removeAllListeners();
              return [4, this.ua.stop()];
            case 1:
              _a.sent();
              delete this.ua;
              _a.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    SipPhone2.prototype.isRegistered = function() {
      if (this.ua) {
        return this.ua.isRegistered();
      }
      return false;
    };
    SipPhone2.prototype.sipSessionByCallId = function(id) {
      for (var _i = 0, _a = this.allSession; _i < _a.length; _i++) {
        var sess = _a[_i];
        if (sess.callId === id) {
          return sess;
        }
      }
      return null;
    };
    SipPhone2.prototype.sipSessionBySipId = function(id) {
      for (var _i = 0, _a = this.allSession; _i < _a.length; _i++) {
        var sess = _a[_i];
        if (sess.id.startsWith(id)) {
          return sess;
        }
      }
      return null;
    };
    SipPhone2.prototype.removeSession = function(id, connection) {
      if (connection) {
        var localStreams = connection.getLocalStreams();
        var remoteStreams = connection.getRemoteStreams();
        if (localStreams) {
          localStreams.forEach(function(stream) {
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
          });
        }
        if (remoteStreams) {
          remoteStreams.forEach(function(stream) {
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
          });
        }
      }
      if (this.sessionCache.has(id)) {
        this.sessionCache.delete(id);
        return true;
      }
      return false;
    };
    SipPhone2.prototype.storeSession = function(id, session) {
      if (this.sessionCache.has(id)) {
        throw new Error("Session already store");
      }
      this.sessionCache.set(id, session);
    };
    Object.defineProperty(SipPhone2.prototype, "allSession", {
      get: function() {
        return Array.from(this.sessionCache.values());
      },
      enumerable: false,
      configurable: true
    });
    SipPhone2.prototype.getMediaConstraints = function(req) {
      if (req.screen) {
        return {
          video: false,
          audio: false,
          screen: true
        };
      }
      return {
        video: req.video || false,
        audio: true
      };
    };
    SipPhone2.prototype.getSession = function(id) {
      if (this.sessionCache.has(id)) {
        return this.sessionCache.get(id);
      }
      return null;
    };
    SipPhone2.prototype.hasSession = function(id) {
      return this.sessionCache.has(id);
    };
    SipPhone2.prototype.getUserScreen = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          return [2, new Promise(function(resolve, reject) {
            return __awaiter(_this, void 0, void 0, function() {
              var stream, e_1;
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    _a2.trys.push([0, 2, , 3]);
                    return [4, navigator.mediaDevices.getDisplayMedia()];
                  case 1:
                    stream = _a2.sent();
                    resolve(stream);
                    return [3, 3];
                  case 2:
                    e_1 = _a2.sent();
                    reject(e_1);
                    return [3, 3];
                  case 3:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          })];
        });
      });
    };
    SipPhone2.prototype.getUserCallStream = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        var stream, camera;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(req.screen === true))
                return [3, 2];
              return [4, this.getUserScreen()];
            case 1:
              stream = _a.sent();
              _a.label = 2;
            case 2:
              if (!(req.audio !== false || req.video))
                return [3, 4];
              return [4, this.getUserMedia(req.audio, req.video)];
            case 3:
              camera = _a.sent();
              if (stream) {
                camera.getTracks().forEach(function(track) {
                  stream.addTrack(track);
                });
              } else {
                stream = camera;
              }
              _a.label = 4;
            case 4:
              if (!stream) {
                throw new Error("bad stream request");
              }
              return [2, stream];
          }
        });
      });
    };
    SipPhone2.prototype.getUserMedia = function(audio, video) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          return [2, new Promise(function(resolve, reject) {
            return __awaiter(_this, void 0, void 0, function() {
              var mediaConstraints;
              return __generator(this, function(_a2) {
                mediaConstraints = {
                  audio: !(audio === false),
                  video: void 0
                };
                if (video) {
                  mediaConstraints.video = {
                    width: { min: 10, ideal: 1280, max: 1920 },
                    height: { min: 10, ideal: 720, max: 1080 },
                    frameRate: { ideal: 10, max: 15 }
                  };
                }
                return [2, getMediaStream(mediaConstraints).then(resolve).catch(reject)];
              });
            });
          })];
        });
      });
    };
    SipPhone2.userAgent = "Webitel-Phone/" + JsSip.version;
    SipPhone2.sipVersion = JsSip.version;
    return SipPhone2;
  }(import_ee_ts.EventEmitter)
);
function getMediaStream(constraints) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, new Promise(function(resolve, reject) {
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
            return resolve(stream);
          }).catch(function(err) {
            return reject(err);
          });
        } else {
          var getUserMedia_1 = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
          getUserMedia_1(constraints, function(stream) {
            return resolve(stream);
          }, function(err) {
            return reject(err);
          });
        }
      })];
    });
  });
}

// node_modules/webitel-sdk/esm5/environment.js
var VERSION = "0.0.2";

// node_modules/webitel-sdk/esm5/version.js
var getVersion = function() {
  return VERSION || "0.0.2";
};
var version_default = getVersion();

// node_modules/webitel-sdk/esm5/socket/errors.js
var TypeErrors;
(function(TypeErrors2) {
  TypeErrors2["RolePermission"] = "api.context.permissions.app_error";
  TypeErrors2["LicencePermission"] = "api.context.permissions.license";
  TypeErrors2["PauseNotAllow"] = "app.agent.set_pause.not_allow";
})(TypeErrors || (TypeErrors = {}));
var DeviceNotFoundError = (
  /** @class */
  function(_super) {
    __extends(DeviceNotFoundError2, _super);
    function DeviceNotFoundError2(msg) {
      var _this = _super.call(this, msg) || this;
      _this.id = DeviceNotFoundError2.id;
      return _this;
    }
    DeviceNotFoundError2.id = "device_not_found";
    return DeviceNotFoundError2;
  }(Error)
);
var DeviceNotAllowPermissionError = (
  /** @class */
  function(_super) {
    __extends(DeviceNotAllowPermissionError2, _super);
    function DeviceNotAllowPermissionError2(msg) {
      var _this = _super.call(this, msg) || this;
      _this.id = DeviceNotAllowPermissionError2.id;
      return _this;
    }
    DeviceNotAllowPermissionError2.id = "device_not_allow";
    return DeviceNotAllowPermissionError2;
  }(Error)
);
var RolePermissionError = (
  /** @class */
  function(_super) {
    __extends(RolePermissionError2, _super);
    function RolePermissionError2(msg) {
      var _this = _super.call(this, msg) || this;
      _this.id = RolePermissionError2.id;
      return _this;
    }
    RolePermissionError2.id = TypeErrors.RolePermission;
    return RolePermissionError2;
  }(Error)
);
var LicencePermissionError = (
  /** @class */
  function(_super) {
    __extends(LicencePermissionError2, _super);
    function LicencePermissionError2(msg) {
      var _this = _super.call(this, msg) || this;
      _this.id = LicencePermissionError2.id;
      return _this;
    }
    LicencePermissionError2.id = TypeErrors.LicencePermission;
    return LicencePermissionError2;
  }(Error)
);
var PauseNotAllowedError = (
  /** @class */
  function(_super) {
    __extends(PauseNotAllowedError2, _super);
    function PauseNotAllowedError2(msg) {
      var _this = _super.call(this, msg) || this;
      _this.id = PauseNotAllowedError2.id;
      return _this;
    }
    PauseNotAllowedError2.id = TypeErrors.PauseNotAllow;
    return PauseNotAllowedError2;
  }(Error)
);

// node_modules/webitel-sdk/esm5/socket/task.js
var JobState;
(function(JobState2) {
  JobState2["Distribute"] = "distribute";
  JobState2["Offering"] = "offering";
  JobState2["Bridged"] = "bridged";
  JobState2["Missed"] = "missed";
  JobState2["Processing"] = "processing";
  JobState2["Closed"] = "closed";
  JobState2["Destroy"] = "destroy";
})(JobState || (JobState = {}));
var ChannelName;
(function(ChannelName2) {
  ChannelName2["Call"] = "call";
  ChannelName2["Chat"] = "chat";
  ChannelName2["Task"] = "task";
})(ChannelName || (ChannelName = {}));
var Task = (
  /** @class */
  function() {
    function Task2(client, e, distribute) {
      this.client = client;
      this.distribute = distribute;
      this.id = e.attempt_id;
      this.state = JobState.Offering;
      this.setState(e.status);
      this.lastStatusChange = e.timestamp;
      this.createdAt = e.timestamp;
      this._processing = null;
      this.offeringAt = 0;
      this.answeredAt = 0;
      this.bridgedAt = 0;
      this.reportedAt = 0;
      this.startProcessingAt = 0;
      this.stopAt = 0;
      this.closedAt = 0;
      this.form = null;
      this.autoAnswered = false;
      this._autoAnswerParam = false;
      this._autoAnswerTimerId = null;
      this.communication = distribute.communication;
      this.history = [distribute];
    }
    Object.defineProperty(Task2.prototype, "queue", {
      get: function() {
        return {
          id: this.distribute.queue_id,
          name: this.distribute.queue_name
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "duration", {
      get: function() {
        return Math.round((Date.now() - this.lastStatusChange) / 1e3);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "hasForm", {
      get: function() {
        return this.distribute.has_form || false;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "channel", {
      get: function() {
        return this.distribute.channel;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "allowAccept", {
      get: function() {
        return this.channel === ChannelName.Task && (this.bridgedAt === 0 && this.closedAt === 0);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "allowDecline", {
      get: function() {
        return this.allowAccept;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "allowClose", {
      get: function() {
        return this.channel === ChannelName.Task && this.closedAt === 0 && this.bridgedAt > 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "memberId", {
      get: function() {
        return this.distribute.member_id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "queueId", {
      get: function() {
        return this.distribute.queue_id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "hasReporting", {
      get: function() {
        return this.distribute.has_reporting;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "allowReporting", {
      get: function() {
        return this.hasReporting && this.bridgedAt > 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "agentChannelId", {
      get: function() {
        return this.distribute.agent_channel_id;
      },
      enumerable: false,
      configurable: true
    });
    Task2.prototype.setState = function(state) {
      this.state = state;
    };
    Task2.prototype.setAnswered = function(t) {
      this.answeredAt = t;
      this.lastStatusChange = Date.now();
      if (this._autoAnswerTimerId) {
        clearTimeout(this._autoAnswerTimerId);
        this._autoAnswerTimerId = null;
      }
    };
    Task2.prototype.setOffering = function(e) {
      var _this = this;
      this.offeringAt = e.timestamp;
      if (e.offering.auto_answer && this.channel === ChannelType.Job) {
        this._autoAnswerParam = e.offering.auto_answer;
        this.acceptDelay().catch(function(err) {
          _this.client.emit("error", err);
        });
      }
    };
    Task2.prototype.setBridged = function(e) {
      this.bridgedAt = e.timestamp;
      this.lastStatusChange = Date.now();
      if (e.form) {
        this.form = e.form;
      }
      if (this._autoAnswerTimerId) {
        clearTimeout(this._autoAnswerTimerId);
        this._autoAnswerTimerId = null;
      }
    };
    Task2.prototype.setProcessing = function(now, p) {
      this.state = JobState.Processing;
      this.closedAt = now;
      if (!this.startProcessingAt) {
        this.startProcessingAt = Date.now();
      }
      if (p.sec && !p.timeout) {
        p.timeout = Date.now() + p.sec * 1e3;
      }
      this._processing = p;
    };
    Task2.prototype.setClosed = function(now) {
      this.stopAt = now;
      this.state = JobState.Closed;
    };
    Task2.prototype.setTransferred = function(d) {
      this.distribute = d;
      this.history.push(d);
    };
    Task2.prototype.setMissed = function() {
      this.state = JobState.Missed;
    };
    Object.defineProperty(Task2.prototype, "processingTimeoutAt", {
      get: function() {
        if (!this._processing || !this._processing.timeout) {
          return null;
        }
        return this._processing.timeout;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "processingSec", {
      get: function() {
        if (!this._processing || !this._processing.sec) {
          return null;
        }
        return this._processing.sec;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "attempt", {
      get: function() {
        return this;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "variables", {
      get: function() {
        var res = {};
        for (var k in this.distribute.variables) {
          if (k.startsWith("cc_")) {
            continue;
          }
          res[k] = this.distribute.variables[k];
        }
        return res;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "isMember", {
      get: function() {
        return !!this.memberId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "displayNumber", {
      get: function() {
        return this.communication.destination;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "displayName", {
      get: function() {
        return this.distribute.member_name || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "display", {
      get: function() {
        return this.displayName + " (" + this.displayNumber + ")";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "renewalSec", {
      get: function() {
        if (!this._processing || !this._processing.renewal_sec) {
          return null;
        }
        return this._processing.renewal_sec;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "autoAnswer", {
      get: function() {
        return this.autoAnswerDelay > 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Task2.prototype, "autoAnswerDelay", {
      get: function() {
        if (!this._autoAnswerParam || "" + this._autoAnswerParam === "false") {
          return 0;
        } else if (isFinite(+this._autoAnswerParam)) {
          return +this._autoAnswerParam;
        }
        return this.client.autoAnswerDelayTime;
      },
      enumerable: false,
      configurable: true
    });
    Task2.prototype.accept = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("cc_agent_task_accept", {
            agent_id: this.distribute.agent_id,
            attempt_id: this.id,
            app_id: this.distribute.app_id
          })];
        });
      });
    };
    Task2.prototype.acceptDelay = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          this._autoAnswerTimerId = setTimeout(function() {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    if (this.autoAnswered) {
                      return [
                        2
                        /*return*/
                      ];
                    }
                    if (!!this.answeredAt)
                      return [3, 2];
                    this.autoAnswered = true;
                    return [4, this.accept()];
                  case 1:
                    _a2.sent();
                    _a2.label = 2;
                  case 2:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, this.autoAnswerDelay);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Task2.prototype.close = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("cc_agent_task_close", {
            agent_id: this.distribute.agent_id,
            attempt_id: this.id,
            app_id: this.distribute.app_id
          })];
        });
      });
    };
    Task2.prototype.decline = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("cc_agent_task_close", {
            agent_id: this.distribute.agent_id,
            attempt_id: this.id,
            app_id: this.distribute.app_id
          })];
        });
      });
    };
    Task2.prototype.reporting = function(reporting) {
      return __awaiter(this, void 0, void 0, function() {
        var res;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.client.request("cc_reporting", __assign({ attempt_id: this.id }, reporting))];
            case 1:
              res = _a.sent();
              this.reportedAt = Date.now();
              return [2, res];
          }
        });
      });
    };
    Task2.prototype.renew = function(sec) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("cc_renewal", {
            attempt_id: this.id,
            renewal_sec: sec ? sec : this.processingSec
          })];
        });
      });
    };
    Task2.prototype.formAction = function(action, fields) {
      return __awaiter(this, void 0, void 0, function() {
        var res, _i, _a, _b, key, value;
        return __generator(this, function(_c) {
          if (!this.form) {
            throw new Error("not found active form");
          }
          res = {};
          for (_i = 0, _a = Object.entries(fields); _i < _a.length; _i++) {
            _b = _a[_i], key = _b[0], value = _b[1];
            if (typeof value === "object") {
              ;
              res[key] = JSON.stringify(value);
            } else {
              ;
              res[key] = value;
            }
          }
          return [2, this.client.request("cc_form_action", {
            attempt_id: this.id,
            app_id: this.distribute.app_id,
            action,
            fields: res
          })];
        });
      });
    };
    return Task2;
  }()
);

// node_modules/webitel-sdk/esm5/socket/agent.js
var AgentStatus;
(function(AgentStatus2) {
  AgentStatus2["Online"] = "online";
  AgentStatus2["Offline"] = "offline";
  AgentStatus2["Pause"] = "pause";
  AgentStatus2["BreakOut"] = "break_out";
})(AgentStatus || (AgentStatus = {}));
var ChannelState;
(function(ChannelState2) {
  ChannelState2["Waiting"] = "waiting";
  ChannelState2["Distribute"] = "distribute";
  ChannelState2["Offering"] = "offering";
  ChannelState2["Answered"] = "answered";
  ChannelState2["Active"] = "active";
  ChannelState2["Bridged"] = "bridged";
  ChannelState2["Hold"] = "hold";
  ChannelState2["Missed"] = "missed";
  ChannelState2["WrapTime"] = "wrap_time";
  ChannelState2["Processing"] = "processing";
  ChannelState2["Transfer"] = "transfer";
  ChannelState2["Form"] = "form";
})(ChannelState || (ChannelState = {}));
var ChannelType;
(function(ChannelType2) {
  ChannelType2["Call"] = "call";
  ChannelType2["Email"] = "email";
  ChannelType2["Chat"] = "chat";
  ChannelType2["Job"] = "task";
})(ChannelType || (ChannelType = {}));
var Agent = (
  /** @class */
  function() {
    function Agent2(client, info) {
      this.client = client;
      this.info = info;
      this.task = /* @__PURE__ */ new Map();
      this._channels = /* @__PURE__ */ new Map();
      this.initChannels(info.channels);
      this._listOfflineMembers = null;
      this.waitingList = [];
      this.lastStatusChange = Date.now() - this.info.status_duration * 1e3;
    }
    Object.defineProperty(Agent2.prototype, "agentId", {
      get: function() {
        return this.info.agent_id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "onDemand", {
      get: function() {
        return this.info.on_demand;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "status", {
      get: function() {
        return this.info.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "statusPayload", {
      get: function() {
        return this.info.status_payload;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "isAdmin", {
      get: function() {
        return this.info.is_admin;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "isSupervisor", {
      get: function() {
        return this.info.is_supervisor;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "team", {
      get: function() {
        return this.info.team;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "supervisor", {
      get: function() {
        return this.info.supervisor;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "auditor", {
      get: function() {
        return this.info.auditor;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "channels", {
      get: function() {
        return Array.from(this._channels.values());
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "channel", {
      get: function() {
        return this._channels.get(ChannelType.Call);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Agent2.prototype, "stateDuration", {
      get: function() {
        return Math.round((Date.now() - this.lastStatusChange) / 1e3);
      },
      enumerable: false,
      configurable: true
    });
    Agent2.prototype.setWaitingList = function(e) {
      var _a;
      if (e) {
        var list = e.list;
        this.waitingList.length = 0;
        this.waitingList = (_a = this.waitingList).concat.apply(_a, list);
      }
    };
    Agent2.prototype.deleteWaitingAttempt = function(e) {
      if (e) {
        var attemptId = e.attempt_id;
        for (var i = 0; i < this.waitingList.length; i++) {
          if (this.waitingList[i].attempt_id === attemptId) {
            this.waitingList.splice(i, 1);
            break;
          }
        }
      }
    };
    Agent2.prototype.interceptAttempt = function(id) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("cc_intercept_attempt", {
            attempt_id: id,
            agent_id: this.agentId
          })];
        });
      });
    };
    Agent2.prototype.onChannelEvent = function(e) {
      var task;
      switch (e.status) {
        case ChannelState.Distribute:
          var distributeEvent = e;
          if (!distributeEvent) {
            throw new Error("bad event");
          }
          task = new Task(this.client, e, distributeEvent.distribute);
          this.task.set(task.id, task);
          if (task.agentChannelId) {
            switch (task.channel) {
              case ChannelType.Call:
                var call = this.client.callById(task.agentChannelId);
                if (call && !call.task) {
                  call.task = task;
                }
                break;
              case ChannelType.Chat:
                var chat = this.client.conversationById(task.agentChannelId);
                if (chat && !chat.task) {
                  chat.task = task;
                }
                break;
              default:
            }
          }
          break;
        case ChannelState.Offering:
          var evOffering = e;
          task = this.task.get(e.attempt_id);
          if (task) {
            task.setOffering(evOffering);
          }
          break;
        case ChannelState.Bridged:
          var bridged = e;
          task = this.task.get(bridged.attempt_id);
          if (task) {
            task.setBridged(bridged);
          }
          break;
        case ChannelState.Transfer:
          var transfer = e;
          task = this.task.get(transfer.to_attempt_id);
          if (task) {
            this.task.delete(task.id);
            task.id = transfer.attempt_id;
            task.setTransferred(transfer.distribute);
            this.task.set(task.id, task);
          }
          break;
        case ChannelState.Answered:
          task = this.task.get(e.attempt_id);
          if (task) {
            task.answeredAt = e.timestamp;
          }
          break;
        case ChannelState.Form:
          var formEvent = e;
          task = this.task.get(e.attempt_id);
          if (task) {
            task.form = formEvent.form || null;
          }
          return;
        case ChannelState.Missed:
          if (e.attempt_id) {
            task = this.task.get(e.attempt_id);
            if (task) {
              task.stopAt = e.timestamp;
              var missedEvent = e;
              if (!missedEvent) {
                throw new Error("bad event");
              }
              task.setMissed();
              this.setChannelStateTimeout(e, missedEvent.missed.timeout);
              this.task.delete(e.attempt_id);
              this.client.reportingChannelTask(task);
              return task;
            }
          }
          break;
        case ChannelState.WrapTime:
          if (e.attempt_id) {
            var wrapTimeEvent = e;
            if (!wrapTimeEvent) {
              throw new Error("bad event");
            }
            task = this.task.get(e.attempt_id);
            this.task.delete(e.attempt_id);
            this.client.reportingChannelTask(task);
          }
          break;
        case ChannelState.Processing:
          if (e.attempt_id) {
            var processingEvent = e;
            if (!processingEvent) {
              throw new Error("bad event");
            }
            task = this.task.get(e.attempt_id);
            if (task) {
              task.setProcessing(e.timestamp, processingEvent.processing);
              this.setChannelStateTimeout(e, processingEvent.processing.timeout || 0);
              return task;
            }
          }
          break;
        case ChannelState.Waiting:
          if (e.attempt_id) {
            task = this.task.get(e.attempt_id);
            if (task) {
              task.setClosed(e.timestamp);
              this.task.delete(e.attempt_id);
              this.client.reportingChannelTask(task);
            }
          }
          break;
        default:
      }
      this.setChannelState(e);
      if (task) {
        task.setState(e.status);
        return task;
      } else {
        return void 0;
      }
    };
    Agent2.prototype.online = function(channels, onDemand) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.agentSetOnline(this.agentId, channels, onDemand)];
        });
      });
    };
    Agent2.prototype.waiting = function(channel) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.agentSetWaiting(this.agentId, channel)];
        });
      });
    };
    Agent2.prototype.pause = function(payload) {
      return __awaiter(this, void 0, void 0, function() {
        var e_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.client.agentSetPause(this.agentId, payload)];
            case 1:
              return [2, _a.sent()];
            case 2:
              e_1 = _a.sent();
              if (e_1.id === TypeErrors.PauseNotAllow) {
                return [2, new PauseNotAllowedError(e_1.detail)];
              }
              return [2, e_1];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Agent2.prototype.offline = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.agentSetOffline(this.agentId)];
        });
      });
    };
    Agent2.prototype.setStatus = function(e) {
      if (e.status === AgentStatus.Online) {
        this.info.on_demand = e.on_demand || false;
        this.initChannels(e.channels);
      }
      this.info.status = e.status;
      this.info.status_payload = e.status_payload ? e.status_payload : null;
      this.lastStatusChange = Date.now();
    };
    Agent2.prototype.directMember = function(memberId, communicationId) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("cc_member_direct", {
            agent_id: this.agentId,
            member_id: memberId,
            communication_id: communicationId
          })];
        });
      });
    };
    Agent2.prototype.offlineMembers = function(q, page, perPage) {
      return __awaiter(this, void 0, void 0, function() {
        var _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = this;
              return [4, this.client.request("cc_fetch_offline_members", {
                agent_id: this.agentId,
                page,
                q,
                per_page: perPage
              })];
            case 1:
              _a._listOfflineMembers = _b.sent();
              return [2, this._listOfflineMembers];
          }
        });
      });
    };
    Agent2.prototype.hasTask = function(task) {
      return this.task.has(task.id);
    };
    Agent2.prototype.initChannels = function(channels) {
      for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {
        var c = channels_1[_i];
        this._channels.set(c.channel, c);
      }
    };
    Agent2.prototype.getChannel = function(name) {
      return this._channels.get(name);
    };
    Agent2.prototype.setChannelState = function(e) {
      var chan = this.getChannel(e.channel);
      if (chan) {
        chan.state = e.status;
        chan.joined_at = e.timestamp;
        chan.timeout = void 0;
      }
    };
    Agent2.prototype.setChannelStateTimeout = function(e, timeout) {
      var channel = this.getChannel(e.channel);
      if (channel) {
        channel.state = e.status;
        channel.timeout = timeout;
        channel.joined_at = e.timestamp;
      }
    };
    return Agent2;
  }()
);

// node_modules/webitel-sdk/esm5/socket/call.js
var CallReportingStatus;
(function(CallReportingStatus2) {
  CallReportingStatus2["Abandoned"] = "abandoned";
  CallReportingStatus2["Cancel"] = "cancel";
  CallReportingStatus2["Success"] = "success";
  CallReportingStatus2["Failed"] = "failed";
  CallReportingStatus2["Missed"] = "missed";
  CallReportingStatus2["Timeout"] = "timeout";
  CallReportingStatus2["Endless"] = "endless";
  CallReportingStatus2["Transferred"] = "transferred";
})(CallReportingStatus || (CallReportingStatus = {}));
var EavesdropState;
(function(EavesdropState2) {
  EavesdropState2["Muted"] = "muted";
  EavesdropState2["Conference"] = "conference";
  EavesdropState2["Prompt"] = "prompt";
})(EavesdropState || (EavesdropState = {}));
var EavesdropType;
(function(EavesdropType2) {
  EavesdropType2["Joined"] = "joined";
  EavesdropType2["Leave"] = "leave";
  EavesdropType2["Hide"] = "hide";
})(EavesdropType || (EavesdropType = {}));
var CallActions;
(function(CallActions2) {
  CallActions2["Ringing"] = "ringing";
  CallActions2["Active"] = "active";
  CallActions2["Bridge"] = "bridge";
  CallActions2["Hold"] = "hold";
  CallActions2["DTMF"] = "dtmf";
  CallActions2["Voice"] = "voice";
  CallActions2["Silence"] = "silence";
  CallActions2["Execute"] = "execute";
  CallActions2["Update"] = "update";
  CallActions2["Hangup"] = "hangup";
  CallActions2["Reporting"] = "reporting";
  CallActions2["PeerStream"] = "peerStream";
  CallActions2["LocalStream"] = "localStream";
  CallActions2["Destroy"] = "destroy";
  CallActions2["Eavesdrop"] = "eavesdrop";
})(CallActions || (CallActions = {}));
var CallDirection;
(function(CallDirection2) {
  CallDirection2["Inbound"] = "inbound";
  CallDirection2["Outbound"] = "outbound";
})(CallDirection || (CallDirection = {}));
var Call = (
  /** @class */
  function() {
    function Call2(client, e) {
      this.client = client;
      var callInfo = e.data;
      this._muted = false;
      this.voice = true;
      this.createdAt = +e.timestamp;
      this.task = null;
      this.data = null;
      this._eavesdrop = null;
      this._autoAnswerTimerId = null;
      this._activeCounter = 0;
      this.answeredAt = 0;
      this.hangupAt = 0;
      this.bridgedAt = 0;
      this.reportingAt = 0;
      this.autoAnswered = false;
      this.peerStreams = [];
      this.localStreams = [];
      if (callInfo.eavesdrop) {
        this._eavesdrop = callInfo.eavesdrop;
      }
      if (client.phone) {
        if (callInfo.sip_id) {
          this.setSip(client.phone.sipSessionBySipId(callInfo.sip_id));
        } else {
          this.setSip(client.phone.sipSessionByCallId(e.id));
        }
      }
      this.params = {};
      this.id = e.id;
      this.digits = [];
      this.applications = [];
      this.appId = e.app_id;
      this.setState(e);
      this.setInfo(callInfo);
      if (this.queue && this.client.agent) {
        this.task = this.client.agent.task.get(+this.queue.attempt_id) || null;
      }
    }
    Call2.prototype.setState = function(s) {
      this.state = s.event;
    };
    Call2.prototype.setSip = function(sip) {
      if (sip && !this.sip) {
        this.sip = sip;
        this.localStreams = sip.getLocalMedia();
        this.peerStreams = sip.getPeerMedia();
      }
    };
    Object.defineProperty(Call2.prototype, "duration", {
      get: function() {
        if (this.hangupAt === 0) {
          return Math.round((Date.now() - this.createdAt) / 1e3);
        } else {
          return Math.round((this.hangupAt - this.createdAt) / 1e3);
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowDtmf", {
      get: function() {
        return this.answeredAt > 0 && this.allowHangup;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowHangup", {
      get: function() {
        return this.hangupAt === 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowHold", {
      get: function() {
        return this.hangupAt === 0 && (this.state === "active" || this.state === "bridge");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowAnswer", {
      get: function() {
        return this.client.phone && this.hangupAt === 0 && this.answeredAt === 0 && (this.queue || this.direction === CallDirection.Inbound || this.params && !this.params.autoAnswer);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowUnHold", {
      get: function() {
        return this.hangupAt === 0 && this.state === "hold";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "memberCommunication", {
      get: function() {
        if (!this.task) {
          return null;
        } else {
          return this.task.communication;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "isEavesdrop", {
      get: function() {
        return !!this._eavesdrop;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropName", {
      get: function() {
        return this.isEavesdrop ? this._eavesdrop.name : "";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropNumber", {
      get: function() {
        return this.isEavesdrop ? this._eavesdrop.number : "";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropDuration", {
      get: function() {
        return this.isEavesdrop ? this._eavesdrop.duration : 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropState", {
      get: function() {
        return this.isEavesdrop ? this._eavesdrop.state : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropIsMuted", {
      get: function() {
        return this.eavesdropState === EavesdropState.Muted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropIsConference", {
      get: function() {
        return this.eavesdropState === EavesdropState.Conference;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "eavesdropIsPrompt", {
      get: function() {
        return this.eavesdropState === EavesdropState.Prompt;
      },
      enumerable: false,
      configurable: true
    });
    Call2.prototype.getMember = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.isMember) {
            throw new Error("call is not from outbound queue");
          }
          return [2, this.client.request("cc_member_page", {
            queue_id: this.task.queueId,
            member_id: this.task.memberId
          })];
        });
      });
    };
    Object.defineProperty(Call2.prototype, "isMember", {
      get: function() {
        return !!(this.task && this.task.isMember);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "firstActive", {
      get: function() {
        return this._activeCounter === 1;
      },
      enumerable: false,
      configurable: true
    });
    Call2.prototype.setActive = function(e) {
      this._activeCounter++;
      if (this._autoAnswerTimerId) {
        clearTimeout(this._autoAnswerTimerId);
        this._autoAnswerTimerId = null;
      }
      if (!this.answeredAt) {
        if (this.direction === CallDirection.Inbound) {
          this.bridgedAt = +e.timestamp;
          if (this.parentId) {
            this.bridgedId = this.parentId;
          }
        }
        this.answeredAt = +e.timestamp;
      }
      this.setState(e);
    };
    Call2.prototype.setBridged = function(s) {
      var bridged = s.data;
      if (!this.bridgedAt) {
        this.bridgedAt = +s.timestamp;
      }
      this.bridgedId = bridged.bridged_id;
      if (bridged.to) {
        if (this.direction === CallDirection.Inbound) {
          this.from = bridged.to;
        } else {
          this.to = bridged.to;
        }
      }
      this.bridgedId = bridged.bridged_id;
      if (bridged.payload) {
        this.variables = bridged.payload;
      }
      if (bridged.queue) {
        this.queue = bridged.queue;
      }
    };
    Call2.prototype.setHold = function(e) {
      this.setState(e);
    };
    Call2.prototype.setInfo = function(s) {
      this.parentId = s.parent_id;
      this.destination = s.destination;
      this.direction = s.direction;
      this.from = s.from;
      this.to = s.to;
      this.variables = s.payload;
      this.queue = s.queue || null;
      this.sipId = s.sip_id || null;
      this.params = s.params;
    };
    Call2.prototype.setPeerStreams = function(streams) {
      if (!streams) {
        this.peerStreams = [];
      } else {
        this.peerStreams = streams;
      }
    };
    Call2.prototype.setLocalStreams = function(streams) {
      if (!streams) {
        this.localStreams = [];
      } else {
        this.localStreams = streams;
      }
    };
    Call2.prototype.setVoice = function() {
      this.voice = true;
    };
    Call2.prototype.setSilence = function() {
      this.voice = false;
    };
    Call2.prototype.setExecute = function(s) {
      this.applications.push(s.application);
    };
    Call2.prototype.addDigit = function(s) {
      this.digits.push(s.digit);
    };
    Call2.prototype.setEavesdropState = function(e) {
      if (e.type === EavesdropType.Joined) {
        this._eavesdrop = e;
      } else if (e.type === EavesdropType.Leave) {
        this._eavesdrop = null;
      } else {
        this._eavesdrop.state = e.state;
      }
    };
    Call2.prototype.setHangup = function(s) {
      var hangup = s.data;
      this.hangupAt = +s.timestamp;
      this.hangupCause = hangup.cause;
      this.hangupSipCode = hangup.sip;
      this.voice = false;
      this.peerStreams = [];
      if (+hangup.reporting_at) {
        this.reportingAt = +hangup.reporting_at;
      }
      this.setState(s);
    };
    Object.defineProperty(Call2.prototype, "allowReporting", {
      get: function() {
        return this.answeredAt > 0 && this.hasReporting;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "hasReporting", {
      get: function() {
        if (this.task) {
          return this.task.hasReporting;
        }
        return false;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "display", {
      get: function() {
        return this.displayNumber + " (" + this.displayName + ")";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "muted", {
      get: function() {
        return this._muted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "isHold", {
      get: function() {
        return this.state === CallActions.Hold;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowInboundVideo", {
      get: function() {
        if (this.params) {
          return this.params.video || false;
        }
        return false;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "allowOutboundVideo", {
      get: function() {
        if (this.params) {
          return this.params.video || false;
        }
        return false;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "active", {
      get: function() {
        return this.hangupAt === 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "displayNumber", {
      get: function() {
        if (this.direction === "inbound") {
          return this.from.number;
        } else {
          if (this.to) {
            return this.to.number;
          }
          return this.destination;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "displayName", {
      get: function() {
        if (this.direction === "inbound") {
          return this.from.name;
        } else {
          if (this.to) {
            return this.to.name;
          }
          return this.destination;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "autoAnswer", {
      get: function() {
        return this.queue && this.queue.queue_type === "offline" || this.autoAnswerDelay > 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "autoAnswerDelay", {
      get: function() {
        if (!this.params || !this.params.autoAnswer || "" + this.params.autoAnswer === "false") {
          return 0;
        } else if (isFinite(+this.params.autoAnswer)) {
          return +this.params.autoAnswer;
        }
        return this.client.autoAnswerDelayTime;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Call2.prototype, "attempt", {
      // todo task is deprecated
      get: function() {
        return this.task;
      },
      enumerable: false,
      configurable: true
    });
    Call2.prototype.answer = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        var params, e_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(this.sip && this.client.phone))
                return [3, 6];
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this.client.phone.callOption(req)];
            case 2:
              params = _a.sent();
              return [4, this.sip.answer(params)];
            case 3:
              _a.sent();
              return [3, 5];
            case 4:
              e_1 = _a.sent();
              this.client.handleError(e_1);
              return [3, 5];
            case 5:
              return [2, true];
            case 6:
              return [2, false];
          }
        });
      });
    };
    Call2.prototype.answerDelay = function(req) {
      var _this = this;
      if (this.autoAnswered) {
        return;
      }
      this._autoAnswerTimerId = setTimeout(function() {
        return __awaiter(_this, void 0, void 0, function() {
          var _a;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                if (this.autoAnswered) {
                  return [
                    2
                    /*return*/
                  ];
                }
                _a = this;
                return [4, this.answer(req)];
              case 1:
                _a.autoAnswered = _b.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, this.autoAnswerDelay);
    };
    Call2.prototype.hangup = function(cause) {
      return __awaiter(this, void 0, void 0, function() {
        var _cause;
        return __generator(this, function(_a) {
          _cause = cause;
          if (this.answeredAt === 0 && !cause) {
            _cause = this.direction === CallDirection.Inbound ? "USER_BUSY" : "ORIGINATOR_CANCEL";
          }
          return [2, this.client.request("call_hangup", {
            id: this.id,
            app_id: this.appId,
            cause: _cause
          })];
        });
      });
    };
    Call2.prototype.eavesdrop = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          req.id = this.id;
          return [2, this.client.request("call_eavesdrop", req)];
        });
      });
    };
    Call2.prototype.changeEavesdropState = function(state) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.isEavesdrop) {
            throw new Error("this call not in eavesdrop");
          }
          if (this.eavesdropState === state) {
            throw new Error("this call already eavesdrop state: " + state);
          }
          return [2, this.client.request("call_eavesdrop_state", {
            id: this.id,
            state
          })];
        });
      });
    };
    Call2.prototype.toggleHold = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (this.state === CallActions.Hold) {
            return [2, this.unHold()];
          } else {
            return [2, this.hold()];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Call2.prototype.hold = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (this.state === CallActions.Hold) {
            throw new Error("Call is hold");
          }
          return [2, this.client.request("call_hold", {
            id: this.id,
            app_id: this.appId
          })];
        });
      });
    };
    Call2.prototype.unHold = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (this.state !== CallActions.Hold) {
            throw new Error("Call is active");
          }
          return [2, this.client.request("call_unhold", {
            id: this.id,
            app_id: this.appId
          })];
        });
      });
    };
    Call2.prototype.sendDTMF = function(dtmf) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("call_dtmf", {
            id: this.id,
            app_id: this.appId,
            dtmf
          })];
        });
      });
    };
    Call2.prototype.blindTransfer = function(destination) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("call_blind_transfer", {
            id: this.id,
            app_id: this.appId,
            destination
          })];
        });
      });
    };
    Call2.prototype.mute = function(mute) {
      if (mute === void 0) {
        mute = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var res;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.client.request("call_mute", {
                id: this.id,
                app_id: this.appId,
                mute
              })];
            case 1:
              res = _a.sent();
              this._muted = mute;
              return [2, res];
          }
        });
      });
    };
    Call2.prototype.bridgeTo = function(call) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("call_bridge", {
            from_id: this.id,
            from_app_id: this.appId,
            to_id: call.id,
            to_app_id: call.appId
          })];
        });
      });
    };
    Call2.prototype.reporting = function(reporting) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.task) {
            throw new Error("this call not in queue");
          }
          return [2, this.task.reporting(reporting)];
        });
      });
    };
    Call2.prototype.renew = function(sec) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.task) {
            throw new Error("this conversation not in queue");
          }
          return [2, this.task.renew(sec)];
        });
      });
    };
    Call2.prototype.callToUser = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          req.nodeId = this.appId;
          req.parentCallId = this.id || null;
          req.sendToCallId = this.parentId || null;
          return [2, this.client.inviteToUser(req)];
        });
      });
    };
    return Call2;
  }()
);

// node_modules/webitel-sdk/esm5/socket/utils.js
function formatWebSocketUri(host) {
  return host.replace(/^http/, "ws");
}
function formatBaseUri(host) {
  var res = host.replace(/^ws/, "http");
  if (res.endsWith("/")) {
    res = res.slice(0, -1);
  }
  if (res.endsWith("/ws")) {
    res = res.slice(0, -3);
  }
  return res;
}
function chunkString(str, len) {
  var size = Math.ceil(str.length / len);
  var r = new Array(size);
  var offset = 0;
  for (var i = 0; i < size; i++) {
    r[i] = str.substring(offset, offset + len);
    offset += len;
  }
  return r;
}

// node_modules/webitel-sdk/esm5/socket/conversation.js
var maxSizeMessage = 4096;
var DeclineCause;
(function(DeclineCause2) {
  DeclineCause2["Timeout"] = "TIMEOUT";
  DeclineCause2["Busy"] = "BUSY";
  DeclineCause2["Cancel"] = "CANCEL";
  DeclineCause2["Transfer"] = "TRANSFER";
})(DeclineCause || (DeclineCause = {}));
var ChatActions;
(function(ChatActions2) {
  ChatActions2["Message"] = "message";
  ChatActions2["UserInvite"] = "user_invite";
  ChatActions2["Invite"] = "invite_conversation";
  ChatActions2["Joined"] = "join_conversation";
  ChatActions2["Close"] = "close_conversation";
  ChatActions2["Leave"] = "leave_conversation";
  ChatActions2["Decline"] = "decline_invite";
  ChatActions2["Update"] = "update_channel";
  ChatActions2["Destroy"] = "destroy";
  ChatActions2["MessageDeleted"] = "message_deleted";
})(ChatActions || (ChatActions = {}));
var ConversationState;
(function(ConversationState2) {
  ConversationState2["Init"] = "init";
  ConversationState2["Invite"] = "invite";
  ConversationState2["Active"] = "active";
  ConversationState2["Pending"] = "pending";
  ConversationState2["Closed"] = "closed";
})(ConversationState || (ConversationState = {}));
var Conversation = (
  /** @class */
  function() {
    function Conversation2(client, conversationId, title, members, messages, variables) {
      this.client = client;
      this.conversationId = conversationId;
      this.title = title;
      this.channelId = null;
      this.createdAt = Date.now();
      this.answeredAt = 0;
      this.updatedAt = 0;
      this.invitedAt = 0;
      this.closedAt = 0;
      this.task = null;
      this.data = null;
      this.queue = null;
      this.members = (members || []).map(function(i) {
        return wrapChannelMember(i);
      });
      this._messages = messages || [];
      this.state = ConversationState.Invite;
      this.variables = {};
      this._hasReporting = !!(variables && variables.cc_reporting === "true");
      this.autoAnswered = false;
      this._autoAnswerParam = false;
      this._autoAnswerTimerId = null;
      this._cause = null;
      this.lastAction = null;
      for (var k in variables) {
        if (!k.startsWith("cc_") && variables.hasOwnProperty(k)) {
          if (k === "wbt_auto_answer") {
            this._autoAnswerParam = variables.wbt_auto_answer;
          } else {
            this.variables[k] = variables[k];
          }
        }
      }
      if (variables && variables.hasOwnProperty("cc_attempt_id") && this.client.agent) {
        this.queue = {
          id: +variables.cc_queue_id || null,
          name: variables.cc_queue_name || ""
        };
        this.task = this.client.agent.task.get(+variables.cc_attempt_id) || null;
      }
    }
    Conversation2.prototype.setInvite = function(inviteId, timestamp) {
      var _this = this;
      this.inviteId = inviteId;
      this.invitedAt = timestamp;
      if (this.autoAnswer) {
        this.joinDelay().catch(function(e) {
          _this.client.emit("error", e);
        });
      }
    };
    Object.defineProperty(Conversation2.prototype, "autoAnswer", {
      get: function() {
        return this.autoAnswerDelay > 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "autoAnswerDelay", {
      get: function() {
        if (!this._autoAnswerParam || "" + this._autoAnswerParam === "false") {
          return 0;
        } else if (isFinite(+this._autoAnswerParam)) {
          return +this._autoAnswerParam;
        }
        return this.client.autoAnswerDelayTime;
      },
      enumerable: false,
      configurable: true
    });
    Conversation2.prototype.setAnswered = function(channelId, timestamp, member) {
      this.state = ConversationState.Active;
      this.answeredAt = timestamp;
      this.channelId = channelId;
      if (this._autoAnswerTimerId) {
        clearTimeout(this._autoAnswerTimerId);
        this._autoAnswerTimerId = null;
      }
      this.member = wrapChannelMember(member);
      this.inviteId = null;
    };
    Conversation2.prototype.setClosed = function(timestamp) {
      this.state = ConversationState.Closed;
      this.closedAt = timestamp;
    };
    Conversation2.prototype.setDecline = function(e) {
      this.setClosed(e.timestamp);
      this._cause = e.cause || null;
    };
    Conversation2.prototype.setLeave = function(e) {
      if (e.cause) {
        this._cause = e.cause;
      }
      this.setClosed(e.timestamp);
    };
    Conversation2.prototype.setDeletedMessage = function(d) {
      var messages = this._messages;
      for (var i = 0; i < messages.length; i++) {
        if (messages[i].id === d.id) {
          d.created_at = messages[i].created_at;
          messages.splice(i, 1, d);
        }
      }
    };
    Object.defineProperty(Conversation2.prototype, "id", {
      get: function() {
        return this.channelId || this.inviteId || this.conversationId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "cause", {
      get: function() {
        return this._cause;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "messages", {
      get: function() {
        return this.getMessages();
      },
      enumerable: false,
      configurable: true
    });
    Conversation2.prototype.getMessages = function() {
      var _this = this;
      return this._messages.map(function(i) {
        var msg = {
          id: i.id,
          type: i.type,
          member: _this.messageMember(i),
          channelId: i.channel_id,
          createdAt: i.created_at,
          updatedAt: i.updated_at,
          contact: null
        };
        if (i.hasOwnProperty("file")) {
          if (i.file && i.file.id > 0) {
            i.file.url = _this.client.fileUrlDownload(i.file.id);
            i.file.streamUrl = _this.client.fileUrlStream(i.file.id);
          }
          msg.file = i.file;
        }
        if (i.hasOwnProperty("text")) {
          msg.text = i.text;
        }
        if (i.hasOwnProperty("contact")) {
          msg.contact = i.contact;
        }
        return msg;
      });
    };
    Conversation2.prototype.next = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          throw new Error("TODO");
        });
      });
    };
    Conversation2.prototype.pagination = function(page, perPage) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          throw new Error("TODO");
        });
      });
    };
    Conversation2.prototype.newMessage = function(e) {
      this._messages.push(e);
    };
    Object.defineProperty(Conversation2.prototype, "allowDecline", {
      get: function() {
        return !!this.inviteId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "allowJoin", {
      get: function() {
        return !!this.inviteId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "allowLeave", {
      get: function() {
        return !!this.channelId && (this.closedAt === 0 || !this.hasReporting);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "allowReporting", {
      get: function() {
        return this.answeredAt > 0 && this.hasReporting;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "hasReporting", {
      get: function() {
        return this._hasReporting;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "membersId", {
      get: function() {
        var res = [this.id];
        for (var _i = 0, _a = this.members; _i < _a.length; _i++) {
          var m = _a[_i];
          res.push(m.id);
        }
        return res;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "attempt", {
      // todo task is deprecated
      get: function() {
        return this.task;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Conversation2.prototype, "isTransferred", {
      get: function() {
        return (this._cause && this._cause.toUpperCase()) === DeclineCause.Transfer;
      },
      enumerable: false,
      configurable: true
    });
    Conversation2.prototype.decline = function(cause) {
      return __awaiter(this, void 0, void 0, function() {
        var _cause;
        return __generator(this, function(_a) {
          if (!this.inviteId)
            throw new Error("This conversation is joined");
          _cause = cause;
          if (!cause && this.answeredAt === 0) {
            _cause = DeclineCause.Busy;
          }
          return [2, this.client.request("decline_chat", {
            invite_id: this.inviteId,
            cause: _cause
          })];
        });
      });
    };
    Conversation2.prototype.joinDelay = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          if (this.autoAnswered) {
            return [
              2
              /*return*/
            ];
          }
          this.autoAnswered = true;
          this._autoAnswerTimerId = setTimeout(function() {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    if (!!this.answeredAt)
                      return [3, 2];
                    return [4, this.join()];
                  case 1:
                    _a2.sent();
                    _a2.label = 2;
                  case 2:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, this.autoAnswerDelay);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Conversation2.prototype.join = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.inviteId)
            throw new Error("This conversation is joined");
          return [2, this.client.request("join_chat", {
            invite_id: this.inviteId
          })];
        });
      });
    };
    Conversation2.prototype.close = function(cause) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.channelId)
            throw new Error("This conversation not active");
          return [2, this.client.request("close_chat", {
            channel_id: this.channelId,
            conversation_id: this.conversationId,
            cause
          })];
        });
      });
    };
    Conversation2.prototype.leave = function(cause) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.channelId)
            throw new Error("This conversation not active");
          if (this.closedAt !== 0 && !this.hasReporting && this.cause !== DeclineCause.Busy) {
            return [2, this.client.destroyConversation(this)];
          }
          return [2, this.client.request("leave_chat", {
            channel_id: this.channelId,
            conversation_id: this.conversationId,
            cause
          })];
        });
      });
    };
    Conversation2.prototype.sendText = function(text) {
      return __awaiter(this, void 0, void 0, function() {
        var chunk, i;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.channelId) {
                throw new Error("conversation not active");
              }
              if (!text.length) {
                throw new Error("empty message");
              }
              chunk = chunkString(text, maxSizeMessage);
              i = 0;
              _a.label = 1;
            case 1:
              if (!(i < chunk.length))
                return [3, 4];
              if (i + 1 >= chunk.length) {
                return [2, this.sendMessageTextChunk(chunk[i])];
              }
              return [4, this.sendMessageTextChunk(chunk[i])];
            case 2:
              _a.sent();
              _a.label = 3;
            case 3:
              i++;
              return [3, 1];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Conversation2.prototype.sendFile = function(file, cb) {
      return __awaiter(this, void 0, void 0, function() {
        var storedFiles, f;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.client.storeFile(this.conversationId, [file], cb)];
            case 1:
              storedFiles = _a.sent();
              f = storedFiles[0];
              return [2, this.client.request("send_file_chat", {
                channel_id: this.channelId,
                conversation_id: this.conversationId,
                id: f.id,
                name: file.name,
                mime: f.mime,
                url: f.shared,
                size: f.size
              })];
          }
        });
      });
    };
    Conversation2.prototype.send = function(data, cb) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (typeof data === "string") {
            return [2, this.sendText(data)];
          } else if (data instanceof File) {
            return [2, this.sendFile(data, cb)];
          } else {
            throw new Error("unknown send data");
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Conversation2.prototype.addToChat = function(userId, title) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("add_to_chat", {
            channel_id: this.channelId,
            conversation_id: this.conversationId,
            user_id: userId,
            title
          })];
        });
      });
    };
    Conversation2.prototype.startChat = function(userId) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("start_chat", {
            user_id: userId
          })];
        });
      });
    };
    Conversation2.prototype.updateChannel = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("update_channel_chat", {
            channel_id: this.channelId
          })];
        });
      });
    };
    Conversation2.prototype.reporting = function(reporting) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.task) {
            throw new Error("this conversation not in queue");
          }
          return [2, this.task.reporting(reporting)];
        });
      });
    };
    Conversation2.prototype.renew = function(sec) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!this.task) {
            throw new Error("this conversation not in queue");
          }
          return [2, this.task.renew(sec)];
        });
      });
    };
    Conversation2.prototype.transferToPlan = function(planId) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("blind_transfer_chat", {
            conversation_id: this.conversationId,
            channel_id: this.channelId,
            plan_id: planId
          })];
        });
      });
    };
    Conversation2.prototype.transferToUser = function(userId) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.client.request("transfer_user_chat", {
            conversation_id: this.conversationId,
            channel_id: this.channelId,
            user_id: userId
          })];
        });
      });
    };
    Conversation2.prototype.sendMessageTextChunk = function(text) {
      return this.client.request("send_text_chat", {
        channel_id: this.channelId,
        conversation_id: this.conversationId,
        text
      });
    };
    Conversation2.prototype.messageMember = function(msg) {
      if (this.member && msg.channel_id === this.channelId) {
        return {
          self: true
        };
      }
      for (var _i = 0, _a = this.members; _i < _a.length; _i++) {
        var m = _a[_i];
        if (m.id === msg.channel_id) {
          return m;
        }
      }
      return null;
    };
    return Conversation2;
  }()
);
function wrapChannelMember(m) {
  m.messenger = m.type;
  return m;
}

// node_modules/webitel-sdk/esm5/socket/notification.js
var NotificationActions;
(function(NotificationActions2) {
  NotificationActions2["HideMember"] = "hide_member";
  NotificationActions2["HideAttempt"] = "hide_attempt";
  NotificationActions2["WaitingList"] = "waiting_list";
})(NotificationActions || (NotificationActions = {}));

// node_modules/webitel-sdk/esm5/socket/socket.js
var import_ee_ts2 = __toESM(require_ee());
var SOCKET_URL_SUFFIX = "websocket";
var spamData = "\0\0\0\0";
var Socket = (
  /** @class */
  function(_super) {
    __extends(Socket2, _super);
    function Socket2(host) {
      var _this = _super.call(this) || this;
      _this.host = host;
      return _this;
    }
    Socket2.prototype.connect = function(token) {
      var _this = this;
      this.socket = new WebSocket(formatWebSocketUri(this.host) + "/" + SOCKET_URL_SUFFIX);
      this.socket.onclose = function(e) {
        return _this.onClose(e.code);
      };
      this.socket.onmessage = function(e) {
        return _this.onMessage(e.data);
      };
      this.socket.onopen = function() {
        return _this.onOpen();
      };
    };
    Socket2.prototype.send = function(request) {
      this.socket.send(JSON.stringify(request));
      return null;
    };
    Socket2.prototype.close = function(code) {
      this.socket.close(code || 1e3);
      delete this.socket;
      this.onClose(code || 1e3);
    };
    Socket2.prototype.onOpen = function() {
      this.emit("open");
    };
    Socket2.prototype.onClose = function(code) {
      this.emit("close", code);
      this.off("*");
    };
    Socket2.prototype.onMessage = function(data) {
      if (data !== spamData) {
        var message = JSON.parse(data);
        this.emit("message", message);
      }
    };
    return Socket2;
  }(import_ee_ts2.EventEmitter)
);

// node_modules/webitel-sdk/esm5/socket/client.js
var API_HEADER_TOKEN = "X-Webitel-Access";
var WEBSOCKET_AUTHENTICATION_CHALLENGE = "authentication_challenge";
var WEBSOCKET_DEFAULT_DEVICE_CONFIG = "user_default_device";
var WEBSOCKET_AGENT_SESSION = "cc_agent_session";
var WEBSOCKET_PING = "ping";
var WEBSOCKET_MAKE_OUTBOUND_CALL = "call_invite";
var WEBSOCKET_MAKE_USER_CALL = "call_user";
var WEBSOCKET_EVENT_HELLO = "hello";
var WEBSOCKET_EVENT_CALL = "call";
var WEBSOCKET_EVENT_CHAT = "chat";
var WEBSOCKET_EVENT_USER_STATE = "user_state";
var WEBSOCKET_EVENT_AGENT_STATUS = "agent_status";
var WEBSOCKET_EVENT_CHANNEL_STATUS = "channel";
var WEBSOCKET_EVENT_ERROR = "error";
var WEBSOCKET_EVENT_NOTIFICATION = "notification";
var TASK_EVENT = "task";
var JOB_EVENT = "job";
var WEBSOCKET_EVENT_SIP = "sip";
var HandleError;
(function(HandleError2) {
  HandleError2["NotFoundError"] = "NotFoundError";
  HandleError2["NotAllowedError"] = "NotAllowedError";
})(HandleError || (HandleError = {}));
var Response;
(function(Response2) {
  Response2["STATUS_FAIL"] = "FAIL";
  Response2["STATUS_OK"] = "OK";
})(Response || (Response = {}));
var Client = (
  /** @class */
  function(_super) {
    __extends(Client2, _super);
    function Client2(_config) {
      var _this = _super.call(this) || this;
      _this._config = _config;
      _this.reqSeq = 0;
      _this.queueRequest = /* @__PURE__ */ new Map();
      _this.log = new Log();
      _this.eventHandler = new import_ee_ts3.EventEmitter();
      _this.callStore = /* @__PURE__ */ new Map();
      _this.conversationStore = /* @__PURE__ */ new Map();
      _this.pingTimer = null;
      _this.basePath = "" + formatBaseUri(_config.storageEndpoint || _config.endpoint);
      _this.lastError = null;
      return _this;
    }
    Client2.prototype.connect = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.connectToSocket()];
            case 1:
              _a.sent();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.disconnect = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          this.socket.close();
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Client2.prototype.subscribeCall = function(handler, data) {
      return __awaiter(this, void 0, void 0, function() {
        var calls, _i, _a, c, e, call;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.request("subscribe_call", data)];
            case 1:
              calls = _b.sent();
              this.eventHandler.on(WEBSOCKET_EVENT_CALL, handler);
              if (calls.items && calls.items.length) {
                for (_i = 0, _a = calls.items; _i < _a.length; _i++) {
                  c = _a[_i];
                  if (c.hangup_at && c.hangup_at > 0 && !c.task) {
                    continue;
                  }
                  e = {
                    cc_app_id: "",
                    app_id: c.app_id,
                    event: c.state,
                    id: c.id,
                    timestamp: Date.now(),
                    data: {
                      app_id: c.app_id,
                      event: c.state,
                      id: c.id,
                      timestamp: Date.now(),
                      cc_app_id: "",
                      sip_id: "",
                      parent_id: c.parent_id,
                      direction: c.direction,
                      destination: c.destination,
                      queue: c.queue,
                      from: c.from,
                      to: c.to,
                      payload: c.variables
                    }
                  };
                  call = new Call(this, e);
                  call.createdAt = c.created_at;
                  call.answeredAt = c.answered_at || 0;
                  call.bridgedAt = c.bridged_at || 0;
                  call.hangupAt = c.hangup_at || 0;
                  if (c.task) {
                    call.task = new Task(this, {
                      attempt_id: c.task.attempt_id,
                      channel: c.task.channel,
                      status: c.task.status,
                      timestamp: Date.now()
                    }, c.task);
                    call.queue.reporting = "true";
                    call.task.form = c.task.form || null;
                    if (c.leaving_at && c.task.processing_sec) {
                      call.task.startProcessingAt = c.leaving_at;
                      call.task.setProcessing(c.leaving_at, {
                        sec: c.task.processing_sec || 0,
                        timeout: c.task.processing_timeout_at || null,
                        renewal_sec: c.task.processing_renewal_sec || 0
                      });
                    }
                  }
                  this.callStore.set(call.id, call);
                }
              }
              return [2, calls];
          }
        });
      });
    };
    Client2.prototype.subscribeChat = function(handler, data) {
      return __awaiter(this, void 0, void 0, function() {
        var res, _i, _a, conv, messages, c;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.request("subscribe_chat", data)];
            case 1:
              res = _b.sent();
              this.eventHandler.on(WEBSOCKET_EVENT_CHAT, handler);
              if (res && res.items) {
                for (_i = 0, _a = res.items; _i < _a.length; _i++) {
                  conv = _a[_i];
                  messages = conv.messages.reverse();
                  c = new Conversation(this, conv.id, conv.title, conv.members, messages, conv.variables);
                  c.createdAt = conv.created_at;
                  c.closedAt = conv.closed_at;
                  if (conv.task) {
                    c.task = new Task(
                      this,
                      {
                        attempt_id: conv.task.attempt_id,
                        channel: conv.task.channel,
                        status: conv.task.status,
                        timestamp: Date.now()
                      },
                      conv.task
                      // todo add app_id
                    );
                    if (conv.leaving_at && conv.task.processing_sec) {
                      c.task.startProcessingAt = conv.leaving_at;
                      c.task.setProcessing(conv.leaving_at, {
                        sec: conv.task.processing_sec || 0,
                        timeout: conv.task.processing_timeout_at || null,
                        renewal_sec: conv.task.processing_renewal_sec || 0
                      });
                    }
                    c.task.form = conv.task.form || null;
                  }
                  if (conv.invite_id) {
                    c.setInvite(conv.invite_id, conv.created_at);
                  } else if (conv.channel_id) {
                    c.setAnswered(conv.channel_id, conv.joined_at, {
                      id: conv.channel_id,
                      name: "TODO",
                      type: "webitel"
                    });
                  } else {
                    this.log.error("conversation " + conv.id + " not valid");
                    continue;
                  }
                  this.conversationStore.set(c.id, c);
                }
              }
              return [2, res];
          }
        });
      });
    };
    Client2.prototype.subscribeUsersStatus = function(handler, data) {
      return __awaiter(this, void 0, void 0, function() {
        var res;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request("subscribe_users_status", data)];
            case 1:
              res = _a.sent();
              this.eventHandler.on(WEBSOCKET_EVENT_USER_STATE, handler);
              return [2, res];
          }
        });
      });
    };
    Client2.prototype.subscribeAgentsStatus = function(handler, data) {
      return __awaiter(this, void 0, void 0, function() {
        var res;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request("cc_agent_subscribe_status", data)];
            case 1:
              res = _a.sent();
              this.eventHandler.on(WEBSOCKET_EVENT_AGENT_STATUS, handler);
              return [2, res];
          }
        });
      });
    };
    Client2.prototype.subscribeTask = function(handler) {
      this.eventHandler.on(TASK_EVENT, handler);
    };
    Client2.prototype.subscribeJob = function(handler) {
      this.eventHandler.on(JOB_EVENT, handler);
    };
    Client2.prototype.unSubscribe = function(action, handler, data) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("un_subscribe_" + action, data)];
        });
      });
    };
    Client2.prototype.destroy = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.disconnect()];
            case 1:
              _a.sent();
              if (!this.phone)
                return [3, 3];
              return [4, this.phone.unregister()];
            case 2:
              _a.sent();
              this.phone.off("*");
              delete this.phone;
              _a.label = 3;
            case 3:
              this.eventHandler.off("*");
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.allCall = function() {
      return Array.from(this.callStore.values());
    };
    Client2.prototype.allConversations = function() {
      return Array.from(this.conversationStore.values());
    };
    Client2.prototype.allTask = function() {
      if (!this.agent) {
        return [];
      }
      return Array.from(this.agent.task.values());
    };
    Client2.prototype.allJob = function() {
      return this.allTask().filter(isJobTask);
    };
    Client2.prototype.callById = function(id) {
      if (this.callStore.has(id)) {
        return this.callStore.get(id);
      }
    };
    Client2.prototype.conversationById = function(id) {
      if (this.conversationStore.has(id)) {
        return this.conversationStore.get(id);
      }
    };
    Client2.prototype.callBySipId = function(id) {
      for (var _i = 0, _a = this.allCall(); _i < _a.length; _i++) {
        var call = _a[_i];
        if (call.sipId && id.startsWith(call.sipId)) {
          return call;
        }
      }
    };
    Client2.prototype.reportingTask = function(attemptId, reporting) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("cc_reporting", __assign({ attempt_id: attemptId }, reporting))];
        });
      });
    };
    Client2.prototype.agentActiveTasks = function(agentId) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("cc_agent_tasks", {
            agent_id: agentId
          })];
        });
      });
    };
    Client2.prototype.auth = function() {
      return __awaiter(this, void 0, void 0, function() {
        var resp, err_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 4]);
              return [4, this.request(WEBSOCKET_AUTHENTICATION_CHALLENGE, {
                token: this._config.token
              })];
            case 1:
              resp = _a.sent();
              return [2, resp];
            case 2:
              err_1 = _a.sent();
              this.handleError(err_1);
              return [4, this.disconnect()];
            case 3:
              _a.sent();
              throw err_1;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.ping = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request(WEBSOCKET_PING, {
            ping: 1
          })];
        });
      });
    };
    Client2.prototype.sessionInfo = function() {
      return this.connectionInfo.session;
    };
    Object.defineProperty(Client2.prototype, "version", {
      get: function() {
        return this.connectionInfo.server_version;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Client2.prototype, "buildVersion", {
      get: function() {
        return version_default;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Client2.prototype, "instanceId", {
      get: function() {
        return this.connectionInfo.sock_id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Client2.prototype, "autoAnswerDelayTime", {
      get: function() {
        return this._config.autoAnswerDelayTime || 400;
      },
      enumerable: false,
      configurable: true
    });
    Client2.prototype.agentSession = function() {
      return __awaiter(this, void 0, void 0, function() {
        var info, taskList, _i, _a, t, task, _b, _c, call, _d, _e, conv;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (this.agent) {
                return [2, this.agent];
              }
              return [4, this.request(WEBSOCKET_AGENT_SESSION)];
            case 1:
              info = _f.sent();
              this.agent = new Agent(this, info);
              return [4, this.agentActiveTasks(this.agent.agentId)];
            case 2:
              taskList = _f.sent();
              for (_i = 0, _a = taskList.items; _i < _a.length; _i++) {
                t = _a[_i];
                task = new Task(this, {
                  status: t.status,
                  timestamp: Date.now(),
                  channel: t.channel,
                  attempt_id: t.attempt_id
                }, t);
                task.postProcessData = {};
                task.setState(t.state);
                if (t.bridged_at) {
                  task.bridgedAt = t.bridged_at;
                  task.answeredAt = t.bridged_at;
                }
                if (t.leaving_at) {
                  task.closedAt = t.leaving_at;
                }
                if (t.leaving_at && t.processing_sec) {
                  task.startProcessingAt = t.leaving_at;
                  task.setProcessing(t.leaving_at, {
                    sec: t.processing_sec || 0,
                    timeout: t.processing_timeout_at || null,
                    renewal_sec: t.processing_renewal_sec || 0
                  });
                }
                task.form = t.form || null;
                this.agent.task.set(task.id, task);
              }
              for (_b = 0, _c = this.allCall(); _b < _c.length; _b++) {
                call = _c[_b];
                if (call.task) {
                  this.agent.task.set(call.task.id, call.task);
                }
              }
              for (_d = 0, _e = this.allConversations(); _d < _e.length; _d++) {
                conv = _e[_d];
                if (conv.task) {
                  this.agent.task.set(conv.task.id, conv.task);
                }
              }
              return [2, this.agent];
          }
        });
      });
    };
    Client2.prototype.invite = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request(WEBSOCKET_MAKE_OUTBOUND_CALL, req)];
        });
      });
    };
    Client2.prototype.call = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        var e_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.phone)
                return [3, 5];
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.phone.call(req)];
            case 2:
              _a.sent();
              return [3, 4];
            case 3:
              e_1 = _a.sent();
              this.handleError(e_1);
              return [3, 4];
            case 4:
              return [3, 7];
            case 5:
              return [4, this.invite(req)];
            case 6:
              _a.sent();
              _a.label = 7;
            case 7:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.callRecordId = function(id) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("call_recordings", { id })];
        });
      });
    };
    Client2.prototype.eavesdrop = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("call_eavesdrop", req)];
        });
      });
    };
    Client2.prototype.agentSetOnline = function(agentId, channels, onDemand) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("cc_agent_online", {
            agent_id: agentId,
            channels,
            on_demand: onDemand
          })];
        });
      });
    };
    Client2.prototype.agentSetWaiting = function(agentId, channel) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("cc_agent_waiting", {
            agent_id: agentId,
            channel
          })];
        });
      });
    };
    Client2.prototype.agentSetPause = function(agentId, payload) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("cc_agent_pause", {
            agent_id: agentId,
            payload
          })];
        });
      });
    };
    Client2.prototype.agentSetOffline = function(agentId) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request("cc_agent_offline", { agent_id: agentId })];
        });
      });
    };
    Client2.prototype.inviteToUser = function(req) {
      return this.request(WEBSOCKET_MAKE_USER_CALL, req);
    };
    Client2.prototype.answer = function(id, req) {
      return __awaiter(this, void 0, void 0, function() {
        var call;
        return __generator(this, function(_a) {
          call = this.callById(id);
          if (call) {
            return [2, call.answer(req)];
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Client2.prototype.request = function(action, data) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        _this.queueRequest.set(++_this.reqSeq, { resolve, reject });
        _this.socket.send({
          seq: _this.reqSeq,
          action,
          data
        });
      });
    };
    Client2.prototype.useWebPhone = function() {
      return this._config.registerWebDevice || false;
    };
    Client2.prototype.callDestroyed = function(call) {
      return call.hangupAt > 0 && !this.hasAgentTask(call.task);
    };
    Client2.prototype.conversationDestroyed = function(conv) {
      return conv.closedAt > 0 && (!this.hasAgentTask(conv.task) || !conv.hasReporting) && (conv.hasReporting || !(conv.lastAction === ChatActions.Close && conv.answeredAt > 0));
    };
    Client2.prototype.reportingChannelTask = function(task) {
      switch (task.channel) {
        case ChannelName.Call:
          for (var _i = 0, _a = this.allCall(); _i < _a.length; _i++) {
            var call = _a[_i];
            if (this.callDestroyed(call)) {
              this.destroyCall(call);
              return;
            }
          }
          break;
        case ChannelName.Chat:
          if (task.agentChannelId) {
            var conv = this.conversationById(task.agentChannelId);
            if (conv && this.conversationDestroyed(conv)) {
              this.destroyConversation(conv);
              return;
            }
          }
          break;
        default:
      }
    };
    Client2.prototype.registerCallClient = function(phone) {
      return __awaiter(this, void 0, void 0, function() {
        var conf, e_2;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.phone = phone;
              this.subscribePhone(phone);
              _a.label = 1;
            case 1:
              _a.trys.push([1, 4, , 5]);
              return [4, this.deviceConfig(this.phone.type)];
            case 2:
              conf = _a.sent();
              return [4, this.phone.register(conf)];
            case 3:
              _a.sent();
              return [3, 5];
            case 4:
              e_2 = _a.sent();
              this.log.error(e_2);
              return [3, 5];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.subscribePhone = function(phone) {
      var _this = this;
      phone.on("peerStreams", function(session, streams) {
        var call = _this.callBySession(session);
        if (call && !call.peerStreams.length) {
          call.setPeerStreams(streams);
          _this.eventHandler.emit(WEBSOCKET_EVENT_CALL, CallActions.PeerStream, call);
        }
      });
      phone.on("localStreams", function(session, streams) {
        var call = _this.callBySession(session);
        if (call && !call.localStreams.length) {
          call.setLocalStreams(streams);
          _this.eventHandler.emit(WEBSOCKET_EVENT_CALL, CallActions.LocalStream, call);
        }
      });
      phone.on("newSession", this.onNewCallSession.bind(this));
      phone.on("registered", function() {
        return _this.emit("phone_registered", true);
      });
      phone.on("unregistered", function() {
        return _this.emit("phone_registered", false);
      });
    };
    Client2.prototype.phoneIsRegister = function() {
      if (this.phone && this.phone.isRegistered) {
        return this.phone.isRegistered();
      }
      return false;
    };
    Client2.prototype.deviceConfig = function(name) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, this.request(WEBSOCKET_DEFAULT_DEVICE_CONFIG, { name })];
        });
      });
    };
    Client2.prototype.storeFile = function(id, files, cb) {
      return __awaiter(this, void 0, void 0, function() {
        var formData, _i, files_1, file, result, data, _a, data_1, f;
        var _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              if (!files || files.length < 1) {
                throw new Error("no files");
              }
              formData = new FormData();
              for (_i = 0, files_1 = files; _i < files_1.length; _i++) {
                file = files_1[_i];
                formData.append(file.name, file);
              }
              return [4, import_axios43.default.post(this.basePath + "/api/storage/file/" + id + "/upload", formData, {
                headers: (_b = {}, _b[API_HEADER_TOKEN] = this._config.token, _b),
                onUploadProgress: cb
              })];
            case 1:
              result = _c.sent();
              data = result.data;
              for (_a = 0, data_1 = data; _a < data_1.length; _a++) {
                f = data_1[_a];
                f.shared = this.basePath + f.shared;
              }
              return [2, data];
          }
        });
      });
    };
    Client2.prototype.fileUrlDownload = function(fileId) {
      return this.basePath + "/api/storage/file/" + fileId + "/download?access_token=" + this._config.token;
    };
    Client2.prototype.fileUrlStream = function(fileId) {
      return this.basePath + "/api/storage/file/" + fileId + "/stream?access_token=" + this._config.token;
    };
    Client2.prototype.handleError = function(e) {
      if (e) {
        switch (e.name) {
          case HandleError.NotFoundError:
            this.emit("error", new DeviceNotFoundError(e.message));
            break;
          case HandleError.NotAllowedError:
            this.emit("error", new DeviceNotAllowPermissionError(e.message));
            break;
          default:
            this.emit("error", e);
        }
      }
    };
    Client2.prototype.destroyConversation = function(conv) {
      this.conversationStore.delete(conv.id);
      this.eventHandler.emit(WEBSOCKET_EVENT_CHAT, ChatActions.Destroy, conv);
    };
    Client2.prototype.onMessage = function(message) {
      return __awaiter(this, void 0, void 0, function() {
        var promise, err, _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              this.log.debug("receive message: ", message);
              if (!(message.seq_reply > 0))
                return [3, 1];
              if (this.queueRequest.has(message.seq_reply)) {
                promise = this.queueRequest.get(message.seq_reply);
                this.queueRequest.delete(message.seq_reply);
                if (message.status === Response.STATUS_OK) {
                  promise.resolve(message.data);
                } else {
                  err = message.error;
                  if (err && err.id === TypeErrors.RolePermission) {
                    promise.reject(new RolePermissionError(err.detail));
                  } else if (err && err.id === TypeErrors.LicencePermission) {
                    promise.reject(new LicencePermissionError(err.detail));
                  } else {
                    promise.reject(message.error);
                  }
                }
              }
              return [3, 15];
            case 1:
              _a = message.event;
              switch (_a) {
                case WEBSOCKET_EVENT_HELLO:
                  return [3, 2];
                case WEBSOCKET_EVENT_CALL:
                  return [3, 4];
                case WEBSOCKET_EVENT_CHAT:
                  return [3, 6];
                case WEBSOCKET_EVENT_USER_STATE:
                  return [3, 8];
                case WEBSOCKET_EVENT_SIP:
                  return [3, 9];
                case WEBSOCKET_EVENT_AGENT_STATUS:
                  return [3, 10];
                case WEBSOCKET_EVENT_CHANNEL_STATUS:
                  return [3, 11];
                case WEBSOCKET_EVENT_ERROR:
                  return [3, 12];
                case WEBSOCKET_EVENT_NOTIFICATION:
                  return [3, 13];
              }
              return [3, 14];
            case 2:
              return [4, this.connected(message.data)];
            case 3:
              _b.sent();
              this.log.debug("opened session " + this.connectionInfo.sock_id + " for userId=" + this.connectionInfo.session.user_id);
              return [3, 15];
            case 4:
              return [4, this.handleCallEvents(message.data.call)];
            case 5:
              _b.sent();
              return [3, 15];
            case 6:
              return [4, this.handleChatEvents(message.data)];
            case 7:
              _b.sent();
              return [3, 15];
            case 8:
              this.handleUserStateEvent(message.data.state);
              return [3, 15];
            case 9:
              this.eventHandler.emit(WEBSOCKET_EVENT_SIP, message.data);
              return [3, 15];
            case 10:
              this.handleAgentStatus(message.data);
              return [3, 15];
            case 11:
              this.handleChannelEvents(message.data);
              return [3, 15];
            case 12:
              this.lastError = message.data.error;
              return [3, 15];
            case 13:
              this.handleNotification(message.data.notification);
              return [3, 15];
            case 14:
              this.log.error("event " + message.event + " not handler");
              _b.label = 15;
            case 15:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.handleNotification = function(e) {
      switch (e.action) {
        case NotificationActions.HideMember:
          if (this.agent && this.agent._listOfflineMembers) {
            var list = this.agent._listOfflineMembers;
            if (list.items) {
              for (var i = 0; i < list.items.length; i++) {
                if (list.items[i].id === e.body.member_id) {
                  list.items.splice(i, 1);
                  break;
                }
              }
            }
          }
          break;
        case NotificationActions.WaitingList:
          if (this.agent) {
            this.agent.setWaitingList(e.body);
          }
          break;
        case NotificationActions.HideAttempt:
          if (this.agent) {
            this.agent.deleteWaitingAttempt(e.body);
          }
          break;
        default:
          this.log.error('notification "' + e.action + '" not handled');
      }
    };
    Client2.prototype.handleAgentStatus = function(e) {
      if (this.agent && e.agent_id === this.agent.agentId) {
        this.agent.setStatus(e);
      }
      this.eventHandler.emit(WEBSOCKET_EVENT_AGENT_STATUS, e, this.agent);
    };
    Client2.prototype.handleChannelEvents = function(e) {
      if (this.agent) {
        e.timestamp = Date.now();
        var task = this.agent.onChannelEvent(e) || void 0;
        this.eventHandler.emit(TASK_EVENT, e.status, task);
        if (task && isJobTask(task)) {
          this.eventHandler.emit(JOB_EVENT, task.state, task);
          if (isDestroyJob(task.state)) {
            this.eventHandler.emit(JOB_EVENT, JobState.Destroy, task);
          }
        }
      }
    };
    Client2.prototype.pingServer = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(this.pingTimer && this.connectionInfo.ping_interval))
                return [3, 2];
              t = setTimeout(function() {
                return __awaiter(_this, void 0, void 0, function() {
                  return __generator(this, function(_a2) {
                    this.log.error("close socket without pong");
                    this.socket.close(3005);
                    return [
                      2
                      /*return*/
                    ];
                  });
                });
              }, 2e3);
              return [4, this.ping()];
            case 1:
              _a.sent();
              clearTimeout(t);
              _a.label = 2;
            case 2:
              if (this.connectionInfo.ping_interval) {
                this.pingTimer = setTimeout(this.pingServer.bind(this), +this.connectionInfo.ping_interval);
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.connected = function(info) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.connectionInfo = info;
              if (!info.ping_interval)
                return [3, 2];
              return [4, this.pingServer()];
            case 1:
              _a.sent();
              _a.label = 2;
            case 2:
              if (!this.useWebPhone()) {
                return [
                  2
                  /*return*/
                ];
              }
              return [2, this.registerCallClient(new SipPhone(this.instanceId, this._config.debug))];
          }
        });
      });
    };
    Client2.prototype.callBySession = function(session) {
      for (var _i = 0, _a = this.allCall(); _i < _a.length; _i++) {
        var call = _a[_i];
        if (call.sip && call.sip.id === session.id) {
          return call;
        }
      }
    };
    Client2.prototype.onNewCallSession = function(session) {
      return __awaiter(this, void 0, void 0, function() {
        var call;
        return __generator(this, function(_a) {
          if (session.callId) {
            call = this.callById(session.callId);
          } else {
            call = this.callBySipId(session.id);
          }
          if (call) {
            call.setSip(session);
            this.checkAutoAnswer(call);
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Client2.prototype.checkAutoAnswer = function(call) {
      if (
        /*!document.hidden && */
        call.autoAnswer
      ) {
        call.answerDelay({
          video: call.params.video,
          screen: call.params.screen,
          disableStun: call.params.disableStun
        });
      }
    };
    Client2.prototype.connectToSocket = function() {
      var _this = this;
      return new Promise(function(resolve, reject) {
        try {
          _this.socket = new Socket(_this._config.endpoint);
          _this.socket.connect(_this._config.token);
        } catch (e) {
          reject(e);
          return;
        }
        _this.socket.on("message", _this.onMessage.bind(_this));
        _this.socket.on("close", function(code) {
          if (_this.pingTimer) {
            clearTimeout(_this.pingTimer);
          }
          _this.log.error("socket close code: ", code);
          if (code !== 1e3) {
            _this.emit("disconnected", code, _this.lastError);
            reject(new Error("close socket code: " + code));
          }
          _this.eventHandler.off("*");
        });
        _this.socket.on("open", function() {
          resolve(null);
          _this.emit("connected");
        });
      });
    };
    Client2.prototype.handleUserStateEvent = function(event) {
      this.eventHandler.emit(WEBSOCKET_EVENT_USER_STATE, event);
    };
    Client2.prototype.handleCallEvents = function(event) {
      return __awaiter(this, void 0, void 0, function() {
        var call;
        return __generator(this, function(_a) {
          event.timestamp = Date.now();
          switch (event.event) {
            case CallActions.Ringing:
              call = new Call(this, event);
              this.callStore.set(call.id, call);
              this.checkAutoAnswer(call);
              break;
            case CallActions.Active:
              call = this.callById(event.id);
              if (call) {
                call.setActive(event);
              }
              break;
            case CallActions.Bridge:
              call = this.callById(event.id);
              if (call) {
                call.setBridged(event);
              }
              break;
            case CallActions.Execute:
              call = this.callById(event.id);
              if (call) {
                call.setExecute(event.data);
              }
              break;
            case CallActions.DTMF:
              call = this.callById(event.id);
              if (call) {
                call.addDigit(event.data);
              }
              break;
            case CallActions.Eavesdrop:
              call = this.callById(event.id);
              if (call) {
                call.setEavesdropState(event.data);
              }
              break;
            case CallActions.Voice:
              call = this.callById(event.id);
              if (call) {
                call.setVoice();
              }
              break;
            case CallActions.Silence:
              call = this.callById(event.id);
              if (call) {
                call.setSilence();
              }
              break;
            case CallActions.Hold:
              call = this.callById(event.id);
              if (call) {
                call.setHold(event);
              }
              break;
            case CallActions.Hangup:
              call = this.callById(event.id);
              if (call) {
                call.setHangup(event);
              }
              break;
            default:
              throw new Error("Unhandled action");
          }
          if (call) {
            this.eventHandler.emit(WEBSOCKET_EVENT_CALL, event.event, call);
            if (this.callDestroyed(call)) {
              this.destroyCall(call);
            }
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Client2.prototype.handleChatEvents = function(event) {
      return __awaiter(this, void 0, void 0, function() {
        var conversation, timestamp, inv, deleted, _i, _a, v, joined, message, _b, _c, v, c, _d, _e, v, l, e;
        return __generator(this, function(_f) {
          timestamp = Date.now();
          switch (event.action) {
            case ChatActions.UserInvite:
              inv = event.data;
              conversation = new Conversation(this, inv.conversation_id, inv.title, inv.members, inv.messages, inv.variables);
              conversation.setInvite(inv.invite_id, timestamp);
              this.conversationStore.set(conversation.id, conversation);
              break;
            case ChatActions.MessageDeleted:
              deleted = event.data;
              for (_i = 0, _a = this.allConversations(); _i < _a.length; _i++) {
                v = _a[_i];
                if (!v.closedAt && v.membersId.indexOf(deleted.channel_id) > -1) {
                  conversation = v;
                  break;
                }
              }
              if (conversation) {
                conversation.setDeletedMessage(deleted);
              }
              return [
                2
                /*return*/
              ];
            case ChatActions.Joined:
              joined = event.data;
              conversation = this.conversationById(joined.member.id);
              if (conversation) {
                conversation.setAnswered(joined.member.id, timestamp, joined.member);
              }
              break;
            case ChatActions.Message:
              message = event.data;
              message.timestamp = timestamp;
              for (_b = 0, _c = this.allConversations(); _b < _c.length; _b++) {
                v = _c[_b];
                if (!v.closedAt && v.membersId.indexOf(message.channel_id) > -1) {
                  conversation = v;
                }
              }
              if (conversation) {
                conversation.newMessage(message);
              }
              break;
            case ChatActions.Close:
              c = event.data;
              for (_d = 0, _e = this.allConversations(); _d < _e.length; _d++) {
                v = _e[_d];
                if (!v.closedAt && v.membersId.indexOf(c.from_channel_id) > -1) {
                  conversation = v;
                }
              }
              if (conversation) {
                conversation.setClosed(timestamp);
              }
              break;
            case ChatActions.Leave:
              l = event.data;
              conversation = this.conversationById(l.leaved_channel_id);
              if (conversation) {
                conversation.setLeave(l);
              }
              break;
            case ChatActions.Decline:
              e = event.data;
              conversation = this.conversationById(e.invite_id);
              if (conversation) {
                conversation.setDecline(e);
              }
              break;
            default:
          }
          if (conversation) {
            conversation.lastAction = event.action;
            this.eventHandler.emit(WEBSOCKET_EVENT_CHAT, event.action, conversation);
            if (this.conversationDestroyed(conversation)) {
              this.destroyConversation(conversation);
            }
          }
          return [
            2
            /*return*/
          ];
        });
      });
    };
    Client2.prototype.hasAgentTask = function(task) {
      if (!this.agent || !task) {
        return false;
      }
      return this.agent.hasTask(task);
    };
    Client2.prototype.destroyCall = function(call) {
      this.callStore.delete(call.id);
      this.eventHandler.emit(WEBSOCKET_EVENT_CALL, CallActions.Destroy, call);
    };
    return Client2;
  }(import_ee_ts3.EventEmitter)
);
function isJobTask(task) {
  return task.channel === ChannelName.Task;
}
function isDestroyJob(state) {
  return [
    ChannelState.Missed.toString(),
    ChannelState.Waiting,
    ChannelState.WrapTime,
    JobState.Closed
  ].indexOf(state) > -1;
}

// node_modules/webitel-sdk/esm5/sip/index.js
var import_ee_ts4 = __toESM(require_ee());
var SipClient = (
  /** @class */
  function(_super) {
    __extends(SipClient2, _super);
    function SipClient2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return SipClient2;
  }(import_ee_ts4.EventEmitter)
);

// node_modules/webitel-sdk/esm5/sip/external/index.js
var import_ee = __toESM(require_ee());

// node_modules/webitel-sdk/esm5/sip/external/session.js
var Session2 = (
  /** @class */
  function() {
    function Session3(client, id) {
      this.client = client;
      this.callId = id;
      this.incoming = false;
      this.instanceId = "fixme";
    }
    Object.defineProperty(Session3.prototype, "id", {
      get: function() {
        return this.callId;
      },
      enumerable: false,
      configurable: true
    });
    Session3.prototype.getLocalMedia = function() {
      return [];
    };
    Session3.prototype.getPeerMedia = function() {
      return [];
    };
    Session3.prototype.answer = function(s) {
      var _this = this;
      return new Promise(function(resolve) {
        _this.client.answer(_this.id);
        resolve();
      });
    };
    return Session3;
  }()
);
var session_default = Session2;

// node_modules/webitel-sdk/esm5/sip/external/index.js
var ExternalClient = (
  /** @class */
  function(_super) {
    __extends(ExternalClient2, _super);
    function ExternalClient2(config) {
      var _this = _super.call(this) || this;
      _this.config = config;
      _this.type = "external";
      _this.schema = "wtel://";
      return _this;
    }
    ExternalClient2.prototype.callOption = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, req];
        });
      });
    };
    ExternalClient2.prototype.register = function(sipConf) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [
            2
            /*return*/
          ];
        });
      });
    };
    ExternalClient2.prototype.unregister = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [
            2
            /*return*/
          ];
        });
      });
    };
    ExternalClient2.prototype.call = function(req) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          if (!req.destination) {
            return [
              2
              /*return*/
            ];
          }
          this.exec(req.destination);
          return [
            2
            /*return*/
          ];
        });
      });
    };
    ExternalClient2.prototype.answer = function(id) {
      this.exec(id, "answer");
    };
    ExternalClient2.prototype.isRegistered = function() {
      return false;
    };
    ExternalClient2.prototype.sipSessionByCallId = function(id) {
      return new session_default(this, id);
    };
    ExternalClient2.prototype.sipSessionBySipId = function(id) {
      return null;
    };
    ExternalClient2.prototype.open = function(token) {
      this.exec(encodeURIComponent(JSON.stringify(__assign({ token }, this.config))), "open");
    };
    ExternalClient2.prototype.exec = function(args, action) {
      var url = "" + this.schema + args;
      if (action) {
        url += " " + action;
      }
      var link = document.createElement("a");
      link.download = "File name";
      link.href = url;
      link.click();
      return;
    };
    return ExternalClient2;
  }(import_ee.EventEmitter)
);
export {
  Agent,
  AgentPauseCauseServiceApi,
  AgentPauseCauseServiceApiAxiosParamCreator,
  AgentPauseCauseServiceApiFactory,
  AgentPauseCauseServiceApiFp,
  AgentServiceApi,
  AgentServiceApiAxiosParamCreator,
  AgentServiceApiFactory,
  AgentServiceApiFp,
  AgentSkillServiceApi,
  AgentSkillServiceApiAxiosParamCreator,
  AgentSkillServiceApiFactory,
  AgentSkillServiceApiFp,
  AgentStatus,
  AgentTeamServiceApi,
  AgentTeamServiceApiAxiosParamCreator,
  AgentTeamServiceApiFactory,
  AgentTeamServiceApiFp,
  AuditFormServiceApi,
  AuditFormServiceApiAxiosParamCreator,
  AuditFormServiceApiFactory,
  AuditFormServiceApiFp,
  BackendProfileServiceApi,
  BackendProfileServiceApiAxiosParamCreator,
  BackendProfileServiceApiFactory,
  BackendProfileServiceApiFp,
  BucketServiceApi,
  BucketServiceApiAxiosParamCreator,
  BucketServiceApiFactory,
  BucketServiceApiFp,
  CalendarServiceApi,
  CalendarServiceApiAxiosParamCreator,
  CalendarServiceApiFactory,
  CalendarServiceApiFp,
  Call,
  CallActions,
  CallDirection,
  CallReportingStatus,
  CallServiceApi,
  CallServiceApiAxiosParamCreator,
  CallServiceApiFactory,
  CallServiceApiFp,
  ChannelState,
  ChannelType,
  ChatActions,
  ChatHelperServiceApi,
  ChatHelperServiceApiAxiosParamCreator,
  ChatHelperServiceApiFactory,
  ChatHelperServiceApiFp,
  Client,
  CognitiveProfileServiceApi,
  CognitiveProfileServiceApiAxiosParamCreator,
  CognitiveProfileServiceApiFactory,
  CognitiveProfileServiceApiFp,
  CommunicationTypeServiceApi,
  CommunicationTypeServiceApiAxiosParamCreator,
  CommunicationTypeServiceApiFactory,
  CommunicationTypeServiceApiFp,
  ConfigServiceApi,
  ConfigServiceApiAxiosParamCreator,
  ConfigServiceApiFactory,
  ConfigServiceApiFp,
  Configuration,
  ContactsApi,
  ContactsApiAxiosParamCreator,
  ContactsApiFactory,
  ContactsApiFp,
  Conversation,
  ConversationState,
  DeclineCause,
  DeviceNotAllowPermissionError,
  DeviceNotFoundError,
  EavesdropState,
  EavesdropType,
  EmailProfileServiceApi,
  EmailProfileServiceApiAxiosParamCreator,
  EmailProfileServiceApiFactory,
  EmailProfileServiceApiFp,
  EmailsApi,
  EmailsApiAxiosParamCreator,
  EmailsApiFactory,
  EmailsApiFp,
  EngineAuditQuestionType,
  EngineBoolFilter,
  EngineCommunicationChannels,
  EnginePresetQuerySection,
  EngineRoutingSchemaType,
  EngineTriggerJobState,
  EngineTriggerType,
  ExternalClient,
  FileServiceApi,
  FileServiceApiAxiosParamCreator,
  FileServiceApiFactory,
  FileServiceApiFp,
  FileTranscriptServiceApi,
  FileTranscriptServiceApiAxiosParamCreator,
  FileTranscriptServiceApiFactory,
  FileTranscriptServiceApiFp,
  GoogleProtobufNullValue,
  HistoryFileJobHistoryFileJobAction,
  HistoryFileJobHistoryFileJobState,
  ImportTemplateServiceApi,
  ImportTemplateServiceApiAxiosParamCreator,
  ImportTemplateServiceApiFactory,
  ImportTemplateServiceApiFp,
  JobState,
  LabelsApi,
  LabelsApiAxiosParamCreator,
  LabelsApiFactory,
  LabelsApiFp,
  LicencePermissionError,
  ListServiceApi,
  ListServiceApiAxiosParamCreator,
  ListServiceApiFactory,
  ListServiceApiFp,
  Log,
  LoggerACTION,
  LoggerServiceApi,
  LoggerServiceApiAxiosParamCreator,
  LoggerServiceApiFactory,
  LoggerServiceApiFp,
  MediaFileServiceApi,
  MediaFileServiceApiAxiosParamCreator,
  MediaFileServiceApiFactory,
  MediaFileServiceApiFp,
  MemberServiceApi,
  MemberServiceApiAxiosParamCreator,
  MemberServiceApiFactory,
  MemberServiceApiFp,
  OutboundResourceGroupServiceApi,
  OutboundResourceGroupServiceApiAxiosParamCreator,
  OutboundResourceGroupServiceApiFactory,
  OutboundResourceGroupServiceApiFp,
  OutboundResourceServiceApi,
  OutboundResourceServiceApiAxiosParamCreator,
  OutboundResourceServiceApiFactory,
  OutboundResourceServiceApiFp,
  PauseNotAllowedError,
  PresetQueryServiceApi,
  PresetQueryServiceApiAxiosParamCreator,
  PresetQueryServiceApiFactory,
  PresetQueryServiceApiFp,
  ProtobufNullValue,
  QueueBucketServiceApi,
  QueueBucketServiceApiAxiosParamCreator,
  QueueBucketServiceApiFactory,
  QueueBucketServiceApiFp,
  QueueHookServiceApi,
  QueueHookServiceApiAxiosParamCreator,
  QueueHookServiceApiFactory,
  QueueHookServiceApiFp,
  QueueResourcesServiceApi,
  QueueResourcesServiceApiAxiosParamCreator,
  QueueResourcesServiceApiFactory,
  QueueResourcesServiceApiFp,
  QueueServiceApi,
  QueueServiceApiAxiosParamCreator,
  QueueServiceApiFactory,
  QueueServiceApiFp,
  QueueSkillServiceApi,
  QueueSkillServiceApiAxiosParamCreator,
  QueueSkillServiceApiFactory,
  QueueSkillServiceApiFp,
  RegionServiceApi,
  RegionServiceApiAxiosParamCreator,
  RegionServiceApiFactory,
  RegionServiceApiFp,
  Response,
  RolePermissionError,
  RoutingChatPlanServiceApi,
  RoutingChatPlanServiceApiAxiosParamCreator,
  RoutingChatPlanServiceApiFactory,
  RoutingChatPlanServiceApiFp,
  RoutingOutboundCallServiceApi,
  RoutingOutboundCallServiceApiAxiosParamCreator,
  RoutingOutboundCallServiceApiFactory,
  RoutingOutboundCallServiceApiFp,
  RoutingSchemaServiceApi,
  RoutingSchemaServiceApiAxiosParamCreator,
  RoutingSchemaServiceApiFactory,
  RoutingSchemaServiceApiFp,
  RoutingVariableServiceApi,
  RoutingVariableServiceApiAxiosParamCreator,
  RoutingVariableServiceApiFactory,
  RoutingVariableServiceApiFp,
  SipClient,
  SipPhone,
  SkillServiceApi,
  SkillServiceApiAxiosParamCreator,
  SkillServiceApiFactory,
  SkillServiceApiFp,
  StorageImportSourceType,
  StorageProviderType,
  StorageServiceType,
  StorageUploadStatusCode,
  TriggerServiceApi,
  TriggerServiceApiAxiosParamCreator,
  TriggerServiceApiFactory,
  TriggerServiceApiFp,
  TypeErrors,
  UserHelperServiceApi,
  UserHelperServiceApiAxiosParamCreator,
  UserHelperServiceApiFactory,
  UserHelperServiceApiFp,
  VariablesApi,
  VariablesApiAxiosParamCreator,
  VariablesApiFactory,
  VariablesApiFp,
  WebitelContactsAccessMode
};
/*! Bundled license information:

punycode/punycode.js:
  (*! https://mths.be/punycode v1.4.1 by @mathias *)
*/
//# sourceMappingURL=webitel-sdk.js.map
